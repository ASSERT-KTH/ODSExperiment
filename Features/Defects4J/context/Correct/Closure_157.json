{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "ret.getType() == com.google.javascript.rhino.Token.STRING",
            "dst_parent": "if (ret.getType() == com.google.javascript.rhino.Token.STRING) {\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "UPD",
            "src": "n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral",
            "src_parent": "if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) {\n    ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)));\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n} else {\n    ret = transform(n);\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {\n    com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode);\n    com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));\n    if (jsDocInfo != null) {\n        irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, literalNode);\n    return irNode;\n}",
            "src_parent": "public class IRFactory {\n    private final java.lang.String sourceString;\n\n    private final java.lang.String sourceName;\n\n    private final com.google.javascript.jscomp.parsing.Config config;\n\n    private final com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter;\n\n    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;\n\n    private final java.util.Set<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.Sets.newHashSet(\"use strict\");\n\n    private static final java.util.Set<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of(\"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");\n\n    private static final java.util.Set<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of(\"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\");\n\n    private final java.util.Set<java.lang.String> reservedKeywords;\n\n    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);\n\n    Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();\n\n    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;\n\n    private com.google.javascript.rhino.Node templateNode;\n\n    private IRFactory(java.lang.String sourceString, java.lang.String sourceName, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter) {\n        this.sourceString = sourceString;\n        this.sourceName = sourceName;\n        this.config = config;\n        this.errorReporter = errorReporter;\n        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();\n        this.templateNode = createTemplateNode();\n        switch (config.languageMode) {\n            case ECMASCRIPT3 :\n                reservedKeywords = null;\n                break;\n            case ECMASCRIPT5 :\n                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;\n                break;\n            case ECMASCRIPT5_STRICT :\n                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;\n                break;\n            default :\n                throw new java.lang.IllegalStateException(\"unknown language mode\");\n        }\n    }\n\n    private com.google.javascript.rhino.Node createTemplateNode() {\n        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);\n        templateNode.putProp(Node.SOURCENAME_PROP, sourceName);\n        return templateNode;\n    }\n\n    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot node, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter) {\n        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, node.getSourceName(), config, errorReporter);\n        com.google.javascript.rhino.Node irNode = irFactory.transform(node);\n        if (node.getComments() != null) {\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment : node.getComments()) {\n                if ((comment.getCommentType() == CommentType.JSDOC) && (!comment.isParsed())) {\n                    irFactory.handlePossibleFileOverviewJsDoc(comment);\n                }\n            }\n        }\n        irFactory.setFileOverviewJsDoc(irNode);\n        return irNode;\n    }\n\n    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {\n        irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());\n        if (fileOverviewInfo != null) {\n            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {\n                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n            }\n            irNode.setJSDocInfo(fileOverviewInfo);\n        }\n    }\n\n    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        com.google.javascript.rhino.Node irNode = transform(node);\n        if (irNode.getType() != com.google.javascript.rhino.Token.BLOCK) {\n            if (irNode.getType() == com.google.javascript.rhino.Token.EMPTY) {\n                irNode.setType(Token.BLOCK);\n                irNode.setWasEmptyNode(true);\n            } else {\n                com.google.javascript.rhino.Node newBlock = newNode(Token.BLOCK, irNode);\n                newBlock.setLineno(irNode.getLineno());\n                newBlock.setCharno(irNode.getCharno());\n                irNode = newBlock;\n            }\n        }\n        return irNode;\n    }\n\n    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {\n        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {\n            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();\n            return true;\n        }\n        return false;\n    }\n\n    private void handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment) {\n        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);\n        comment.setParsed(true);\n        handlePossibleFileOverviewJsDoc(jsDocParser);\n    }\n\n    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment = node.getJsDocNode();\n        if (comment != null) {\n            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);\n            comment.setParsed(true);\n            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n                return jsDocParser.retrieveAndResetParsedJSDocInfo();\n            }\n        }\n        return null;\n    }\n\n    private com.google.javascript.rhino.Node transform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node);\n        com.google.javascript.rhino.Node irNode = justTransform(node);\n        if (jsDocInfo != null) {\n            irNode.setJSDocInfo(jsDocInfo);\n        }\n        setSourceInfo(irNode, node);\n        return irNode;\n    }\n\n    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.jscomp.mozilla.rhino.ast.Name node) {\n        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node);\n        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);\n        if (jsDocInfo != null) {\n            irNode.setJSDocInfo(jsDocInfo);\n        }\n        setSourceInfo(irNode, node);\n        return irNode;\n    }\n\n    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {\n        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode);\n        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));\n        if (jsDocInfo != null) {\n            irNode.setJSDocInfo(jsDocInfo);\n        }\n        setSourceInfo(irNode, literalNode);\n        return irNode;\n    }\n\n    private static java.lang.String getStringValue(double value) {\n        long longValue = ((long) (value));\n        if (longValue == value) {\n            return java.lang.Long.toString(longValue);\n        } else {\n            return java.lang.Double.toString(value);\n        }\n    }\n\n    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        if ((irNode.getType() == com.google.javascript.rhino.Token.FUNCTION) && (irNode.getFirstChild().getLineno() != (-1))) {\n            irNode.setLineno(irNode.getFirstChild().getLineno());\n            irNode.setCharno(irNode.getFirstChild().getCharno());\n        } else if (irNode.getLineno() == (-1)) {\n            int lineno = node.getLineno();\n            irNode.setLineno(lineno);\n            int charno = position2charno(node.getAbsolutePosition());\n            irNode.setCharno(charno);\n        }\n    }\n\n    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.jscomp.mozilla.rhino.ast.Comment node) {\n        java.lang.String comment = node.getValue();\n        int lineno = node.getLineno();\n        int position = node.getAbsolutePosition();\n        int numOpeningChars = 3;\n        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceName, config, errorReporter);\n        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n        jsdocParser.parse();\n        return jsdocParser;\n    }\n\n    private int position2charno(int position) {\n        int lineIndex = sourceString.lastIndexOf('\\n', position);\n        if (lineIndex == (-1)) {\n            return position;\n        } else {\n            return (position - lineIndex) - 1;\n        }\n    }\n\n    private com.google.javascript.rhino.Node justTransform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        return transformDispatcher.process(node);\n    }\n\n    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {\n        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node n) {\n            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));\n            for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {\n                node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));\n            }\n            return node;\n        }\n\n        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode n) {\n            com.google.javascript.rhino.Node ret;\n            if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.Name) {\n                ret = transformNameAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.Name) (n)));\n            } else if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) {\n                ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)));\n                ret.putBooleanProp(Node.QUOTED_PROP, true);\n            } else {\n                ret = transform(n);\n                ret.putBooleanProp(Node.QUOTED_PROP, true);\n            }\n            com.google.common.base.Preconditions.checkState(ret.getType() == com.google.javascript.rhino.Token.STRING);\n            return ret;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral literalNode) {\n            if (literalNode.isDestructuring()) {\n                reportDestructuringAssign(literalNode);\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.ARRAYLIT);\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : literalNode.getElements()) {\n                com.google.javascript.rhino.Node c = transform(child);\n                node.addChildToBack(c);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processAssignment(com.google.javascript.jscomp.mozilla.rhino.ast.Assignment assignmentNode) {\n            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);\n            com.google.javascript.rhino.Node target = assign.getFirstChild();\n            if (!validAssignmentTarget(target)) {\n                errorReporter.error(\"invalid assignment target\", sourceName, target.getLineno(), \"\", 0);\n            }\n            return assign;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot rootNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.SCRIPT);\n            for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {\n                node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));\n            }\n            parseDirectives(node);\n            return node;\n        }\n\n        private void parseDirectives(com.google.javascript.rhino.Node node) {\n            java.util.Set<java.lang.String> directives = null;\n            while (isDirective(node.getFirstChild())) {\n                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();\n                if (directives == null) {\n                    directives = com.google.common.collect.Sets.newHashSet(directive);\n                } else {\n                    directives.add(directive);\n                }\n            } \n            if (directives != null) {\n                node.setDirectives(directives);\n            }\n        }\n\n        private boolean isDirective(com.google.javascript.rhino.Node n) {\n            if (n == null) {\n                return false;\n            }\n            int nType = n.getType();\n            return (((nType == com.google.javascript.rhino.Token.EXPR_RESULT) || (nType == com.google.javascript.rhino.Token.EXPR_VOID)) && (n.getFirstChild().getType() == com.google.javascript.rhino.Token.STRING)) && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block blockNode) {\n            return processGeneric(blockNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.BREAK);\n            if (statementNode.getBreakLabel() != null) {\n                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());\n                labelName.setType(Token.LABEL_NAME);\n                node.addChildToBack(labelName);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause clauseNode) {\n            com.google.javascript.jscomp.mozilla.rhino.ast.AstNode catchVar = clauseNode.getVarName();\n            com.google.javascript.rhino.Node node = newNode(Token.CATCH, transform(catchVar));\n            if (clauseNode.getCatchCondition() != null) {\n                errorReporter.error(\"Catch clauses are not supported\", sourceName, clauseNode.getCatchCondition().getLineno(), \"\", 0);\n            }\n            node.addChildToBack(transformBlock(clauseNode.getBody()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression exprNode) {\n            return newNode(Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.CONTINUE);\n            if (statementNode.getLabel() != null) {\n                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());\n                labelName.setType(Token.LABEL_NAME);\n                node.addChildToBack(labelName);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop loopNode) {\n            return newNode(Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processElementGet(com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet getNode) {\n            return newNode(Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression exprNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.EMPTY);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));\n            node.addChildToBack(transform(statementNode.getExpression()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop loopNode) {\n            return newNode(Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processForLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop loopNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));\n            node.addChildToBack(transformBlock(loopNode.getBody()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall callNode) {\n            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : callNode.getArguments()) {\n                node.addChildToBack(transform(child));\n            }\n            int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n            node.setLineno(callNode.getLineno());\n            node.setCharno(position2charno(leftParamPos));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode functionNode) {\n            com.google.javascript.jscomp.mozilla.rhino.ast.Name name = functionNode.getFunctionName();\n            java.lang.Boolean isUnnamedFunction = false;\n            if (name == null) {\n                int functionType = functionNode.getFunctionType();\n                if (functionType != com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode.FUNCTION_EXPRESSION) {\n                    errorReporter.error(\"unnamed function statement\", sourceName, functionNode.getLineno(), \"\", 0);\n                }\n                name = new com.google.javascript.jscomp.mozilla.rhino.ast.Name();\n                name.setIdentifier(\"\");\n                isUnnamedFunction = true;\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.FUNCTION);\n            com.google.javascript.rhino.Node newName = transform(name);\n            if (isUnnamedFunction) {\n                newName.setLineno(functionNode.getLineno());\n                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n                newName.setCharno(position2charno(lpColumn));\n            }\n            node.addChildToBack(newName);\n            com.google.javascript.rhino.Node lp = newNode(Token.LP);\n            com.google.javascript.jscomp.mozilla.rhino.ast.Name fnName = functionNode.getFunctionName();\n            if (fnName != null) {\n                lp.setLineno(fnName.getLineno());\n            } else {\n                lp.setLineno(functionNode.getLineno());\n            }\n            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n            lp.setCharno(position2charno(lparenCharno));\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode param : functionNode.getParams()) {\n                lp.addChildToBack(transform(param));\n            }\n            node.addChildToBack(lp);\n            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());\n            parseDirectives(bodyNode);\n            node.addChildToBack(bodyNode);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.IF);\n            node.addChildToBack(transform(statementNode.getCondition()));\n            node.addChildToBack(transformBlock(statementNode.getThenPart()));\n            if (statementNode.getElsePart() != null) {\n                node.addChildToBack(transformBlock(statementNode.getElsePart()));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression exprNode) {\n            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));\n            n.setLineno(exprNode.getLineno());\n            n.setCharno(position2charno(exprNode.getAbsolutePosition() + exprNode.getOperatorPosition()));\n            return n;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral literalNode) {\n            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processLabel(com.google.javascript.jscomp.mozilla.rhino.ast.Label labelNode) {\n            return newStringNode(Token.LABEL_NAME, labelNode.getName());\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.LABEL);\n            com.google.javascript.rhino.Node prev = null;\n            com.google.javascript.rhino.Node cur = node;\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.Label label : statementNode.getLabels()) {\n                if (prev != null) {\n                    prev.addChildToBack(cur);\n                }\n                cur.addChildToBack(transform(label));\n                cur.setLineno(label.getLineno());\n                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());\n                cur.setCharno(clauseAbsolutePosition);\n                prev = cur;\n                cur = newNode(Token.LABEL);\n            }\n            prev.addChildToBack(transform(statementNode.getStatement()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name nameNode) {\n            return processName(nameNode, false);\n        }\n\n        com.google.javascript.rhino.Node processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name nameNode, boolean asString) {\n            if (asString) {\n                return newStringNode(Token.STRING, nameNode.getIdentifier());\n            } else {\n                if (isReservedKeyword(nameNode.getIdentifier())) {\n                    errorReporter.error(\"identifier is a reserved word\", sourceName, nameNode.getLineno(), \"\", 0);\n                }\n                return newStringNode(Token.NAME, nameNode.getIdentifier());\n            }\n        }\n\n        private boolean isReservedKeyword(java.lang.String identifier) {\n            return (reservedKeywords != null) && reservedKeywords.contains(identifier);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression exprNode) {\n            return processFunctionCall(exprNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {\n            return newNumberNode(literalNode.getNumber());\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral literalNode) {\n            if (literalNode.isDestructuring()) {\n                reportDestructuringAssign(literalNode);\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.OBJECTLIT);\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty el : literalNode.getElements()) {\n                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {\n                    if (el.isGetter()) {\n                        reportGetter(el);\n                        continue;\n                    } else if (el.isSetter()) {\n                        reportSetter(el);\n                        continue;\n                    }\n                }\n                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());\n                com.google.javascript.rhino.Node value = transform(el.getRight());\n                if (el.isGetter()) {\n                    key.setType(Token.GET);\n                    com.google.common.base.Preconditions.checkState(value.getType() == com.google.javascript.rhino.Token.FUNCTION);\n                    if (getFnParamNode(value).hasChildren()) {\n                        reportGetterParam(el.getLeft());\n                    }\n                } else if (el.isSetter()) {\n                    key.setType(Token.SET);\n                    com.google.common.base.Preconditions.checkState(value.getType() == com.google.javascript.rhino.Token.FUNCTION);\n                    if (!getFnParamNode(value).hasOneChild()) {\n                        reportSetterParam(el.getLeft());\n                    }\n                }\n                key.addChildToFront(value);\n                node.addChildToBack(key);\n            }\n            return node;\n        }\n\n        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {\n            com.google.common.base.Preconditions.checkArgument(fnNode.getType() == com.google.javascript.rhino.Token.FUNCTION);\n            return fnNode.getFirstChild().getNext();\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty propertyNode) {\n            return processInfixExpression(propertyNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression exprNode) {\n            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());\n            node.putProp(Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet getNode) {\n            return newNode(Token.GETPROP, transform(getNode.getTarget()), transformAsString(getNode.getProperty()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral literalNode) {\n            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());\n            literalStringNode.setLineno(literalNode.getLineno());\n            com.google.javascript.rhino.Node node = newNode(Token.REGEXP, literalStringNode);\n            java.lang.String flags = literalNode.getFlags();\n            if ((flags != null) && (!flags.isEmpty())) {\n                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);\n                flagsNode.setLineno(literalNode.getLineno());\n                node.addChildToBack(flagsNode);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.RETURN);\n            if (statementNode.getReturnValue() != null) {\n                node.addChildToBack(transform(statementNode.getReturnValue()));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope scopeNode) {\n            return processGeneric(scopeNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral literalNode) {\n            com.google.javascript.rhino.Node n = newStringNode(literalNode.getValue());\n            return n;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase caseNode) {\n            com.google.javascript.rhino.Node node;\n            if (caseNode.isDefault()) {\n                node = newNode(Token.DEFAULT);\n            } else {\n                com.google.javascript.jscomp.mozilla.rhino.ast.AstNode expr = caseNode.getExpression();\n                node = newNode(Token.CASE, transform(expr));\n            }\n            com.google.javascript.rhino.Node block = newNode(Token.BLOCK);\n            block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);\n            block.setLineno(caseNode.getLineno());\n            block.setCharno(position2charno(caseNode.getAbsolutePosition()));\n            if (caseNode.getStatements() != null) {\n                for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : caseNode.getStatements()) {\n                    block.addChildToBack(transform(child));\n                }\n            }\n            node.addChildToBack(block);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.SWITCH, transform(statementNode.getExpression()));\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : statementNode.getCases()) {\n                node.addChildToBack(transform(child));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement statementNode) {\n            return newNode(Token.THROW, transform(statementNode.getExpression()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.TRY, transformBlock(statementNode.getTryBlock()));\n            com.google.javascript.rhino.Node block = newNode(Token.BLOCK);\n            boolean lineSet = false;\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause cc : statementNode.getCatchClauses()) {\n                if (lineSet == false) {\n                    block.setLineno(cc.getLineno());\n                    lineSet = true;\n                }\n                block.addChildToBack(transform(cc));\n            }\n            node.addChildToBack(block);\n            com.google.javascript.jscomp.mozilla.rhino.ast.AstNode finallyBlock = statementNode.getFinallyBlock();\n            if (finallyBlock != null) {\n                node.addChildToBack(transformBlock(finallyBlock));\n            }\n            if ((lineSet == false) && (finallyBlock != null)) {\n                block.setLineno(finallyBlock.getLineno());\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.jscomp.mozilla.rhino.ast.UnaryExpression exprNode) {\n            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());\n            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());\n            if ((type == com.google.javascript.rhino.Token.NEG) && (operand.getType() == com.google.javascript.rhino.Token.NUMBER)) {\n                operand.setDouble(-operand.getDouble());\n                return operand;\n            } else {\n                if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {\n                    if (!validAssignmentTarget(operand)) {\n                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? \"invalid increment target\" : \"invalid decrement target\";\n                        errorReporter.error(msg, sourceName, operand.getLineno(), \"\", 0);\n                    }\n                }\n                com.google.javascript.rhino.Node node = newNode(type, operand);\n                if (exprNode.isPostfix()) {\n                    node.putBooleanProp(Node.INCRDECR_PROP, true);\n                }\n                return node;\n            }\n        }\n\n        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {\n            switch (target.getType()) {\n                case com.google.javascript.rhino.Token.NAME :\n                case com.google.javascript.rhino.Token.GETPROP :\n                case com.google.javascript.rhino.Token.GETELEM :\n                    return true;\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration declarationNode) {\n            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.Token.CONST)) {\n                processIllegalToken(declarationNode);\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.VAR);\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer child : declarationNode.getVariables()) {\n                node.addChildToBack(transform(child));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer initializerNode) {\n            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());\n            if (initializerNode.getInitializer() != null) {\n                node.addChildToBack(transform(initializerNode.getInitializer()));\n                node.setLineno(node.getLineno());\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop loopNode) {\n            return newNode(Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement statementNode) {\n            return newNode(Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"Unsupported syntax: \" + com.google.javascript.rhino.Token.typeToName(node.getType()), sourceName, node.getLineno(), \"\", 0);\n            return newNode(Token.EMPTY);\n        }\n\n        void reportDestructuringAssign(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"destructuring assignment forbidden\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportGetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"getters are not supported in Internet Explorer\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportSetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"setters are not supported in Internet Explorer\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportGetterParam(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"getters may not have parameters\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportSetterParam(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"setters must have exactly one parameter\", sourceName, node.getLineno(), \"\", 0);\n        }\n    }\n\n    private static int transformTokenType(int token) {\n        switch (token) {\n            case com.google.javascript.rhino.Token.ERROR :\n                return com.google.javascript.rhino.Token.ERROR;\n            case com.google.javascript.rhino.Token.EOF :\n                return com.google.javascript.rhino.Token.EOF;\n            case com.google.javascript.rhino.Token.EOL :\n                return com.google.javascript.rhino.Token.EOL;\n            case com.google.javascript.rhino.Token.ENTERWITH :\n                return com.google.javascript.rhino.Token.ENTERWITH;\n            case com.google.javascript.rhino.Token.LEAVEWITH :\n                return com.google.javascript.rhino.Token.LEAVEWITH;\n            case com.google.javascript.rhino.Token.RETURN :\n                return com.google.javascript.rhino.Token.RETURN;\n            case com.google.javascript.rhino.Token.GOTO :\n                return com.google.javascript.rhino.Token.GOTO;\n            case com.google.javascript.rhino.Token.IFEQ :\n                return com.google.javascript.rhino.Token.IFEQ;\n            case com.google.javascript.rhino.Token.IFNE :\n                return com.google.javascript.rhino.Token.IFNE;\n            case com.google.javascript.rhino.Token.SETNAME :\n                return com.google.javascript.rhino.Token.SETNAME;\n            case com.google.javascript.rhino.Token.BITOR :\n                return com.google.javascript.rhino.Token.BITOR;\n            case com.google.javascript.rhino.Token.BITXOR :\n                return com.google.javascript.rhino.Token.BITXOR;\n            case com.google.javascript.rhino.Token.BITAND :\n                return com.google.javascript.rhino.Token.BITAND;\n            case com.google.javascript.rhino.Token.EQ :\n                return com.google.javascript.rhino.Token.EQ;\n            case com.google.javascript.rhino.Token.NE :\n                return com.google.javascript.rhino.Token.NE;\n            case com.google.javascript.rhino.Token.LT :\n                return com.google.javascript.rhino.Token.LT;\n            case com.google.javascript.rhino.Token.LE :\n                return com.google.javascript.rhino.Token.LE;\n            case com.google.javascript.rhino.Token.GT :\n                return com.google.javascript.rhino.Token.GT;\n            case com.google.javascript.rhino.Token.GE :\n                return com.google.javascript.rhino.Token.GE;\n            case com.google.javascript.rhino.Token.LSH :\n                return com.google.javascript.rhino.Token.LSH;\n            case com.google.javascript.rhino.Token.RSH :\n                return com.google.javascript.rhino.Token.RSH;\n            case com.google.javascript.rhino.Token.URSH :\n                return com.google.javascript.rhino.Token.URSH;\n            case com.google.javascript.rhino.Token.ADD :\n                return com.google.javascript.rhino.Token.ADD;\n            case com.google.javascript.rhino.Token.SUB :\n                return com.google.javascript.rhino.Token.SUB;\n            case com.google.javascript.rhino.Token.MUL :\n                return com.google.javascript.rhino.Token.MUL;\n            case com.google.javascript.rhino.Token.DIV :\n                return com.google.javascript.rhino.Token.DIV;\n            case com.google.javascript.rhino.Token.MOD :\n                return com.google.javascript.rhino.Token.MOD;\n            case com.google.javascript.rhino.Token.NOT :\n                return com.google.javascript.rhino.Token.NOT;\n            case com.google.javascript.rhino.Token.BITNOT :\n                return com.google.javascript.rhino.Token.BITNOT;\n            case com.google.javascript.rhino.Token.POS :\n                return com.google.javascript.rhino.Token.POS;\n            case com.google.javascript.rhino.Token.NEG :\n                return com.google.javascript.rhino.Token.NEG;\n            case com.google.javascript.rhino.Token.NEW :\n                return com.google.javascript.rhino.Token.NEW;\n            case com.google.javascript.rhino.Token.DELPROP :\n                return com.google.javascript.rhino.Token.DELPROP;\n            case com.google.javascript.rhino.Token.TYPEOF :\n                return com.google.javascript.rhino.Token.TYPEOF;\n            case com.google.javascript.rhino.Token.GETPROP :\n                return com.google.javascript.rhino.Token.GETPROP;\n            case com.google.javascript.rhino.Token.SETPROP :\n                return com.google.javascript.rhino.Token.SETPROP;\n            case com.google.javascript.rhino.Token.GETELEM :\n                return com.google.javascript.rhino.Token.GETELEM;\n            case com.google.javascript.rhino.Token.SETELEM :\n                return com.google.javascript.rhino.Token.SETELEM;\n            case com.google.javascript.rhino.Token.CALL :\n                return com.google.javascript.rhino.Token.CALL;\n            case com.google.javascript.rhino.Token.NAME :\n                return com.google.javascript.rhino.Token.NAME;\n            case com.google.javascript.rhino.Token.NUMBER :\n                return com.google.javascript.rhino.Token.NUMBER;\n            case com.google.javascript.rhino.Token.STRING :\n                return com.google.javascript.rhino.Token.STRING;\n            case com.google.javascript.rhino.Token.NULL :\n                return com.google.javascript.rhino.Token.NULL;\n            case com.google.javascript.rhino.Token.THIS :\n                return com.google.javascript.rhino.Token.THIS;\n            case com.google.javascript.rhino.Token.FALSE :\n                return com.google.javascript.rhino.Token.FALSE;\n            case com.google.javascript.rhino.Token.TRUE :\n                return com.google.javascript.rhino.Token.TRUE;\n            case com.google.javascript.rhino.Token.SHEQ :\n                return com.google.javascript.rhino.Token.SHEQ;\n            case com.google.javascript.rhino.Token.SHNE :\n                return com.google.javascript.rhino.Token.SHNE;\n            case com.google.javascript.rhino.Token.REGEXP :\n                return com.google.javascript.rhino.Token.REGEXP;\n            case com.google.javascript.rhino.Token.BINDNAME :\n                return com.google.javascript.rhino.Token.BINDNAME;\n            case com.google.javascript.rhino.Token.THROW :\n                return com.google.javascript.rhino.Token.THROW;\n            case com.google.javascript.rhino.Token.RETHROW :\n                return com.google.javascript.rhino.Token.RETHROW;\n            case com.google.javascript.rhino.Token.IN :\n                return com.google.javascript.rhino.Token.IN;\n            case com.google.javascript.rhino.Token.INSTANCEOF :\n                return com.google.javascript.rhino.Token.INSTANCEOF;\n            case com.google.javascript.rhino.Token.LOCAL_LOAD :\n                return com.google.javascript.rhino.Token.LOCAL_LOAD;\n            case com.google.javascript.rhino.Token.GETVAR :\n                return com.google.javascript.rhino.Token.GETVAR;\n            case com.google.javascript.rhino.Token.SETVAR :\n                return com.google.javascript.rhino.Token.SETVAR;\n            case com.google.javascript.rhino.Token.CATCH_SCOPE :\n                return com.google.javascript.rhino.Token.CATCH_SCOPE;\n            case com.google.javascript.rhino.Token.ENUM_INIT_KEYS :\n                return com.google.javascript.rhino.Token.ENUM_INIT_KEYS;\n            case com.google.javascript.rhino.Token.ENUM_INIT_VALUES :\n                return com.google.javascript.rhino.Token.ENUM_INIT_VALUES;\n            case com.google.javascript.rhino.Token.ENUM_NEXT :\n                return com.google.javascript.rhino.Token.ENUM_NEXT;\n            case com.google.javascript.rhino.Token.ENUM_ID :\n                return com.google.javascript.rhino.Token.ENUM_ID;\n            case com.google.javascript.rhino.Token.THISFN :\n                return com.google.javascript.rhino.Token.THISFN;\n            case com.google.javascript.rhino.Token.RETURN_RESULT :\n                return com.google.javascript.rhino.Token.RETURN_RESULT;\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n                return com.google.javascript.rhino.Token.ARRAYLIT;\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n                return com.google.javascript.rhino.Token.OBJECTLIT;\n            case com.google.javascript.rhino.Token.GET_REF :\n                return com.google.javascript.rhino.Token.GET_REF;\n            case com.google.javascript.rhino.Token.SET_REF :\n                return com.google.javascript.rhino.Token.SET_REF;\n            case com.google.javascript.rhino.Token.DEL_REF :\n                return com.google.javascript.rhino.Token.DEL_REF;\n            case com.google.javascript.rhino.Token.REF_CALL :\n                return com.google.javascript.rhino.Token.REF_CALL;\n            case com.google.javascript.rhino.Token.REF_SPECIAL :\n                return com.google.javascript.rhino.Token.REF_SPECIAL;\n            case com.google.javascript.rhino.Token.DEFAULTNAMESPACE :\n                return com.google.javascript.rhino.Token.DEFAULTNAMESPACE;\n            case com.google.javascript.rhino.Token.ESCXMLTEXT :\n                return com.google.javascript.rhino.Token.ESCXMLTEXT;\n            case com.google.javascript.rhino.Token.ESCXMLATTR :\n                return com.google.javascript.rhino.Token.ESCXMLATTR;\n            case com.google.javascript.rhino.Token.REF_MEMBER :\n                return com.google.javascript.rhino.Token.REF_MEMBER;\n            case com.google.javascript.rhino.Token.REF_NS_MEMBER :\n                return com.google.javascript.rhino.Token.REF_NS_MEMBER;\n            case com.google.javascript.rhino.Token.REF_NAME :\n                return com.google.javascript.rhino.Token.REF_NAME;\n            case com.google.javascript.rhino.Token.REF_NS_NAME :\n                return com.google.javascript.rhino.Token.REF_NS_NAME;\n            case com.google.javascript.rhino.Token.TRY :\n                return com.google.javascript.rhino.Token.TRY;\n            case com.google.javascript.rhino.Token.SEMI :\n                return com.google.javascript.rhino.Token.SEMI;\n            case com.google.javascript.rhino.Token.LB :\n                return com.google.javascript.rhino.Token.LB;\n            case com.google.javascript.rhino.Token.RB :\n                return com.google.javascript.rhino.Token.RB;\n            case com.google.javascript.rhino.Token.LC :\n                return com.google.javascript.rhino.Token.LC;\n            case com.google.javascript.rhino.Token.RC :\n                return com.google.javascript.rhino.Token.RC;\n            case com.google.javascript.rhino.Token.LP :\n                return com.google.javascript.rhino.Token.LP;\n            case com.google.javascript.rhino.Token.RP :\n                return com.google.javascript.rhino.Token.RP;\n            case com.google.javascript.rhino.Token.COMMA :\n                return com.google.javascript.rhino.Token.COMMA;\n            case com.google.javascript.rhino.Token.ASSIGN :\n                return com.google.javascript.rhino.Token.ASSIGN;\n            case com.google.javascript.rhino.Token.ASSIGN_BITOR :\n                return com.google.javascript.rhino.Token.ASSIGN_BITOR;\n            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :\n                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;\n            case com.google.javascript.rhino.Token.ASSIGN_BITAND :\n                return com.google.javascript.rhino.Token.ASSIGN_BITAND;\n            case com.google.javascript.rhino.Token.ASSIGN_LSH :\n                return com.google.javascript.rhino.Token.ASSIGN_LSH;\n            case com.google.javascript.rhino.Token.ASSIGN_RSH :\n                return com.google.javascript.rhino.Token.ASSIGN_RSH;\n            case com.google.javascript.rhino.Token.ASSIGN_URSH :\n                return com.google.javascript.rhino.Token.ASSIGN_URSH;\n            case com.google.javascript.rhino.Token.ASSIGN_ADD :\n                return com.google.javascript.rhino.Token.ASSIGN_ADD;\n            case com.google.javascript.rhino.Token.ASSIGN_SUB :\n                return com.google.javascript.rhino.Token.ASSIGN_SUB;\n            case com.google.javascript.rhino.Token.ASSIGN_MUL :\n                return com.google.javascript.rhino.Token.ASSIGN_MUL;\n            case com.google.javascript.rhino.Token.ASSIGN_DIV :\n                return com.google.javascript.rhino.Token.ASSIGN_DIV;\n            case com.google.javascript.rhino.Token.ASSIGN_MOD :\n                return com.google.javascript.rhino.Token.ASSIGN_MOD;\n            case com.google.javascript.rhino.Token.HOOK :\n                return com.google.javascript.rhino.Token.HOOK;\n            case com.google.javascript.rhino.Token.COLON :\n                return com.google.javascript.rhino.Token.COLON;\n            case com.google.javascript.rhino.Token.OR :\n                return com.google.javascript.rhino.Token.OR;\n            case com.google.javascript.rhino.Token.AND :\n                return com.google.javascript.rhino.Token.AND;\n            case com.google.javascript.rhino.Token.INC :\n                return com.google.javascript.rhino.Token.INC;\n            case com.google.javascript.rhino.Token.DEC :\n                return com.google.javascript.rhino.Token.DEC;\n            case com.google.javascript.rhino.Token.DOT :\n                return com.google.javascript.rhino.Token.DOT;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                return com.google.javascript.rhino.Token.FUNCTION;\n            case com.google.javascript.rhino.Token.EXPORT :\n                return com.google.javascript.rhino.Token.EXPORT;\n            case com.google.javascript.rhino.Token.IMPORT :\n                return com.google.javascript.rhino.Token.IMPORT;\n            case com.google.javascript.rhino.Token.IF :\n                return com.google.javascript.rhino.Token.IF;\n            case com.google.javascript.rhino.Token.ELSE :\n                return com.google.javascript.rhino.Token.ELSE;\n            case com.google.javascript.rhino.Token.SWITCH :\n                return com.google.javascript.rhino.Token.SWITCH;\n            case com.google.javascript.rhino.Token.CASE :\n                return com.google.javascript.rhino.Token.CASE;\n            case com.google.javascript.rhino.Token.DEFAULT :\n                return com.google.javascript.rhino.Token.DEFAULT;\n            case com.google.javascript.rhino.Token.WHILE :\n                return com.google.javascript.rhino.Token.WHILE;\n            case com.google.javascript.rhino.Token.DO :\n                return com.google.javascript.rhino.Token.DO;\n            case com.google.javascript.rhino.Token.FOR :\n                return com.google.javascript.rhino.Token.FOR;\n            case com.google.javascript.rhino.Token.BREAK :\n                return com.google.javascript.rhino.Token.BREAK;\n            case com.google.javascript.rhino.Token.CONTINUE :\n                return com.google.javascript.rhino.Token.CONTINUE;\n            case com.google.javascript.rhino.Token.VAR :\n                return com.google.javascript.rhino.Token.VAR;\n            case com.google.javascript.rhino.Token.WITH :\n                return com.google.javascript.rhino.Token.WITH;\n            case com.google.javascript.rhino.Token.CATCH :\n                return com.google.javascript.rhino.Token.CATCH;\n            case com.google.javascript.rhino.Token.FINALLY :\n                return com.google.javascript.rhino.Token.FINALLY;\n            case com.google.javascript.rhino.Token.VOID :\n                return com.google.javascript.rhino.Token.VOID;\n            case com.google.javascript.rhino.Token.RESERVED :\n                return com.google.javascript.rhino.Token.RESERVED;\n            case com.google.javascript.rhino.Token.EMPTY :\n                return com.google.javascript.rhino.Token.EMPTY;\n            case com.google.javascript.rhino.Token.BLOCK :\n                return com.google.javascript.rhino.Token.BLOCK;\n            case com.google.javascript.rhino.Token.LABEL :\n                return com.google.javascript.rhino.Token.LABEL;\n            case com.google.javascript.rhino.Token.TARGET :\n                return com.google.javascript.rhino.Token.TARGET;\n            case com.google.javascript.rhino.Token.LOOP :\n                return com.google.javascript.rhino.Token.LOOP;\n            case com.google.javascript.rhino.Token.EXPR_VOID :\n            case com.google.javascript.rhino.Token.EXPR_RESULT :\n                return com.google.javascript.rhino.Token.EXPR_RESULT;\n            case com.google.javascript.rhino.Token.JSR :\n                return com.google.javascript.rhino.Token.JSR;\n            case com.google.javascript.rhino.Token.SCRIPT :\n                return com.google.javascript.rhino.Token.SCRIPT;\n            case com.google.javascript.rhino.Token.TYPEOFNAME :\n                return com.google.javascript.rhino.Token.TYPEOFNAME;\n            case com.google.javascript.rhino.Token.USE_STACK :\n                return com.google.javascript.rhino.Token.USE_STACK;\n            case com.google.javascript.rhino.Token.SETPROP_OP :\n                return com.google.javascript.rhino.Token.SETPROP_OP;\n            case com.google.javascript.rhino.Token.SETELEM_OP :\n                return com.google.javascript.rhino.Token.SETELEM_OP;\n            case com.google.javascript.rhino.Token.LOCAL_BLOCK :\n                return com.google.javascript.rhino.Token.LOCAL_BLOCK;\n            case com.google.javascript.rhino.Token.SET_REF_OP :\n                return com.google.javascript.rhino.Token.SET_REF_OP;\n            case com.google.javascript.rhino.Token.DOTDOT :\n                return com.google.javascript.rhino.Token.DOTDOT;\n            case com.google.javascript.rhino.Token.COLONCOLON :\n                return com.google.javascript.rhino.Token.COLONCOLON;\n            case com.google.javascript.rhino.Token.XML :\n                return com.google.javascript.rhino.Token.XML;\n            case com.google.javascript.rhino.Token.DOTQUERY :\n                return com.google.javascript.rhino.Token.DOTQUERY;\n            case com.google.javascript.rhino.Token.XMLATTR :\n                return com.google.javascript.rhino.Token.XMLATTR;\n            case com.google.javascript.rhino.Token.XMLEND :\n                return com.google.javascript.rhino.Token.XMLEND;\n            case com.google.javascript.rhino.Token.TO_OBJECT :\n                return com.google.javascript.rhino.Token.TO_OBJECT;\n            case com.google.javascript.rhino.Token.TO_DOUBLE :\n                return com.google.javascript.rhino.Token.TO_DOUBLE;\n            case com.google.javascript.rhino.Token.GET :\n                return com.google.javascript.rhino.Token.GET;\n            case com.google.javascript.rhino.Token.SET :\n                return com.google.javascript.rhino.Token.SET;\n            case com.google.javascript.rhino.Token.CONST :\n                return com.google.javascript.rhino.Token.CONST;\n            case com.google.javascript.rhino.Token.SETCONST :\n                return com.google.javascript.rhino.Token.SETCONST;\n            case com.google.javascript.rhino.Token.DEBUGGER :\n                return com.google.javascript.rhino.Token.DEBUGGER;\n        }\n        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type) {\n        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {\n        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {\n        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {\n        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {\n        return com.google.javascript.rhino.Node.newString(value).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {\n        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {\n        return com.google.javascript.rhino.Node.newNumber(value).clonePropsFrom(templateNode);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static java.lang.String getStringValue(double value) {\n    long longValue = ((long) (value));\n    if (longValue == value) {\n        return java.lang.Long.toString(longValue);\n    } else {\n        return java.lang.Double.toString(value);\n    }\n}",
            "src_parent": "public class IRFactory {\n    private final java.lang.String sourceString;\n\n    private final java.lang.String sourceName;\n\n    private final com.google.javascript.jscomp.parsing.Config config;\n\n    private final com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter;\n\n    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;\n\n    private final java.util.Set<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.Sets.newHashSet(\"use strict\");\n\n    private static final java.util.Set<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of(\"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");\n\n    private static final java.util.Set<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of(\"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\");\n\n    private final java.util.Set<java.lang.String> reservedKeywords;\n\n    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);\n\n    Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();\n\n    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;\n\n    private com.google.javascript.rhino.Node templateNode;\n\n    private IRFactory(java.lang.String sourceString, java.lang.String sourceName, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter) {\n        this.sourceString = sourceString;\n        this.sourceName = sourceName;\n        this.config = config;\n        this.errorReporter = errorReporter;\n        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();\n        this.templateNode = createTemplateNode();\n        switch (config.languageMode) {\n            case ECMASCRIPT3 :\n                reservedKeywords = null;\n                break;\n            case ECMASCRIPT5 :\n                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;\n                break;\n            case ECMASCRIPT5_STRICT :\n                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;\n                break;\n            default :\n                throw new java.lang.IllegalStateException(\"unknown language mode\");\n        }\n    }\n\n    private com.google.javascript.rhino.Node createTemplateNode() {\n        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);\n        templateNode.putProp(Node.SOURCENAME_PROP, sourceName);\n        return templateNode;\n    }\n\n    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot node, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.jscomp.mozilla.rhino.ErrorReporter errorReporter) {\n        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, node.getSourceName(), config, errorReporter);\n        com.google.javascript.rhino.Node irNode = irFactory.transform(node);\n        if (node.getComments() != null) {\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment : node.getComments()) {\n                if ((comment.getCommentType() == CommentType.JSDOC) && (!comment.isParsed())) {\n                    irFactory.handlePossibleFileOverviewJsDoc(comment);\n                }\n            }\n        }\n        irFactory.setFileOverviewJsDoc(irNode);\n        return irNode;\n    }\n\n    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {\n        irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());\n        if (fileOverviewInfo != null) {\n            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {\n                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n            }\n            irNode.setJSDocInfo(fileOverviewInfo);\n        }\n    }\n\n    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        com.google.javascript.rhino.Node irNode = transform(node);\n        if (irNode.getType() != com.google.javascript.rhino.Token.BLOCK) {\n            if (irNode.getType() == com.google.javascript.rhino.Token.EMPTY) {\n                irNode.setType(Token.BLOCK);\n                irNode.setWasEmptyNode(true);\n            } else {\n                com.google.javascript.rhino.Node newBlock = newNode(Token.BLOCK, irNode);\n                newBlock.setLineno(irNode.getLineno());\n                newBlock.setCharno(irNode.getCharno());\n                irNode = newBlock;\n            }\n        }\n        return irNode;\n    }\n\n    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {\n        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {\n            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();\n            return true;\n        }\n        return false;\n    }\n\n    private void handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment) {\n        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);\n        comment.setParsed(true);\n        handlePossibleFileOverviewJsDoc(jsDocParser);\n    }\n\n    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        com.google.javascript.jscomp.mozilla.rhino.ast.Comment comment = node.getJsDocNode();\n        if (comment != null) {\n            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);\n            comment.setParsed(true);\n            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n                return jsDocParser.retrieveAndResetParsedJSDocInfo();\n            }\n        }\n        return null;\n    }\n\n    private com.google.javascript.rhino.Node transform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node);\n        com.google.javascript.rhino.Node irNode = justTransform(node);\n        if (jsDocInfo != null) {\n            irNode.setJSDocInfo(jsDocInfo);\n        }\n        setSourceInfo(irNode, node);\n        return irNode;\n    }\n\n    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.jscomp.mozilla.rhino.ast.Name node) {\n        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node);\n        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);\n        if (jsDocInfo != null) {\n            irNode.setJSDocInfo(jsDocInfo);\n        }\n        setSourceInfo(irNode, node);\n        return irNode;\n    }\n\n    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {\n        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode);\n        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));\n        if (jsDocInfo != null) {\n            irNode.setJSDocInfo(jsDocInfo);\n        }\n        setSourceInfo(irNode, literalNode);\n        return irNode;\n    }\n\n    private static java.lang.String getStringValue(double value) {\n        long longValue = ((long) (value));\n        if (longValue == value) {\n            return java.lang.Long.toString(longValue);\n        } else {\n            return java.lang.Double.toString(value);\n        }\n    }\n\n    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        if ((irNode.getType() == com.google.javascript.rhino.Token.FUNCTION) && (irNode.getFirstChild().getLineno() != (-1))) {\n            irNode.setLineno(irNode.getFirstChild().getLineno());\n            irNode.setCharno(irNode.getFirstChild().getCharno());\n        } else if (irNode.getLineno() == (-1)) {\n            int lineno = node.getLineno();\n            irNode.setLineno(lineno);\n            int charno = position2charno(node.getAbsolutePosition());\n            irNode.setCharno(charno);\n        }\n    }\n\n    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.jscomp.mozilla.rhino.ast.Comment node) {\n        java.lang.String comment = node.getValue();\n        int lineno = node.getLineno();\n        int position = node.getAbsolutePosition();\n        int numOpeningChars = 3;\n        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, sourceName, config, errorReporter);\n        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n        jsdocParser.parse();\n        return jsdocParser;\n    }\n\n    private int position2charno(int position) {\n        int lineIndex = sourceString.lastIndexOf('\\n', position);\n        if (lineIndex == (-1)) {\n            return position;\n        } else {\n            return (position - lineIndex) - 1;\n        }\n    }\n\n    private com.google.javascript.rhino.Node justTransform(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        return transformDispatcher.process(node);\n    }\n\n    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {\n        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node n) {\n            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));\n            for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {\n                node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));\n            }\n            return node;\n        }\n\n        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode n) {\n            com.google.javascript.rhino.Node ret;\n            if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.Name) {\n                ret = transformNameAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.Name) (n)));\n            } else if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) {\n                ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)));\n                ret.putBooleanProp(Node.QUOTED_PROP, true);\n            } else {\n                ret = transform(n);\n                ret.putBooleanProp(Node.QUOTED_PROP, true);\n            }\n            com.google.common.base.Preconditions.checkState(ret.getType() == com.google.javascript.rhino.Token.STRING);\n            return ret;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral literalNode) {\n            if (literalNode.isDestructuring()) {\n                reportDestructuringAssign(literalNode);\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.ARRAYLIT);\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : literalNode.getElements()) {\n                com.google.javascript.rhino.Node c = transform(child);\n                node.addChildToBack(c);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processAssignment(com.google.javascript.jscomp.mozilla.rhino.ast.Assignment assignmentNode) {\n            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);\n            com.google.javascript.rhino.Node target = assign.getFirstChild();\n            if (!validAssignmentTarget(target)) {\n                errorReporter.error(\"invalid assignment target\", sourceName, target.getLineno(), \"\", 0);\n            }\n            return assign;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot rootNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.SCRIPT);\n            for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {\n                node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));\n            }\n            parseDirectives(node);\n            return node;\n        }\n\n        private void parseDirectives(com.google.javascript.rhino.Node node) {\n            java.util.Set<java.lang.String> directives = null;\n            while (isDirective(node.getFirstChild())) {\n                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();\n                if (directives == null) {\n                    directives = com.google.common.collect.Sets.newHashSet(directive);\n                } else {\n                    directives.add(directive);\n                }\n            } \n            if (directives != null) {\n                node.setDirectives(directives);\n            }\n        }\n\n        private boolean isDirective(com.google.javascript.rhino.Node n) {\n            if (n == null) {\n                return false;\n            }\n            int nType = n.getType();\n            return (((nType == com.google.javascript.rhino.Token.EXPR_RESULT) || (nType == com.google.javascript.rhino.Token.EXPR_VOID)) && (n.getFirstChild().getType() == com.google.javascript.rhino.Token.STRING)) && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block blockNode) {\n            return processGeneric(blockNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.BREAK);\n            if (statementNode.getBreakLabel() != null) {\n                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());\n                labelName.setType(Token.LABEL_NAME);\n                node.addChildToBack(labelName);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause clauseNode) {\n            com.google.javascript.jscomp.mozilla.rhino.ast.AstNode catchVar = clauseNode.getVarName();\n            com.google.javascript.rhino.Node node = newNode(Token.CATCH, transform(catchVar));\n            if (clauseNode.getCatchCondition() != null) {\n                errorReporter.error(\"Catch clauses are not supported\", sourceName, clauseNode.getCatchCondition().getLineno(), \"\", 0);\n            }\n            node.addChildToBack(transformBlock(clauseNode.getBody()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression exprNode) {\n            return newNode(Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.CONTINUE);\n            if (statementNode.getLabel() != null) {\n                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());\n                labelName.setType(Token.LABEL_NAME);\n                node.addChildToBack(labelName);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop loopNode) {\n            return newNode(Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processElementGet(com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet getNode) {\n            return newNode(Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression exprNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.EMPTY);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));\n            node.addChildToBack(transform(statementNode.getExpression()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop loopNode) {\n            return newNode(Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processForLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop loopNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));\n            node.addChildToBack(transformBlock(loopNode.getBody()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall callNode) {\n            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : callNode.getArguments()) {\n                node.addChildToBack(transform(child));\n            }\n            int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n            node.setLineno(callNode.getLineno());\n            node.setCharno(position2charno(leftParamPos));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode functionNode) {\n            com.google.javascript.jscomp.mozilla.rhino.ast.Name name = functionNode.getFunctionName();\n            java.lang.Boolean isUnnamedFunction = false;\n            if (name == null) {\n                int functionType = functionNode.getFunctionType();\n                if (functionType != com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode.FUNCTION_EXPRESSION) {\n                    errorReporter.error(\"unnamed function statement\", sourceName, functionNode.getLineno(), \"\", 0);\n                }\n                name = new com.google.javascript.jscomp.mozilla.rhino.ast.Name();\n                name.setIdentifier(\"\");\n                isUnnamedFunction = true;\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.FUNCTION);\n            com.google.javascript.rhino.Node newName = transform(name);\n            if (isUnnamedFunction) {\n                newName.setLineno(functionNode.getLineno());\n                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n                newName.setCharno(position2charno(lpColumn));\n            }\n            node.addChildToBack(newName);\n            com.google.javascript.rhino.Node lp = newNode(Token.LP);\n            com.google.javascript.jscomp.mozilla.rhino.ast.Name fnName = functionNode.getFunctionName();\n            if (fnName != null) {\n                lp.setLineno(fnName.getLineno());\n            } else {\n                lp.setLineno(functionNode.getLineno());\n            }\n            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n            lp.setCharno(position2charno(lparenCharno));\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode param : functionNode.getParams()) {\n                lp.addChildToBack(transform(param));\n            }\n            node.addChildToBack(lp);\n            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());\n            parseDirectives(bodyNode);\n            node.addChildToBack(bodyNode);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.IF);\n            node.addChildToBack(transform(statementNode.getCondition()));\n            node.addChildToBack(transformBlock(statementNode.getThenPart()));\n            if (statementNode.getElsePart() != null) {\n                node.addChildToBack(transformBlock(statementNode.getElsePart()));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression exprNode) {\n            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));\n            n.setLineno(exprNode.getLineno());\n            n.setCharno(position2charno(exprNode.getAbsolutePosition() + exprNode.getOperatorPosition()));\n            return n;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral literalNode) {\n            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processLabel(com.google.javascript.jscomp.mozilla.rhino.ast.Label labelNode) {\n            return newStringNode(Token.LABEL_NAME, labelNode.getName());\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.LABEL);\n            com.google.javascript.rhino.Node prev = null;\n            com.google.javascript.rhino.Node cur = node;\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.Label label : statementNode.getLabels()) {\n                if (prev != null) {\n                    prev.addChildToBack(cur);\n                }\n                cur.addChildToBack(transform(label));\n                cur.setLineno(label.getLineno());\n                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());\n                cur.setCharno(clauseAbsolutePosition);\n                prev = cur;\n                cur = newNode(Token.LABEL);\n            }\n            prev.addChildToBack(transform(statementNode.getStatement()));\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name nameNode) {\n            return processName(nameNode, false);\n        }\n\n        com.google.javascript.rhino.Node processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name nameNode, boolean asString) {\n            if (asString) {\n                return newStringNode(Token.STRING, nameNode.getIdentifier());\n            } else {\n                if (isReservedKeyword(nameNode.getIdentifier())) {\n                    errorReporter.error(\"identifier is a reserved word\", sourceName, nameNode.getLineno(), \"\", 0);\n                }\n                return newStringNode(Token.NAME, nameNode.getIdentifier());\n            }\n        }\n\n        private boolean isReservedKeyword(java.lang.String identifier) {\n            return (reservedKeywords != null) && reservedKeywords.contains(identifier);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression exprNode) {\n            return processFunctionCall(exprNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {\n            return newNumberNode(literalNode.getNumber());\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral literalNode) {\n            if (literalNode.isDestructuring()) {\n                reportDestructuringAssign(literalNode);\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.OBJECTLIT);\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty el : literalNode.getElements()) {\n                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {\n                    if (el.isGetter()) {\n                        reportGetter(el);\n                        continue;\n                    } else if (el.isSetter()) {\n                        reportSetter(el);\n                        continue;\n                    }\n                }\n                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());\n                com.google.javascript.rhino.Node value = transform(el.getRight());\n                if (el.isGetter()) {\n                    key.setType(Token.GET);\n                    com.google.common.base.Preconditions.checkState(value.getType() == com.google.javascript.rhino.Token.FUNCTION);\n                    if (getFnParamNode(value).hasChildren()) {\n                        reportGetterParam(el.getLeft());\n                    }\n                } else if (el.isSetter()) {\n                    key.setType(Token.SET);\n                    com.google.common.base.Preconditions.checkState(value.getType() == com.google.javascript.rhino.Token.FUNCTION);\n                    if (!getFnParamNode(value).hasOneChild()) {\n                        reportSetterParam(el.getLeft());\n                    }\n                }\n                key.addChildToFront(value);\n                node.addChildToBack(key);\n            }\n            return node;\n        }\n\n        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {\n            com.google.common.base.Preconditions.checkArgument(fnNode.getType() == com.google.javascript.rhino.Token.FUNCTION);\n            return fnNode.getFirstChild().getNext();\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty propertyNode) {\n            return processInfixExpression(propertyNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression exprNode) {\n            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());\n            node.putProp(Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet getNode) {\n            return newNode(Token.GETPROP, transform(getNode.getTarget()), transformAsString(getNode.getProperty()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral literalNode) {\n            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());\n            literalStringNode.setLineno(literalNode.getLineno());\n            com.google.javascript.rhino.Node node = newNode(Token.REGEXP, literalStringNode);\n            java.lang.String flags = literalNode.getFlags();\n            if ((flags != null) && (!flags.isEmpty())) {\n                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);\n                flagsNode.setLineno(literalNode.getLineno());\n                node.addChildToBack(flagsNode);\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.RETURN);\n            if (statementNode.getReturnValue() != null) {\n                node.addChildToBack(transform(statementNode.getReturnValue()));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope scopeNode) {\n            return processGeneric(scopeNode);\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral literalNode) {\n            com.google.javascript.rhino.Node n = newStringNode(literalNode.getValue());\n            return n;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase caseNode) {\n            com.google.javascript.rhino.Node node;\n            if (caseNode.isDefault()) {\n                node = newNode(Token.DEFAULT);\n            } else {\n                com.google.javascript.jscomp.mozilla.rhino.ast.AstNode expr = caseNode.getExpression();\n                node = newNode(Token.CASE, transform(expr));\n            }\n            com.google.javascript.rhino.Node block = newNode(Token.BLOCK);\n            block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);\n            block.setLineno(caseNode.getLineno());\n            block.setCharno(position2charno(caseNode.getAbsolutePosition()));\n            if (caseNode.getStatements() != null) {\n                for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : caseNode.getStatements()) {\n                    block.addChildToBack(transform(child));\n                }\n            }\n            node.addChildToBack(block);\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.SWITCH, transform(statementNode.getExpression()));\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : statementNode.getCases()) {\n                node.addChildToBack(transform(child));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement statementNode) {\n            return newNode(Token.THROW, transform(statementNode.getExpression()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement statementNode) {\n            com.google.javascript.rhino.Node node = newNode(Token.TRY, transformBlock(statementNode.getTryBlock()));\n            com.google.javascript.rhino.Node block = newNode(Token.BLOCK);\n            boolean lineSet = false;\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause cc : statementNode.getCatchClauses()) {\n                if (lineSet == false) {\n                    block.setLineno(cc.getLineno());\n                    lineSet = true;\n                }\n                block.addChildToBack(transform(cc));\n            }\n            node.addChildToBack(block);\n            com.google.javascript.jscomp.mozilla.rhino.ast.AstNode finallyBlock = statementNode.getFinallyBlock();\n            if (finallyBlock != null) {\n                node.addChildToBack(transformBlock(finallyBlock));\n            }\n            if ((lineSet == false) && (finallyBlock != null)) {\n                block.setLineno(finallyBlock.getLineno());\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.jscomp.mozilla.rhino.ast.UnaryExpression exprNode) {\n            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());\n            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());\n            if ((type == com.google.javascript.rhino.Token.NEG) && (operand.getType() == com.google.javascript.rhino.Token.NUMBER)) {\n                operand.setDouble(-operand.getDouble());\n                return operand;\n            } else {\n                if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {\n                    if (!validAssignmentTarget(operand)) {\n                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? \"invalid increment target\" : \"invalid decrement target\";\n                        errorReporter.error(msg, sourceName, operand.getLineno(), \"\", 0);\n                    }\n                }\n                com.google.javascript.rhino.Node node = newNode(type, operand);\n                if (exprNode.isPostfix()) {\n                    node.putBooleanProp(Node.INCRDECR_PROP, true);\n                }\n                return node;\n            }\n        }\n\n        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {\n            switch (target.getType()) {\n                case com.google.javascript.rhino.Token.NAME :\n                case com.google.javascript.rhino.Token.GETPROP :\n                case com.google.javascript.rhino.Token.GETELEM :\n                    return true;\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration declarationNode) {\n            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.Token.CONST)) {\n                processIllegalToken(declarationNode);\n            }\n            com.google.javascript.rhino.Node node = newNode(Token.VAR);\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer child : declarationNode.getVariables()) {\n                node.addChildToBack(transform(child));\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer initializerNode) {\n            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());\n            if (initializerNode.getInitializer() != null) {\n                node.addChildToBack(transform(initializerNode.getInitializer()));\n                node.setLineno(node.getLineno());\n            }\n            return node;\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop loopNode) {\n            return newNode(Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement statementNode) {\n            return newNode(Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));\n        }\n\n        @java.lang.Override\n        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"Unsupported syntax: \" + com.google.javascript.rhino.Token.typeToName(node.getType()), sourceName, node.getLineno(), \"\", 0);\n            return newNode(Token.EMPTY);\n        }\n\n        void reportDestructuringAssign(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"destructuring assignment forbidden\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportGetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"getters are not supported in Internet Explorer\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportSetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"setters are not supported in Internet Explorer\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportGetterParam(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"getters may not have parameters\", sourceName, node.getLineno(), \"\", 0);\n        }\n\n        void reportSetterParam(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n            errorReporter.error(\"setters must have exactly one parameter\", sourceName, node.getLineno(), \"\", 0);\n        }\n    }\n\n    private static int transformTokenType(int token) {\n        switch (token) {\n            case com.google.javascript.rhino.Token.ERROR :\n                return com.google.javascript.rhino.Token.ERROR;\n            case com.google.javascript.rhino.Token.EOF :\n                return com.google.javascript.rhino.Token.EOF;\n            case com.google.javascript.rhino.Token.EOL :\n                return com.google.javascript.rhino.Token.EOL;\n            case com.google.javascript.rhino.Token.ENTERWITH :\n                return com.google.javascript.rhino.Token.ENTERWITH;\n            case com.google.javascript.rhino.Token.LEAVEWITH :\n                return com.google.javascript.rhino.Token.LEAVEWITH;\n            case com.google.javascript.rhino.Token.RETURN :\n                return com.google.javascript.rhino.Token.RETURN;\n            case com.google.javascript.rhino.Token.GOTO :\n                return com.google.javascript.rhino.Token.GOTO;\n            case com.google.javascript.rhino.Token.IFEQ :\n                return com.google.javascript.rhino.Token.IFEQ;\n            case com.google.javascript.rhino.Token.IFNE :\n                return com.google.javascript.rhino.Token.IFNE;\n            case com.google.javascript.rhino.Token.SETNAME :\n                return com.google.javascript.rhino.Token.SETNAME;\n            case com.google.javascript.rhino.Token.BITOR :\n                return com.google.javascript.rhino.Token.BITOR;\n            case com.google.javascript.rhino.Token.BITXOR :\n                return com.google.javascript.rhino.Token.BITXOR;\n            case com.google.javascript.rhino.Token.BITAND :\n                return com.google.javascript.rhino.Token.BITAND;\n            case com.google.javascript.rhino.Token.EQ :\n                return com.google.javascript.rhino.Token.EQ;\n            case com.google.javascript.rhino.Token.NE :\n                return com.google.javascript.rhino.Token.NE;\n            case com.google.javascript.rhino.Token.LT :\n                return com.google.javascript.rhino.Token.LT;\n            case com.google.javascript.rhino.Token.LE :\n                return com.google.javascript.rhino.Token.LE;\n            case com.google.javascript.rhino.Token.GT :\n                return com.google.javascript.rhino.Token.GT;\n            case com.google.javascript.rhino.Token.GE :\n                return com.google.javascript.rhino.Token.GE;\n            case com.google.javascript.rhino.Token.LSH :\n                return com.google.javascript.rhino.Token.LSH;\n            case com.google.javascript.rhino.Token.RSH :\n                return com.google.javascript.rhino.Token.RSH;\n            case com.google.javascript.rhino.Token.URSH :\n                return com.google.javascript.rhino.Token.URSH;\n            case com.google.javascript.rhino.Token.ADD :\n                return com.google.javascript.rhino.Token.ADD;\n            case com.google.javascript.rhino.Token.SUB :\n                return com.google.javascript.rhino.Token.SUB;\n            case com.google.javascript.rhino.Token.MUL :\n                return com.google.javascript.rhino.Token.MUL;\n            case com.google.javascript.rhino.Token.DIV :\n                return com.google.javascript.rhino.Token.DIV;\n            case com.google.javascript.rhino.Token.MOD :\n                return com.google.javascript.rhino.Token.MOD;\n            case com.google.javascript.rhino.Token.NOT :\n                return com.google.javascript.rhino.Token.NOT;\n            case com.google.javascript.rhino.Token.BITNOT :\n                return com.google.javascript.rhino.Token.BITNOT;\n            case com.google.javascript.rhino.Token.POS :\n                return com.google.javascript.rhino.Token.POS;\n            case com.google.javascript.rhino.Token.NEG :\n                return com.google.javascript.rhino.Token.NEG;\n            case com.google.javascript.rhino.Token.NEW :\n                return com.google.javascript.rhino.Token.NEW;\n            case com.google.javascript.rhino.Token.DELPROP :\n                return com.google.javascript.rhino.Token.DELPROP;\n            case com.google.javascript.rhino.Token.TYPEOF :\n                return com.google.javascript.rhino.Token.TYPEOF;\n            case com.google.javascript.rhino.Token.GETPROP :\n                return com.google.javascript.rhino.Token.GETPROP;\n            case com.google.javascript.rhino.Token.SETPROP :\n                return com.google.javascript.rhino.Token.SETPROP;\n            case com.google.javascript.rhino.Token.GETELEM :\n                return com.google.javascript.rhino.Token.GETELEM;\n            case com.google.javascript.rhino.Token.SETELEM :\n                return com.google.javascript.rhino.Token.SETELEM;\n            case com.google.javascript.rhino.Token.CALL :\n                return com.google.javascript.rhino.Token.CALL;\n            case com.google.javascript.rhino.Token.NAME :\n                return com.google.javascript.rhino.Token.NAME;\n            case com.google.javascript.rhino.Token.NUMBER :\n                return com.google.javascript.rhino.Token.NUMBER;\n            case com.google.javascript.rhino.Token.STRING :\n                return com.google.javascript.rhino.Token.STRING;\n            case com.google.javascript.rhino.Token.NULL :\n                return com.google.javascript.rhino.Token.NULL;\n            case com.google.javascript.rhino.Token.THIS :\n                return com.google.javascript.rhino.Token.THIS;\n            case com.google.javascript.rhino.Token.FALSE :\n                return com.google.javascript.rhino.Token.FALSE;\n            case com.google.javascript.rhino.Token.TRUE :\n                return com.google.javascript.rhino.Token.TRUE;\n            case com.google.javascript.rhino.Token.SHEQ :\n                return com.google.javascript.rhino.Token.SHEQ;\n            case com.google.javascript.rhino.Token.SHNE :\n                return com.google.javascript.rhino.Token.SHNE;\n            case com.google.javascript.rhino.Token.REGEXP :\n                return com.google.javascript.rhino.Token.REGEXP;\n            case com.google.javascript.rhino.Token.BINDNAME :\n                return com.google.javascript.rhino.Token.BINDNAME;\n            case com.google.javascript.rhino.Token.THROW :\n                return com.google.javascript.rhino.Token.THROW;\n            case com.google.javascript.rhino.Token.RETHROW :\n                return com.google.javascript.rhino.Token.RETHROW;\n            case com.google.javascript.rhino.Token.IN :\n                return com.google.javascript.rhino.Token.IN;\n            case com.google.javascript.rhino.Token.INSTANCEOF :\n                return com.google.javascript.rhino.Token.INSTANCEOF;\n            case com.google.javascript.rhino.Token.LOCAL_LOAD :\n                return com.google.javascript.rhino.Token.LOCAL_LOAD;\n            case com.google.javascript.rhino.Token.GETVAR :\n                return com.google.javascript.rhino.Token.GETVAR;\n            case com.google.javascript.rhino.Token.SETVAR :\n                return com.google.javascript.rhino.Token.SETVAR;\n            case com.google.javascript.rhino.Token.CATCH_SCOPE :\n                return com.google.javascript.rhino.Token.CATCH_SCOPE;\n            case com.google.javascript.rhino.Token.ENUM_INIT_KEYS :\n                return com.google.javascript.rhino.Token.ENUM_INIT_KEYS;\n            case com.google.javascript.rhino.Token.ENUM_INIT_VALUES :\n                return com.google.javascript.rhino.Token.ENUM_INIT_VALUES;\n            case com.google.javascript.rhino.Token.ENUM_NEXT :\n                return com.google.javascript.rhino.Token.ENUM_NEXT;\n            case com.google.javascript.rhino.Token.ENUM_ID :\n                return com.google.javascript.rhino.Token.ENUM_ID;\n            case com.google.javascript.rhino.Token.THISFN :\n                return com.google.javascript.rhino.Token.THISFN;\n            case com.google.javascript.rhino.Token.RETURN_RESULT :\n                return com.google.javascript.rhino.Token.RETURN_RESULT;\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n                return com.google.javascript.rhino.Token.ARRAYLIT;\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n                return com.google.javascript.rhino.Token.OBJECTLIT;\n            case com.google.javascript.rhino.Token.GET_REF :\n                return com.google.javascript.rhino.Token.GET_REF;\n            case com.google.javascript.rhino.Token.SET_REF :\n                return com.google.javascript.rhino.Token.SET_REF;\n            case com.google.javascript.rhino.Token.DEL_REF :\n                return com.google.javascript.rhino.Token.DEL_REF;\n            case com.google.javascript.rhino.Token.REF_CALL :\n                return com.google.javascript.rhino.Token.REF_CALL;\n            case com.google.javascript.rhino.Token.REF_SPECIAL :\n                return com.google.javascript.rhino.Token.REF_SPECIAL;\n            case com.google.javascript.rhino.Token.DEFAULTNAMESPACE :\n                return com.google.javascript.rhino.Token.DEFAULTNAMESPACE;\n            case com.google.javascript.rhino.Token.ESCXMLTEXT :\n                return com.google.javascript.rhino.Token.ESCXMLTEXT;\n            case com.google.javascript.rhino.Token.ESCXMLATTR :\n                return com.google.javascript.rhino.Token.ESCXMLATTR;\n            case com.google.javascript.rhino.Token.REF_MEMBER :\n                return com.google.javascript.rhino.Token.REF_MEMBER;\n            case com.google.javascript.rhino.Token.REF_NS_MEMBER :\n                return com.google.javascript.rhino.Token.REF_NS_MEMBER;\n            case com.google.javascript.rhino.Token.REF_NAME :\n                return com.google.javascript.rhino.Token.REF_NAME;\n            case com.google.javascript.rhino.Token.REF_NS_NAME :\n                return com.google.javascript.rhino.Token.REF_NS_NAME;\n            case com.google.javascript.rhino.Token.TRY :\n                return com.google.javascript.rhino.Token.TRY;\n            case com.google.javascript.rhino.Token.SEMI :\n                return com.google.javascript.rhino.Token.SEMI;\n            case com.google.javascript.rhino.Token.LB :\n                return com.google.javascript.rhino.Token.LB;\n            case com.google.javascript.rhino.Token.RB :\n                return com.google.javascript.rhino.Token.RB;\n            case com.google.javascript.rhino.Token.LC :\n                return com.google.javascript.rhino.Token.LC;\n            case com.google.javascript.rhino.Token.RC :\n                return com.google.javascript.rhino.Token.RC;\n            case com.google.javascript.rhino.Token.LP :\n                return com.google.javascript.rhino.Token.LP;\n            case com.google.javascript.rhino.Token.RP :\n                return com.google.javascript.rhino.Token.RP;\n            case com.google.javascript.rhino.Token.COMMA :\n                return com.google.javascript.rhino.Token.COMMA;\n            case com.google.javascript.rhino.Token.ASSIGN :\n                return com.google.javascript.rhino.Token.ASSIGN;\n            case com.google.javascript.rhino.Token.ASSIGN_BITOR :\n                return com.google.javascript.rhino.Token.ASSIGN_BITOR;\n            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :\n                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;\n            case com.google.javascript.rhino.Token.ASSIGN_BITAND :\n                return com.google.javascript.rhino.Token.ASSIGN_BITAND;\n            case com.google.javascript.rhino.Token.ASSIGN_LSH :\n                return com.google.javascript.rhino.Token.ASSIGN_LSH;\n            case com.google.javascript.rhino.Token.ASSIGN_RSH :\n                return com.google.javascript.rhino.Token.ASSIGN_RSH;\n            case com.google.javascript.rhino.Token.ASSIGN_URSH :\n                return com.google.javascript.rhino.Token.ASSIGN_URSH;\n            case com.google.javascript.rhino.Token.ASSIGN_ADD :\n                return com.google.javascript.rhino.Token.ASSIGN_ADD;\n            case com.google.javascript.rhino.Token.ASSIGN_SUB :\n                return com.google.javascript.rhino.Token.ASSIGN_SUB;\n            case com.google.javascript.rhino.Token.ASSIGN_MUL :\n                return com.google.javascript.rhino.Token.ASSIGN_MUL;\n            case com.google.javascript.rhino.Token.ASSIGN_DIV :\n                return com.google.javascript.rhino.Token.ASSIGN_DIV;\n            case com.google.javascript.rhino.Token.ASSIGN_MOD :\n                return com.google.javascript.rhino.Token.ASSIGN_MOD;\n            case com.google.javascript.rhino.Token.HOOK :\n                return com.google.javascript.rhino.Token.HOOK;\n            case com.google.javascript.rhino.Token.COLON :\n                return com.google.javascript.rhino.Token.COLON;\n            case com.google.javascript.rhino.Token.OR :\n                return com.google.javascript.rhino.Token.OR;\n            case com.google.javascript.rhino.Token.AND :\n                return com.google.javascript.rhino.Token.AND;\n            case com.google.javascript.rhino.Token.INC :\n                return com.google.javascript.rhino.Token.INC;\n            case com.google.javascript.rhino.Token.DEC :\n                return com.google.javascript.rhino.Token.DEC;\n            case com.google.javascript.rhino.Token.DOT :\n                return com.google.javascript.rhino.Token.DOT;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                return com.google.javascript.rhino.Token.FUNCTION;\n            case com.google.javascript.rhino.Token.EXPORT :\n                return com.google.javascript.rhino.Token.EXPORT;\n            case com.google.javascript.rhino.Token.IMPORT :\n                return com.google.javascript.rhino.Token.IMPORT;\n            case com.google.javascript.rhino.Token.IF :\n                return com.google.javascript.rhino.Token.IF;\n            case com.google.javascript.rhino.Token.ELSE :\n                return com.google.javascript.rhino.Token.ELSE;\n            case com.google.javascript.rhino.Token.SWITCH :\n                return com.google.javascript.rhino.Token.SWITCH;\n            case com.google.javascript.rhino.Token.CASE :\n                return com.google.javascript.rhino.Token.CASE;\n            case com.google.javascript.rhino.Token.DEFAULT :\n                return com.google.javascript.rhino.Token.DEFAULT;\n            case com.google.javascript.rhino.Token.WHILE :\n                return com.google.javascript.rhino.Token.WHILE;\n            case com.google.javascript.rhino.Token.DO :\n                return com.google.javascript.rhino.Token.DO;\n            case com.google.javascript.rhino.Token.FOR :\n                return com.google.javascript.rhino.Token.FOR;\n            case com.google.javascript.rhino.Token.BREAK :\n                return com.google.javascript.rhino.Token.BREAK;\n            case com.google.javascript.rhino.Token.CONTINUE :\n                return com.google.javascript.rhino.Token.CONTINUE;\n            case com.google.javascript.rhino.Token.VAR :\n                return com.google.javascript.rhino.Token.VAR;\n            case com.google.javascript.rhino.Token.WITH :\n                return com.google.javascript.rhino.Token.WITH;\n            case com.google.javascript.rhino.Token.CATCH :\n                return com.google.javascript.rhino.Token.CATCH;\n            case com.google.javascript.rhino.Token.FINALLY :\n                return com.google.javascript.rhino.Token.FINALLY;\n            case com.google.javascript.rhino.Token.VOID :\n                return com.google.javascript.rhino.Token.VOID;\n            case com.google.javascript.rhino.Token.RESERVED :\n                return com.google.javascript.rhino.Token.RESERVED;\n            case com.google.javascript.rhino.Token.EMPTY :\n                return com.google.javascript.rhino.Token.EMPTY;\n            case com.google.javascript.rhino.Token.BLOCK :\n                return com.google.javascript.rhino.Token.BLOCK;\n            case com.google.javascript.rhino.Token.LABEL :\n                return com.google.javascript.rhino.Token.LABEL;\n            case com.google.javascript.rhino.Token.TARGET :\n                return com.google.javascript.rhino.Token.TARGET;\n            case com.google.javascript.rhino.Token.LOOP :\n                return com.google.javascript.rhino.Token.LOOP;\n            case com.google.javascript.rhino.Token.EXPR_VOID :\n            case com.google.javascript.rhino.Token.EXPR_RESULT :\n                return com.google.javascript.rhino.Token.EXPR_RESULT;\n            case com.google.javascript.rhino.Token.JSR :\n                return com.google.javascript.rhino.Token.JSR;\n            case com.google.javascript.rhino.Token.SCRIPT :\n                return com.google.javascript.rhino.Token.SCRIPT;\n            case com.google.javascript.rhino.Token.TYPEOFNAME :\n                return com.google.javascript.rhino.Token.TYPEOFNAME;\n            case com.google.javascript.rhino.Token.USE_STACK :\n                return com.google.javascript.rhino.Token.USE_STACK;\n            case com.google.javascript.rhino.Token.SETPROP_OP :\n                return com.google.javascript.rhino.Token.SETPROP_OP;\n            case com.google.javascript.rhino.Token.SETELEM_OP :\n                return com.google.javascript.rhino.Token.SETELEM_OP;\n            case com.google.javascript.rhino.Token.LOCAL_BLOCK :\n                return com.google.javascript.rhino.Token.LOCAL_BLOCK;\n            case com.google.javascript.rhino.Token.SET_REF_OP :\n                return com.google.javascript.rhino.Token.SET_REF_OP;\n            case com.google.javascript.rhino.Token.DOTDOT :\n                return com.google.javascript.rhino.Token.DOTDOT;\n            case com.google.javascript.rhino.Token.COLONCOLON :\n                return com.google.javascript.rhino.Token.COLONCOLON;\n            case com.google.javascript.rhino.Token.XML :\n                return com.google.javascript.rhino.Token.XML;\n            case com.google.javascript.rhino.Token.DOTQUERY :\n                return com.google.javascript.rhino.Token.DOTQUERY;\n            case com.google.javascript.rhino.Token.XMLATTR :\n                return com.google.javascript.rhino.Token.XMLATTR;\n            case com.google.javascript.rhino.Token.XMLEND :\n                return com.google.javascript.rhino.Token.XMLEND;\n            case com.google.javascript.rhino.Token.TO_OBJECT :\n                return com.google.javascript.rhino.Token.TO_OBJECT;\n            case com.google.javascript.rhino.Token.TO_DOUBLE :\n                return com.google.javascript.rhino.Token.TO_DOUBLE;\n            case com.google.javascript.rhino.Token.GET :\n                return com.google.javascript.rhino.Token.GET;\n            case com.google.javascript.rhino.Token.SET :\n                return com.google.javascript.rhino.Token.SET;\n            case com.google.javascript.rhino.Token.CONST :\n                return com.google.javascript.rhino.Token.CONST;\n            case com.google.javascript.rhino.Token.SETCONST :\n                return com.google.javascript.rhino.Token.SETCONST;\n            case com.google.javascript.rhino.Token.DEBUGGER :\n                return com.google.javascript.rhino.Token.DEBUGGER;\n        }\n        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type) {\n        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {\n        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {\n        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {\n        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {\n        return com.google.javascript.rhino.Node.newString(value).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {\n        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);\n    }\n\n    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {\n        return com.google.javascript.rhino.Node.newNumber(value).clonePropsFrom(templateNode);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)))",
            "src_parent": "{\n    ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)));\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    ret = transform(n);\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n}",
            "src_parent": "if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) {\n    ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)));\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n} else {\n    ret = transform(n);\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.common.base.Preconditions.checkState(ret.getType() == com.google.javascript.rhino.Token.STRING)",
            "src_parent": "{\n    com.google.javascript.rhino.Node ret;\n    if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.Name) {\n        ret = transformNameAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.Name) (n)));\n    } else if (n instanceof com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) {\n        ret = transformNumberAsString(((com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral) (n)));\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n    } else {\n        ret = transform(n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n    }\n    com.google.common.base.Preconditions.checkState(ret.getType() == com.google.javascript.rhino.Token.STRING);\n    return ret;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.google.common.base.Preconditions.checkState((ret.getType() == com.google.javascript.rhino.Token.NUMBER) || (ret.getType() == com.google.javascript.rhino.Token.STRING))",
            "src_parent": "{\n    ret = transform(n);\n    com.google.common.base.Preconditions.checkState((ret.getType() == com.google.javascript.rhino.Token.NUMBER) || (ret.getType() == com.google.javascript.rhino.Token.STRING));\n    if (ret.getType() == com.google.javascript.rhino.Token.STRING) {\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "ret = transform(n)",
            "dst_parent": "{\n    ret = transform(n);\n    com.google.common.base.Preconditions.checkState((ret.getType() == com.google.javascript.rhino.Token.NUMBER) || (ret.getType() == com.google.javascript.rhino.Token.STRING));\n    if (ret.getType() == com.google.javascript.rhino.Token.STRING) {\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "ret = transform(n)",
            "src_parent": "{\n    ret = transform(n);\n    ret.putBooleanProp(Node.QUOTED_PROP, true);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(ret.getType() == com.google.javascript.rhino.Token.STRING)",
            "dst_parent": "(ret.getType() == com.google.javascript.rhino.Token.NUMBER) || (ret.getType() == com.google.javascript.rhino.Token.STRING)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "ret.getType() == com.google.javascript.rhino.Token.STRING",
            "src_parent": "com.google.common.base.Preconditions.checkState(ret.getType() == com.google.javascript.rhino.Token.STRING)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "IRFactory"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c",
            "dst_parent": "c.getString()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "key",
            "src_parent": "com.google.javascript.jscomp.NodeUtil.isLatin(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c",
            "dst_parent": "c.getString()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "key",
            "src_parent": "com.google.javascript.rhino.TokenStream.isJSIdentifier(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c",
            "dst_parent": "c.getString()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "key",
            "src_parent": "com.google.javascript.rhino.TokenStream.isKeyword(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name))",
            "src_parent": "((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);\n    if (!java.lang.Double.isNaN(d)) {\n        cc.addNumber(d);\n    } else {\n        add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n    }\n}",
            "src_parent": "if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {\n    add(name);\n} else {\n    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);\n    if (!java.lang.Double.isNaN(d)) {\n        cc.addNumber(d);\n    } else {\n        add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING)",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);\n    java.lang.String key = c.getString();\n    if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {\n        add(key);\n    } else {\n        double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);\n        if (!java.lang.Double.isNaN(d)) {\n            cc.addNumber(d);\n        } else {\n            addExpr(c, 1);\n        }\n    }\n    add(\":\");\n    addExpr(c.getFirstChild(), 1);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.String key = c.getString()",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);\n    java.lang.String key = c.getString();\n    if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {\n        add(key);\n    } else {\n        double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);\n        if (!java.lang.Double.isNaN(d)) {\n            cc.addNumber(d);\n        } else {\n            addExpr(c, 1);\n        }\n    }\n    add(\":\");\n    addExpr(c.getFirstChild(), 1);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "key",
            "src_parent": "add(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);\n    if (!java.lang.Double.isNaN(d)) {\n        cc.addNumber(d);\n    } else {\n        addExpr(c, 1);\n    }\n}",
            "src_parent": "if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {\n    add(key);\n} else {\n    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);\n    if (!java.lang.Double.isNaN(d)) {\n        cc.addNumber(d);\n    } else {\n        addExpr(c, 1);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static boolean isSimpleNumber(java.lang.String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n        char c = s.charAt(index);\n        if ((c < '0') || (c > '9')) {\n            return false;\n        }\n    }\n    return len > 0;\n}",
            "src_parent": "class CodeGenerator {\n    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n\n    private final com.google.javascript.jscomp.CodeConsumer cc;\n\n    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;\n\n    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {\n        cc = consumer;\n        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {\n            this.outputCharsetEncoder = null;\n        } else {\n            this.outputCharsetEncoder = outputCharset.newEncoder();\n        }\n    }\n\n    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {\n        this(consumer, null);\n    }\n\n    public void tagAsStrict() {\n        add(\"'use strict';\");\n    }\n\n    void add(java.lang.String str) {\n        cc.add(str);\n    }\n\n    private void addIdentifier(java.lang.String identifier) {\n        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));\n    }\n\n    void add(com.google.javascript.rhino.Node n) {\n        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {\n        if (!cc.continueProcessing()) {\n            return;\n        }\n        int type = n.getType();\n        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);\n        int childCount = n.getChildCount();\n        com.google.javascript.rhino.Node first = n.getFirstChild();\n        com.google.javascript.rhino.Node last = n.getLastChild();\n        if ((opstr != null) && (first != last)) {\n            com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount);\n            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);\n            addLeftExpr(first, p, context);\n            cc.addOp(opstr, true);\n            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);\n            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {\n                addExpr(last, p, rhsContext);\n            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n                addExpr(last, p, rhsContext);\n            } else {\n                addExpr(last, p + 1, rhsContext);\n            }\n            return;\n        }\n        cc.startSourceMapping(n);\n        switch (type) {\n            case com.google.javascript.rhino.Token.TRY :\n                {\n                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));\n                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));\n                    add(\"try\");\n                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();\n                    if (catchblock != null) {\n                        add(catchblock);\n                    }\n                    if (childCount == 3) {\n                        add(\"finally\");\n                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.CATCH :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"catch(\");\n                add(first);\n                add(\")\");\n                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                break;\n            case com.google.javascript.rhino.Token.THROW :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(\"throw\");\n                add(first);\n                cc.endStatement(true);\n                break;\n            case com.google.javascript.rhino.Token.RETURN :\n                add(\"return\");\n                if (childCount == 1) {\n                    add(first);\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 0);\n                }\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.VAR :\n                if (first != null) {\n                    add(\"var \");\n                    addList(first, false, getContextForNoInOperator(context));\n                }\n                break;\n            case com.google.javascript.rhino.Token.LABEL_NAME :\n                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());\n                addIdentifier(n.getString());\n                break;\n            case com.google.javascript.rhino.Token.NAME :\n                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {\n                    addIdentifier(n.getString());\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    addIdentifier(n.getString());\n                    cc.addOp(\"=\", true);\n                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {\n                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(Token.ASSIGN));\n                    } else {\n                        addExpr(first, 0, getContextForNoInOperator(context));\n                    }\n                }\n                break;\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n                add(\"[\");\n                addArrayList(first);\n                add(\"]\");\n                break;\n            case com.google.javascript.rhino.Token.LP :\n                add(\"(\");\n                addList(first);\n                add(\")\");\n                break;\n            case com.google.javascript.rhino.Token.COMMA :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                addList(first, false, context);\n                break;\n            case com.google.javascript.rhino.Token.NUMBER :\n                com.google.common.base.Preconditions.checkState(childCount == ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0));\n                cc.addNumber(n.getDouble());\n                break;\n            case com.google.javascript.rhino.Token.TYPEOF :\n            case com.google.javascript.rhino.Token.VOID :\n            case com.google.javascript.rhino.Token.NOT :\n            case com.google.javascript.rhino.Token.BITNOT :\n            case com.google.javascript.rhino.Token.POS :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);\n                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));\n                    break;\n                }\n            case com.google.javascript.rhino.Token.NEG :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {\n                        cc.addNumber(-n.getFirstChild().getDouble());\n                    } else {\n                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);\n                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.HOOK :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 3);\n                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);\n                    addLeftExpr(first, p + 1, context);\n                    cc.addOp(\"?\", true);\n                    addExpr(first.getNext(), 1);\n                    cc.addOp(\":\", true);\n                    addExpr(last, 1);\n                    break;\n                }\n            case com.google.javascript.rhino.Token.REGEXP :\n                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {\n                    throw new java.lang.Error(\"Expected children to be strings\");\n                }\n                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);\n                if (childCount == 2) {\n                    add(regexp + last.getString());\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    add(regexp);\n                }\n                break;\n            case com.google.javascript.rhino.Token.GET_REF :\n                add(first);\n                break;\n            case com.google.javascript.rhino.Token.REF_SPECIAL :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(first);\n                add(\".\");\n                add(((java.lang.String) (n.getProp(Node.NAME_PROP))));\n                break;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                if (n.getClass() != com.google.javascript.rhino.Node.class) {\n                    throw new java.lang.Error(\"Unexpected Node subclass.\");\n                }\n                com.google.common.base.Preconditions.checkState(childCount == 3);\n                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;\n                if (funcNeedsParens) {\n                    add(\"(\");\n                }\n                add(\"function\");\n                add(first);\n                add(first.getNext());\n                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                if (funcNeedsParens) {\n                    add(\")\");\n                }\n                break;\n            case com.google.javascript.rhino.Token.GET :\n            case com.google.javascript.rhino.Token.SET :\n                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);\n                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n                if (type == com.google.javascript.rhino.Token.GET) {\n                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n                    add(\"get \");\n                } else {\n                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n                    add(\"set \");\n                }\n                java.lang.String name = n.getString();\n                com.google.javascript.rhino.Node fn = first;\n                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);\n                com.google.javascript.rhino.Node body = fn.getLastChild();\n                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {\n                    add(name);\n                } else {\n                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);\n                    if (!java.lang.Double.isNaN(d)) {\n                        cc.addNumber(d);\n                    } else {\n                        add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n                    }\n                }\n                add(parameters);\n                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                break;\n            case com.google.javascript.rhino.Token.SCRIPT :\n            case com.google.javascript.rhino.Token.BLOCK :\n                {\n                    if (n.getClass() != com.google.javascript.rhino.Node.class) {\n                        throw new java.lang.Error(\"Unexpected Node subclass.\");\n                    }\n                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;\n                    if (preserveBlock) {\n                        cc.beginBlock();\n                    }\n                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));\n                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {\n                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {\n                            cc.endStatement();\n                        }\n                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {\n                            cc.maybeLineBreak();\n                        }\n                        if (preferLineBreaks) {\n                            cc.notePreferredLineBreak();\n                        }\n                    }\n                    if (preserveBlock) {\n                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.FOR :\n                if (childCount == 4) {\n                    add(\"for(\");\n                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {\n                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);\n                    } else {\n                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);\n                    }\n                    add(\";\");\n                    add(first.getNext());\n                    add(\";\");\n                    add(first.getNext().getNext());\n                    add(\")\");\n                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 3);\n                    add(\"for(\");\n                    add(first);\n                    add(\"in\");\n                    add(first.getNext());\n                    add(\")\");\n                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                }\n                break;\n            case com.google.javascript.rhino.Token.DO :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"do\");\n                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);\n                add(\"while(\");\n                add(last);\n                add(\")\");\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.WHILE :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"while(\");\n                add(first);\n                add(\")\");\n                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                break;\n            case com.google.javascript.rhino.Token.EMPTY :\n                com.google.common.base.Preconditions.checkState(childCount == 0);\n                break;\n            case com.google.javascript.rhino.Token.GETPROP :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, \"Bad GETPROP: RHS should be STRING\");\n                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;\n                    if (needsParens) {\n                        add(\"(\");\n                    }\n                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                    if (needsParens) {\n                        add(\")\");\n                    }\n                    add(\".\");\n                    addIdentifier(last.getString());\n                    break;\n                }\n            case com.google.javascript.rhino.Token.GETELEM :\n                com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount);\n                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                add(\"[\");\n                add(first.getNext());\n                add(\"]\");\n                break;\n            case com.google.javascript.rhino.Token.WITH :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"with(\");\n                add(first);\n                add(\")\");\n                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                break;\n            case com.google.javascript.rhino.Token.INC :\n            case com.google.javascript.rhino.Token.DEC :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? \"++\" : \"--\";\n                    int postProp = n.getIntProp(Node.INCRDECR_PROP);\n                    if (postProp != 0) {\n                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                        cc.addOp(o, false);\n                    } else {\n                        cc.addOp(o, false);\n                        add(first);\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.CALL :\n                if (isIndirectEval(first) || (n.getBooleanProp(Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {\n                    add(\"(0,\");\n                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(Token.COMMA));\n                    add(\")\");\n                } else {\n                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                }\n                add(\"(\");\n                addList(first.getNext());\n                add(\")\");\n                break;\n            case com.google.javascript.rhino.Token.IF :\n                boolean hasElse = childCount == 3;\n                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);\n                if (ambiguousElseClause) {\n                    cc.beginBlock();\n                }\n                add(\"if(\");\n                add(first);\n                add(\")\");\n                if (hasElse) {\n                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);\n                    add(\"else\");\n                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                } else {\n                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);\n                    com.google.common.base.Preconditions.checkState(childCount == 2);\n                }\n                if (ambiguousElseClause) {\n                    cc.endBlock();\n                }\n                break;\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.THIS :\n            case com.google.javascript.rhino.Token.FALSE :\n            case com.google.javascript.rhino.Token.TRUE :\n                com.google.common.base.Preconditions.checkState(childCount == 0);\n                add(com.google.javascript.rhino.Node.tokenToName(type));\n                break;\n            case com.google.javascript.rhino.Token.CONTINUE :\n                com.google.common.base.Preconditions.checkState(childCount <= 1);\n                add(\"continue\");\n                if (childCount == 1) {\n                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {\n                        throw new java.lang.Error(\"Unexpected token type. Should be LABEL_NAME.\");\n                    }\n                    add(\" \");\n                    add(first);\n                }\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.DEBUGGER :\n                com.google.common.base.Preconditions.checkState(childCount == 0);\n                add(\"debugger\");\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.BREAK :\n                com.google.common.base.Preconditions.checkState(childCount <= 1);\n                add(\"break\");\n                if (childCount == 1) {\n                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {\n                        throw new java.lang.Error(\"Unexpected token type. Should be LABEL_NAME.\");\n                    }\n                    add(\" \");\n                    add(first);\n                }\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.EXPR_VOID :\n                throw new java.lang.Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n            case com.google.javascript.rhino.Token.EXPR_RESULT :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.NEW :\n                add(\"new \");\n                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);\n                if (com.google.javascript.jscomp.NodeUtil.containsType(first, Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {\n                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;\n                }\n                addExpr(first, precedence);\n                com.google.javascript.rhino.Node next = first.getNext();\n                if (next != null) {\n                    add(\"(\");\n                    addList(next);\n                    add(\")\");\n                }\n                break;\n            case com.google.javascript.rhino.Token.STRING :\n                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {\n                    throw new java.lang.IllegalStateException(\"Unexpected String children: \" + n.getParent().toStringTree());\n                }\n                add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n                break;\n            case com.google.javascript.rhino.Token.DELPROP :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(\"delete \");\n                add(first);\n                break;\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n                {\n                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;\n                    if (needsParens) {\n                        add(\"(\");\n                    }\n                    add(\"{\");\n                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {\n                        if (c != first) {\n                            cc.listSeparator();\n                        }\n                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {\n                            add(c);\n                        } else {\n                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);\n                            java.lang.String key = c.getString();\n                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {\n                                add(key);\n                            } else {\n                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);\n                                if (!java.lang.Double.isNaN(d)) {\n                                    cc.addNumber(d);\n                                } else {\n                                    addExpr(c, 1);\n                                }\n                            }\n                            add(\":\");\n                            addExpr(c.getFirstChild(), 1);\n                        }\n                    }\n                    add(\"}\");\n                    if (needsParens) {\n                        add(\")\");\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.SWITCH :\n                add(\"switch(\");\n                add(first);\n                add(\")\");\n                cc.beginBlock();\n                addAllSiblings(first.getNext());\n                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                break;\n            case com.google.javascript.rhino.Token.CASE :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"case \");\n                add(first);\n                addCaseBody(last);\n                break;\n            case com.google.javascript.rhino.Token.DEFAULT :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(\"default\");\n                addCaseBody(first);\n                break;\n            case com.google.javascript.rhino.Token.LABEL :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {\n                    throw new java.lang.Error(\"Unexpected token type. Should be LABEL_NAME.\");\n                }\n                add(first);\n                add(\":\");\n                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);\n                break;\n            case com.google.javascript.rhino.Token.SETNAME :\n                break;\n            default :\n                throw new java.lang.Error(((\"Unknown type \" + type) + \"\\n\") + n.toStringTree());\n        }\n        cc.endSourceMapping(n);\n    }\n\n    static boolean isSimpleNumber(java.lang.String s) {\n        int len = s.length();\n        for (int index = 0; index < len; index++) {\n            char c = s.charAt(index);\n            if ((c < '0') || (c > '9')) {\n                return false;\n            }\n        }\n        return len > 0;\n    }\n\n    static double getSimpleNumber(java.lang.String s) {\n        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {\n            long l = java.lang.Long.parseLong(s);\n            if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n                return l;\n            }\n        }\n        return java.lang.Double.NaN;\n    }\n\n    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {\n        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && \"eval\".equals(n.getString())) && (!n.getBooleanProp(Node.DIRECT_EVAL));\n    }\n\n    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {\n        com.google.javascript.rhino.Node nodeToProcess = n;\n        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {\n            throw new java.lang.Error(\"Missing BLOCK child.\");\n        }\n        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {\n            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);\n            if (count == 0) {\n                if (cc.shouldPreserveExtraBlocks()) {\n                    cc.beginBlock();\n                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));\n                } else {\n                    cc.endStatement(true);\n                }\n                return;\n            }\n            if (count == 1) {\n                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);\n                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();\n                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {\n                    cc.beginBlock();\n                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                    cc.maybeLineBreak();\n                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));\n                    return;\n                } else {\n                    nodeToProcess = firstAndOnlyChild;\n                }\n            }\n            if (count > 1) {\n                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;\n            }\n        }\n        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {\n            cc.endStatement(true);\n        } else {\n            add(nodeToProcess, context);\n            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {\n                cc.endStatement();\n            }\n        }\n    }\n\n    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {\n        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {\n            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();\n            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {\n                return isOneExactlyFunctionOrDo(labeledStatement);\n            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {\n                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));\n            } else {\n                return false;\n            }\n        } else {\n            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);\n        }\n    }\n\n    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {\n        addExpr(n, minPrecedence, context);\n    }\n\n    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {\n        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {\n        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {\n            add(\"(\");\n            add(n, clearContextForNoInOperator(context));\n            add(\")\");\n        } else {\n            add(n, context);\n        }\n    }\n\n    void addList(com.google.javascript.rhino.Node firstInList) {\n        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {\n        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {\n        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {\n            boolean isFirst = n == firstInList;\n            if (isFirst) {\n                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n            } else {\n                cc.listSeparator();\n                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);\n            }\n        }\n    }\n\n    void addArrayList(com.google.javascript.rhino.Node firstInList) {\n        boolean lastWasEmpty = false;\n        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {\n            if (n != firstInList) {\n                cc.listSeparator();\n            }\n            addExpr(n, 1);\n            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;\n        }\n        if (lastWasEmpty) {\n            cc.listSeparator();\n        }\n    }\n\n    void addCaseBody(com.google.javascript.rhino.Node caseBody) {\n        cc.beginCaseBody();\n        add(caseBody);\n        cc.endCaseBody();\n    }\n\n    void addAllSiblings(com.google.javascript.rhino.Node n) {\n        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {\n            add(c);\n        }\n    }\n\n    static java.lang.String jsString(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {\n        int singleq = 0;\n        int doubleq = 0;\n        for (int i = 0; i < s.length(); i++) {\n            switch (s.charAt(i)) {\n                case '\"' :\n                    doubleq++;\n                    break;\n                case '\\'' :\n                    singleq++;\n                    break;\n            }\n        }\n        java.lang.String doublequote;\n        java.lang.String singlequote;\n        char quote;\n        if (singleq < doubleq) {\n            quote = '\\'';\n            doublequote = \"\\\"\";\n            singlequote = \"\\\\\\'\";\n        } else {\n            quote = '\\\"';\n            doublequote = \"\\\\\\\"\";\n            singlequote = \"\\'\";\n        }\n        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\", outputCharsetEncoder);\n    }\n\n    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {\n        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);\n    }\n\n    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {\n        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '\"', \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);\n    }\n\n    static java.lang.String regexpEscape(java.lang.String s) {\n        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);\n    }\n\n    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);\n        sb.append(quote);\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            switch (c) {\n                case '\\u0000' :\n                    sb.append(\"\\\\0\");\n                    break;\n                case '\\n' :\n                    sb.append(\"\\\\n\");\n                    break;\n                case '\\r' :\n                    sb.append(\"\\\\r\");\n                    break;\n                case '\\t' :\n                    sb.append(\"\\\\t\");\n                    break;\n                case '\\\\' :\n                    sb.append(backslashEscape);\n                    break;\n                case '\\\"' :\n                    sb.append(doublequoteEscape);\n                    break;\n                case '\\'' :\n                    sb.append(singlequoteEscape);\n                    break;\n                case '>' :\n                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {\n                        sb.append(\"\\\\>\");\n                    } else {\n                        sb.append(c);\n                    }\n                    break;\n                case '<' :\n                    final java.lang.String END_SCRIPT = \"/script\";\n                    final java.lang.String START_COMMENT = \"!--\";\n                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                        sb.append(\"<\\\\\");\n                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                        sb.append(\"<\\\\\");\n                    } else {\n                        sb.append(c);\n                    }\n                    break;\n                default :\n                    if (outputCharsetEncoder != null) {\n                        if (outputCharsetEncoder.canEncode(c)) {\n                            sb.append(c);\n                        } else {\n                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);\n                        }\n                    } else if ((c > 0x1f) && (c <= 0x7f)) {\n                        sb.append(c);\n                    } else {\n                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);\n                    }\n            }\n        }\n        sb.append(quote);\n        return sb.toString();\n    }\n\n    static java.lang.String identifierEscape(java.lang.String s) {\n        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {\n            return s;\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if ((c > 0x1f) && (c < 0x7f)) {\n                sb.append(c);\n            } else {\n                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {\n        int i = 0;\n        com.google.javascript.rhino.Node c = n.getFirstChild();\n        for (; (c != null) && (i < maxCount); c = c.getNext()) {\n            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {\n                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);\n            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {\n                i++;\n            }\n        }\n        return i;\n    }\n\n    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {\n        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {\n                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);\n                if (result != null) {\n                    return result;\n                }\n            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    enum Context {\n\n        STATEMENT,\n        BEFORE_DANGLING_ELSE,\n        START_OF_EXPR,\n        PRESERVE_BLOCK,\n        IN_FOR_INIT_CLAUSE,\n        OTHER;}\n\n    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {\n        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;\n    }\n\n    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {\n        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;\n    }\n\n    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {\n        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;\n    }\n\n    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {\n        try {\n            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);\n        } catch (java.io.IOException ex) {\n            throw new java.lang.RuntimeException(ex);\n        }\n    }\n\n    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {\n        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {\n            char[] surrogates = java.lang.Character.toChars(codePoint);\n            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);\n            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);\n            return;\n        }\n        out.append(\"\\\\u\").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static double getSimpleNumber(java.lang.String s) {\n    if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {\n        long l = java.lang.Long.parseLong(s);\n        if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n            return l;\n        }\n    }\n    return java.lang.Double.NaN;\n}",
            "src_parent": "class CodeGenerator {\n    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n\n    private final com.google.javascript.jscomp.CodeConsumer cc;\n\n    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;\n\n    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {\n        cc = consumer;\n        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {\n            this.outputCharsetEncoder = null;\n        } else {\n            this.outputCharsetEncoder = outputCharset.newEncoder();\n        }\n    }\n\n    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {\n        this(consumer, null);\n    }\n\n    public void tagAsStrict() {\n        add(\"'use strict';\");\n    }\n\n    void add(java.lang.String str) {\n        cc.add(str);\n    }\n\n    private void addIdentifier(java.lang.String identifier) {\n        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));\n    }\n\n    void add(com.google.javascript.rhino.Node n) {\n        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {\n        if (!cc.continueProcessing()) {\n            return;\n        }\n        int type = n.getType();\n        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);\n        int childCount = n.getChildCount();\n        com.google.javascript.rhino.Node first = n.getFirstChild();\n        com.google.javascript.rhino.Node last = n.getLastChild();\n        if ((opstr != null) && (first != last)) {\n            com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount);\n            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);\n            addLeftExpr(first, p, context);\n            cc.addOp(opstr, true);\n            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);\n            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {\n                addExpr(last, p, rhsContext);\n            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {\n                addExpr(last, p, rhsContext);\n            } else {\n                addExpr(last, p + 1, rhsContext);\n            }\n            return;\n        }\n        cc.startSourceMapping(n);\n        switch (type) {\n            case com.google.javascript.rhino.Token.TRY :\n                {\n                    com.google.common.base.Preconditions.checkState((first.getNext().getType() == com.google.javascript.rhino.Token.BLOCK) && (!first.getNext().hasMoreThanOneChild()));\n                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));\n                    add(\"try\");\n                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();\n                    if (catchblock != null) {\n                        add(catchblock);\n                    }\n                    if (childCount == 3) {\n                        add(\"finally\");\n                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.CATCH :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"catch(\");\n                add(first);\n                add(\")\");\n                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                break;\n            case com.google.javascript.rhino.Token.THROW :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(\"throw\");\n                add(first);\n                cc.endStatement(true);\n                break;\n            case com.google.javascript.rhino.Token.RETURN :\n                add(\"return\");\n                if (childCount == 1) {\n                    add(first);\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 0);\n                }\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.VAR :\n                if (first != null) {\n                    add(\"var \");\n                    addList(first, false, getContextForNoInOperator(context));\n                }\n                break;\n            case com.google.javascript.rhino.Token.LABEL_NAME :\n                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());\n                addIdentifier(n.getString());\n                break;\n            case com.google.javascript.rhino.Token.NAME :\n                if ((first == null) || (first.getType() == com.google.javascript.rhino.Token.EMPTY)) {\n                    addIdentifier(n.getString());\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    addIdentifier(n.getString());\n                    cc.addOp(\"=\", true);\n                    if (first.getType() == com.google.javascript.rhino.Token.COMMA) {\n                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(Token.ASSIGN));\n                    } else {\n                        addExpr(first, 0, getContextForNoInOperator(context));\n                    }\n                }\n                break;\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n                add(\"[\");\n                addArrayList(first);\n                add(\"]\");\n                break;\n            case com.google.javascript.rhino.Token.LP :\n                add(\"(\");\n                addList(first);\n                add(\")\");\n                break;\n            case com.google.javascript.rhino.Token.COMMA :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                addList(first, false, context);\n                break;\n            case com.google.javascript.rhino.Token.NUMBER :\n                com.google.common.base.Preconditions.checkState(childCount == ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0));\n                cc.addNumber(n.getDouble());\n                break;\n            case com.google.javascript.rhino.Token.TYPEOF :\n            case com.google.javascript.rhino.Token.VOID :\n            case com.google.javascript.rhino.Token.NOT :\n            case com.google.javascript.rhino.Token.BITNOT :\n            case com.google.javascript.rhino.Token.POS :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);\n                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));\n                    break;\n                }\n            case com.google.javascript.rhino.Token.NEG :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    if (n.getFirstChild().getType() == com.google.javascript.rhino.Token.NUMBER) {\n                        cc.addNumber(-n.getFirstChild().getDouble());\n                    } else {\n                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);\n                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type));\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.HOOK :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 3);\n                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);\n                    addLeftExpr(first, p + 1, context);\n                    cc.addOp(\"?\", true);\n                    addExpr(first.getNext(), 1);\n                    cc.addOp(\":\", true);\n                    addExpr(last, 1);\n                    break;\n                }\n            case com.google.javascript.rhino.Token.REGEXP :\n                if ((first.getType() != com.google.javascript.rhino.Token.STRING) || (last.getType() != com.google.javascript.rhino.Token.STRING)) {\n                    throw new java.lang.Error(\"Expected children to be strings\");\n                }\n                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);\n                if (childCount == 2) {\n                    add(regexp + last.getString());\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    add(regexp);\n                }\n                break;\n            case com.google.javascript.rhino.Token.GET_REF :\n                add(first);\n                break;\n            case com.google.javascript.rhino.Token.REF_SPECIAL :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(first);\n                add(\".\");\n                add(((java.lang.String) (n.getProp(Node.NAME_PROP))));\n                break;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                if (n.getClass() != com.google.javascript.rhino.Node.class) {\n                    throw new java.lang.Error(\"Unexpected Node subclass.\");\n                }\n                com.google.common.base.Preconditions.checkState(childCount == 3);\n                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;\n                if (funcNeedsParens) {\n                    add(\"(\");\n                }\n                add(\"function\");\n                add(first);\n                add(first.getNext());\n                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                if (funcNeedsParens) {\n                    add(\")\");\n                }\n                break;\n            case com.google.javascript.rhino.Token.GET :\n            case com.google.javascript.rhino.Token.SET :\n                com.google.common.base.Preconditions.checkState(n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                com.google.common.base.Preconditions.checkState(first.getType() == com.google.javascript.rhino.Token.FUNCTION);\n                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n                if (type == com.google.javascript.rhino.Token.GET) {\n                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n                    add(\"get \");\n                } else {\n                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n                    add(\"set \");\n                }\n                java.lang.String name = n.getString();\n                com.google.javascript.rhino.Node fn = first;\n                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);\n                com.google.javascript.rhino.Node body = fn.getLastChild();\n                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {\n                    add(name);\n                } else {\n                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);\n                    if (!java.lang.Double.isNaN(d)) {\n                        cc.addNumber(d);\n                    } else {\n                        add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n                    }\n                }\n                add(parameters);\n                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);\n                break;\n            case com.google.javascript.rhino.Token.SCRIPT :\n            case com.google.javascript.rhino.Token.BLOCK :\n                {\n                    if (n.getClass() != com.google.javascript.rhino.Node.class) {\n                        throw new java.lang.Error(\"Unexpected Node subclass.\");\n                    }\n                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;\n                    if (preserveBlock) {\n                        cc.beginBlock();\n                    }\n                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && (n.getParent().getType() == com.google.javascript.rhino.Token.SCRIPT));\n                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {\n                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                        if (c.getType() == com.google.javascript.rhino.Token.VAR) {\n                            cc.endStatement();\n                        }\n                        if (c.getType() == com.google.javascript.rhino.Token.FUNCTION) {\n                            cc.maybeLineBreak();\n                        }\n                        if (preferLineBreaks) {\n                            cc.notePreferredLineBreak();\n                        }\n                    }\n                    if (preserveBlock) {\n                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.FOR :\n                if (childCount == 4) {\n                    add(\"for(\");\n                    if (first.getType() == com.google.javascript.rhino.Token.VAR) {\n                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);\n                    } else {\n                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);\n                    }\n                    add(\";\");\n                    add(first.getNext());\n                    add(\";\");\n                    add(first.getNext().getNext());\n                    add(\")\");\n                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                } else {\n                    com.google.common.base.Preconditions.checkState(childCount == 3);\n                    add(\"for(\");\n                    add(first);\n                    add(\"in\");\n                    add(first.getNext());\n                    add(\")\");\n                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                }\n                break;\n            case com.google.javascript.rhino.Token.DO :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"do\");\n                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);\n                add(\"while(\");\n                add(last);\n                add(\")\");\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.WHILE :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"while(\");\n                add(first);\n                add(\")\");\n                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                break;\n            case com.google.javascript.rhino.Token.EMPTY :\n                com.google.common.base.Preconditions.checkState(childCount == 0);\n                break;\n            case com.google.javascript.rhino.Token.GETPROP :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n                    com.google.common.base.Preconditions.checkState(last.getType() == com.google.javascript.rhino.Token.STRING, \"Bad GETPROP: RHS should be STRING\");\n                    boolean needsParens = first.getType() == com.google.javascript.rhino.Token.NUMBER;\n                    if (needsParens) {\n                        add(\"(\");\n                    }\n                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                    if (needsParens) {\n                        add(\")\");\n                    }\n                    add(\".\");\n                    addIdentifier(last.getString());\n                    break;\n                }\n            case com.google.javascript.rhino.Token.GETELEM :\n                com.google.common.base.Preconditions.checkState(childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount);\n                addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                add(\"[\");\n                add(first.getNext());\n                add(\"]\");\n                break;\n            case com.google.javascript.rhino.Token.WITH :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"with(\");\n                add(first);\n                add(\")\");\n                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                break;\n            case com.google.javascript.rhino.Token.INC :\n            case com.google.javascript.rhino.Token.DEC :\n                {\n                    com.google.common.base.Preconditions.checkState(childCount == 1);\n                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? \"++\" : \"--\";\n                    int postProp = n.getIntProp(Node.INCRDECR_PROP);\n                    if (postProp != 0) {\n                        addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                        cc.addOp(o, false);\n                    } else {\n                        cc.addOp(o, false);\n                        add(first);\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.CALL :\n                if (isIndirectEval(first) || (n.getBooleanProp(Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {\n                    add(\"(0,\");\n                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(Token.COMMA));\n                    add(\")\");\n                } else {\n                    addLeftExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);\n                }\n                add(\"(\");\n                addList(first.getNext());\n                add(\")\");\n                break;\n            case com.google.javascript.rhino.Token.IF :\n                boolean hasElse = childCount == 3;\n                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);\n                if (ambiguousElseClause) {\n                    cc.beginBlock();\n                }\n                add(\"if(\");\n                add(first);\n                add(\")\");\n                if (hasElse) {\n                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);\n                    add(\"else\");\n                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);\n                } else {\n                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);\n                    com.google.common.base.Preconditions.checkState(childCount == 2);\n                }\n                if (ambiguousElseClause) {\n                    cc.endBlock();\n                }\n                break;\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.THIS :\n            case com.google.javascript.rhino.Token.FALSE :\n            case com.google.javascript.rhino.Token.TRUE :\n                com.google.common.base.Preconditions.checkState(childCount == 0);\n                add(com.google.javascript.rhino.Node.tokenToName(type));\n                break;\n            case com.google.javascript.rhino.Token.CONTINUE :\n                com.google.common.base.Preconditions.checkState(childCount <= 1);\n                add(\"continue\");\n                if (childCount == 1) {\n                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {\n                        throw new java.lang.Error(\"Unexpected token type. Should be LABEL_NAME.\");\n                    }\n                    add(\" \");\n                    add(first);\n                }\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.DEBUGGER :\n                com.google.common.base.Preconditions.checkState(childCount == 0);\n                add(\"debugger\");\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.BREAK :\n                com.google.common.base.Preconditions.checkState(childCount <= 1);\n                add(\"break\");\n                if (childCount == 1) {\n                    if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {\n                        throw new java.lang.Error(\"Unexpected token type. Should be LABEL_NAME.\");\n                    }\n                    add(\" \");\n                    add(first);\n                }\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.EXPR_VOID :\n                throw new java.lang.Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n            case com.google.javascript.rhino.Token.EXPR_RESULT :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);\n                cc.endStatement();\n                break;\n            case com.google.javascript.rhino.Token.NEW :\n                add(\"new \");\n                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);\n                if (com.google.javascript.jscomp.NodeUtil.containsType(first, Token.CALL, new com.google.javascript.jscomp.NodeUtil.MatchNotFunction())) {\n                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;\n                }\n                addExpr(first, precedence);\n                com.google.javascript.rhino.Node next = first.getNext();\n                if (next != null) {\n                    add(\"(\");\n                    addList(next);\n                    add(\")\");\n                }\n                break;\n            case com.google.javascript.rhino.Token.STRING :\n                if (childCount != ((n.getParent() != null) && (n.getParent().getType() == com.google.javascript.rhino.Token.OBJECTLIT) ? 1 : 0)) {\n                    throw new java.lang.IllegalStateException(\"Unexpected String children: \" + n.getParent().toStringTree());\n                }\n                add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n                break;\n            case com.google.javascript.rhino.Token.DELPROP :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(\"delete \");\n                add(first);\n                break;\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n                {\n                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;\n                    if (needsParens) {\n                        add(\"(\");\n                    }\n                    add(\"{\");\n                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {\n                        if (c != first) {\n                            cc.listSeparator();\n                        }\n                        if ((c.getType() == com.google.javascript.rhino.Token.GET) || (c.getType() == com.google.javascript.rhino.Token.SET)) {\n                            add(c);\n                        } else {\n                            com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING);\n                            java.lang.String key = c.getString();\n                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {\n                                add(key);\n                            } else {\n                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);\n                                if (!java.lang.Double.isNaN(d)) {\n                                    cc.addNumber(d);\n                                } else {\n                                    addExpr(c, 1);\n                                }\n                            }\n                            add(\":\");\n                            addExpr(c.getFirstChild(), 1);\n                        }\n                    }\n                    add(\"}\");\n                    if (needsParens) {\n                        add(\")\");\n                    }\n                    break;\n                }\n            case com.google.javascript.rhino.Token.SWITCH :\n                add(\"switch(\");\n                add(first);\n                add(\")\");\n                cc.beginBlock();\n                addAllSiblings(first.getNext());\n                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                break;\n            case com.google.javascript.rhino.Token.CASE :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                add(\"case \");\n                add(first);\n                addCaseBody(last);\n                break;\n            case com.google.javascript.rhino.Token.DEFAULT :\n                com.google.common.base.Preconditions.checkState(childCount == 1);\n                add(\"default\");\n                addCaseBody(first);\n                break;\n            case com.google.javascript.rhino.Token.LABEL :\n                com.google.common.base.Preconditions.checkState(childCount == 2);\n                if (first.getType() != com.google.javascript.rhino.Token.LABEL_NAME) {\n                    throw new java.lang.Error(\"Unexpected token type. Should be LABEL_NAME.\");\n                }\n                add(first);\n                add(\":\");\n                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);\n                break;\n            case com.google.javascript.rhino.Token.SETNAME :\n                break;\n            default :\n                throw new java.lang.Error(((\"Unknown type \" + type) + \"\\n\") + n.toStringTree());\n        }\n        cc.endSourceMapping(n);\n    }\n\n    static boolean isSimpleNumber(java.lang.String s) {\n        int len = s.length();\n        for (int index = 0; index < len; index++) {\n            char c = s.charAt(index);\n            if ((c < '0') || (c > '9')) {\n                return false;\n            }\n        }\n        return len > 0;\n    }\n\n    static double getSimpleNumber(java.lang.String s) {\n        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {\n            long l = java.lang.Long.parseLong(s);\n            if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n                return l;\n            }\n        }\n        return java.lang.Double.NaN;\n    }\n\n    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {\n        return ((n.getType() == com.google.javascript.rhino.Token.NAME) && \"eval\".equals(n.getString())) && (!n.getBooleanProp(Node.DIRECT_EVAL));\n    }\n\n    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {\n        com.google.javascript.rhino.Node nodeToProcess = n;\n        if ((!allowNonBlockChild) && (n.getType() != com.google.javascript.rhino.Token.BLOCK)) {\n            throw new java.lang.Error(\"Missing BLOCK child.\");\n        }\n        if (n.getType() == com.google.javascript.rhino.Token.BLOCK) {\n            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);\n            if (count == 0) {\n                if (cc.shouldPreserveExtraBlocks()) {\n                    cc.beginBlock();\n                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));\n                } else {\n                    cc.endStatement(true);\n                }\n                return;\n            }\n            if (count == 1) {\n                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);\n                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();\n                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {\n                    cc.beginBlock();\n                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);\n                    cc.maybeLineBreak();\n                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));\n                    return;\n                } else {\n                    nodeToProcess = firstAndOnlyChild;\n                }\n            }\n            if (count > 1) {\n                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;\n            }\n        }\n        if (nodeToProcess.getType() == com.google.javascript.rhino.Token.EMPTY) {\n            cc.endStatement(true);\n        } else {\n            add(nodeToProcess, context);\n            if (nodeToProcess.getType() == com.google.javascript.rhino.Token.VAR) {\n                cc.endStatement();\n            }\n        }\n    }\n\n    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {\n        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {\n            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();\n            if (labeledStatement.getType() != com.google.javascript.rhino.Token.BLOCK) {\n                return isOneExactlyFunctionOrDo(labeledStatement);\n            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {\n                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));\n            } else {\n                return false;\n            }\n        } else {\n            return (n.getType() == com.google.javascript.rhino.Token.FUNCTION) || (n.getType() == com.google.javascript.rhino.Token.DO);\n        }\n    }\n\n    void addLeftExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {\n        addExpr(n, minPrecedence, context);\n    }\n\n    void addExpr(com.google.javascript.rhino.Node n, int minPrecedence) {\n        addExpr(n, minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {\n        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && (n.getType() == com.google.javascript.rhino.Token.IN))) {\n            add(\"(\");\n            add(n, clearContextForNoInOperator(context));\n            add(\")\");\n        } else {\n            add(n, context);\n        }\n    }\n\n    void addList(com.google.javascript.rhino.Node firstInList) {\n        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {\n        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);\n    }\n\n    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {\n        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {\n            boolean isFirst = n == firstInList;\n            if (isFirst) {\n                addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);\n            } else {\n                cc.listSeparator();\n                addExpr(n, isArrayOrFunctionArgument ? 1 : 0);\n            }\n        }\n    }\n\n    void addArrayList(com.google.javascript.rhino.Node firstInList) {\n        boolean lastWasEmpty = false;\n        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {\n            if (n != firstInList) {\n                cc.listSeparator();\n            }\n            addExpr(n, 1);\n            lastWasEmpty = n.getType() == com.google.javascript.rhino.Token.EMPTY;\n        }\n        if (lastWasEmpty) {\n            cc.listSeparator();\n        }\n    }\n\n    void addCaseBody(com.google.javascript.rhino.Node caseBody) {\n        cc.beginCaseBody();\n        add(caseBody);\n        cc.endCaseBody();\n    }\n\n    void addAllSiblings(com.google.javascript.rhino.Node n) {\n        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {\n            add(c);\n        }\n    }\n\n    static java.lang.String jsString(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {\n        int singleq = 0;\n        int doubleq = 0;\n        for (int i = 0; i < s.length(); i++) {\n            switch (s.charAt(i)) {\n                case '\"' :\n                    doubleq++;\n                    break;\n                case '\\'' :\n                    singleq++;\n                    break;\n            }\n        }\n        java.lang.String doublequote;\n        java.lang.String singlequote;\n        char quote;\n        if (singleq < doubleq) {\n            quote = '\\'';\n            doublequote = \"\\\"\";\n            singlequote = \"\\\\\\'\";\n        } else {\n            quote = '\\\"';\n            doublequote = \"\\\\\\\"\";\n            singlequote = \"\\'\";\n        }\n        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\", outputCharsetEncoder);\n    }\n\n    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {\n        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);\n    }\n\n    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {\n        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '\"', \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);\n    }\n\n    static java.lang.String regexpEscape(java.lang.String s) {\n        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);\n    }\n\n    static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder) {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);\n        sb.append(quote);\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            switch (c) {\n                case '\\u0000' :\n                    sb.append(\"\\\\0\");\n                    break;\n                case '\\n' :\n                    sb.append(\"\\\\n\");\n                    break;\n                case '\\r' :\n                    sb.append(\"\\\\r\");\n                    break;\n                case '\\t' :\n                    sb.append(\"\\\\t\");\n                    break;\n                case '\\\\' :\n                    sb.append(backslashEscape);\n                    break;\n                case '\\\"' :\n                    sb.append(doublequoteEscape);\n                    break;\n                case '\\'' :\n                    sb.append(singlequoteEscape);\n                    break;\n                case '>' :\n                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {\n                        sb.append(\"\\\\>\");\n                    } else {\n                        sb.append(c);\n                    }\n                    break;\n                case '<' :\n                    final java.lang.String END_SCRIPT = \"/script\";\n                    final java.lang.String START_COMMENT = \"!--\";\n                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                        sb.append(\"<\\\\\");\n                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                        sb.append(\"<\\\\\");\n                    } else {\n                        sb.append(c);\n                    }\n                    break;\n                default :\n                    if (outputCharsetEncoder != null) {\n                        if (outputCharsetEncoder.canEncode(c)) {\n                            sb.append(c);\n                        } else {\n                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);\n                        }\n                    } else if ((c > 0x1f) && (c <= 0x7f)) {\n                        sb.append(c);\n                    } else {\n                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);\n                    }\n            }\n        }\n        sb.append(quote);\n        return sb.toString();\n    }\n\n    static java.lang.String identifierEscape(java.lang.String s) {\n        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {\n            return s;\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if ((c > 0x1f) && (c < 0x7f)) {\n                sb.append(c);\n            } else {\n                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {\n        int i = 0;\n        com.google.javascript.rhino.Node c = n.getFirstChild();\n        for (; (c != null) && (i < maxCount); c = c.getNext()) {\n            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {\n                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);\n            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {\n                i++;\n            }\n        }\n        return i;\n    }\n\n    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {\n        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (c.getType() == com.google.javascript.rhino.Token.BLOCK) {\n                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);\n                if (result != null) {\n                    return result;\n                }\n            } else if (c.getType() != com.google.javascript.rhino.Token.EMPTY) {\n                return c;\n            }\n        }\n        return null;\n    }\n\n    enum Context {\n\n        STATEMENT,\n        BEFORE_DANGLING_ELSE,\n        START_OF_EXPR,\n        PRESERVE_BLOCK,\n        IN_FOR_INIT_CLAUSE,\n        OTHER;}\n\n    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {\n        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;\n    }\n\n    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {\n        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;\n    }\n\n    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {\n        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;\n    }\n\n    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {\n        try {\n            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);\n        } catch (java.io.IOException ex) {\n            throw new java.lang.RuntimeException(ex);\n        }\n    }\n\n    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {\n        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {\n            char[] surrogates = java.lang.Character.toChars(codePoint);\n            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);\n            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);\n            return;\n        }\n        out.append(\"\\\\u\").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "c.getString()",
            "src_parent": "com.google.javascript.jscomp.NodeUtil.isLatin(c.getString())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "((c.getType() == com.google.javascript.rhino.Token.STRING) && (!c.isQuotedString()))",
            "src_parent": "(((c.getType() == com.google.javascript.rhino.Token.STRING) && (!c.isQuotedString())) && (!com.google.javascript.rhino.TokenStream.isKeyword(c.getString())))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "c.getString()",
            "src_parent": "com.google.javascript.rhino.TokenStream.isJSIdentifier(c.getString())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "c.getString()",
            "src_parent": "com.google.javascript.rhino.TokenStream.isKeyword(c.getString())",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n}",
            "dst_parent": "if (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {\n    add(name);\n} else {\n    add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n}",
            "src_parent": "if (!java.lang.Double.isNaN(d)) {\n    cc.addNumber(d);\n} else {\n    add(com.google.javascript.jscomp.CodeGenerator.jsString(n.getString(), outputCharsetEncoder));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Break",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.javascript.rhino.TokenStream.isJSIdentifier(name)",
            "dst_parent": "com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && com.google.javascript.jscomp.NodeUtil.isLatin(name)",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "com.google.javascript.rhino.TokenStream.isJSIdentifier(name)",
            "src_parent": "((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name))",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    addExpr(c, 1);\n}",
            "dst_parent": "if (((((c.getType() == com.google.javascript.rhino.Token.STRING) && (!c.isQuotedString())) && (!com.google.javascript.rhino.TokenStream.isKeyword(c.getString()))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(c.getString())) && com.google.javascript.jscomp.NodeUtil.isLatin(c.getString())) {\n    add(c.getString());\n} else {\n    addExpr(c, 1);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    addExpr(c, 1);\n}",
            "src_parent": "if (!java.lang.Double.isNaN(d)) {\n    cc.addNumber(d);\n} else {\n    addExpr(c, 1);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c.getString()",
            "dst_parent": "add(c.getString())",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "c.getString()",
            "src_parent": "java.lang.String key = c.getString()",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c",
            "dst_parent": "c.getString()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "key",
            "src_parent": "com.google.javascript.jscomp.NodeUtil.isLatin(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(c.getType() == com.google.javascript.rhino.Token.STRING)",
            "dst_parent": "((c.getType() == com.google.javascript.rhino.Token.STRING) && (!c.isQuotedString()))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "c.getType() == com.google.javascript.rhino.Token.STRING",
            "src_parent": "com.google.common.base.Preconditions.checkState(c.getType() == com.google.javascript.rhino.Token.STRING)",
            "src_parent_type": "Invocation",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(!c.isQuotedString())",
            "dst_parent": "((c.getType() == com.google.javascript.rhino.Token.STRING) && (!c.isQuotedString()))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "(!c.isQuotedString())",
            "src_parent": "((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key)))",
            "src_parent_type": "BinaryOperator",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c",
            "dst_parent": "c.getString()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "key",
            "src_parent": "com.google.javascript.rhino.TokenStream.isJSIdentifier(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "c",
            "dst_parent": "c.getString()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "key",
            "src_parent": "com.google.javascript.rhino.TokenStream.isKeyword(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "CodeGenerator"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.rhino.TokenStream.isJSIdentifier(child.getString())",
            "src_parent": "if (com.google.javascript.rhino.TokenStream.isJSIdentifier(child.getString())) {\n    markObjLitPropertyCandidate(child, t.getInput());\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.rhino.TokenStream.isJSIdentifier(key.getString())",
            "src_parent": "if (com.google.javascript.rhino.TokenStream.isJSIdentifier(key.getString())) {\n    markPrototypePropertyCandidate(key, input);\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "child.getType() != com.google.javascript.rhino.Token.NUMBER",
            "src_parent": "if (child.getType() != com.google.javascript.rhino.Token.NUMBER) {\n    markObjLitPropertyCandidate(child, t.getInput());\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "key.getType() != com.google.javascript.rhino.Token.NUMBER",
            "src_parent": "if (key.getType() != com.google.javascript.rhino.Token.NUMBER) {\n    markPrototypePropertyCandidate(key, input);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "child",
            "dst_parent": "child.getType()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "child",
            "src_parent": "child.getString()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "key",
            "dst_parent": "key.getType()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "key",
            "src_parent": "key.getString()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "RenamePrototypes"
    }
  ],
  "id": "Closure_157"
}