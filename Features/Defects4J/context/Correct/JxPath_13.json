{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "uri",
            "dst_parent": "uri = pointer.getNamespaceURI(prefix)",
            "dst_parent_type": "Assignment",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "currentPointer",
            "src_parent": "currentPointer = pointer.getParent()",
            "src_parent_type": "Assignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent.getNamespaceURI(prefix)",
            "dst_parent": "return parent.getNamespaceURI(prefix)",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "parent.getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent": "(prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.jxpath.ri.model.NodeIterator",
            "dst_parent": "org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "pointer.namespaceIterator()",
            "dst_parent": "org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent": "java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent.getPrefix(namespaceURI)",
            "dst_parent": "return parent.getPrefix(namespaceURI)",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "parent.getExternallyRegisteredNamespaceURI(prefix)",
            "src_parent": "(uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "prefix",
            "dst_parent": "parent.getNamespaceURI(prefix)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "namespaceURI",
            "src_parent": "parent.getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "namespaceURI",
            "dst_parent": "parent.getPrefix(namespaceURI)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "prefix",
            "src_parent": "parent.getExternallyRegisteredNamespaceURI(prefix)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "prefix",
            "dst_parent": "reverseMap.put(uri, prefix)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "namespaceURI",
            "src_parent": "uri.equals(namespaceURI)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected static java.lang.String getPrefix(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.String namespaceURI) {\n    org.apache.commons.jxpath.ri.model.NodePointer currentPointer = pointer;\n    while (currentPointer != null) {\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = currentPointer.namespaceIterator();\n        for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n            org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n            java.lang.String uri = nsPointer.getNamespaceURI();\n            if (uri.equals(namespaceURI)) {\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    return prefix;\n                }\n            }\n        }\n        currentPointer = pointer.getParent();\n    } \n    return null;\n}",
            "src_parent": "public class NamespaceResolver implements java.lang.Cloneable {\n    protected final org.apache.commons.jxpath.ri.NamespaceResolver parent;\n\n    protected java.util.HashMap namespaceMap = new java.util.HashMap();\n\n    protected java.util.HashMap reverseMap;\n\n    protected org.apache.commons.jxpath.ri.model.NodePointer pointer;\n\n    private boolean sealed;\n\n    protected static java.lang.String getPrefix(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.String namespaceURI) {\n        org.apache.commons.jxpath.ri.model.NodePointer currentPointer = pointer;\n        while (currentPointer != null) {\n            org.apache.commons.jxpath.ri.model.NodeIterator ni = currentPointer.namespaceIterator();\n            for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                if (uri.equals(namespaceURI)) {\n                    java.lang.String prefix = nsPointer.getName().getName();\n                    if (!\"\".equals(prefix)) {\n                        return prefix;\n                    }\n                }\n            }\n            currentPointer = pointer.getParent();\n        } \n        return null;\n    }\n\n    public NamespaceResolver() {\n        this(null);\n    }\n\n    public NamespaceResolver(org.apache.commons.jxpath.ri.NamespaceResolver parent) {\n        this.parent = parent;\n    }\n\n    public synchronized void registerNamespace(java.lang.String prefix, java.lang.String namespaceURI) {\n        if (isSealed()) {\n            throw new java.lang.IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n        }\n        namespaceMap.put(prefix, namespaceURI);\n        reverseMap = null;\n    }\n\n    public void setNamespaceContextPointer(org.apache.commons.jxpath.ri.model.NodePointer pointer) {\n        this.pointer = pointer;\n    }\n\n    public org.apache.commons.jxpath.Pointer getNamespaceContextPointer() {\n        if ((pointer == null) && (parent != null)) {\n            return parent.getNamespaceContextPointer();\n        }\n        return pointer;\n    }\n\n    public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n        return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n        return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n    }\n\n    public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n        java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI);\n        return (prefix == null) && (pointer != null) ? org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(pointer, namespaceURI) : prefix;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredPrefix(java.lang.String namespaceURI) {\n        if (reverseMap == null) {\n            reverseMap = new java.util.HashMap();\n            java.util.Iterator it = namespaceMap.entrySet().iterator();\n            while (it.hasNext()) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                reverseMap.put(entry.getValue(), entry.getKey());\n            } \n        }\n        java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n        return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n    }\n\n    public boolean isSealed() {\n        return sealed;\n    }\n\n    public void seal() {\n        sealed = true;\n        if (parent != null) {\n            parent.seal();\n        }\n    }\n\n    public java.lang.Object clone() {\n        try {\n            org.apache.commons.jxpath.ri.NamespaceResolver result = ((org.apache.commons.jxpath.ri.NamespaceResolver) (super.clone()));\n            result.sealed = false;\n            return result;\n        } catch (java.lang.CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri",
            "src_parent": "return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri",
            "src_parent_type": "Return",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(ni != null) && ni.setPosition(position)",
            "src_parent": "for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n    org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n    java.lang.String uri = nsPointer.getNamespaceURI();\n    if (uri.equals(namespaceURI)) {\n        java.lang.String prefix = nsPointer.getName().getName();\n        if (!\"\".equals(prefix)) {\n            return prefix;\n        }\n    }\n}",
            "src_parent_type": "For",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "uri.equals(namespaceURI)",
            "src_parent": "if (uri.equals(namespaceURI)) {\n    java.lang.String prefix = nsPointer.getName().getName();\n    if (!\"\".equals(prefix)) {\n        return prefix;\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    java.lang.String prefix = nsPointer.getName().getName();\n    if (!\"\".equals(prefix)) {\n        return prefix;\n    }\n}",
            "src_parent": "if (uri.equals(namespaceURI)) {\n    java.lang.String prefix = nsPointer.getName().getName();\n    if (!\"\".equals(prefix)) {\n        return prefix;\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n    return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n}",
            "src_parent": "public class NamespaceResolver implements java.lang.Cloneable {\n    protected final org.apache.commons.jxpath.ri.NamespaceResolver parent;\n\n    protected java.util.HashMap namespaceMap = new java.util.HashMap();\n\n    protected java.util.HashMap reverseMap;\n\n    protected org.apache.commons.jxpath.ri.model.NodePointer pointer;\n\n    private boolean sealed;\n\n    protected static java.lang.String getPrefix(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.String namespaceURI) {\n        org.apache.commons.jxpath.ri.model.NodePointer currentPointer = pointer;\n        while (currentPointer != null) {\n            org.apache.commons.jxpath.ri.model.NodeIterator ni = currentPointer.namespaceIterator();\n            for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                if (uri.equals(namespaceURI)) {\n                    java.lang.String prefix = nsPointer.getName().getName();\n                    if (!\"\".equals(prefix)) {\n                        return prefix;\n                    }\n                }\n            }\n            currentPointer = pointer.getParent();\n        } \n        return null;\n    }\n\n    public NamespaceResolver() {\n        this(null);\n    }\n\n    public NamespaceResolver(org.apache.commons.jxpath.ri.NamespaceResolver parent) {\n        this.parent = parent;\n    }\n\n    public synchronized void registerNamespace(java.lang.String prefix, java.lang.String namespaceURI) {\n        if (isSealed()) {\n            throw new java.lang.IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n        }\n        namespaceMap.put(prefix, namespaceURI);\n        reverseMap = null;\n    }\n\n    public void setNamespaceContextPointer(org.apache.commons.jxpath.ri.model.NodePointer pointer) {\n        this.pointer = pointer;\n    }\n\n    public org.apache.commons.jxpath.Pointer getNamespaceContextPointer() {\n        if ((pointer == null) && (parent != null)) {\n            return parent.getNamespaceContextPointer();\n        }\n        return pointer;\n    }\n\n    public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n        return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n        return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n    }\n\n    public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n        java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI);\n        return (prefix == null) && (pointer != null) ? org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(pointer, namespaceURI) : prefix;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredPrefix(java.lang.String namespaceURI) {\n        if (reverseMap == null) {\n            reverseMap = new java.util.HashMap();\n            java.util.Iterator it = namespaceMap.entrySet().iterator();\n            while (it.hasNext()) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                reverseMap.put(entry.getValue(), entry.getKey());\n            } \n        }\n        java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n        return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n    }\n\n    public boolean isSealed() {\n        return sealed;\n    }\n\n    public void seal() {\n        sealed = true;\n        if (parent != null) {\n            parent.seal();\n        }\n    }\n\n    public java.lang.Object clone() {\n        try {\n            org.apache.commons.jxpath.ri.NamespaceResolver result = ((org.apache.commons.jxpath.ri.NamespaceResolver) (super.clone()));\n            result.sealed = false;\n            return result;\n        } catch (java.lang.CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n}",
            "src_parent": "public class NamespaceResolver implements java.lang.Cloneable {\n    protected final org.apache.commons.jxpath.ri.NamespaceResolver parent;\n\n    protected java.util.HashMap namespaceMap = new java.util.HashMap();\n\n    protected java.util.HashMap reverseMap;\n\n    protected org.apache.commons.jxpath.ri.model.NodePointer pointer;\n\n    private boolean sealed;\n\n    protected static java.lang.String getPrefix(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.String namespaceURI) {\n        org.apache.commons.jxpath.ri.model.NodePointer currentPointer = pointer;\n        while (currentPointer != null) {\n            org.apache.commons.jxpath.ri.model.NodeIterator ni = currentPointer.namespaceIterator();\n            for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                if (uri.equals(namespaceURI)) {\n                    java.lang.String prefix = nsPointer.getName().getName();\n                    if (!\"\".equals(prefix)) {\n                        return prefix;\n                    }\n                }\n            }\n            currentPointer = pointer.getParent();\n        } \n        return null;\n    }\n\n    public NamespaceResolver() {\n        this(null);\n    }\n\n    public NamespaceResolver(org.apache.commons.jxpath.ri.NamespaceResolver parent) {\n        this.parent = parent;\n    }\n\n    public synchronized void registerNamespace(java.lang.String prefix, java.lang.String namespaceURI) {\n        if (isSealed()) {\n            throw new java.lang.IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n        }\n        namespaceMap.put(prefix, namespaceURI);\n        reverseMap = null;\n    }\n\n    public void setNamespaceContextPointer(org.apache.commons.jxpath.ri.model.NodePointer pointer) {\n        this.pointer = pointer;\n    }\n\n    public org.apache.commons.jxpath.Pointer getNamespaceContextPointer() {\n        if ((pointer == null) && (parent != null)) {\n            return parent.getNamespaceContextPointer();\n        }\n        return pointer;\n    }\n\n    public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n        return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n        return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n    }\n\n    public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n        java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI);\n        return (prefix == null) && (pointer != null) ? org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(pointer, namespaceURI) : prefix;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredPrefix(java.lang.String namespaceURI) {\n        if (reverseMap == null) {\n            reverseMap = new java.util.HashMap();\n            java.util.Iterator it = namespaceMap.entrySet().iterator();\n            while (it.hasNext()) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                reverseMap.put(entry.getValue(), entry.getKey());\n            } \n        }\n        java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n        return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n    }\n\n    public boolean isSealed() {\n        return sealed;\n    }\n\n    public void seal() {\n        sealed = true;\n        if (parent != null) {\n            parent.seal();\n        }\n    }\n\n    public java.lang.Object clone() {\n        try {\n            org.apache.commons.jxpath.ri.NamespaceResolver result = ((org.apache.commons.jxpath.ri.NamespaceResolver) (super.clone()));\n            result.sealed = false;\n            return result;\n        } catch (java.lang.CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n    java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI);\n    return (prefix == null) && (pointer != null) ? org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(pointer, namespaceURI) : prefix;\n}",
            "src_parent": "public class NamespaceResolver implements java.lang.Cloneable {\n    protected final org.apache.commons.jxpath.ri.NamespaceResolver parent;\n\n    protected java.util.HashMap namespaceMap = new java.util.HashMap();\n\n    protected java.util.HashMap reverseMap;\n\n    protected org.apache.commons.jxpath.ri.model.NodePointer pointer;\n\n    private boolean sealed;\n\n    protected static java.lang.String getPrefix(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.String namespaceURI) {\n        org.apache.commons.jxpath.ri.model.NodePointer currentPointer = pointer;\n        while (currentPointer != null) {\n            org.apache.commons.jxpath.ri.model.NodeIterator ni = currentPointer.namespaceIterator();\n            for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                if (uri.equals(namespaceURI)) {\n                    java.lang.String prefix = nsPointer.getName().getName();\n                    if (!\"\".equals(prefix)) {\n                        return prefix;\n                    }\n                }\n            }\n            currentPointer = pointer.getParent();\n        } \n        return null;\n    }\n\n    public NamespaceResolver() {\n        this(null);\n    }\n\n    public NamespaceResolver(org.apache.commons.jxpath.ri.NamespaceResolver parent) {\n        this.parent = parent;\n    }\n\n    public synchronized void registerNamespace(java.lang.String prefix, java.lang.String namespaceURI) {\n        if (isSealed()) {\n            throw new java.lang.IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n        }\n        namespaceMap.put(prefix, namespaceURI);\n        reverseMap = null;\n    }\n\n    public void setNamespaceContextPointer(org.apache.commons.jxpath.ri.model.NodePointer pointer) {\n        this.pointer = pointer;\n    }\n\n    public org.apache.commons.jxpath.Pointer getNamespaceContextPointer() {\n        if ((pointer == null) && (parent != null)) {\n            return parent.getNamespaceContextPointer();\n        }\n        return pointer;\n    }\n\n    public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n        return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n        return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n    }\n\n    public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n        java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI);\n        return (prefix == null) && (pointer != null) ? org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(pointer, namespaceURI) : prefix;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredPrefix(java.lang.String namespaceURI) {\n        if (reverseMap == null) {\n            reverseMap = new java.util.HashMap();\n            java.util.Iterator it = namespaceMap.entrySet().iterator();\n            while (it.hasNext()) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                reverseMap.put(entry.getValue(), entry.getKey());\n            } \n        }\n        java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n        return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n    }\n\n    public boolean isSealed() {\n        return sealed;\n    }\n\n    public void seal() {\n        sealed = true;\n        if (parent != null) {\n            parent.seal();\n        }\n    }\n\n    public java.lang.Object clone() {\n        try {\n            org.apache.commons.jxpath.ri.NamespaceResolver result = ((org.apache.commons.jxpath.ri.NamespaceResolver) (super.clone()));\n            result.sealed = false;\n            return result;\n        } catch (java.lang.CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected synchronized java.lang.String getExternallyRegisteredPrefix(java.lang.String namespaceURI) {\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n}",
            "src_parent": "public class NamespaceResolver implements java.lang.Cloneable {\n    protected final org.apache.commons.jxpath.ri.NamespaceResolver parent;\n\n    protected java.util.HashMap namespaceMap = new java.util.HashMap();\n\n    protected java.util.HashMap reverseMap;\n\n    protected org.apache.commons.jxpath.ri.model.NodePointer pointer;\n\n    private boolean sealed;\n\n    protected static java.lang.String getPrefix(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.String namespaceURI) {\n        org.apache.commons.jxpath.ri.model.NodePointer currentPointer = pointer;\n        while (currentPointer != null) {\n            org.apache.commons.jxpath.ri.model.NodeIterator ni = currentPointer.namespaceIterator();\n            for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                if (uri.equals(namespaceURI)) {\n                    java.lang.String prefix = nsPointer.getName().getName();\n                    if (!\"\".equals(prefix)) {\n                        return prefix;\n                    }\n                }\n            }\n            currentPointer = pointer.getParent();\n        } \n        return null;\n    }\n\n    public NamespaceResolver() {\n        this(null);\n    }\n\n    public NamespaceResolver(org.apache.commons.jxpath.ri.NamespaceResolver parent) {\n        this.parent = parent;\n    }\n\n    public synchronized void registerNamespace(java.lang.String prefix, java.lang.String namespaceURI) {\n        if (isSealed()) {\n            throw new java.lang.IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n        }\n        namespaceMap.put(prefix, namespaceURI);\n        reverseMap = null;\n    }\n\n    public void setNamespaceContextPointer(org.apache.commons.jxpath.ri.model.NodePointer pointer) {\n        this.pointer = pointer;\n    }\n\n    public org.apache.commons.jxpath.Pointer getNamespaceContextPointer() {\n        if ((pointer == null) && (parent != null)) {\n            return parent.getNamespaceContextPointer();\n        }\n        return pointer;\n    }\n\n    public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n        return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n        return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n    }\n\n    public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n        java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI);\n        return (prefix == null) && (pointer != null) ? org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(pointer, namespaceURI) : prefix;\n    }\n\n    protected synchronized java.lang.String getExternallyRegisteredPrefix(java.lang.String namespaceURI) {\n        if (reverseMap == null) {\n            reverseMap = new java.util.HashMap();\n            java.util.Iterator it = namespaceMap.entrySet().iterator();\n            while (it.hasNext()) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                reverseMap.put(entry.getValue(), entry.getKey());\n            } \n        }\n        java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n        return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n    }\n\n    public boolean isSealed() {\n        return sealed;\n    }\n\n    public void seal() {\n        sealed = true;\n        if (parent != null) {\n            parent.seal();\n        }\n    }\n\n    public java.lang.Object clone() {\n        try {\n            org.apache.commons.jxpath.ri.NamespaceResolver result = ((org.apache.commons.jxpath.ri.NamespaceResolver) (super.clone()));\n            result.sealed = false;\n            return result;\n        } catch (java.lang.CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    if ((uri == null) && (pointer != null)) {\n        uri = pointer.getNamespaceURI(prefix);\n    }\n    if ((uri == null) && (parent != null)) {\n        return parent.getNamespaceURI(prefix);\n    }\n    return uri;\n}",
            "src_parent": "public class NamespaceResolver implements java.lang.Cloneable {\n    protected final org.apache.commons.jxpath.ri.NamespaceResolver parent;\n\n    protected java.util.HashMap namespaceMap = new java.util.HashMap();\n\n    protected java.util.HashMap reverseMap;\n\n    protected org.apache.commons.jxpath.ri.model.NodePointer pointer;\n\n    private boolean sealed;\n\n    public NamespaceResolver() {\n        this(null);\n    }\n\n    public NamespaceResolver(org.apache.commons.jxpath.ri.NamespaceResolver parent) {\n        this.parent = parent;\n    }\n\n    public synchronized void registerNamespace(java.lang.String prefix, java.lang.String namespaceURI) {\n        if (isSealed()) {\n            throw new java.lang.IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n        }\n        namespaceMap.put(prefix, namespaceURI);\n        reverseMap = null;\n    }\n\n    public void setNamespaceContextPointer(org.apache.commons.jxpath.ri.model.NodePointer pointer) {\n        this.pointer = pointer;\n    }\n\n    public org.apache.commons.jxpath.Pointer getNamespaceContextPointer() {\n        if ((pointer == null) && (parent != null)) {\n            return parent.getNamespaceContextPointer();\n        }\n        return pointer;\n    }\n\n    public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n        if ((uri == null) && (pointer != null)) {\n            uri = pointer.getNamespaceURI(prefix);\n        }\n        if ((uri == null) && (parent != null)) {\n            return parent.getNamespaceURI(prefix);\n        }\n        return uri;\n    }\n\n    public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n        if (reverseMap == null) {\n            reverseMap = new java.util.HashMap();\n            org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n            if (ni != null) {\n                for (int position = 1; ni.setPosition(position); position++) {\n                    org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                    java.lang.String uri = nsPointer.getNamespaceURI();\n                    java.lang.String prefix = nsPointer.getName().getName();\n                    if (!\"\".equals(prefix)) {\n                        reverseMap.put(uri, prefix);\n                    }\n                }\n            }\n            java.util.Iterator it = namespaceMap.entrySet().iterator();\n            while (it.hasNext()) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                reverseMap.put(entry.getValue(), entry.getKey());\n            } \n        }\n        java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n        if ((prefix == null) && (parent != null)) {\n            return parent.getPrefix(namespaceURI);\n        }\n        return prefix;\n    }\n\n    public boolean isSealed() {\n        return sealed;\n    }\n\n    public void seal() {\n        sealed = true;\n        if (parent != null) {\n            parent.seal();\n        }\n    }\n\n    public java.lang.Object clone() {\n        try {\n            org.apache.commons.jxpath.ri.NamespaceResolver result = ((org.apache.commons.jxpath.ri.NamespaceResolver) (super.clone()));\n            result.sealed = false;\n            return result;\n        } catch (java.lang.CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n        if (ni != null) {\n            for (int position = 1; ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    reverseMap.put(uri, prefix);\n                }\n            }\n        }\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    if ((prefix == null) && (parent != null)) {\n        return parent.getPrefix(namespaceURI);\n    }\n    return prefix;\n}",
            "src_parent": "public class NamespaceResolver implements java.lang.Cloneable {\n    protected final org.apache.commons.jxpath.ri.NamespaceResolver parent;\n\n    protected java.util.HashMap namespaceMap = new java.util.HashMap();\n\n    protected java.util.HashMap reverseMap;\n\n    protected org.apache.commons.jxpath.ri.model.NodePointer pointer;\n\n    private boolean sealed;\n\n    public NamespaceResolver() {\n        this(null);\n    }\n\n    public NamespaceResolver(org.apache.commons.jxpath.ri.NamespaceResolver parent) {\n        this.parent = parent;\n    }\n\n    public synchronized void registerNamespace(java.lang.String prefix, java.lang.String namespaceURI) {\n        if (isSealed()) {\n            throw new java.lang.IllegalStateException(\"Cannot register namespaces on a sealed NamespaceResolver\");\n        }\n        namespaceMap.put(prefix, namespaceURI);\n        reverseMap = null;\n    }\n\n    public void setNamespaceContextPointer(org.apache.commons.jxpath.ri.model.NodePointer pointer) {\n        this.pointer = pointer;\n    }\n\n    public org.apache.commons.jxpath.Pointer getNamespaceContextPointer() {\n        if ((pointer == null) && (parent != null)) {\n            return parent.getNamespaceContextPointer();\n        }\n        return pointer;\n    }\n\n    public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n        java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n        if ((uri == null) && (pointer != null)) {\n            uri = pointer.getNamespaceURI(prefix);\n        }\n        if ((uri == null) && (parent != null)) {\n            return parent.getNamespaceURI(prefix);\n        }\n        return uri;\n    }\n\n    public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n        if (reverseMap == null) {\n            reverseMap = new java.util.HashMap();\n            org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n            if (ni != null) {\n                for (int position = 1; ni.setPosition(position); position++) {\n                    org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                    java.lang.String uri = nsPointer.getNamespaceURI();\n                    java.lang.String prefix = nsPointer.getName().getName();\n                    if (!\"\".equals(prefix)) {\n                        reverseMap.put(uri, prefix);\n                    }\n                }\n            }\n            java.util.Iterator it = namespaceMap.entrySet().iterator();\n            while (it.hasNext()) {\n                java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n                reverseMap.put(entry.getValue(), entry.getKey());\n            } \n        }\n        java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n        if ((prefix == null) && (parent != null)) {\n            return parent.getPrefix(namespaceURI);\n        }\n        return prefix;\n    }\n\n    public boolean isSealed() {\n        return sealed;\n    }\n\n    public void seal() {\n        sealed = true;\n        if (parent != null) {\n            parent.seal();\n        }\n    }\n\n    public java.lang.Object clone() {\n        try {\n            org.apache.commons.jxpath.ri.NamespaceResolver result = ((org.apache.commons.jxpath.ri.NamespaceResolver) (super.clone()));\n            result.sealed = false;\n            return result;\n        } catch (java.lang.CloneNotSupportedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "uri",
            "src_parent": "return uri",
            "src_parent_type": "Return",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    reverseMap.put(uri, prefix);\n}",
            "src_parent": "if (!\"\".equals(prefix)) {\n    reverseMap.put(uri, prefix);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    if ((uri == null) && (pointer != null)) {\n        uri = pointer.getNamespaceURI(prefix);\n    }\n    if ((uri == null) && (parent != null)) {\n        return parent.getNamespaceURI(prefix);\n    }\n    return uri;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "protected static java.lang.String getPrefix(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.String namespaceURI) {\n    org.apache.commons.jxpath.ri.model.NodePointer currentPointer = pointer;\n    while (currentPointer != null) {\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = currentPointer.namespaceIterator();\n        for (int position = 1; (ni != null) && ni.setPosition(position); position++) {\n            org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n            java.lang.String uri = nsPointer.getNamespaceURI();\n            if (uri.equals(namespaceURI)) {\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    return prefix;\n                }\n            }\n        }\n        currentPointer = pointer.getParent();\n    } \n    return null;\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    if ((uri == null) && (pointer != null)) {\n        uri = pointer.getNamespaceURI(prefix);\n    }\n    if ((uri == null) && (parent != null)) {\n        return parent.getNamespaceURI(prefix);\n    }\n    return uri;\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n    return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String prefix",
            "dst_parent": "public synchronized java.lang.String getNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    if ((uri == null) && (pointer != null)) {\n        uri = pointer.getNamespaceURI(prefix);\n    }\n    if ((uri == null) && (parent != null)) {\n        return parent.getNamespaceURI(prefix);\n    }\n    return uri;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.String prefix",
            "src_parent": "protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)))",
            "dst_parent": "{\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    if ((uri == null) && (pointer != null)) {\n        uri = pointer.getNamespaceURI(prefix);\n    }\n    if ((uri == null) && (parent != null)) {\n        return parent.getNamespaceURI(prefix);\n    }\n    return uri;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)))",
            "src_parent": "{\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return uri",
            "dst_parent": "{\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    if ((uri == null) && (pointer != null)) {\n        uri = pointer.getNamespaceURI(prefix);\n    }\n    if ((uri == null) && (parent != null)) {\n        return parent.getNamespaceURI(prefix);\n    }\n    return uri;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri",
            "src_parent": "{\n    java.lang.String uri = getExternallyRegisteredNamespaceURI(prefix);\n    return (uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n        if (ni != null) {\n            for (int position = 1; ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    reverseMap.put(uri, prefix);\n                }\n            }\n        }\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    if ((prefix == null) && (parent != null)) {\n        return parent.getPrefix(namespaceURI);\n    }\n    return prefix;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "protected synchronized java.lang.String getExternallyRegisteredNamespaceURI(java.lang.String prefix) {\n    java.lang.String uri = ((java.lang.String) (namespaceMap.get(prefix)));\n    return (uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri;\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n        if (ni != null) {\n            for (int position = 1; ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    reverseMap.put(uri, prefix);\n                }\n            }\n        }\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    if ((prefix == null) && (parent != null)) {\n        return parent.getPrefix(namespaceURI);\n    }\n    return prefix;\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n    java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI);\n    return (prefix == null) && (pointer != null) ? org.apache.commons.jxpath.ri.NamespaceResolver.getPrefix(pointer, namespaceURI) : prefix;\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String namespaceURI",
            "dst_parent": "public synchronized java.lang.String getPrefix(java.lang.String namespaceURI) {\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n        if (ni != null) {\n            for (int position = 1; ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    reverseMap.put(uri, prefix);\n                }\n            }\n        }\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    if ((prefix == null) && (parent != null)) {\n        return parent.getPrefix(namespaceURI);\n    }\n    return prefix;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.String namespaceURI",
            "src_parent": "protected synchronized java.lang.String getExternallyRegisteredPrefix(java.lang.String namespaceURI) {\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)))",
            "dst_parent": "{\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n        if (ni != null) {\n            for (int position = 1; ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    reverseMap.put(uri, prefix);\n                }\n            }\n        }\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    if ((prefix == null) && (parent != null)) {\n        return parent.getPrefix(namespaceURI);\n    }\n    return prefix;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)))",
            "src_parent": "{\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    return (prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return prefix",
            "dst_parent": "{\n    if (reverseMap == null) {\n        reverseMap = new java.util.HashMap();\n        org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n        if (ni != null) {\n            for (int position = 1; ni.setPosition(position); position++) {\n                org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n                java.lang.String uri = nsPointer.getNamespaceURI();\n                java.lang.String prefix = nsPointer.getName().getName();\n                if (!\"\".equals(prefix)) {\n                    reverseMap.put(uri, prefix);\n                }\n            }\n        }\n        java.util.Iterator it = namespaceMap.entrySet().iterator();\n        while (it.hasNext()) {\n            java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n            reverseMap.put(entry.getValue(), entry.getKey());\n        } \n    }\n    java.lang.String prefix = ((java.lang.String) (reverseMap.get(namespaceURI)));\n    if ((prefix == null) && (parent != null)) {\n        return parent.getPrefix(namespaceURI);\n    }\n    return prefix;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return prefix",
            "src_parent": "{\n    return prefix;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(uri == null) && (pointer != null)",
            "dst_parent": "if ((uri == null) && (pointer != null)) {\n    uri = pointer.getNamespaceURI(prefix);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(uri == null) && (pointer != null)",
            "src_parent": "(uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri",
            "src_parent_type": "Conditional",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(uri == null) && (parent != null)",
            "dst_parent": "if ((uri == null) && (parent != null)) {\n    return parent.getNamespaceURI(prefix);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(uri == null) && (parent != null)",
            "src_parent": "(uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri",
            "src_parent_type": "Conditional",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "reverseMap == null",
            "dst_parent": "if (reverseMap == null) {\n    reverseMap = new java.util.HashMap();\n    org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n    if (ni != null) {\n        for (int position = 1; ni.setPosition(position); position++) {\n            org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n            java.lang.String uri = nsPointer.getNamespaceURI();\n            java.lang.String prefix = nsPointer.getName().getName();\n            if (!\"\".equals(prefix)) {\n                reverseMap.put(uri, prefix);\n            }\n        }\n    }\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "reverseMap == null",
            "src_parent": "if (reverseMap == null) {\n    reverseMap = new java.util.HashMap();\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(prefix == null) && (parent != null)",
            "dst_parent": "if ((prefix == null) && (parent != null)) {\n    return parent.getPrefix(namespaceURI);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(prefix == null) && (parent != null)",
            "src_parent": "(prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix",
            "src_parent_type": "Conditional",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "reverseMap = new java.util.HashMap()",
            "dst_parent": "{\n    reverseMap = new java.util.HashMap();\n    org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n    if (ni != null) {\n        for (int position = 1; ni.setPosition(position); position++) {\n            org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n            java.lang.String uri = nsPointer.getNamespaceURI();\n            java.lang.String prefix = nsPointer.getName().getName();\n            if (!\"\".equals(prefix)) {\n                reverseMap.put(uri, prefix);\n            }\n        }\n    }\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "reverseMap = new java.util.HashMap()",
            "src_parent": "{\n    reverseMap = new java.util.HashMap();\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Iterator it = namespaceMap.entrySet().iterator()",
            "dst_parent": "{\n    reverseMap = new java.util.HashMap();\n    org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n    if (ni != null) {\n        for (int position = 1; ni.setPosition(position); position++) {\n            org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n            java.lang.String uri = nsPointer.getNamespaceURI();\n            java.lang.String prefix = nsPointer.getName().getName();\n            if (!\"\".equals(prefix)) {\n                reverseMap.put(uri, prefix);\n            }\n        }\n    }\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.util.Iterator it = namespaceMap.entrySet().iterator()",
            "src_parent": "{\n    reverseMap = new java.util.HashMap();\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "while (it.hasNext()) {\n    java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n    reverseMap.put(entry.getValue(), entry.getKey());\n} ",
            "dst_parent": "{\n    reverseMap = new java.util.HashMap();\n    org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator();\n    if (ni != null) {\n        for (int position = 1; ni.setPosition(position); position++) {\n            org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n            java.lang.String uri = nsPointer.getNamespaceURI();\n            java.lang.String prefix = nsPointer.getName().getName();\n            if (!\"\".equals(prefix)) {\n                reverseMap.put(uri, prefix);\n            }\n        }\n    }\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "dst_parent_type": "Block",
            "dst_type": "While",
            "operator": "MOV",
            "src": "while (it.hasNext()) {\n    java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n    reverseMap.put(entry.getValue(), entry.getKey());\n} ",
            "src_parent": "{\n    reverseMap = new java.util.HashMap();\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "uri",
            "dst_parent": "uri = pointer.getNamespaceURI(prefix)",
            "dst_parent_type": "Assignment",
            "dst_type": "VariableWrite",
            "operator": "MOV",
            "src": "currentPointer",
            "src_parent": "currentPointer = pointer.getParent()",
            "src_parent_type": "Assignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "pointer.getNamespaceURI(prefix)",
            "dst_parent": "uri = pointer.getNamespaceURI(prefix)",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "pointer.getNamespaceURI(prefix)",
            "src_parent": "(uri == null) && (pointer != null) ? pointer.getNamespaceURI(prefix) : uri",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent.getNamespaceURI(prefix)",
            "dst_parent": "return parent.getNamespaceURI(prefix)",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "parent.getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent": "(prefix == null) && (parent != null) ? parent.getExternallyRegisteredPrefix(namespaceURI) : prefix",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.jxpath.ri.model.NodeIterator",
            "dst_parent": "org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "pointer.namespaceIterator()",
            "dst_parent": "org.apache.commons.jxpath.ri.model.NodeIterator ni = pointer.namespaceIterator()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent": "java.lang.String prefix = getExternallyRegisteredPrefix(namespaceURI)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "ni != null",
            "dst_parent": "if (ni != null) {\n    for (int position = 1; ni.setPosition(position); position++) {\n        org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n        java.lang.String uri = nsPointer.getNamespaceURI();\n        java.lang.String prefix = nsPointer.getName().getName();\n        if (!\"\".equals(prefix)) {\n            reverseMap.put(uri, prefix);\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(ni != null)",
            "src_parent": "(ni != null) && ni.setPosition(position)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    for (int position = 1; ni.setPosition(position); position++) {\n        org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n        java.lang.String uri = nsPointer.getNamespaceURI();\n        java.lang.String prefix = nsPointer.getName().getName();\n        if (!\"\".equals(prefix)) {\n            reverseMap.put(uri, prefix);\n        }\n    }\n}",
            "dst_parent": "if (ni != null) {\n    for (int position = 1; ni.setPosition(position); position++) {\n        org.apache.commons.jxpath.ri.model.NodePointer nsPointer = ni.getNodePointer();\n        java.lang.String uri = nsPointer.getNamespaceURI();\n        java.lang.String prefix = nsPointer.getName().getName();\n        if (!\"\".equals(prefix)) {\n            reverseMap.put(uri, prefix);\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    reverseMap = new java.util.HashMap();\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "src_parent": "if (reverseMap == null) {\n    reverseMap = new java.util.HashMap();\n    java.util.Iterator it = namespaceMap.entrySet().iterator();\n    while (it.hasNext()) {\n        java.util.Map.Entry entry = ((java.util.Map.Entry) (it.next()));\n        reverseMap.put(entry.getValue(), entry.getKey());\n    } \n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "true",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent.getPrefix(namespaceURI)",
            "dst_parent": "return parent.getPrefix(namespaceURI)",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "parent.getExternallyRegisteredNamespaceURI(prefix)",
            "src_parent": "(uri == null) && (parent != null) ? parent.getExternallyRegisteredNamespaceURI(prefix) : uri",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!\"\".equals(prefix)",
            "dst_parent": "if (!\"\".equals(prefix)) {\n    reverseMap.put(uri, prefix);\n}",
            "dst_parent_type": "If",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "!\"\".equals(prefix)",
            "src_parent": "if (!\"\".equals(prefix)) {\n    return prefix;\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "uri",
            "dst_parent": "reverseMap.put(uri, prefix)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "uri",
            "src_parent": "uri.equals(namespaceURI)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "prefix",
            "dst_parent": "reverseMap.put(uri, prefix)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "namespaceURI",
            "src_parent": "uri.equals(namespaceURI)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "NamespaceResolver"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String ns = getNamespaceURI(prefix)",
            "dst_parent": "{\n    java.lang.String ns = getNamespaceURI(prefix);\n    if (ns == null) {\n        throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n    }\n    element.setAttributeNS(ns, name.toString(), \"\");\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver()",
            "src_parent": "{\n    java.lang.String ns = null;\n    org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver();\n    if (nsr != null) {\n        ns = nsr.getNamespaceURI(prefix);\n    }\n    if (ns == null) {\n        throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n    }\n    element.setAttributeNS(ns, name.toString(), \"\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "java.lang.String ns = getNamespaceURI(prefix)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.apache.commons.jxpath.ri.NamespaceResolver",
            "src_parent": "org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver()",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getNamespaceURI(prefix)",
            "dst_parent": "java.lang.String ns = getNamespaceURI(prefix)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getNamespaceResolver()",
            "src_parent": "org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver()",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private org.apache.commons.jxpath.ri.NamespaceResolver localNamespaceResolver;",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    private org.apache.commons.jxpath.ri.NamespaceResolver localNamespaceResolver;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS) || ((nodeNS == null) && org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(testPrefix, org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node)));\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public synchronized org.apache.commons.jxpath.ri.NamespaceResolver getNamespaceResolver() {\n        if (localNamespaceResolver == null) {\n            localNamespaceResolver = new org.apache.commons.jxpath.ri.NamespaceResolver(super.getNamespaceResolver());\n            localNamespaceResolver.setNamespaceContextPointer(this);\n        }\n        return localNamespaceResolver;\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(attrName);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix == null) ? null : context.getNamespaceURI(prefix);\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = null;\n            org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver();\n            if (nsr != null) {\n                ns = nsr.getNamespaceURI(prefix);\n            }\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public synchronized org.apache.commons.jxpath.ri.NamespaceResolver getNamespaceResolver() {\n    if (localNamespaceResolver == null) {\n        localNamespaceResolver = new org.apache.commons.jxpath.ri.NamespaceResolver(super.getNamespaceResolver());\n        localNamespaceResolver.setNamespaceContextPointer(this);\n    }\n    return localNamespaceResolver;\n}",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    private org.apache.commons.jxpath.ri.NamespaceResolver localNamespaceResolver;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS) || ((nodeNS == null) && org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(testPrefix, org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node)));\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public synchronized org.apache.commons.jxpath.ri.NamespaceResolver getNamespaceResolver() {\n        if (localNamespaceResolver == null) {\n            localNamespaceResolver = new org.apache.commons.jxpath.ri.NamespaceResolver(super.getNamespaceResolver());\n            localNamespaceResolver.setNamespaceContextPointer(this);\n        }\n        return localNamespaceResolver;\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(attrName);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix == null) ? null : context.getNamespaceURI(prefix);\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = null;\n            org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver();\n            if (nsr != null) {\n                ns = nsr.getNamespaceURI(prefix);\n            }\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (nsURI == null) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.String ns = null",
            "src_parent": "{\n    java.lang.String ns = null;\n    org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver();\n    if (nsr != null) {\n        ns = nsr.getNamespaceURI(prefix);\n    }\n    if (ns == null) {\n        throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n    }\n    element.setAttributeNS(ns, name.toString(), \"\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (nsr != null) {\n    ns = nsr.getNamespaceURI(prefix);\n}",
            "src_parent": "{\n    java.lang.String ns = null;\n    org.apache.commons.jxpath.ri.NamespaceResolver nsr = getNamespaceResolver();\n    if (nsr != null) {\n        ns = nsr.getNamespaceURI(prefix);\n    }\n    if (ns == null) {\n        throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n    }\n    element.setAttributeNS(ns, name.toString(), \"\");\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "DOMNodePointer"
    }
  ],
  "id": "JxPath_13"
}