{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final long serialVersionUID = 4603296144163950020L;",
            "src_parent": "@com.fasterxml.jackson.databind.annotation.JacksonStdImpl\npublic class BeanPropertyWriter extends com.fasterxml.jackson.databind.ser.PropertyWriter implements com.fasterxml.jackson.databind.BeanProperty , java.io.Serializable {\n    private static final long serialVersionUID = 4603296144163950020L;\n\n    public static final java.lang.Object MARKER_FOR_EMPTY = com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY;\n\n    protected static final com.fasterxml.jackson.annotation.JsonFormat.Value NO_FORMAT = new com.fasterxml.jackson.annotation.JsonFormat.Value();\n\n    protected final com.fasterxml.jackson.core.io.SerializedString _name;\n\n    protected final com.fasterxml.jackson.databind.PropertyName _wrapperName;\n\n    protected final com.fasterxml.jackson.databind.JavaType _declaredType;\n\n    protected final com.fasterxml.jackson.databind.JavaType _cfgSerializationType;\n\n    protected com.fasterxml.jackson.databind.JavaType _nonTrivialBaseType;\n\n    protected transient final com.fasterxml.jackson.databind.util.Annotations _contextAnnotations;\n\n    protected final com.fasterxml.jackson.databind.PropertyMetadata _metadata;\n\n    protected transient com.fasterxml.jackson.annotation.JsonFormat.Value _format;\n\n    protected final com.fasterxml.jackson.databind.introspect.AnnotatedMember _member;\n\n    protected transient java.lang.reflect.Method _accessorMethod;\n\n    protected transient java.lang.reflect.Field _field;\n\n    protected com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _serializer;\n\n    protected com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _nullSerializer;\n\n    protected com.fasterxml.jackson.databind.jsontype.TypeSerializer _typeSerializer;\n\n    protected transient com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap _dynamicSerializers;\n\n    protected final boolean _suppressNulls;\n\n    protected final java.lang.Object _suppressableValue;\n\n    protected final java.lang.Class<?>[] _includeInViews;\n\n    protected transient java.util.HashMap<java.lang.Object, java.lang.Object> _internalSettings;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public BeanPropertyWriter(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef, com.fasterxml.jackson.databind.introspect.AnnotatedMember member, com.fasterxml.jackson.databind.util.Annotations contextAnnotations, com.fasterxml.jackson.databind.JavaType declaredType, com.fasterxml.jackson.databind.JsonSerializer<?> ser, com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSer, com.fasterxml.jackson.databind.JavaType serType, boolean suppressNulls, java.lang.Object suppressableValue) {\n        _member = member;\n        _contextAnnotations = contextAnnotations;\n        _name = new com.fasterxml.jackson.core.io.SerializedString(propDef.getName());\n        _wrapperName = propDef.getWrapperName();\n        _metadata = propDef.getMetadata();\n        _includeInViews = propDef.findViews();\n        _declaredType = declaredType;\n        _serializer = ((com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) (ser));\n        _dynamicSerializers = (ser == null) ? com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties() : null;\n        _typeSerializer = typeSer;\n        _cfgSerializationType = serType;\n        if (member instanceof com.fasterxml.jackson.databind.introspect.AnnotatedField) {\n            _accessorMethod = null;\n            _field = ((java.lang.reflect.Field) (member.getMember()));\n        } else if (member instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            _accessorMethod = ((java.lang.reflect.Method) (member.getMember()));\n            _field = null;\n        } else {\n            _accessorMethod = null;\n            _field = null;\n        }\n        _suppressNulls = suppressNulls;\n        _suppressableValue = suppressableValue;\n        _nullSerializer = null;\n    }\n\n    protected BeanPropertyWriter() {\n        _member = null;\n        _contextAnnotations = null;\n        _name = null;\n        _wrapperName = null;\n        _metadata = null;\n        _includeInViews = null;\n        _declaredType = null;\n        _serializer = null;\n        _dynamicSerializers = null;\n        _typeSerializer = null;\n        _cfgSerializationType = null;\n        _accessorMethod = null;\n        _field = null;\n        _suppressNulls = false;\n        _suppressableValue = null;\n        _nullSerializer = null;\n    }\n\n    protected BeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter base) {\n        this(base, base._name);\n    }\n\n    protected BeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter base, com.fasterxml.jackson.databind.PropertyName name) {\n        _name = new com.fasterxml.jackson.core.io.SerializedString(name.getSimpleName());\n        _wrapperName = base._wrapperName;\n        _contextAnnotations = base._contextAnnotations;\n        _declaredType = base._declaredType;\n        _member = base._member;\n        _accessorMethod = base._accessorMethod;\n        _field = base._field;\n        _serializer = base._serializer;\n        _nullSerializer = base._nullSerializer;\n        if (base._internalSettings != null) {\n            _internalSettings = new java.util.HashMap<java.lang.Object, java.lang.Object>(base._internalSettings);\n        }\n        _cfgSerializationType = base._cfgSerializationType;\n        _dynamicSerializers = base._dynamicSerializers;\n        _suppressNulls = base._suppressNulls;\n        _suppressableValue = base._suppressableValue;\n        _includeInViews = base._includeInViews;\n        _typeSerializer = base._typeSerializer;\n        _nonTrivialBaseType = base._nonTrivialBaseType;\n        _metadata = base._metadata;\n    }\n\n    protected BeanPropertyWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter base, com.fasterxml.jackson.core.io.SerializedString name) {\n        _name = name;\n        _wrapperName = base._wrapperName;\n        _member = base._member;\n        _contextAnnotations = base._contextAnnotations;\n        _declaredType = base._declaredType;\n        _accessorMethod = base._accessorMethod;\n        _field = base._field;\n        _serializer = base._serializer;\n        _nullSerializer = base._nullSerializer;\n        if (base._internalSettings != null) {\n            _internalSettings = new java.util.HashMap<java.lang.Object, java.lang.Object>(base._internalSettings);\n        }\n        _cfgSerializationType = base._cfgSerializationType;\n        _dynamicSerializers = base._dynamicSerializers;\n        _suppressNulls = base._suppressNulls;\n        _suppressableValue = base._suppressableValue;\n        _includeInViews = base._includeInViews;\n        _typeSerializer = base._typeSerializer;\n        _nonTrivialBaseType = base._nonTrivialBaseType;\n        _metadata = base._metadata;\n    }\n\n    public com.fasterxml.jackson.databind.ser.BeanPropertyWriter rename(com.fasterxml.jackson.databind.util.NameTransformer transformer) {\n        java.lang.String newName = transformer.transform(_name.getValue());\n        if (newName.equals(_name.toString())) {\n            return this;\n        }\n        return _new(com.fasterxml.jackson.databind.PropertyName.construct(newName));\n    }\n\n    protected com.fasterxml.jackson.databind.ser.BeanPropertyWriter _new(com.fasterxml.jackson.databind.PropertyName newName) {\n        return new com.fasterxml.jackson.databind.ser.BeanPropertyWriter(this, newName);\n    }\n\n    public void assignTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSer) {\n        _typeSerializer = typeSer;\n    }\n\n    public void assignSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser) {\n        if ((_serializer != null) && (_serializer != ser)) {\n            throw new java.lang.IllegalStateException(\"Can not override serializer\");\n        }\n        _serializer = ser;\n    }\n\n    public void assignNullSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> nullSer) {\n        if ((_nullSerializer != null) && (_nullSerializer != nullSer)) {\n            throw new java.lang.IllegalStateException(\"Can not override null serializer\");\n        }\n        _nullSerializer = nullSer;\n    }\n\n    public com.fasterxml.jackson.databind.ser.BeanPropertyWriter unwrappingWriter(com.fasterxml.jackson.databind.util.NameTransformer unwrapper) {\n        return new com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter(this, unwrapper);\n    }\n\n    public void setNonTrivialBaseType(com.fasterxml.jackson.databind.JavaType t) {\n        _nonTrivialBaseType = t;\n    }\n\n    java.lang.Object readResolve() {\n        if (_member instanceof com.fasterxml.jackson.databind.introspect.AnnotatedField) {\n            _accessorMethod = null;\n            _field = ((java.lang.reflect.Field) (_member.getMember()));\n        } else if (_member instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            _accessorMethod = ((java.lang.reflect.Method) (_member.getMember()));\n            _field = null;\n        }\n        if (_serializer == null) {\n            _dynamicSerializers = com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForProperties();\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public java.lang.String getName() {\n        return _name.getValue();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName getFullName() {\n        return new com.fasterxml.jackson.databind.PropertyName(_name.getValue());\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getType() {\n        return _declaredType;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName getWrapperName() {\n        return _wrapperName;\n    }\n\n    @java.lang.Override\n    public boolean isRequired() {\n        return _metadata.isRequired();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyMetadata getMetadata() {\n        return _metadata;\n    }\n\n    @java.lang.Override\n    public <A extends java.lang.annotation.Annotation> A getAnnotation(java.lang.Class<A> acls) {\n        return _member == null ? null : _member.getAnnotation(acls);\n    }\n\n    @java.lang.Override\n    public <A extends java.lang.annotation.Annotation> A getContextAnnotation(java.lang.Class<A> acls) {\n        return _contextAnnotations == null ? null : _contextAnnotations.get(acls);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonFormat.Value findFormatOverrides(com.fasterxml.jackson.databind.AnnotationIntrospector intr) {\n        com.fasterxml.jackson.annotation.JsonFormat.Value f = _format;\n        if (f == null) {\n            f = ((intr == null) || (_member == null)) ? null : intr.findFormat(_member);\n            _format = (f == null) ? com.fasterxml.jackson.databind.ser.BeanPropertyWriter.NO_FORMAT : f;\n        }\n        return f == com.fasterxml.jackson.databind.ser.BeanPropertyWriter.NO_FORMAT ? null : f;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember() {\n        return _member;\n    }\n\n    protected void _depositSchemaProperty(com.fasterxml.jackson.databind.node.ObjectNode propertiesNode, com.fasterxml.jackson.databind.JsonNode schemaNode) {\n        propertiesNode.set(getName(), schemaNode);\n    }\n\n    public boolean isVirtual() {\n        return false;\n    }\n\n    public java.lang.Object getInternalSetting(java.lang.Object key) {\n        return _internalSettings == null ? null : _internalSettings.get(key);\n    }\n\n    public java.lang.Object setInternalSetting(java.lang.Object key, java.lang.Object value) {\n        if (_internalSettings == null) {\n            _internalSettings = new java.util.HashMap<java.lang.Object, java.lang.Object>();\n        }\n        return _internalSettings.put(key, value);\n    }\n\n    public java.lang.Object removeInternalSetting(java.lang.Object key) {\n        java.lang.Object removed = null;\n        if (_internalSettings != null) {\n            removed = _internalSettings.remove(key);\n            if (_internalSettings.size() == 0) {\n                _internalSettings = null;\n            }\n        }\n        return removed;\n    }\n\n    public com.fasterxml.jackson.core.SerializableString getSerializedName() {\n        return _name;\n    }\n\n    public boolean hasSerializer() {\n        return _serializer != null;\n    }\n\n    public boolean hasNullSerializer() {\n        return _nullSerializer != null;\n    }\n\n    public com.fasterxml.jackson.databind.jsontype.TypeSerializer getTypeSerializer() {\n        return _typeSerializer;\n    }\n\n    public boolean isUnwrapping() {\n        return false;\n    }\n\n    public boolean willSuppressNulls() {\n        return _suppressNulls;\n    }\n\n    public boolean wouldConflictWithName(com.fasterxml.jackson.databind.PropertyName name) {\n        if (_wrapperName != null) {\n            return _wrapperName.equals(name);\n        }\n        return name.hasSimpleName(_name.getValue()) && (!name.hasNamespace());\n    }\n\n    public com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> getSerializer() {\n        return _serializer;\n    }\n\n    public com.fasterxml.jackson.databind.JavaType getSerializationType() {\n        return _cfgSerializationType;\n    }\n\n    public java.lang.Class<?> getRawSerializationType() {\n        return _cfgSerializationType == null ? null : _cfgSerializationType.getRawClass();\n    }\n\n    public java.lang.Class<?> getPropertyType() {\n        return _accessorMethod != null ? _accessorMethod.getReturnType() : _field.getType();\n    }\n\n    public java.lang.reflect.Type getGenericPropertyType() {\n        if (_accessorMethod != null) {\n            return _accessorMethod.getGenericReturnType();\n        }\n        if (_field != null) {\n            return _field.getGenericType();\n        }\n        return null;\n    }\n\n    public java.lang.Class<?>[] getViews() {\n        return _includeInViews;\n    }\n\n    @java.lang.Override\n    public void serializeAsField(java.lang.Object bean, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider prov) throws java.lang.Exception {\n        final java.lang.Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n        if (value == null) {\n            if (_nullSerializer != null) {\n                gen.writeFieldName(_name);\n                _nullSerializer.serialize(null, gen, prov);\n            }\n            return;\n        }\n        com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser = _serializer;\n        if (ser == null) {\n            java.lang.Class<?> cls = value.getClass();\n            com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap m = _dynamicSerializers;\n            ser = m.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(m, cls, prov);\n            }\n        }\n        if (_suppressableValue != null) {\n            if (com.fasterxml.jackson.databind.ser.BeanPropertyWriter.MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(prov, value)) {\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) {\n                return;\n            }\n        }\n        if (value == bean) {\n            if (_handleSelfReference(bean, gen, prov, ser)) {\n                return;\n            }\n        }\n        gen.writeFieldName(_name);\n        if (_typeSerializer == null) {\n            ser.serialize(value, gen, prov);\n        } else {\n            ser.serializeWithType(value, gen, prov, _typeSerializer);\n        }\n    }\n\n    @java.lang.Override\n    public void serializeAsOmittedField(java.lang.Object bean, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider prov) throws java.lang.Exception {\n        if (!gen.canOmitFields()) {\n            gen.writeOmittedField(_name.getValue());\n        }\n    }\n\n    @java.lang.Override\n    public void serializeAsElement(java.lang.Object bean, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider prov) throws java.lang.Exception {\n        final java.lang.Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean);\n        if (value == null) {\n            if (_nullSerializer != null) {\n                _nullSerializer.serialize(null, gen, prov);\n            } else {\n                gen.writeNull();\n            }\n            return;\n        }\n        com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser = _serializer;\n        if (ser == null) {\n            java.lang.Class<?> cls = value.getClass();\n            com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap map = _dynamicSerializers;\n            ser = map.serializerFor(cls);\n            if (ser == null) {\n                ser = _findAndAddDynamic(map, cls, prov);\n            }\n        }\n        if (_suppressableValue != null) {\n            if (com.fasterxml.jackson.databind.ser.BeanPropertyWriter.MARKER_FOR_EMPTY == _suppressableValue) {\n                if (ser.isEmpty(prov, value)) {\n                    serializeAsPlaceholder(bean, gen, prov);\n                    return;\n                }\n            } else if (_suppressableValue.equals(value)) {\n                serializeAsPlaceholder(bean, gen, prov);\n                return;\n            }\n        }\n        if (value == bean) {\n            if (_handleSelfReference(bean, gen, prov, ser)) {\n                return;\n            }\n        }\n        if (_typeSerializer == null) {\n            ser.serialize(value, gen, prov);\n        } else {\n            ser.serializeWithType(value, gen, prov, _typeSerializer);\n        }\n    }\n\n    @java.lang.Override\n    public void serializeAsPlaceholder(java.lang.Object bean, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider prov) throws java.lang.Exception {\n        if (_nullSerializer != null) {\n            _nullSerializer.serialize(null, gen, prov);\n        } else {\n            gen.writeNull();\n        }\n    }\n\n    @java.lang.Override\n    public void depositSchemaProperty(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor v) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (v != null) {\n            if (isRequired()) {\n                v.property(this);\n            } else {\n                v.optionalProperty(this);\n            }\n        }\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public void depositSchemaProperty(com.fasterxml.jackson.databind.node.ObjectNode propertiesNode, com.fasterxml.jackson.databind.SerializerProvider provider) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType propType = getSerializationType();\n        java.lang.reflect.Type hint = (propType == null) ? getGenericPropertyType() : propType.getRawClass();\n        com.fasterxml.jackson.databind.JsonNode schemaNode;\n        com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser = getSerializer();\n        if (ser == null) {\n            ser = provider.findValueSerializer(getType(), this);\n        }\n        boolean isOptional = !isRequired();\n        if (ser instanceof com.fasterxml.jackson.databind.jsonschema.SchemaAware) {\n            schemaNode = ((com.fasterxml.jackson.databind.jsonschema.SchemaAware) (ser)).getSchema(provider, hint, isOptional);\n        } else {\n            schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\n        }\n        _depositSchemaProperty(propertiesNode, schemaNode);\n    }\n\n    protected com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap map, java.lang.Class<?> type, com.fasterxml.jackson.databind.SerializerProvider provider) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.SerializerAndMapResult result;\n        if (_nonTrivialBaseType != null) {\n            com.fasterxml.jackson.databind.JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type);\n            result = map.findAndAddPrimarySerializer(t, provider, this);\n        } else {\n            result = map.findAndAddPrimarySerializer(type, provider, this);\n        }\n        if (map != result.map) {\n            _dynamicSerializers = result.map;\n        }\n        return result.serializer;\n    }\n\n    public final java.lang.Object get(java.lang.Object bean) throws java.lang.Exception {\n        return _accessorMethod == null ? _field.get(bean) : _accessorMethod.invoke(bean);\n    }\n\n    protected boolean _handleSelfReference(java.lang.Object bean, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider prov, com.fasterxml.jackson.databind.JsonSerializer<?> ser) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (prov.isEnabled(com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES) && (!ser.usesObjectId())) {\n            if (ser instanceof com.fasterxml.jackson.databind.ser.std.BeanSerializerBase) {\n                throw new com.fasterxml.jackson.databind.JsonMappingException(\"Direct self-reference leading to cycle\");\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(40);\n        sb.append(\"property '\").append(getName()).append(\"' (\");\n        if (_accessorMethod != null) {\n            sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName());\n        } else if (_field != null) {\n            sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName());\n        } else {\n            sb.append(\"virtual\");\n        }\n        if (_serializer == null) {\n            sb.append(\", no static serializer\");\n        } else {\n            sb.append(\", static serializer of type \" + _serializer.getClass().getName());\n        }\n        sb.append(')');\n        return sb.toString();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        }
      ],
      "file_name": "BeanPropertyWriter"
    }
  ],
  "id": "JacksonDatabind_26"
}