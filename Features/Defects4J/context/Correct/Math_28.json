{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (tableau.getNumArtificialVariables() > 0) {\n        for (java.lang.Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    if (getIterations() < (getMaxIterations() / 2)) {\n        java.lang.Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (java.lang.Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; (i < (tableau.getWidth() - 1)) && (minRow != row); i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n}",
            "src_parent": "if (minRatioPositions.size() > 1) {\n    if (tableau.getNumArtificialVariables() > 0) {\n        for (java.lang.Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    return row;\n                }\n            }\n        }\n    }\n    if (getIterations() < (getMaxIterations() / 2)) {\n        java.lang.Integer minRow = null;\n        int minIndex = tableau.getWidth();\n        for (java.lang.Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; (i < (tableau.getWidth() - 1)) && (minRow != row); i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i < minIndex) {\n                        minIndex = i;\n                        minRow = row;\n                    }\n                }\n            }\n        }\n        return minRow;\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    for (java.lang.Integer row : minRatioPositions) {\n        for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n            int column = i + tableau.getArtificialVariableOffset();\n            final double entry = tableau.getEntry(row, column);\n            if (org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                return row;\n            }\n        }\n    }\n    java.lang.Integer minRow = null;\n    int minIndex = tableau.getWidth();\n    for (java.lang.Integer row : minRatioPositions) {\n        int i = tableau.getNumObjectiveFunctions();\n        for (; (i < (tableau.getWidth() - 1)) && (minRow != row); i++) {\n            if (row == tableau.getBasicRow(i)) {\n                if (i < minIndex) {\n                    minIndex = i;\n                    minRow = row;\n                }\n            }\n        }\n    }\n    return minRow;\n}",
            "dst_parent": "if (minRatioPositions.size() > 1) {\n    for (java.lang.Integer row : minRatioPositions) {\n        for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n            int column = i + tableau.getArtificialVariableOffset();\n            final double entry = tableau.getEntry(row, column);\n            if (org.apache.commons.math3.util.Precision.equals(entry, 1.0, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                return row;\n            }\n        }\n    }\n    java.lang.Integer minRow = null;\n    int minIndex = tableau.getWidth();\n    for (java.lang.Integer row : minRatioPositions) {\n        int i = tableau.getNumObjectiveFunctions();\n        for (; (i < (tableau.getWidth() - 1)) && (minRow != row); i++) {\n            if (row == tableau.getBasicRow(i)) {\n                if (i < minIndex) {\n                    minIndex = i;\n                    minRow = row;\n                }\n            }\n        }\n    }\n    return minRow;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    java.lang.Integer minRow = null;\n    int minIndex = tableau.getWidth();\n    for (java.lang.Integer row : minRatioPositions) {\n        int i = tableau.getNumObjectiveFunctions();\n        for (; (i < (tableau.getWidth() - 1)) && (minRow != row); i++) {\n            if (row == tableau.getBasicRow(i)) {\n                if (i < minIndex) {\n                    minIndex = i;\n                    minRow = row;\n                }\n            }\n        }\n    }\n    return minRow;\n}",
            "src_parent": "if (getIterations() < (getMaxIterations() / 2)) {\n    java.lang.Integer minRow = null;\n    int minIndex = tableau.getWidth();\n    for (java.lang.Integer row : minRatioPositions) {\n        int i = tableau.getNumObjectiveFunctions();\n        for (; (i < (tableau.getWidth() - 1)) && (minRow != row); i++) {\n            if (row == tableau.getBasicRow(i)) {\n                if (i < minIndex) {\n                    minIndex = i;\n                    minRow = row;\n                }\n            }\n        }\n    }\n    return minRow;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "SimplexSolver"
    }
  ],
  "id": "Math_28"
}