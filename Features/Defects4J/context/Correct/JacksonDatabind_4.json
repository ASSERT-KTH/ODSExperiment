{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "try {\n    while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n        java.lang.String value;\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            value = jp.getText();\n        } else if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n            value = null;\n        } else {\n            value = _parseString(jp, ctxt);\n        }\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    } \n} catch (java.lang.Exception e) {\n    throw com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(e, java.lang.String.class, ix);\n}",
            "src_parent": "{\n    if (!jp.isExpectedStartArrayToken()) {\n        return handleNonArray(jp, ctxt);\n    }\n    if (_elementDeserializer != null) {\n        return _deserializeCustom(jp, ctxt);\n    }\n    final com.fasterxml.jackson.databind.util.ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n    java.lang.Object[] chunk = buffer.resetAndStart();\n    int ix = 0;\n    com.fasterxml.jackson.core.JsonToken t;\n    try {\n        while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n            java.lang.String value;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n                value = jp.getText();\n            } else if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n                value = null;\n            } else {\n                value = _parseString(jp, ctxt);\n            }\n            if (ix >= chunk.length) {\n                chunk = buffer.appendCompletedChunk(chunk);\n                ix = 0;\n            }\n            chunk[ix++] = value;\n        } \n    } catch (java.lang.Exception e) {\n        throw com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(e, java.lang.String.class, ix);\n    }\n    java.lang.String[] result = buffer.completeAndClearBuffer(chunk, ix, java.lang.String.class);\n    ctxt.returnObjectBuffer(buffer);\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "try {\n    while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n        java.lang.String value = (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    } \n} catch (java.lang.Exception e) {\n    throw com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(e, java.lang.String.class, ix);\n}",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.util.ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n    java.lang.Object[] chunk = buffer.resetAndStart();\n    final com.fasterxml.jackson.databind.JsonDeserializer<java.lang.String> deser = _elementDeserializer;\n    int ix = 0;\n    com.fasterxml.jackson.core.JsonToken t;\n    try {\n        while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n            java.lang.String value = (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n            if (ix >= chunk.length) {\n                chunk = buffer.appendCompletedChunk(chunk);\n                ix = 0;\n            }\n            chunk[ix++] = value;\n        } \n    } catch (java.lang.Exception e) {\n        throw com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(e, java.lang.String.class, ix);\n    }\n    java.lang.String[] result = buffer.completeAndClearBuffer(chunk, ix, java.lang.String.class);\n    ctxt.returnObjectBuffer(buffer);\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n    java.lang.String value;\n    if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n        value = jp.getText();\n    } else if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n        value = null;\n    } else {\n        value = _parseString(jp, ctxt);\n    }\n    if (ix >= chunk.length) {\n        chunk = buffer.appendCompletedChunk(chunk);\n        ix = 0;\n    }\n    chunk[ix++] = value;\n} ",
            "dst_parent": "{\n    if (!jp.isExpectedStartArrayToken()) {\n        return handleNonArray(jp, ctxt);\n    }\n    if (_elementDeserializer != null) {\n        return _deserializeCustom(jp, ctxt);\n    }\n    final com.fasterxml.jackson.databind.util.ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n    java.lang.Object[] chunk = buffer.resetAndStart();\n    int ix = 0;\n    com.fasterxml.jackson.core.JsonToken t;\n    while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n        java.lang.String value;\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            value = jp.getText();\n        } else if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n            value = null;\n        } else {\n            value = _parseString(jp, ctxt);\n        }\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    } \n    java.lang.String[] result = buffer.completeAndClearBuffer(chunk, ix, java.lang.String.class);\n    ctxt.returnObjectBuffer(buffer);\n    return result;\n}",
            "dst_parent_type": "Block",
            "dst_type": "While",
            "operator": "MOV",
            "src": "while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n    java.lang.String value;\n    if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n        value = jp.getText();\n    } else if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n        value = null;\n    } else {\n        value = _parseString(jp, ctxt);\n    }\n    if (ix >= chunk.length) {\n        chunk = buffer.appendCompletedChunk(chunk);\n        ix = 0;\n    }\n    chunk[ix++] = value;\n} ",
            "src_parent": "{\n    while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n        java.lang.String value;\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            value = jp.getText();\n        } else if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n            value = null;\n        } else {\n            value = _parseString(jp, ctxt);\n        }\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n    java.lang.String value = (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n    if (ix >= chunk.length) {\n        chunk = buffer.appendCompletedChunk(chunk);\n        ix = 0;\n    }\n    chunk[ix++] = value;\n} ",
            "dst_parent": "{\n    final com.fasterxml.jackson.databind.util.ObjectBuffer buffer = ctxt.leaseObjectBuffer();\n    java.lang.Object[] chunk = buffer.resetAndStart();\n    final com.fasterxml.jackson.databind.JsonDeserializer<java.lang.String> deser = _elementDeserializer;\n    int ix = 0;\n    com.fasterxml.jackson.core.JsonToken t;\n    while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n        java.lang.String value = (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    } \n    java.lang.String[] result = buffer.completeAndClearBuffer(chunk, ix, java.lang.String.class);\n    ctxt.returnObjectBuffer(buffer);\n    return result;\n}",
            "dst_parent_type": "Block",
            "dst_type": "While",
            "operator": "MOV",
            "src": "while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n    java.lang.String value = (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n    if (ix >= chunk.length) {\n        chunk = buffer.appendCompletedChunk(chunk);\n        ix = 0;\n    }\n    chunk[ix++] = value;\n} ",
            "src_parent": "{\n    while ((t = jp.nextToken()) != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n        java.lang.String value = (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) ? deser.getNullValue() : deser.deserialize(jp, ctxt);\n        if (ix >= chunk.length) {\n            chunk = buffer.appendCompletedChunk(chunk);\n            ix = 0;\n        }\n        chunk[ix++] = value;\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        }
      ],
      "file_name": "StringArrayDeserializer"
    }
  ],
  "id": "JacksonDatabind_4"
}