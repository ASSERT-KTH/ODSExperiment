{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.String appropriateEndTagName() {\n    return lastStartTag.tagName;\n}",
            "src_parent": "class Tokeniser {\n    static final char replacementChar = 'ï¿½';\n\n    private org.jsoup.parser.CharacterReader reader;\n\n    private boolean trackErrors = true;\n\n    private java.util.List<org.jsoup.parser.ParseError> errors = new java.util.ArrayList<org.jsoup.parser.ParseError>();\n\n    private org.jsoup.parser.TokeniserState state = TokeniserState.Data;\n\n    private org.jsoup.parser.Token emitPending;\n\n    private boolean isEmitPending = false;\n\n    private java.lang.StringBuilder charBuffer = new java.lang.StringBuilder();\n\n    java.lang.StringBuilder dataBuffer;\n\n    Token.Tag tagPending;\n\n    Token.Doctype doctypePending;\n\n    Token.Comment commentPending;\n\n    private Token.StartTag lastStartTag;\n\n    private boolean selfClosingFlagAcknowledged = true;\n\n    Tokeniser(org.jsoup.parser.CharacterReader reader) {\n        this.reader = reader;\n    }\n\n    org.jsoup.parser.Token read() {\n        if (!selfClosingFlagAcknowledged) {\n            error(\"Self closing flag not acknowledged\");\n            selfClosingFlagAcknowledged = true;\n        }\n        while (!isEmitPending) {\n            state.read(this, reader);\n        } \n        if (charBuffer.length() > 0) {\n            java.lang.String str = charBuffer.toString();\n            charBuffer.delete(0, charBuffer.length());\n            return new org.jsoup.parser.Token.Character(str);\n        } else {\n            isEmitPending = false;\n            return emitPending;\n        }\n    }\n\n    void emit(org.jsoup.parser.Token token) {\n        org.jsoup.helper.Validate.isFalse(isEmitPending, \"There is an unread token pending!\");\n        emitPending = token;\n        isEmitPending = true;\n        if (token.type == Token.TokenType.StartTag) {\n            org.jsoup.parser.Token.StartTag startTag = ((org.jsoup.parser.Token.StartTag) (token));\n            lastStartTag = startTag;\n            if (startTag.selfClosing) {\n                selfClosingFlagAcknowledged = false;\n            }\n        } else if (token.type == Token.TokenType.EndTag) {\n            org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));\n            if (endTag.attributes.size() > 0) {\n                error(\"Attributes incorrectly present on end tag\");\n            }\n        }\n    }\n\n    void emit(java.lang.String str) {\n        charBuffer.append(str);\n    }\n\n    void emit(char c) {\n        charBuffer.append(c);\n    }\n\n    org.jsoup.parser.TokeniserState getState() {\n        return state;\n    }\n\n    void transition(org.jsoup.parser.TokeniserState state) {\n        this.state = state;\n    }\n\n    void advanceTransition(org.jsoup.parser.TokeniserState state) {\n        reader.advance();\n        this.state = state;\n    }\n\n    void acknowledgeSelfClosingFlag() {\n        selfClosingFlagAcknowledged = true;\n    }\n\n    java.lang.Character consumeCharacterReference(java.lang.Character additionalAllowedCharacter, boolean inAttribute) {\n        if (reader.isEmpty()) {\n            return null;\n        }\n        if ((additionalAllowedCharacter != null) && (additionalAllowedCharacter == reader.current())) {\n            return null;\n        }\n        if (reader.matchesAny('\\t', '\\n', '\\f', '<', '&')) {\n            return null;\n        }\n        reader.mark();\n        if (reader.matchConsume(\"#\")) {\n            boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");\n            java.lang.String numRef = (isHexMode) ? reader.consumeHexSequence() : reader.consumeDigitSequence();\n            if (numRef.length() == 0) {\n                characterReferenceError();\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError();\n            }\n            int charval = -1;\n            try {\n                int base = (isHexMode) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(numRef, base);\n            } catch (java.lang.NumberFormatException e) {\n            }\n            if (((charval == (-1)) || ((charval >= 0xd800) && (charval <= 0xdfff))) || (charval > 0x10ffff)) {\n                characterReferenceError();\n                return org.jsoup.parser.Tokeniser.replacementChar;\n            } else {\n                return ((char) (charval));\n            }\n        } else {\n            java.lang.String nameRef = reader.consumeLetterSequence();\n            boolean looksLegit = reader.matches(';');\n            boolean found = false;\n            while ((nameRef.length() > 0) && (!found)) {\n                if (org.jsoup.nodes.Entities.isNamedEntity(nameRef)) {\n                    found = true;\n                } else {\n                    nameRef = nameRef.substring(0, nameRef.length() - 1);\n                    reader.unconsume();\n                }\n            } \n            if (!found) {\n                if (looksLegit) {\n                    characterReferenceError();\n                }\n                reader.rewindToMark();\n                return null;\n            }\n            if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matches('='))) {\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError();\n            }\n            return org.jsoup.nodes.Entities.getCharacterByName(nameRef);\n        }\n    }\n\n    Token.Tag createTagPending(boolean start) {\n        tagPending = (start) ? new org.jsoup.parser.Token.StartTag() : new org.jsoup.parser.Token.EndTag();\n        return tagPending;\n    }\n\n    void emitTagPending() {\n        tagPending.finaliseTag();\n        emit(tagPending);\n    }\n\n    void createCommentPending() {\n        commentPending = new org.jsoup.parser.Token.Comment();\n    }\n\n    void emitCommentPending() {\n        emit(commentPending);\n    }\n\n    void createDoctypePending() {\n        doctypePending = new org.jsoup.parser.Token.Doctype();\n    }\n\n    void emitDoctypePending() {\n        emit(doctypePending);\n    }\n\n    void createTempBuffer() {\n        dataBuffer = new java.lang.StringBuilder();\n    }\n\n    boolean isAppropriateEndTagToken() {\n        return tagPending.tagName.equals(lastStartTag.tagName);\n    }\n\n    java.lang.String appropriateEndTagName() {\n        return lastStartTag.tagName;\n    }\n\n    boolean isTrackErrors() {\n        return trackErrors;\n    }\n\n    void setTrackErrors(boolean trackErrors) {\n        this.trackErrors = trackErrors;\n    }\n\n    void error(org.jsoup.parser.TokeniserState state) {\n        if (trackErrors) {\n            errors.add(new org.jsoup.parser.ParseError(\"Unexpected character in input\", reader.current(), state, reader.pos()));\n        }\n    }\n\n    void eofError(org.jsoup.parser.TokeniserState state) {\n        if (trackErrors) {\n            errors.add(new org.jsoup.parser.ParseError(\"Unexpectedly reached end of file (EOF)\", state, reader.pos()));\n        }\n    }\n\n    private void characterReferenceError() {\n        if (trackErrors) {\n            errors.add(new org.jsoup.parser.ParseError(\"Invalid character reference\", reader.pos()));\n        }\n    }\n\n    private void error(java.lang.String errorMsg) {\n        if (trackErrors) {\n            errors.add(new org.jsoup.parser.ParseError(errorMsg, reader.pos()));\n        }\n    }\n\n    boolean currentNodeInHtmlNS() {\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "Tokeniser"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (r.matches('/')) {\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n} else if (r.matchesLetter() && (!r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))) {\n    t.tagPending = new org.jsoup.parser.Token.EndTag(t.appropriateEndTagName());\n    t.emitTagPending();\n    r.unconsume();\n    t.transition(org.jsoup.parser.TokeniserState.Data);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "src_parent": "{\n    if (r.matches('/')) {\n        t.createTempBuffer();\n        t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n    } else if (r.matchesLetter() && (!r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))) {\n        t.tagPending = new org.jsoup.parser.Token.EndTag(t.appropriateEndTagName());\n        t.emitTagPending();\n        r.unconsume();\n        t.transition(org.jsoup.parser.TokeniserState.Data);\n    } else {\n        t.emit(\"<\");\n        t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (r.matches('/')) {\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "src_parent": "{\n    if (r.matches('/')) {\n        t.createTempBuffer();\n        t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n    } else {\n        t.emit(\"<\");\n        t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "r.matches('/')",
            "dst_parent": "if (r.matches('/')) {\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "r.matches('/')",
            "src_parent": "if (r.matches('/')) {\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n} else if (r.matchesLetter() && (!r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))) {\n    t.tagPending = new org.jsoup.parser.Token.EndTag(t.appropriateEndTagName());\n    t.emitTagPending();\n    r.unconsume();\n    t.transition(org.jsoup.parser.TokeniserState.Data);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n}",
            "dst_parent": "if (r.matches('/')) {\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n}",
            "src_parent": "if (r.matches('/')) {\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n} else if (r.matchesLetter() && (!r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))) {\n    t.tagPending = new org.jsoup.parser.Token.EndTag(t.appropriateEndTagName());\n    t.emitTagPending();\n    r.unconsume();\n    t.transition(org.jsoup.parser.TokeniserState.Data);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "dst_parent": "if (r.matches('/')) {\n    t.createTempBuffer();\n    t.advanceTransition(org.jsoup.parser.TokeniserState.RCDATAEndTagOpen);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "src_parent": "if (r.matchesLetter() && (!r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))) {\n    t.tagPending = new org.jsoup.parser.Token.EndTag(t.appropriateEndTagName());\n    t.emitTagPending();\n    r.unconsume();\n    t.transition(org.jsoup.parser.TokeniserState.Data);\n} else {\n    t.emit(\"<\");\n    t.transition(org.jsoup.parser.TokeniserState.Rcdata);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "TokeniserState"
    }
  ],
  "id": "Jsoup_14"
}