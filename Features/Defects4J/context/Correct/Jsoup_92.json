{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!startTag.attributes.isEmpty()) {\n    int dupes = startTag.attributes.deduplicate(settings);\n    if (dupes > 0) {\n        error(\"Duplicate attribute\");\n    }\n}",
            "src_parent": "{\n    if (!startTag.attributes.isEmpty()) {\n        int dupes = startTag.attributes.deduplicate(settings);\n        if (dupes > 0) {\n            error(\"Duplicate attribute\");\n        }\n    }\n    if (startTag.isSelfClosing()) {\n        org.jsoup.nodes.Element el = insertEmpty(startTag);\n        stack.add(el);\n        tokeniser.transition(TokeniserState.Data);\n        tokeniser.emit(emptyEnd.reset().name(el.tagName()));\n        return el;\n    }\n    org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));\n    insert(el);\n    return el;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "HtmlTreeBuilder"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public boolean preserveAttributeCase() {\n    return preserveAttributeCase;\n}",
            "src_parent": "public class ParseSettings {\n    public static final org.jsoup.parser.ParseSettings htmlDefault;\n\n    public static final org.jsoup.parser.ParseSettings preserveCase;\n\n    static {\n        htmlDefault = new ParseSettings(false, false);\n        preserveCase = new ParseSettings(true, true);\n    }\n\n    private final boolean preserveTagCase;\n\n    private final boolean preserveAttributeCase;\n\n    public boolean preserveTagCase() {\n        return preserveTagCase;\n    }\n\n    public boolean preserveAttributeCase() {\n        return preserveAttributeCase;\n    }\n\n    public ParseSettings(boolean tag, boolean attribute) {\n        preserveTagCase = tag;\n        preserveAttributeCase = attribute;\n    }\n\n    public java.lang.String normalizeTag(java.lang.String name) {\n        name = name.trim();\n        if (!preserveTagCase) {\n            name = lowerCase(name);\n        }\n        return name;\n    }\n\n    public java.lang.String normalizeAttribute(java.lang.String name) {\n        name = name.trim();\n        if (!preserveAttributeCase) {\n            name = lowerCase(name);\n        }\n        return name;\n    }\n\n    org.jsoup.nodes.Attributes normalizeAttributes(org.jsoup.nodes.Attributes attributes) {\n        if (!preserveAttributeCase) {\n            attributes.normalize();\n        }\n        return attributes;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "ParseSettings"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "void",
            "dst_parent": "private void add(java.lang.String key, java.lang.String value) {\n    checkCapacity(size + 1);\n    keys[size] = key;\n    vals[size] = value;\n    size++;\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "org.jsoup.nodes.Attributes",
            "src_parent": "public org.jsoup.nodes.Attributes add(java.lang.String key, java.lang.String value) {\n    checkCapacity(size + 1);\n    keys[size] = key;\n    vals[size] = value;\n    size++;\n    return this;\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private",
            "dst_parent": "private void add(java.lang.String key, java.lang.String value) {\n    checkCapacity(size + 1);\n    keys[size] = key;\n    vals[size] = value;\n    size++;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Wra",
            "operator": "UPD",
            "src": "public",
            "src_parent": "public org.jsoup.nodes.Attributes add(java.lang.String key, java.lang.String value) {\n    checkCapacity(size + 1);\n    keys[size] = key;\n    vals[size] = value;\n    size++;\n    return this;\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return this",
            "src_parent": "{\n    checkCapacity(size + 1);\n    keys[size] = key;\n    vals[size] = value;\n    size++;\n    return this;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public boolean isEmpty() {\n    return size == 0;\n}",
            "src_parent": "public class Attributes implements java.lang.Cloneable , java.lang.Iterable<org.jsoup.nodes.Attribute> {\n    protected static final java.lang.String dataPrefix = \"data-\";\n\n    private static final int InitialCapacity = 4;\n\n    private static final int GrowthFactor = 2;\n\n    private static final java.lang.String[] Empty = new java.lang.String[]{  };\n\n    static final int NotFound = -1;\n\n    private static final java.lang.String EmptyString = \"\";\n\n    private int size = 0;\n\n    java.lang.String[] keys = org.jsoup.nodes.Attributes.Empty;\n\n    java.lang.String[] vals = org.jsoup.nodes.Attributes.Empty;\n\n    private void checkCapacity(int minNewSize) {\n        org.jsoup.helper.Validate.isTrue(minNewSize >= size);\n        int curSize = keys.length;\n        if (curSize >= minNewSize) {\n            return;\n        }\n        int newSize = (curSize >= org.jsoup.nodes.Attributes.InitialCapacity) ? size * org.jsoup.nodes.Attributes.GrowthFactor : org.jsoup.nodes.Attributes.InitialCapacity;\n        if (minNewSize > newSize) {\n            newSize = minNewSize;\n        }\n        keys = org.jsoup.nodes.Attributes.copyOf(keys, newSize);\n        vals = org.jsoup.nodes.Attributes.copyOf(vals, newSize);\n    }\n\n    private static java.lang.String[] copyOf(java.lang.String[] orig, int size) {\n        final java.lang.String[] copy = new java.lang.String[size];\n        java.lang.System.arraycopy(orig, 0, copy, 0, java.lang.Math.min(orig.length, size));\n        return copy;\n    }\n\n    int indexOfKey(java.lang.String key) {\n        org.jsoup.helper.Validate.notNull(key);\n        for (int i = 0; i < size; i++) {\n            if (key.equals(keys[i])) {\n                return i;\n            }\n        }\n        return org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    private int indexOfKeyIgnoreCase(java.lang.String key) {\n        org.jsoup.helper.Validate.notNull(key);\n        for (int i = 0; i < size; i++) {\n            if (key.equalsIgnoreCase(keys[i])) {\n                return i;\n            }\n        }\n        return org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    static java.lang.String checkNotNull(java.lang.String val) {\n        return val == null ? org.jsoup.nodes.Attributes.EmptyString : val;\n    }\n\n    public java.lang.String get(java.lang.String key) {\n        int i = indexOfKey(key);\n        return i == org.jsoup.nodes.Attributes.NotFound ? org.jsoup.nodes.Attributes.EmptyString : org.jsoup.nodes.Attributes.checkNotNull(vals[i]);\n    }\n\n    public java.lang.String getIgnoreCase(java.lang.String key) {\n        int i = indexOfKeyIgnoreCase(key);\n        return i == org.jsoup.nodes.Attributes.NotFound ? org.jsoup.nodes.Attributes.EmptyString : org.jsoup.nodes.Attributes.checkNotNull(vals[i]);\n    }\n\n    public org.jsoup.nodes.Attributes add(java.lang.String key, java.lang.String value) {\n        checkCapacity(size + 1);\n        keys[size] = key;\n        vals[size] = value;\n        size++;\n        return this;\n    }\n\n    public org.jsoup.nodes.Attributes put(java.lang.String key, java.lang.String value) {\n        int i = indexOfKey(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            vals[i] = value;\n        } else {\n            add(key, value);\n        }\n        return this;\n    }\n\n    void putIgnoreCase(java.lang.String key, java.lang.String value) {\n        int i = indexOfKeyIgnoreCase(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            vals[i] = value;\n            if (!keys[i].equals(key)) {\n                keys[i] = key;\n            }\n        } else {\n            add(key, value);\n        }\n    }\n\n    public org.jsoup.nodes.Attributes put(java.lang.String key, boolean value) {\n        if (value) {\n            putIgnoreCase(key, null);\n        } else {\n            remove(key);\n        }\n        return this;\n    }\n\n    public org.jsoup.nodes.Attributes put(org.jsoup.nodes.Attribute attribute) {\n        org.jsoup.helper.Validate.notNull(attribute);\n        put(attribute.getKey(), attribute.getValue());\n        attribute.parent = this;\n        return this;\n    }\n\n    private void remove(int index) {\n        org.jsoup.helper.Validate.isFalse(index >= size);\n        int shifted = (size - index) - 1;\n        if (shifted > 0) {\n            java.lang.System.arraycopy(keys, index + 1, keys, index, shifted);\n            java.lang.System.arraycopy(vals, index + 1, vals, index, shifted);\n        }\n        size--;\n        keys[size] = null;\n        vals[size] = null;\n    }\n\n    public void remove(java.lang.String key) {\n        int i = indexOfKey(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            remove(i);\n        }\n    }\n\n    public void removeIgnoreCase(java.lang.String key) {\n        int i = indexOfKeyIgnoreCase(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            remove(i);\n        }\n    }\n\n    public boolean hasKey(java.lang.String key) {\n        return indexOfKey(key) != org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    public boolean hasKeyIgnoreCase(java.lang.String key) {\n        return indexOfKeyIgnoreCase(key) != org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    public void addAll(org.jsoup.nodes.Attributes incoming) {\n        if (incoming.size() == 0) {\n            return;\n        }\n        checkCapacity(size + incoming.size);\n        for (org.jsoup.nodes.Attribute attr : incoming) {\n            put(attr);\n        }\n    }\n\n    public java.util.Iterator<org.jsoup.nodes.Attribute> iterator() {\n        return new java.util.Iterator<org.jsoup.nodes.Attribute>() {\n            int i = 0;\n\n            @java.lang.Override\n            public boolean hasNext() {\n                return i < size;\n            }\n\n            @java.lang.Override\n            public org.jsoup.nodes.Attribute next() {\n                final org.jsoup.nodes.Attribute attr = new org.jsoup.nodes.Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }\n\n            @java.lang.Override\n            public void remove() {\n                Attributes.this.remove(--i);\n            }\n        };\n    }\n\n    public java.util.List<org.jsoup.nodes.Attribute> asList() {\n        java.util.ArrayList<org.jsoup.nodes.Attribute> list = new java.util.ArrayList<>(size);\n        for (int i = 0; i < size; i++) {\n            org.jsoup.nodes.Attribute attr = (vals[i] == null) ? new org.jsoup.nodes.BooleanAttribute(keys[i]) : new org.jsoup.nodes.Attribute(keys[i], vals[i], this);\n            list.add(attr);\n        }\n        return java.util.Collections.unmodifiableList(list);\n    }\n\n    public java.util.Map<java.lang.String, java.lang.String> dataset() {\n        return new org.jsoup.nodes.Attributes.Dataset(this);\n    }\n\n    public java.lang.String html() {\n        java.lang.StringBuilder sb = org.jsoup.internal.StringUtil.borrowBuilder();\n        try {\n            html(sb, new org.jsoup.nodes.Document(\"\").outputSettings());\n        } catch (java.io.IOException e) {\n            throw new org.jsoup.SerializationException(e);\n        }\n        return org.jsoup.internal.StringUtil.releaseBuilder(sb);\n    }\n\n    final void html(final java.lang.Appendable accum, final org.jsoup.nodes.Document.OutputSettings out) throws java.io.IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            final java.lang.String key = keys[i];\n            final java.lang.String val = vals[i];\n            accum.append(' ').append(key);\n            if (!org.jsoup.nodes.Attribute.shouldCollapseAttribute(key, val, out)) {\n                accum.append(\"=\\\"\");\n                org.jsoup.nodes.Entities.escape(accum, val == null ? org.jsoup.nodes.Attributes.EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return html();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.nodes.Attributes that = ((org.jsoup.nodes.Attributes) (o));\n        if (size != that.size) {\n            return false;\n        }\n        if (!java.util.Arrays.equals(keys, that.keys)) {\n            return false;\n        }\n        return java.util.Arrays.equals(vals, that.vals);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = size;\n        result = (31 * result) + java.util.Arrays.hashCode(keys);\n        result = (31 * result) + java.util.Arrays.hashCode(vals);\n        return result;\n    }\n\n    @java.lang.Override\n    public org.jsoup.nodes.Attributes clone() {\n        org.jsoup.nodes.Attributes clone;\n        try {\n            clone = ((org.jsoup.nodes.Attributes) (super.clone()));\n        } catch (java.lang.CloneNotSupportedException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n        clone.size = size;\n        keys = org.jsoup.nodes.Attributes.copyOf(keys, size);\n        vals = org.jsoup.nodes.Attributes.copyOf(vals, size);\n        return clone;\n    }\n\n    public void normalize() {\n        for (int i = 0; i < size; i++) {\n            keys[i] = lowerCase(keys[i]);\n        }\n    }\n\n    public int deduplicate(org.jsoup.parser.ParseSettings settings) {\n        if (isEmpty()) {\n            return 0;\n        }\n        boolean preserve = settings.preserveAttributeCase();\n        int dupes = 0;\n        OUTER : for (int i = 0; i < keys.length; i++) {\n            for (int j = i + 1; j < keys.length; j++) {\n                if (keys[j] == null) {\n                    continue OUTER;\n                }\n                if ((preserve && keys[i].equals(keys[j])) || ((!preserve) && keys[i].equalsIgnoreCase(keys[j]))) {\n                    dupes++;\n                    remove(j);\n                    j--;\n                }\n            }\n        }\n        return dupes;\n    }\n\n    private static class Dataset extends java.util.AbstractMap<java.lang.String, java.lang.String> {\n        private final org.jsoup.nodes.Attributes attributes;\n\n        private Dataset(org.jsoup.nodes.Attributes attributes) {\n            this.attributes = attributes;\n        }\n\n        @java.lang.Override\n        public java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> entrySet() {\n            return new org.jsoup.nodes.Attributes.Dataset.EntrySet();\n        }\n\n        @java.lang.Override\n        public java.lang.String put(java.lang.String key, java.lang.String value) {\n            java.lang.String dataKey = org.jsoup.nodes.Attributes.dataKey(key);\n            java.lang.String oldValue = (attributes.hasKey(dataKey)) ? attributes.get(dataKey) : null;\n            attributes.put(dataKey, value);\n            return oldValue;\n        }\n\n        private class EntrySet extends java.util.AbstractSet<java.util.Map.Entry<java.lang.String, java.lang.String>> {\n            @java.lang.Override\n            public java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.String>> iterator() {\n                return new org.jsoup.nodes.Attributes.Dataset.DatasetIterator();\n            }\n\n            @java.lang.Override\n            public int size() {\n                int count = 0;\n                java.util.Iterator iter = new org.jsoup.nodes.Attributes.Dataset.DatasetIterator();\n                while (iter.hasNext()) {\n                    count++;\n                } \n                return count;\n            }\n        }\n\n        private class DatasetIterator implements java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.String>> {\n            private java.util.Iterator<org.jsoup.nodes.Attribute> attrIter = attributes.iterator();\n\n            private org.jsoup.nodes.Attribute attr;\n\n            public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr = attrIter.next();\n                    if (attr.isDataAttribute()) {\n                        return true;\n                    }\n                } \n                return false;\n            }\n\n            public java.util.Map.Entry<java.lang.String, java.lang.String> next() {\n                return new org.jsoup.nodes.Attribute(attr.getKey().substring(org.jsoup.nodes.Attributes.dataPrefix.length()), attr.getValue());\n            }\n\n            public void remove() {\n                attributes.remove(attr.getKey());\n            }\n        }\n    }\n\n    private static java.lang.String dataKey(java.lang.String key) {\n        return org.jsoup.nodes.Attributes.dataPrefix + key;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public int deduplicate(org.jsoup.parser.ParseSettings settings) {\n    if (isEmpty()) {\n        return 0;\n    }\n    boolean preserve = settings.preserveAttributeCase();\n    int dupes = 0;\n    OUTER : for (int i = 0; i < keys.length; i++) {\n        for (int j = i + 1; j < keys.length; j++) {\n            if (keys[j] == null) {\n                continue OUTER;\n            }\n            if ((preserve && keys[i].equals(keys[j])) || ((!preserve) && keys[i].equalsIgnoreCase(keys[j]))) {\n                dupes++;\n                remove(j);\n                j--;\n            }\n        }\n    }\n    return dupes;\n}",
            "src_parent": "public class Attributes implements java.lang.Cloneable , java.lang.Iterable<org.jsoup.nodes.Attribute> {\n    protected static final java.lang.String dataPrefix = \"data-\";\n\n    private static final int InitialCapacity = 4;\n\n    private static final int GrowthFactor = 2;\n\n    private static final java.lang.String[] Empty = new java.lang.String[]{  };\n\n    static final int NotFound = -1;\n\n    private static final java.lang.String EmptyString = \"\";\n\n    private int size = 0;\n\n    java.lang.String[] keys = org.jsoup.nodes.Attributes.Empty;\n\n    java.lang.String[] vals = org.jsoup.nodes.Attributes.Empty;\n\n    private void checkCapacity(int minNewSize) {\n        org.jsoup.helper.Validate.isTrue(minNewSize >= size);\n        int curSize = keys.length;\n        if (curSize >= minNewSize) {\n            return;\n        }\n        int newSize = (curSize >= org.jsoup.nodes.Attributes.InitialCapacity) ? size * org.jsoup.nodes.Attributes.GrowthFactor : org.jsoup.nodes.Attributes.InitialCapacity;\n        if (minNewSize > newSize) {\n            newSize = minNewSize;\n        }\n        keys = org.jsoup.nodes.Attributes.copyOf(keys, newSize);\n        vals = org.jsoup.nodes.Attributes.copyOf(vals, newSize);\n    }\n\n    private static java.lang.String[] copyOf(java.lang.String[] orig, int size) {\n        final java.lang.String[] copy = new java.lang.String[size];\n        java.lang.System.arraycopy(orig, 0, copy, 0, java.lang.Math.min(orig.length, size));\n        return copy;\n    }\n\n    int indexOfKey(java.lang.String key) {\n        org.jsoup.helper.Validate.notNull(key);\n        for (int i = 0; i < size; i++) {\n            if (key.equals(keys[i])) {\n                return i;\n            }\n        }\n        return org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    private int indexOfKeyIgnoreCase(java.lang.String key) {\n        org.jsoup.helper.Validate.notNull(key);\n        for (int i = 0; i < size; i++) {\n            if (key.equalsIgnoreCase(keys[i])) {\n                return i;\n            }\n        }\n        return org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    static java.lang.String checkNotNull(java.lang.String val) {\n        return val == null ? org.jsoup.nodes.Attributes.EmptyString : val;\n    }\n\n    public java.lang.String get(java.lang.String key) {\n        int i = indexOfKey(key);\n        return i == org.jsoup.nodes.Attributes.NotFound ? org.jsoup.nodes.Attributes.EmptyString : org.jsoup.nodes.Attributes.checkNotNull(vals[i]);\n    }\n\n    public java.lang.String getIgnoreCase(java.lang.String key) {\n        int i = indexOfKeyIgnoreCase(key);\n        return i == org.jsoup.nodes.Attributes.NotFound ? org.jsoup.nodes.Attributes.EmptyString : org.jsoup.nodes.Attributes.checkNotNull(vals[i]);\n    }\n\n    public org.jsoup.nodes.Attributes add(java.lang.String key, java.lang.String value) {\n        checkCapacity(size + 1);\n        keys[size] = key;\n        vals[size] = value;\n        size++;\n        return this;\n    }\n\n    public org.jsoup.nodes.Attributes put(java.lang.String key, java.lang.String value) {\n        int i = indexOfKey(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            vals[i] = value;\n        } else {\n            add(key, value);\n        }\n        return this;\n    }\n\n    void putIgnoreCase(java.lang.String key, java.lang.String value) {\n        int i = indexOfKeyIgnoreCase(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            vals[i] = value;\n            if (!keys[i].equals(key)) {\n                keys[i] = key;\n            }\n        } else {\n            add(key, value);\n        }\n    }\n\n    public org.jsoup.nodes.Attributes put(java.lang.String key, boolean value) {\n        if (value) {\n            putIgnoreCase(key, null);\n        } else {\n            remove(key);\n        }\n        return this;\n    }\n\n    public org.jsoup.nodes.Attributes put(org.jsoup.nodes.Attribute attribute) {\n        org.jsoup.helper.Validate.notNull(attribute);\n        put(attribute.getKey(), attribute.getValue());\n        attribute.parent = this;\n        return this;\n    }\n\n    private void remove(int index) {\n        org.jsoup.helper.Validate.isFalse(index >= size);\n        int shifted = (size - index) - 1;\n        if (shifted > 0) {\n            java.lang.System.arraycopy(keys, index + 1, keys, index, shifted);\n            java.lang.System.arraycopy(vals, index + 1, vals, index, shifted);\n        }\n        size--;\n        keys[size] = null;\n        vals[size] = null;\n    }\n\n    public void remove(java.lang.String key) {\n        int i = indexOfKey(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            remove(i);\n        }\n    }\n\n    public void removeIgnoreCase(java.lang.String key) {\n        int i = indexOfKeyIgnoreCase(key);\n        if (i != org.jsoup.nodes.Attributes.NotFound) {\n            remove(i);\n        }\n    }\n\n    public boolean hasKey(java.lang.String key) {\n        return indexOfKey(key) != org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    public boolean hasKeyIgnoreCase(java.lang.String key) {\n        return indexOfKeyIgnoreCase(key) != org.jsoup.nodes.Attributes.NotFound;\n    }\n\n    public int size() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    public void addAll(org.jsoup.nodes.Attributes incoming) {\n        if (incoming.size() == 0) {\n            return;\n        }\n        checkCapacity(size + incoming.size);\n        for (org.jsoup.nodes.Attribute attr : incoming) {\n            put(attr);\n        }\n    }\n\n    public java.util.Iterator<org.jsoup.nodes.Attribute> iterator() {\n        return new java.util.Iterator<org.jsoup.nodes.Attribute>() {\n            int i = 0;\n\n            @java.lang.Override\n            public boolean hasNext() {\n                return i < size;\n            }\n\n            @java.lang.Override\n            public org.jsoup.nodes.Attribute next() {\n                final org.jsoup.nodes.Attribute attr = new org.jsoup.nodes.Attribute(keys[i], vals[i], Attributes.this);\n                i++;\n                return attr;\n            }\n\n            @java.lang.Override\n            public void remove() {\n                Attributes.this.remove(--i);\n            }\n        };\n    }\n\n    public java.util.List<org.jsoup.nodes.Attribute> asList() {\n        java.util.ArrayList<org.jsoup.nodes.Attribute> list = new java.util.ArrayList<>(size);\n        for (int i = 0; i < size; i++) {\n            org.jsoup.nodes.Attribute attr = (vals[i] == null) ? new org.jsoup.nodes.BooleanAttribute(keys[i]) : new org.jsoup.nodes.Attribute(keys[i], vals[i], this);\n            list.add(attr);\n        }\n        return java.util.Collections.unmodifiableList(list);\n    }\n\n    public java.util.Map<java.lang.String, java.lang.String> dataset() {\n        return new org.jsoup.nodes.Attributes.Dataset(this);\n    }\n\n    public java.lang.String html() {\n        java.lang.StringBuilder sb = org.jsoup.internal.StringUtil.borrowBuilder();\n        try {\n            html(sb, new org.jsoup.nodes.Document(\"\").outputSettings());\n        } catch (java.io.IOException e) {\n            throw new org.jsoup.SerializationException(e);\n        }\n        return org.jsoup.internal.StringUtil.releaseBuilder(sb);\n    }\n\n    final void html(final java.lang.Appendable accum, final org.jsoup.nodes.Document.OutputSettings out) throws java.io.IOException {\n        final int sz = size;\n        for (int i = 0; i < sz; i++) {\n            final java.lang.String key = keys[i];\n            final java.lang.String val = vals[i];\n            accum.append(' ').append(key);\n            if (!org.jsoup.nodes.Attribute.shouldCollapseAttribute(key, val, out)) {\n                accum.append(\"=\\\"\");\n                org.jsoup.nodes.Entities.escape(accum, val == null ? org.jsoup.nodes.Attributes.EmptyString : val, out, true, false, false);\n                accum.append('\"');\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return html();\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.nodes.Attributes that = ((org.jsoup.nodes.Attributes) (o));\n        if (size != that.size) {\n            return false;\n        }\n        if (!java.util.Arrays.equals(keys, that.keys)) {\n            return false;\n        }\n        return java.util.Arrays.equals(vals, that.vals);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = size;\n        result = (31 * result) + java.util.Arrays.hashCode(keys);\n        result = (31 * result) + java.util.Arrays.hashCode(vals);\n        return result;\n    }\n\n    @java.lang.Override\n    public org.jsoup.nodes.Attributes clone() {\n        org.jsoup.nodes.Attributes clone;\n        try {\n            clone = ((org.jsoup.nodes.Attributes) (super.clone()));\n        } catch (java.lang.CloneNotSupportedException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n        clone.size = size;\n        keys = org.jsoup.nodes.Attributes.copyOf(keys, size);\n        vals = org.jsoup.nodes.Attributes.copyOf(vals, size);\n        return clone;\n    }\n\n    public void normalize() {\n        for (int i = 0; i < size; i++) {\n            keys[i] = lowerCase(keys[i]);\n        }\n    }\n\n    public int deduplicate(org.jsoup.parser.ParseSettings settings) {\n        if (isEmpty()) {\n            return 0;\n        }\n        boolean preserve = settings.preserveAttributeCase();\n        int dupes = 0;\n        OUTER : for (int i = 0; i < keys.length; i++) {\n            for (int j = i + 1; j < keys.length; j++) {\n                if (keys[j] == null) {\n                    continue OUTER;\n                }\n                if ((preserve && keys[i].equals(keys[j])) || ((!preserve) && keys[i].equalsIgnoreCase(keys[j]))) {\n                    dupes++;\n                    remove(j);\n                    j--;\n                }\n            }\n        }\n        return dupes;\n    }\n\n    private static class Dataset extends java.util.AbstractMap<java.lang.String, java.lang.String> {\n        private final org.jsoup.nodes.Attributes attributes;\n\n        private Dataset(org.jsoup.nodes.Attributes attributes) {\n            this.attributes = attributes;\n        }\n\n        @java.lang.Override\n        public java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> entrySet() {\n            return new org.jsoup.nodes.Attributes.Dataset.EntrySet();\n        }\n\n        @java.lang.Override\n        public java.lang.String put(java.lang.String key, java.lang.String value) {\n            java.lang.String dataKey = org.jsoup.nodes.Attributes.dataKey(key);\n            java.lang.String oldValue = (attributes.hasKey(dataKey)) ? attributes.get(dataKey) : null;\n            attributes.put(dataKey, value);\n            return oldValue;\n        }\n\n        private class EntrySet extends java.util.AbstractSet<java.util.Map.Entry<java.lang.String, java.lang.String>> {\n            @java.lang.Override\n            public java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.String>> iterator() {\n                return new org.jsoup.nodes.Attributes.Dataset.DatasetIterator();\n            }\n\n            @java.lang.Override\n            public int size() {\n                int count = 0;\n                java.util.Iterator iter = new org.jsoup.nodes.Attributes.Dataset.DatasetIterator();\n                while (iter.hasNext()) {\n                    count++;\n                } \n                return count;\n            }\n        }\n\n        private class DatasetIterator implements java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.String>> {\n            private java.util.Iterator<org.jsoup.nodes.Attribute> attrIter = attributes.iterator();\n\n            private org.jsoup.nodes.Attribute attr;\n\n            public boolean hasNext() {\n                while (attrIter.hasNext()) {\n                    attr = attrIter.next();\n                    if (attr.isDataAttribute()) {\n                        return true;\n                    }\n                } \n                return false;\n            }\n\n            public java.util.Map.Entry<java.lang.String, java.lang.String> next() {\n                return new org.jsoup.nodes.Attribute(attr.getKey().substring(org.jsoup.nodes.Attributes.dataPrefix.length()), attr.getValue());\n            }\n\n            public void remove() {\n                attributes.remove(attr.getKey());\n            }\n        }\n    }\n\n    private static java.lang.String dataKey(java.lang.String key) {\n        return org.jsoup.nodes.Attributes.dataPrefix + key;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "Attributes"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "attributes.put(pendingAttributeName, value)",
            "dst_parent": "{\n    java.lang.String value;\n    if (hasPendingAttributeValue) {\n        value = (pendingAttributeValue.length() > 0) ? pendingAttributeValue.toString() : pendingAttributeValueS;\n    } else if (hasEmptyAttributeValue) {\n        value = \"\";\n    } else {\n        value = null;\n    }\n    attributes.put(pendingAttributeName, value);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "attributes.add(pendingAttributeName, value)",
            "src_parent": "{\n    java.lang.String value;\n    if (hasPendingAttributeValue) {\n        value = (pendingAttributeValue.length() > 0) ? pendingAttributeValue.toString() : pendingAttributeValueS;\n    } else if (hasEmptyAttributeValue) {\n        value = \"\";\n    } else {\n        value = null;\n    }\n    attributes.add(pendingAttributeName, value);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Token"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "startTag.attributes.deduplicate(settings)",
            "src_parent": "{\n    org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf(startTag.name(), settings);\n    startTag.attributes.deduplicate(settings);\n    org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));\n    insertNode(el);\n    if (startTag.isSelfClosing()) {\n        if (!tag.isKnownTag()) {\n            tag.setSelfClosing();\n        }\n    } else {\n        stack.add(el);\n    }\n    return el;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "XmlTreeBuilder"
    }
  ],
  "id": "Jsoup_92"
}