{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean haveUnclosedEntry = false;",
            "src_parent": "public class TarArchiveOutputStream extends org.apache.commons.compress.archivers.ArchiveOutputStream {\n    public static final int LONGFILE_ERROR = 0;\n\n    public static final int LONGFILE_TRUNCATE = 1;\n\n    public static final int LONGFILE_GNU = 2;\n\n    private long currSize;\n\n    private java.lang.String currName;\n\n    private long currBytes;\n\n    private final byte[] recordBuf;\n\n    private int assemLen;\n\n    private final byte[] assemBuf;\n\n    protected final org.apache.commons.compress.archivers.tar.TarBuffer buffer;\n\n    private int longFileMode = org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_ERROR;\n\n    private boolean closed = false;\n\n    private boolean haveUnclosedEntry = false;\n\n    private final java.io.OutputStream out;\n\n    public TarArchiveOutputStream(java.io.OutputStream os) {\n        this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);\n    }\n\n    public TarArchiveOutputStream(java.io.OutputStream os, int blockSize) {\n        this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);\n    }\n\n    public TarArchiveOutputStream(java.io.OutputStream os, int blockSize, int recordSize) {\n        out = os;\n        this.buffer = new org.apache.commons.compress.archivers.tar.TarBuffer(os, blockSize, recordSize);\n        this.assemLen = 0;\n        this.assemBuf = new byte[recordSize];\n        this.recordBuf = new byte[recordSize];\n    }\n\n    public void setLongFileMode(int longFileMode) {\n        this.longFileMode = longFileMode;\n    }\n\n    public void finish() throws java.io.IOException {\n        if (haveUnclosedEntry) {\n            throw new java.io.IOException(\"This archives contains unclosed entries.\");\n        }\n        writeEOFRecord();\n        writeEOFRecord();\n    }\n\n    public void close() throws java.io.IOException {\n        if (!closed) {\n            finish();\n            buffer.close();\n            out.close();\n            closed = true;\n        }\n    }\n\n    public int getRecordSize() {\n        return buffer.getRecordSize();\n    }\n\n    public void putArchiveEntry(org.apache.commons.compress.archivers.ArchiveEntry archiveEntry) throws java.io.IOException {\n        org.apache.commons.compress.archivers.tar.TarArchiveEntry entry = ((org.apache.commons.compress.archivers.tar.TarArchiveEntry) (archiveEntry));\n        if (entry.getName().length() >= org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN) {\n            if (longFileMode == org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_GNU) {\n                org.apache.commons.compress.archivers.tar.TarArchiveEntry longLinkEntry = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(org.apache.commons.compress.archivers.tar.TarConstants.GNU_LONGLINK, org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGNAME);\n                final byte[] nameBytes = entry.getName().getBytes();\n                longLinkEntry.setSize(nameBytes.length + 1);\n                putArchiveEntry(longLinkEntry);\n                write(nameBytes);\n                write(0);\n                closeArchiveEntry();\n            } else if (longFileMode != org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_TRUNCATE) {\n                throw new java.lang.RuntimeException((((\"file name '\" + entry.getName()) + \"' is too long ( > \") + org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN) + \" bytes)\");\n            }\n        }\n        entry.writeEntryHeader(recordBuf);\n        buffer.writeRecord(recordBuf);\n        currBytes = 0;\n        if (entry.isDirectory()) {\n            currSize = 0;\n        } else {\n            currSize = entry.getSize();\n        }\n        currName = entry.getName();\n        haveUnclosedEntry = true;\n    }\n\n    public void closeArchiveEntry() throws java.io.IOException {\n        if (assemLen > 0) {\n            for (int i = assemLen; i < assemBuf.length; ++i) {\n                assemBuf[i] = 0;\n            }\n            buffer.writeRecord(assemBuf);\n            currBytes += assemLen;\n            assemLen = 0;\n        }\n        if (currBytes < currSize) {\n            throw new java.io.IOException((((((\"entry '\" + currName) + \"' closed at '\") + currBytes) + \"' before the '\") + currSize) + \"' bytes specified in the header were written\");\n        }\n        haveUnclosedEntry = false;\n    }\n\n    public void write(byte[] wBuf, int wOffset, int numToWrite) throws java.io.IOException {\n        if ((currBytes + numToWrite) > currSize) {\n            throw new java.io.IOException((((((\"request to write '\" + numToWrite) + \"' bytes exceeds size in header of '\") + currSize) + \"' bytes for entry '\") + currName) + \"'\");\n        }\n        if (assemLen > 0) {\n            if ((assemLen + numToWrite) >= recordBuf.length) {\n                int aLen = recordBuf.length - assemLen;\n                java.lang.System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen);\n                java.lang.System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen);\n                buffer.writeRecord(recordBuf);\n                currBytes += recordBuf.length;\n                wOffset += aLen;\n                numToWrite -= aLen;\n                assemLen = 0;\n            } else {\n                java.lang.System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);\n                wOffset += numToWrite;\n                assemLen += numToWrite;\n                numToWrite = 0;\n            }\n        }\n        while (numToWrite > 0) {\n            if (numToWrite < recordBuf.length) {\n                java.lang.System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite);\n                assemLen += numToWrite;\n                break;\n            }\n            buffer.writeRecord(wBuf, wOffset);\n            int num = recordBuf.length;\n            currBytes += num;\n            numToWrite -= num;\n            wOffset += num;\n        } \n    }\n\n    private void writeEOFRecord() throws java.io.IOException {\n        for (int i = 0; i < recordBuf.length; ++i) {\n            recordBuf[i] = 0;\n        }\n        buffer.writeRecord(recordBuf);\n    }\n\n    public void flush() throws java.io.IOException {\n        out.flush();\n    }\n\n    public org.apache.commons.compress.archivers.ArchiveEntry createArchiveEntry(java.io.File inputFile, java.lang.String entryName) throws java.io.IOException {\n        return new org.apache.commons.compress.archivers.tar.TarArchiveEntry(inputFile, entryName);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (haveUnclosedEntry) {\n    throw new java.io.IOException(\"This archives contains unclosed entries.\");\n}",
            "src_parent": "{\n    if (haveUnclosedEntry) {\n        throw new java.io.IOException(\"This archives contains unclosed entries.\");\n    }\n    writeEOFRecord();\n    writeEOFRecord();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "haveUnclosedEntry = true",
            "src_parent": "{\n    org.apache.commons.compress.archivers.tar.TarArchiveEntry entry = ((org.apache.commons.compress.archivers.tar.TarArchiveEntry) (archiveEntry));\n    if (entry.getName().length() >= org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN) {\n        if (longFileMode == org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_GNU) {\n            org.apache.commons.compress.archivers.tar.TarArchiveEntry longLinkEntry = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(org.apache.commons.compress.archivers.tar.TarConstants.GNU_LONGLINK, org.apache.commons.compress.archivers.tar.TarConstants.LF_GNUTYPE_LONGNAME);\n            final byte[] nameBytes = entry.getName().getBytes();\n            longLinkEntry.setSize(nameBytes.length + 1);\n            putArchiveEntry(longLinkEntry);\n            write(nameBytes);\n            write(0);\n            closeArchiveEntry();\n        } else if (longFileMode != org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.LONGFILE_TRUNCATE) {\n            throw new java.lang.RuntimeException((((\"file name '\" + entry.getName()) + \"' is too long ( > \") + org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN) + \" bytes)\");\n        }\n    }\n    entry.writeEntryHeader(recordBuf);\n    buffer.writeRecord(recordBuf);\n    currBytes = 0;\n    if (entry.isDirectory()) {\n        currSize = 0;\n    } else {\n        currSize = entry.getSize();\n    }\n    currName = entry.getName();\n    haveUnclosedEntry = true;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "haveUnclosedEntry = false",
            "src_parent": "{\n    if (assemLen > 0) {\n        for (int i = assemLen; i < assemBuf.length; ++i) {\n            assemBuf[i] = 0;\n        }\n        buffer.writeRecord(assemBuf);\n        currBytes += assemLen;\n        assemLen = 0;\n    }\n    if (currBytes < currSize) {\n        throw new java.io.IOException((((((\"entry '\" + currName) + \"' closed at '\") + currBytes) + \"' before the '\") + currSize) + \"' bytes specified in the header were written\");\n    }\n    haveUnclosedEntry = false;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "writeEOFRecord()",
            "dst_parent": "{\n    writeEOFRecord();\n    writeEOFRecord();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "writeEOFRecord()",
            "src_parent": "{\n    if (haveUnclosedEntry) {\n        throw new java.io.IOException(\"This archives contains unclosed entries.\");\n    }\n    writeEOFRecord();\n    writeEOFRecord();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "TarArchiveOutputStream"
    }
  ],
  "id": "Compress_3"
}