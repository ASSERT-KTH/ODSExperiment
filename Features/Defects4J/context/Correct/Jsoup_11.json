{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (tq.matches(\":has(\")) {\n        elements.addAll(root.getAllElements());\n    } else {\n        addElements(findElements());\n    }\n}",
            "src_parent": "if (tq.matchesAny(org.jsoup.select.Selector.combinators)) {\n    elements.add(root);\n    combinator(tq.consume().toString());\n} else if (tq.matches(\":has(\")) {\n    elements.addAll(root.getAllElements());\n} else {\n    addElements(findElements());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (tq.matches(\":not(\")) {\n        return not();\n    } else {\n        throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n    }\n}",
            "src_parent": "if (tq.matches(\":matchesOwn(\")) {\n    return matches(true);\n} else if (tq.matches(\":not(\")) {\n    return not();\n} else {\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private org.jsoup.select.Elements not() {\n    tq.consume(\":not\");\n    java.lang.String subQuery = tq.chompBalanced('(', ')');\n    org.jsoup.helper.Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");\n    return org.jsoup.select.Selector.filterOut(root.getAllElements(), org.jsoup.select.Selector.select(subQuery, root));\n}",
            "src_parent": "public class Selector {\n    private static final java.lang.String[] combinators = new java.lang.String[]{ \",\", \">\", \"+\", \"~\", \" \" };\n\n    private final org.jsoup.nodes.Element root;\n\n    private final java.util.LinkedHashSet<org.jsoup.nodes.Element> elements;\n\n    private final java.lang.String query;\n\n    private final org.jsoup.parser.TokenQueue tq;\n\n    private Selector(java.lang.String query, org.jsoup.nodes.Element root) {\n        org.jsoup.helper.Validate.notNull(query);\n        query = query.trim();\n        org.jsoup.helper.Validate.notEmpty(query);\n        org.jsoup.helper.Validate.notNull(root);\n        this.elements = new java.util.LinkedHashSet<org.jsoup.nodes.Element>();\n        this.query = query;\n        this.root = root;\n        this.tq = new org.jsoup.parser.TokenQueue(query);\n    }\n\n    public static org.jsoup.select.Elements select(java.lang.String query, org.jsoup.nodes.Element root) {\n        return new org.jsoup.select.Selector(query, root).select();\n    }\n\n    public static org.jsoup.select.Elements select(java.lang.String query, java.lang.Iterable<org.jsoup.nodes.Element> roots) {\n        org.jsoup.helper.Validate.notEmpty(query);\n        org.jsoup.helper.Validate.notNull(roots);\n        java.util.LinkedHashSet<org.jsoup.nodes.Element> elements = new java.util.LinkedHashSet<org.jsoup.nodes.Element>();\n        for (org.jsoup.nodes.Element root : roots) {\n            elements.addAll(org.jsoup.select.Selector.select(query, root));\n        }\n        return new org.jsoup.select.Elements(elements);\n    }\n\n    private org.jsoup.select.Elements select() {\n        tq.consumeWhitespace();\n        if (tq.matchesAny(org.jsoup.select.Selector.combinators)) {\n            elements.add(root);\n            combinator(tq.consume().toString());\n        } else if (tq.matches(\":has(\")) {\n            elements.addAll(root.getAllElements());\n        } else {\n            addElements(findElements());\n        }\n        while (!tq.isEmpty()) {\n            boolean seenWhite = tq.consumeWhitespace();\n            if (tq.matchChomp(\",\")) {\n                while (!tq.isEmpty()) {\n                    java.lang.String subQuery = tq.chompTo(\",\");\n                    elements.addAll(org.jsoup.select.Selector.select(subQuery, root));\n                } \n            } else if (tq.matchesAny(org.jsoup.select.Selector.combinators)) {\n                combinator(tq.consume().toString());\n            } else if (seenWhite) {\n                combinator(\" \");\n            } else {\n                org.jsoup.select.Elements candidates = findElements();\n                intersectElements(org.jsoup.select.Selector.filterForSelf(elements, candidates));\n            }\n        } \n        return new org.jsoup.select.Elements(elements);\n    }\n\n    private void combinator(java.lang.String combinator) {\n        tq.consumeWhitespace();\n        java.lang.String subQuery = tq.consumeToAny(org.jsoup.select.Selector.combinators);\n        org.jsoup.select.Elements output;\n        if (combinator.equals(\">\")) {\n            output = org.jsoup.select.Selector.filterForChildren(elements, org.jsoup.select.Selector.select(subQuery, elements));\n        } else if (combinator.equals(\" \")) {\n            output = org.jsoup.select.Selector.filterForDescendants(elements, org.jsoup.select.Selector.select(subQuery, elements));\n        } else if (combinator.equals(\"+\")) {\n            output = org.jsoup.select.Selector.filterForAdjacentSiblings(elements, org.jsoup.select.Selector.select(subQuery, root));\n        } else if (combinator.equals(\"~\")) {\n            output = org.jsoup.select.Selector.filterForGeneralSiblings(elements, org.jsoup.select.Selector.select(subQuery, root));\n        } else {\n            throw new java.lang.IllegalStateException(\"Unknown combinator: \" + combinator);\n        }\n        elements.clear();\n        elements.addAll(output);\n    }\n\n    private org.jsoup.select.Elements findElements() {\n        if (tq.matchChomp(\"#\")) {\n            return byId();\n        } else if (tq.matchChomp(\".\")) {\n            return byClass();\n        } else if (tq.matchesWord()) {\n            return byTag();\n        } else if (tq.matches(\"[\")) {\n            return byAttribute();\n        } else if (tq.matchChomp(\"*\")) {\n            return allElements();\n        } else if (tq.matchChomp(\":lt(\")) {\n            return indexLessThan();\n        } else if (tq.matchChomp(\":gt(\")) {\n            return indexGreaterThan();\n        } else if (tq.matchChomp(\":eq(\")) {\n            return indexEquals();\n        } else if (tq.matches(\":has(\")) {\n            return has();\n        } else if (tq.matches(\":contains(\")) {\n            return contains(false);\n        } else if (tq.matches(\":containsOwn(\")) {\n            return contains(true);\n        } else if (tq.matches(\":matches(\")) {\n            return matches(false);\n        } else if (tq.matches(\":matchesOwn(\")) {\n            return matches(true);\n        } else if (tq.matches(\":not(\")) {\n            return not();\n        } else {\n            throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n        }\n    }\n\n    private void addElements(java.util.Collection<org.jsoup.nodes.Element> add) {\n        elements.addAll(add);\n    }\n\n    private void intersectElements(java.util.Collection<org.jsoup.nodes.Element> intersect) {\n        elements.retainAll(intersect);\n    }\n\n    private org.jsoup.select.Elements byId() {\n        java.lang.String id = tq.consumeCssIdentifier();\n        org.jsoup.helper.Validate.notEmpty(id);\n        org.jsoup.nodes.Element found = root.getElementById(id);\n        org.jsoup.select.Elements byId = new org.jsoup.select.Elements();\n        if (found != null) {\n            byId.add(found);\n        }\n        return byId;\n    }\n\n    private org.jsoup.select.Elements byClass() {\n        java.lang.String className = tq.consumeCssIdentifier();\n        org.jsoup.helper.Validate.notEmpty(className);\n        return root.getElementsByClass(className);\n    }\n\n    private org.jsoup.select.Elements byTag() {\n        java.lang.String tagName = tq.consumeElementSelector();\n        org.jsoup.helper.Validate.notEmpty(tagName);\n        if (tagName.contains(\"|\")) {\n            tagName = tagName.replace(\"|\", \":\");\n        }\n        return root.getElementsByTag(tagName);\n    }\n\n    private org.jsoup.select.Elements byAttribute() {\n        org.jsoup.parser.TokenQueue cq = new org.jsoup.parser.TokenQueue(tq.chompBalanced('[', ']'));\n        java.lang.String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\");\n        org.jsoup.helper.Validate.notEmpty(key);\n        cq.consumeWhitespace();\n        if (cq.isEmpty()) {\n            return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);\n        } else if (cq.matchChomp(\"=\")) {\n            return root.getElementsByAttributeValue(key, cq.remainder());\n        } else if (cq.matchChomp(\"!=\")) {\n            return root.getElementsByAttributeValueNot(key, cq.remainder());\n        } else if (cq.matchChomp(\"^=\")) {\n            return root.getElementsByAttributeValueStarting(key, cq.remainder());\n        } else if (cq.matchChomp(\"$=\")) {\n            return root.getElementsByAttributeValueEnding(key, cq.remainder());\n        } else if (cq.matchChomp(\"*=\")) {\n            return root.getElementsByAttributeValueContaining(key, cq.remainder());\n        } else if (cq.matchChomp(\"~=\")) {\n            return root.getElementsByAttributeValueMatching(key, cq.remainder());\n        } else {\n            throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());\n        }\n    }\n\n    private org.jsoup.select.Elements allElements() {\n        return root.getAllElements();\n    }\n\n    private org.jsoup.select.Elements indexLessThan() {\n        return root.getElementsByIndexLessThan(consumeIndex());\n    }\n\n    private org.jsoup.select.Elements indexGreaterThan() {\n        return root.getElementsByIndexGreaterThan(consumeIndex());\n    }\n\n    private org.jsoup.select.Elements indexEquals() {\n        return root.getElementsByIndexEquals(consumeIndex());\n    }\n\n    private int consumeIndex() {\n        java.lang.String indexS = tq.chompTo(\")\").trim();\n        org.jsoup.helper.Validate.isTrue(org.jsoup.helper.StringUtil.isNumeric(indexS), \"Index must be numeric\");\n        return java.lang.Integer.parseInt(indexS);\n    }\n\n    private org.jsoup.select.Elements has() {\n        tq.consume(\":has\");\n        java.lang.String subQuery = tq.chompBalanced('(', ')');\n        org.jsoup.helper.Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");\n        return org.jsoup.select.Selector.filterForParentsOfDescendants(elements, org.jsoup.select.Selector.select(subQuery, elements));\n    }\n\n    private org.jsoup.select.Elements contains(boolean own) {\n        tq.consume(own ? \":containsOwn\" : \":contains\");\n        java.lang.String searchText = org.jsoup.parser.TokenQueue.unescape(tq.chompBalanced('(', ')'));\n        org.jsoup.helper.Validate.notEmpty(searchText, \":contains(text) query must not be empty\");\n        return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);\n    }\n\n    private org.jsoup.select.Elements matches(boolean own) {\n        tq.consume(own ? \":matchesOwn\" : \":matches\");\n        java.lang.String regex = tq.chompBalanced('(', ')');\n        org.jsoup.helper.Validate.notEmpty(regex, \":matches(regex) query must not be empty\");\n        return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);\n    }\n\n    private org.jsoup.select.Elements not() {\n        tq.consume(\":not\");\n        java.lang.String subQuery = tq.chompBalanced('(', ')');\n        org.jsoup.helper.Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");\n        return org.jsoup.select.Selector.filterOut(root.getAllElements(), org.jsoup.select.Selector.select(subQuery, root));\n    }\n\n    private static org.jsoup.select.Elements filterForChildren(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements children = new org.jsoup.select.Elements();\n        CHILD : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element p : parents) {\n                if ((c.parent() != null) && c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }\n        return children;\n    }\n\n    private static org.jsoup.select.Elements filterForDescendants(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements children = new org.jsoup.select.Elements();\n        CHILD : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }\n        return children;\n    }\n\n    private static org.jsoup.select.Elements filterForParentsOfDescendants(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> children) {\n        org.jsoup.select.Elements filteredParents = new org.jsoup.select.Elements();\n        for (org.jsoup.nodes.Element p : parents) {\n            for (org.jsoup.nodes.Element c : children) {\n                if (c.parents().contains(p)) {\n                    filteredParents.add(p);\n                }\n            }\n        }\n        return filteredParents;\n    }\n\n    private static org.jsoup.select.Elements filterForAdjacentSiblings(java.util.Collection<org.jsoup.nodes.Element> elements, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements siblings = new org.jsoup.select.Elements();\n        SIBLING : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element e : elements) {\n                if (!e.parent().equals(c.parent())) {\n                    continue;\n                }\n                org.jsoup.nodes.Element previousSib = c.previousElementSibling();\n                if ((previousSib != null) && previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return siblings;\n    }\n\n    private static org.jsoup.select.Elements filterForGeneralSiblings(java.util.Collection<org.jsoup.nodes.Element> elements, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements output = new org.jsoup.select.Elements();\n        SIBLING : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element e : elements) {\n                if (!e.parent().equals(c.parent())) {\n                    continue;\n                }\n                int ePos = e.elementSiblingIndex();\n                int cPos = c.elementSiblingIndex();\n                if (cPos > ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return output;\n    }\n\n    private static org.jsoup.select.Elements filterForSelf(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements children = new org.jsoup.select.Elements();\n        CHILD : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }\n        return children;\n    }\n\n    static org.jsoup.select.Elements filterOut(java.util.Collection<org.jsoup.nodes.Element> elements, java.util.Collection<org.jsoup.nodes.Element> outs) {\n        org.jsoup.select.Elements output = new org.jsoup.select.Elements();\n        for (org.jsoup.nodes.Element el : elements) {\n            boolean found = false;\n            for (org.jsoup.nodes.Element out : outs) {\n                if (el.equals(out)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                output.add(el);\n            }\n        }\n        return output;\n    }\n\n    public static class SelectorParseException extends java.lang.IllegalStateException {\n        public SelectorParseException(java.lang.String msg, java.lang.Object... params) {\n            super(java.lang.String.format(msg, params));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static org.jsoup.select.Elements filterOut(java.util.Collection<org.jsoup.nodes.Element> elements, java.util.Collection<org.jsoup.nodes.Element> outs) {\n    org.jsoup.select.Elements output = new org.jsoup.select.Elements();\n    for (org.jsoup.nodes.Element el : elements) {\n        boolean found = false;\n        for (org.jsoup.nodes.Element out : outs) {\n            if (el.equals(out)) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            output.add(el);\n        }\n    }\n    return output;\n}",
            "src_parent": "public class Selector {\n    private static final java.lang.String[] combinators = new java.lang.String[]{ \",\", \">\", \"+\", \"~\", \" \" };\n\n    private final org.jsoup.nodes.Element root;\n\n    private final java.util.LinkedHashSet<org.jsoup.nodes.Element> elements;\n\n    private final java.lang.String query;\n\n    private final org.jsoup.parser.TokenQueue tq;\n\n    private Selector(java.lang.String query, org.jsoup.nodes.Element root) {\n        org.jsoup.helper.Validate.notNull(query);\n        query = query.trim();\n        org.jsoup.helper.Validate.notEmpty(query);\n        org.jsoup.helper.Validate.notNull(root);\n        this.elements = new java.util.LinkedHashSet<org.jsoup.nodes.Element>();\n        this.query = query;\n        this.root = root;\n        this.tq = new org.jsoup.parser.TokenQueue(query);\n    }\n\n    public static org.jsoup.select.Elements select(java.lang.String query, org.jsoup.nodes.Element root) {\n        return new org.jsoup.select.Selector(query, root).select();\n    }\n\n    public static org.jsoup.select.Elements select(java.lang.String query, java.lang.Iterable<org.jsoup.nodes.Element> roots) {\n        org.jsoup.helper.Validate.notEmpty(query);\n        org.jsoup.helper.Validate.notNull(roots);\n        java.util.LinkedHashSet<org.jsoup.nodes.Element> elements = new java.util.LinkedHashSet<org.jsoup.nodes.Element>();\n        for (org.jsoup.nodes.Element root : roots) {\n            elements.addAll(org.jsoup.select.Selector.select(query, root));\n        }\n        return new org.jsoup.select.Elements(elements);\n    }\n\n    private org.jsoup.select.Elements select() {\n        tq.consumeWhitespace();\n        if (tq.matchesAny(org.jsoup.select.Selector.combinators)) {\n            elements.add(root);\n            combinator(tq.consume().toString());\n        } else if (tq.matches(\":has(\")) {\n            elements.addAll(root.getAllElements());\n        } else {\n            addElements(findElements());\n        }\n        while (!tq.isEmpty()) {\n            boolean seenWhite = tq.consumeWhitespace();\n            if (tq.matchChomp(\",\")) {\n                while (!tq.isEmpty()) {\n                    java.lang.String subQuery = tq.chompTo(\",\");\n                    elements.addAll(org.jsoup.select.Selector.select(subQuery, root));\n                } \n            } else if (tq.matchesAny(org.jsoup.select.Selector.combinators)) {\n                combinator(tq.consume().toString());\n            } else if (seenWhite) {\n                combinator(\" \");\n            } else {\n                org.jsoup.select.Elements candidates = findElements();\n                intersectElements(org.jsoup.select.Selector.filterForSelf(elements, candidates));\n            }\n        } \n        return new org.jsoup.select.Elements(elements);\n    }\n\n    private void combinator(java.lang.String combinator) {\n        tq.consumeWhitespace();\n        java.lang.String subQuery = tq.consumeToAny(org.jsoup.select.Selector.combinators);\n        org.jsoup.select.Elements output;\n        if (combinator.equals(\">\")) {\n            output = org.jsoup.select.Selector.filterForChildren(elements, org.jsoup.select.Selector.select(subQuery, elements));\n        } else if (combinator.equals(\" \")) {\n            output = org.jsoup.select.Selector.filterForDescendants(elements, org.jsoup.select.Selector.select(subQuery, elements));\n        } else if (combinator.equals(\"+\")) {\n            output = org.jsoup.select.Selector.filterForAdjacentSiblings(elements, org.jsoup.select.Selector.select(subQuery, root));\n        } else if (combinator.equals(\"~\")) {\n            output = org.jsoup.select.Selector.filterForGeneralSiblings(elements, org.jsoup.select.Selector.select(subQuery, root));\n        } else {\n            throw new java.lang.IllegalStateException(\"Unknown combinator: \" + combinator);\n        }\n        elements.clear();\n        elements.addAll(output);\n    }\n\n    private org.jsoup.select.Elements findElements() {\n        if (tq.matchChomp(\"#\")) {\n            return byId();\n        } else if (tq.matchChomp(\".\")) {\n            return byClass();\n        } else if (tq.matchesWord()) {\n            return byTag();\n        } else if (tq.matches(\"[\")) {\n            return byAttribute();\n        } else if (tq.matchChomp(\"*\")) {\n            return allElements();\n        } else if (tq.matchChomp(\":lt(\")) {\n            return indexLessThan();\n        } else if (tq.matchChomp(\":gt(\")) {\n            return indexGreaterThan();\n        } else if (tq.matchChomp(\":eq(\")) {\n            return indexEquals();\n        } else if (tq.matches(\":has(\")) {\n            return has();\n        } else if (tq.matches(\":contains(\")) {\n            return contains(false);\n        } else if (tq.matches(\":containsOwn(\")) {\n            return contains(true);\n        } else if (tq.matches(\":matches(\")) {\n            return matches(false);\n        } else if (tq.matches(\":matchesOwn(\")) {\n            return matches(true);\n        } else if (tq.matches(\":not(\")) {\n            return not();\n        } else {\n            throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n        }\n    }\n\n    private void addElements(java.util.Collection<org.jsoup.nodes.Element> add) {\n        elements.addAll(add);\n    }\n\n    private void intersectElements(java.util.Collection<org.jsoup.nodes.Element> intersect) {\n        elements.retainAll(intersect);\n    }\n\n    private org.jsoup.select.Elements byId() {\n        java.lang.String id = tq.consumeCssIdentifier();\n        org.jsoup.helper.Validate.notEmpty(id);\n        org.jsoup.nodes.Element found = root.getElementById(id);\n        org.jsoup.select.Elements byId = new org.jsoup.select.Elements();\n        if (found != null) {\n            byId.add(found);\n        }\n        return byId;\n    }\n\n    private org.jsoup.select.Elements byClass() {\n        java.lang.String className = tq.consumeCssIdentifier();\n        org.jsoup.helper.Validate.notEmpty(className);\n        return root.getElementsByClass(className);\n    }\n\n    private org.jsoup.select.Elements byTag() {\n        java.lang.String tagName = tq.consumeElementSelector();\n        org.jsoup.helper.Validate.notEmpty(tagName);\n        if (tagName.contains(\"|\")) {\n            tagName = tagName.replace(\"|\", \":\");\n        }\n        return root.getElementsByTag(tagName);\n    }\n\n    private org.jsoup.select.Elements byAttribute() {\n        org.jsoup.parser.TokenQueue cq = new org.jsoup.parser.TokenQueue(tq.chompBalanced('[', ']'));\n        java.lang.String key = cq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\");\n        org.jsoup.helper.Validate.notEmpty(key);\n        cq.consumeWhitespace();\n        if (cq.isEmpty()) {\n            return key.startsWith(\"^\") ? root.getElementsByAttributeStarting(key.substring(1)) : root.getElementsByAttribute(key);\n        } else if (cq.matchChomp(\"=\")) {\n            return root.getElementsByAttributeValue(key, cq.remainder());\n        } else if (cq.matchChomp(\"!=\")) {\n            return root.getElementsByAttributeValueNot(key, cq.remainder());\n        } else if (cq.matchChomp(\"^=\")) {\n            return root.getElementsByAttributeValueStarting(key, cq.remainder());\n        } else if (cq.matchChomp(\"$=\")) {\n            return root.getElementsByAttributeValueEnding(key, cq.remainder());\n        } else if (cq.matchChomp(\"*=\")) {\n            return root.getElementsByAttributeValueContaining(key, cq.remainder());\n        } else if (cq.matchChomp(\"~=\")) {\n            return root.getElementsByAttributeValueMatching(key, cq.remainder());\n        } else {\n            throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder());\n        }\n    }\n\n    private org.jsoup.select.Elements allElements() {\n        return root.getAllElements();\n    }\n\n    private org.jsoup.select.Elements indexLessThan() {\n        return root.getElementsByIndexLessThan(consumeIndex());\n    }\n\n    private org.jsoup.select.Elements indexGreaterThan() {\n        return root.getElementsByIndexGreaterThan(consumeIndex());\n    }\n\n    private org.jsoup.select.Elements indexEquals() {\n        return root.getElementsByIndexEquals(consumeIndex());\n    }\n\n    private int consumeIndex() {\n        java.lang.String indexS = tq.chompTo(\")\").trim();\n        org.jsoup.helper.Validate.isTrue(org.jsoup.helper.StringUtil.isNumeric(indexS), \"Index must be numeric\");\n        return java.lang.Integer.parseInt(indexS);\n    }\n\n    private org.jsoup.select.Elements has() {\n        tq.consume(\":has\");\n        java.lang.String subQuery = tq.chompBalanced('(', ')');\n        org.jsoup.helper.Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");\n        return org.jsoup.select.Selector.filterForParentsOfDescendants(elements, org.jsoup.select.Selector.select(subQuery, elements));\n    }\n\n    private org.jsoup.select.Elements contains(boolean own) {\n        tq.consume(own ? \":containsOwn\" : \":contains\");\n        java.lang.String searchText = org.jsoup.parser.TokenQueue.unescape(tq.chompBalanced('(', ')'));\n        org.jsoup.helper.Validate.notEmpty(searchText, \":contains(text) query must not be empty\");\n        return own ? root.getElementsContainingOwnText(searchText) : root.getElementsContainingText(searchText);\n    }\n\n    private org.jsoup.select.Elements matches(boolean own) {\n        tq.consume(own ? \":matchesOwn\" : \":matches\");\n        java.lang.String regex = tq.chompBalanced('(', ')');\n        org.jsoup.helper.Validate.notEmpty(regex, \":matches(regex) query must not be empty\");\n        return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);\n    }\n\n    private org.jsoup.select.Elements not() {\n        tq.consume(\":not\");\n        java.lang.String subQuery = tq.chompBalanced('(', ')');\n        org.jsoup.helper.Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");\n        return org.jsoup.select.Selector.filterOut(root.getAllElements(), org.jsoup.select.Selector.select(subQuery, root));\n    }\n\n    private static org.jsoup.select.Elements filterForChildren(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements children = new org.jsoup.select.Elements();\n        CHILD : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element p : parents) {\n                if ((c.parent() != null) && c.parent().equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }\n        return children;\n    }\n\n    private static org.jsoup.select.Elements filterForDescendants(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements children = new org.jsoup.select.Elements();\n        CHILD : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element p : parents) {\n                if (c.equals(p)) {\n                    continue CHILD;\n                }\n            }\n            children.add(c);\n        }\n        return children;\n    }\n\n    private static org.jsoup.select.Elements filterForParentsOfDescendants(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> children) {\n        org.jsoup.select.Elements filteredParents = new org.jsoup.select.Elements();\n        for (org.jsoup.nodes.Element p : parents) {\n            for (org.jsoup.nodes.Element c : children) {\n                if (c.parents().contains(p)) {\n                    filteredParents.add(p);\n                }\n            }\n        }\n        return filteredParents;\n    }\n\n    private static org.jsoup.select.Elements filterForAdjacentSiblings(java.util.Collection<org.jsoup.nodes.Element> elements, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements siblings = new org.jsoup.select.Elements();\n        SIBLING : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element e : elements) {\n                if (!e.parent().equals(c.parent())) {\n                    continue;\n                }\n                org.jsoup.nodes.Element previousSib = c.previousElementSibling();\n                if ((previousSib != null) && previousSib.equals(e)) {\n                    siblings.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return siblings;\n    }\n\n    private static org.jsoup.select.Elements filterForGeneralSiblings(java.util.Collection<org.jsoup.nodes.Element> elements, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements output = new org.jsoup.select.Elements();\n        SIBLING : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element e : elements) {\n                if (!e.parent().equals(c.parent())) {\n                    continue;\n                }\n                int ePos = e.elementSiblingIndex();\n                int cPos = c.elementSiblingIndex();\n                if (cPos > ePos) {\n                    output.add(c);\n                    continue SIBLING;\n                }\n            }\n        }\n        return output;\n    }\n\n    private static org.jsoup.select.Elements filterForSelf(java.util.Collection<org.jsoup.nodes.Element> parents, java.util.Collection<org.jsoup.nodes.Element> candidates) {\n        org.jsoup.select.Elements children = new org.jsoup.select.Elements();\n        CHILD : for (org.jsoup.nodes.Element c : candidates) {\n            for (org.jsoup.nodes.Element p : parents) {\n                if (c.equals(p)) {\n                    children.add(c);\n                    continue CHILD;\n                }\n            }\n        }\n        return children;\n    }\n\n    static org.jsoup.select.Elements filterOut(java.util.Collection<org.jsoup.nodes.Element> elements, java.util.Collection<org.jsoup.nodes.Element> outs) {\n        org.jsoup.select.Elements output = new org.jsoup.select.Elements();\n        for (org.jsoup.nodes.Element el : elements) {\n            boolean found = false;\n            for (org.jsoup.nodes.Element out : outs) {\n                if (el.equals(out)) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                output.add(el);\n            }\n        }\n        return output;\n    }\n\n    public static class SelectorParseException extends java.lang.IllegalStateException {\n        public SelectorParseException(java.lang.String msg, java.lang.Object... params) {\n            super(java.lang.String.format(msg, params));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    addElements(findElements());\n}",
            "dst_parent": "if (tq.matchesAny(org.jsoup.select.Selector.combinators)) {\n    elements.add(root);\n    combinator(tq.consume().toString());\n} else {\n    addElements(findElements());\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    addElements(findElements());\n}",
            "src_parent": "if (tq.matches(\":has(\")) {\n    elements.addAll(root.getAllElements());\n} else {\n    addElements(findElements());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "dst_parent": "if (tq.matches(\":matchesOwn(\")) {\n    return matches(true);\n} else {\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "src_parent": "if (tq.matches(\":not(\")) {\n    return not();\n} else {\n    throw new org.jsoup.select.Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "Selector"
    }
  ],
  "id": "Jsoup_11"
}