{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType src) {\n    com.fasterxml.jackson.databind.JavaType type = this;\n    java.lang.Object h = src.getTypeHandler();\n    if (h != _typeHandler) {\n        type = type.withTypeHandler(h);\n    }\n    h = src.getValueHandler();\n    if (h != _valueHandler) {\n        type = type.withValueHandler(h);\n    }\n    return type;\n}",
            "src_parent": "public abstract class JavaType extends com.fasterxml.jackson.core.type.ResolvedType implements java.io.Serializable , java.lang.reflect.Type {\n    private static final long serialVersionUID = 1;\n\n    protected final java.lang.Class<?> _class;\n\n    protected final int _hash;\n\n    protected final java.lang.Object _valueHandler;\n\n    protected final java.lang.Object _typeHandler;\n\n    protected final boolean _asStatic;\n\n    protected JavaType(java.lang.Class<?> raw, int additionalHash, java.lang.Object valueHandler, java.lang.Object typeHandler, boolean asStatic) {\n        _class = raw;\n        _hash = raw.getName().hashCode() + additionalHash;\n        _valueHandler = valueHandler;\n        _typeHandler = typeHandler;\n        _asStatic = asStatic;\n    }\n\n    protected JavaType(com.fasterxml.jackson.databind.JavaType base) {\n        _class = base._class;\n        _hash = base._hash;\n        _valueHandler = base._valueHandler;\n        _typeHandler = base._typeHandler;\n        _asStatic = base._asStatic;\n    }\n\n    public abstract com.fasterxml.jackson.databind.JavaType withTypeHandler(java.lang.Object h);\n\n    public abstract com.fasterxml.jackson.databind.JavaType withContentTypeHandler(java.lang.Object h);\n\n    public abstract com.fasterxml.jackson.databind.JavaType withValueHandler(java.lang.Object h);\n\n    public abstract com.fasterxml.jackson.databind.JavaType withContentValueHandler(java.lang.Object h);\n\n    public com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType src) {\n        com.fasterxml.jackson.databind.JavaType type = this;\n        java.lang.Object h = src.getTypeHandler();\n        if (h != _typeHandler) {\n            type = type.withTypeHandler(h);\n        }\n        h = src.getValueHandler();\n        if (h != _valueHandler) {\n            type = type.withValueHandler(h);\n        }\n        return type;\n    }\n\n    public abstract com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType contentType);\n\n    public abstract com.fasterxml.jackson.databind.JavaType withStaticTyping();\n\n    public abstract com.fasterxml.jackson.databind.JavaType refine(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces);\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.JavaType forcedNarrowBy(java.lang.Class<?> subclass) {\n        if (subclass == _class) {\n            return this;\n        }\n        com.fasterxml.jackson.databind.JavaType result = _narrow(subclass);\n        if (_valueHandler != result.<java.lang.Object>getValueHandler()) {\n            result = result.withValueHandler(_valueHandler);\n        }\n        if (_typeHandler != result.<java.lang.Object>getTypeHandler()) {\n            result = result.withTypeHandler(_typeHandler);\n        }\n        return result;\n    }\n\n    @java.lang.Deprecated\n    protected abstract com.fasterxml.jackson.databind.JavaType _narrow(java.lang.Class<?> subclass);\n\n    @java.lang.Override\n    public final java.lang.Class<?> getRawClass() {\n        return _class;\n    }\n\n    @java.lang.Override\n    public final boolean hasRawClass(java.lang.Class<?> clz) {\n        return _class == clz;\n    }\n\n    public boolean hasContentType() {\n        return true;\n    }\n\n    public final boolean isTypeOrSubTypeOf(java.lang.Class<?> clz) {\n        return (_class == clz) || clz.isAssignableFrom(_class);\n    }\n\n    @java.lang.Override\n    public boolean isAbstract() {\n        return java.lang.reflect.Modifier.isAbstract(_class.getModifiers());\n    }\n\n    @java.lang.Override\n    public boolean isConcrete() {\n        int mod = _class.getModifiers();\n        if ((mod & (java.lang.reflect.Modifier.INTERFACE | java.lang.reflect.Modifier.ABSTRACT)) == 0) {\n            return true;\n        }\n        return _class.isPrimitive();\n    }\n\n    @java.lang.Override\n    public boolean isThrowable() {\n        return java.lang.Throwable.class.isAssignableFrom(_class);\n    }\n\n    @java.lang.Override\n    public boolean isArrayType() {\n        return false;\n    }\n\n    @java.lang.Override\n    public final boolean isEnumType() {\n        return _class.isEnum();\n    }\n\n    @java.lang.Override\n    public final boolean isInterface() {\n        return _class.isInterface();\n    }\n\n    @java.lang.Override\n    public final boolean isPrimitive() {\n        return _class.isPrimitive();\n    }\n\n    @java.lang.Override\n    public final boolean isFinal() {\n        return java.lang.reflect.Modifier.isFinal(_class.getModifiers());\n    }\n\n    @java.lang.Override\n    public abstract boolean isContainerType();\n\n    @java.lang.Override\n    public boolean isCollectionLikeType() {\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean isMapLikeType() {\n        return false;\n    }\n\n    public final boolean isJavaLangObject() {\n        return _class == java.lang.Object.class;\n    }\n\n    public final boolean useStaticType() {\n        return _asStatic;\n    }\n\n    @java.lang.Override\n    public boolean hasGenericTypes() {\n        return containedTypeCount() > 0;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getKeyType() {\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getContentType() {\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getReferencedType() {\n        return null;\n    }\n\n    @java.lang.Override\n    public abstract int containedTypeCount();\n\n    @java.lang.Override\n    public abstract com.fasterxml.jackson.databind.JavaType containedType(int index);\n\n    @java.lang.Deprecated\n    @java.lang.Override\n    public abstract java.lang.String containedTypeName(int index);\n\n    @java.lang.Deprecated\n    @java.lang.Override\n    public java.lang.Class<?> getParameterSource() {\n        return null;\n    }\n\n    public com.fasterxml.jackson.databind.JavaType containedTypeOrUnknown(int index) {\n        com.fasterxml.jackson.databind.JavaType t = containedType(index);\n        return t == null ? com.fasterxml.jackson.databind.type.TypeFactory.unknownType() : t;\n    }\n\n    public abstract com.fasterxml.jackson.databind.type.TypeBindings getBindings();\n\n    public abstract com.fasterxml.jackson.databind.JavaType findSuperType(java.lang.Class<?> erasedTarget);\n\n    public abstract com.fasterxml.jackson.databind.JavaType getSuperClass();\n\n    public abstract java.util.List<com.fasterxml.jackson.databind.JavaType> getInterfaces();\n\n    public abstract com.fasterxml.jackson.databind.JavaType[] findTypeParameters(java.lang.Class<?> expType);\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T getValueHandler() {\n        return ((T) (_valueHandler));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T getTypeHandler() {\n        return ((T) (_typeHandler));\n    }\n\n    public java.lang.Object getContentValueHandler() {\n        return null;\n    }\n\n    public java.lang.Object getContentTypeHandler() {\n        return null;\n    }\n\n    public boolean hasValueHandler() {\n        return _valueHandler != null;\n    }\n\n    public boolean hasHandlers() {\n        return (_typeHandler != null) || (_valueHandler != null);\n    }\n\n    public java.lang.String getGenericSignature() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(40);\n        getGenericSignature(sb);\n        return sb.toString();\n    }\n\n    public abstract java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder sb);\n\n    public java.lang.String getErasedSignature() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(40);\n        getErasedSignature(sb);\n        return sb.toString();\n    }\n\n    public abstract java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder sb);\n\n    @java.lang.Override\n    public abstract java.lang.String toString();\n\n    @java.lang.Override\n    public abstract boolean equals(java.lang.Object o);\n\n    @java.lang.Override\n    public final int hashCode() {\n        return _hash;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "JavaType"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@java.lang.Override\npublic com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType src) {\n    com.fasterxml.jackson.databind.JavaType type = super.withHandlersFrom(src);\n    com.fasterxml.jackson.databind.JavaType srcCt = src.getContentType();\n    if (srcCt != null) {\n        com.fasterxml.jackson.databind.JavaType ct = _elementType.withHandlersFrom(srcCt);\n        if (ct != _elementType) {\n            type = type.withContentType(ct);\n        }\n    }\n    return type;\n}",
            "src_parent": "public class CollectionLikeType extends com.fasterxml.jackson.databind.type.TypeBase {\n    private static final long serialVersionUID = 1L;\n\n    protected final com.fasterxml.jackson.databind.JavaType _elementType;\n\n    protected CollectionLikeType(java.lang.Class<?> collT, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInts, com.fasterxml.jackson.databind.JavaType elemT, java.lang.Object valueHandler, java.lang.Object typeHandler, boolean asStatic) {\n        super(collT, bindings, superClass, superInts, elemT.hashCode(), valueHandler, typeHandler, asStatic);\n        _elementType = elemT;\n    }\n\n    protected CollectionLikeType(com.fasterxml.jackson.databind.type.TypeBase base, com.fasterxml.jackson.databind.JavaType elemT) {\n        super(base);\n        _elementType = elemT;\n    }\n\n    public static com.fasterxml.jackson.databind.type.CollectionLikeType construct(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInts, com.fasterxml.jackson.databind.JavaType elemT) {\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(rawType, bindings, superClass, superInts, elemT, null, null, false);\n    }\n\n    @java.lang.Deprecated\n    public static com.fasterxml.jackson.databind.type.CollectionLikeType construct(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.JavaType elemT) {\n        java.lang.reflect.TypeVariable<?>[] vars = rawType.getTypeParameters();\n        com.fasterxml.jackson.databind.type.TypeBindings bindings;\n        if ((vars == null) || (vars.length != 1)) {\n            bindings = com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings();\n        } else {\n            bindings = com.fasterxml.jackson.databind.type.TypeBindings.create(rawType, elemT);\n        }\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(rawType, bindings, com.fasterxml.jackson.databind.type.TypeBase._bogusSuperClass(rawType), null, elemT, null, null, false);\n    }\n\n    public static com.fasterxml.jackson.databind.type.CollectionLikeType upgradeFrom(com.fasterxml.jackson.databind.JavaType baseType, com.fasterxml.jackson.databind.JavaType elementType) {\n        if (baseType instanceof com.fasterxml.jackson.databind.type.TypeBase) {\n            return new com.fasterxml.jackson.databind.type.CollectionLikeType(((com.fasterxml.jackson.databind.type.TypeBase) (baseType)), elementType);\n        }\n        throw new java.lang.IllegalArgumentException(\"Can not upgrade from an instance of \" + baseType.getClass());\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    protected com.fasterxml.jackson.databind.JavaType _narrow(java.lang.Class<?> subclass) {\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(subclass, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType contentType) {\n        if (_elementType == contentType) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, contentType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.CollectionLikeType withTypeHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, h, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.CollectionLikeType withContentTypeHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.CollectionLikeType withValueHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType, h, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.CollectionLikeType withContentValueHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType src) {\n        com.fasterxml.jackson.databind.JavaType type = super.withHandlersFrom(src);\n        com.fasterxml.jackson.databind.JavaType srcCt = src.getContentType();\n        if (srcCt != null) {\n            com.fasterxml.jackson.databind.JavaType ct = _elementType.withHandlersFrom(srcCt);\n            if (ct != _elementType) {\n                type = type.withContentType(ct);\n            }\n        }\n        return type;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.CollectionLikeType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(_class, _bindings, _superClass, _superInterfaces, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType refine(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        return new com.fasterxml.jackson.databind.type.CollectionLikeType(rawType, bindings, superClass, superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public boolean isContainerType() {\n        return true;\n    }\n\n    @java.lang.Override\n    public boolean isCollectionLikeType() {\n        return true;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getContentType() {\n        return _elementType;\n    }\n\n    @java.lang.Override\n    public java.lang.Object getContentValueHandler() {\n        return _elementType.getValueHandler();\n    }\n\n    @java.lang.Override\n    public java.lang.Object getContentTypeHandler() {\n        return _elementType.getTypeHandler();\n    }\n\n    @java.lang.Override\n    public boolean hasHandlers() {\n        return super.hasHandlers() || _elementType.hasHandlers();\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder sb) {\n        return com.fasterxml.jackson.databind.type.TypeBase._classSignature(_class, sb, true);\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder sb) {\n        com.fasterxml.jackson.databind.type.TypeBase._classSignature(_class, sb, false);\n        sb.append('<');\n        _elementType.getGenericSignature(sb);\n        sb.append(\">;\");\n        return sb;\n    }\n\n    @java.lang.Override\n    protected java.lang.String buildCanonicalName() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(_class.getName());\n        if (_elementType != null) {\n            sb.append('<');\n            sb.append(_elementType.toCanonical());\n            sb.append('>');\n        }\n        return sb.toString();\n    }\n\n    public boolean isTrueCollectionType() {\n        return java.util.Collection.class.isAssignableFrom(_class);\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o == this) {\n            return true;\n        }\n        if (o == null) {\n            return false;\n        }\n        if (o.getClass() != getClass()) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.type.CollectionLikeType other = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (o));\n        return (_class == other._class) && _elementType.equals(other._elementType);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (((\"[collection-like type; class \" + _class.getName()) + \", contains \") + _elementType) + \"]\";\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "CollectionLikeType"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Do",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "newType = newType.withHandlersFrom(baseType)",
            "src_parent": "{\n    final java.lang.Class<?> rawBase = baseType.getRawClass();\n    if (rawBase == subclass) {\n        return baseType;\n    }\n    com.fasterxml.jackson.databind.JavaType newType;\n    do {\n        if (rawBase == java.lang.Object.class) {\n            newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n            break;\n        }\n        if (!rawBase.isAssignableFrom(subclass)) {\n            throw new java.lang.IllegalArgumentException(java.lang.String.format(\"Class %s not subtype of %s\", subclass.getName(), baseType));\n        }\n        if (baseType.getBindings().isEmpty()) {\n            newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n            break;\n        }\n        if (baseType.isContainerType()) {\n            if (baseType.isMapLikeType()) {\n                if ((((subclass == java.util.HashMap.class) || (subclass == java.util.LinkedHashMap.class)) || (subclass == java.util.EnumMap.class)) || (subclass == java.util.TreeMap.class)) {\n                    newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));\n                    break;\n                }\n            } else if (baseType.isCollectionLikeType()) {\n                if ((((subclass == java.util.ArrayList.class) || (subclass == java.util.LinkedList.class)) || (subclass == java.util.HashSet.class)) || (subclass == java.util.TreeSet.class)) {\n                    newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.getContentType()));\n                    break;\n                }\n                if (rawBase == java.util.EnumSet.class) {\n                    return baseType;\n                }\n            }\n        }\n        int typeParamCount = subclass.getTypeParameters().length;\n        if (typeParamCount == 0) {\n            newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n            break;\n        }\n        com.fasterxml.jackson.databind.type.TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);\n        if (baseType.isInterface()) {\n            newType = baseType.refine(subclass, tb, null, new com.fasterxml.jackson.databind.JavaType[]{ baseType });\n        } else {\n            newType = baseType.refine(subclass, tb, baseType, com.fasterxml.jackson.databind.type.TypeFactory.NO_TYPES);\n        }\n        if (newType == null) {\n            newType = _fromClass(null, subclass, tb);\n        }\n    } while (false );\n    newType = newType.withHandlersFrom(baseType);\n    return newType;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        }
      ],
      "file_name": "TypeFactory"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@java.lang.Override\npublic com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType src) {\n    com.fasterxml.jackson.databind.JavaType type = super.withHandlersFrom(src);\n    com.fasterxml.jackson.databind.JavaType srcKeyType = src.getKeyType();\n    if (type instanceof com.fasterxml.jackson.databind.type.MapLikeType) {\n        if (srcKeyType != null) {\n            com.fasterxml.jackson.databind.JavaType ct = _keyType.withHandlersFrom(srcKeyType);\n            if (ct != _keyType) {\n                type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(ct);\n            }\n        }\n    }\n    com.fasterxml.jackson.databind.JavaType srcCt = src.getContentType();\n    if (srcCt != null) {\n        com.fasterxml.jackson.databind.JavaType ct = _valueType.withHandlersFrom(srcCt);\n        if (ct != _valueType) {\n            type = type.withContentType(ct);\n        }\n    }\n    return type;\n}",
            "src_parent": "public class MapLikeType extends com.fasterxml.jackson.databind.type.TypeBase {\n    private static final long serialVersionUID = 1L;\n\n    protected final com.fasterxml.jackson.databind.JavaType _keyType;\n\n    protected final com.fasterxml.jackson.databind.JavaType _valueType;\n\n    protected MapLikeType(java.lang.Class<?> mapType, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInts, com.fasterxml.jackson.databind.JavaType keyT, com.fasterxml.jackson.databind.JavaType valueT, java.lang.Object valueHandler, java.lang.Object typeHandler, boolean asStatic) {\n        super(mapType, bindings, superClass, superInts, keyT.hashCode() ^ valueT.hashCode(), valueHandler, typeHandler, asStatic);\n        _keyType = keyT;\n        _valueType = valueT;\n    }\n\n    protected MapLikeType(com.fasterxml.jackson.databind.type.TypeBase base, com.fasterxml.jackson.databind.JavaType keyT, com.fasterxml.jackson.databind.JavaType valueT) {\n        super(base);\n        _keyType = keyT;\n        _valueType = valueT;\n    }\n\n    public static com.fasterxml.jackson.databind.type.MapLikeType upgradeFrom(com.fasterxml.jackson.databind.JavaType baseType, com.fasterxml.jackson.databind.JavaType keyT, com.fasterxml.jackson.databind.JavaType valueT) {\n        if (baseType instanceof com.fasterxml.jackson.databind.type.TypeBase) {\n            return new com.fasterxml.jackson.databind.type.MapLikeType(((com.fasterxml.jackson.databind.type.TypeBase) (baseType)), keyT, valueT);\n        }\n        throw new java.lang.IllegalArgumentException(\"Can not upgrade from an instance of \" + baseType.getClass());\n    }\n\n    @java.lang.Deprecated\n    public static com.fasterxml.jackson.databind.type.MapLikeType construct(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.JavaType keyT, com.fasterxml.jackson.databind.JavaType valueT) {\n        java.lang.reflect.TypeVariable<?>[] vars = rawType.getTypeParameters();\n        com.fasterxml.jackson.databind.type.TypeBindings bindings;\n        if ((vars == null) || (vars.length != 2)) {\n            bindings = com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings();\n        } else {\n            bindings = com.fasterxml.jackson.databind.type.TypeBindings.create(rawType, keyT, valueT);\n        }\n        return new com.fasterxml.jackson.databind.type.MapLikeType(rawType, bindings, com.fasterxml.jackson.databind.type.TypeBase._bogusSuperClass(rawType), null, keyT, valueT, null, null, false);\n    }\n\n    @java.lang.Deprecated\n    @java.lang.Override\n    protected com.fasterxml.jackson.databind.JavaType _narrow(java.lang.Class<?> subclass) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    public com.fasterxml.jackson.databind.type.MapLikeType withKeyType(com.fasterxml.jackson.databind.JavaType keyType) {\n        if (keyType == _keyType) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType withContentType(com.fasterxml.jackson.databind.JavaType contentType) {\n        if (_valueType == contentType) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, contentType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.MapLikeType withTypeHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, h, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.MapLikeType withContentTypeHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.MapLikeType withValueHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, h, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.MapLikeType withContentValueHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType withHandlersFrom(com.fasterxml.jackson.databind.JavaType src) {\n        com.fasterxml.jackson.databind.JavaType type = super.withHandlersFrom(src);\n        com.fasterxml.jackson.databind.JavaType srcKeyType = src.getKeyType();\n        if (type instanceof com.fasterxml.jackson.databind.type.MapLikeType) {\n            if (srcKeyType != null) {\n                com.fasterxml.jackson.databind.JavaType ct = _keyType.withHandlersFrom(srcKeyType);\n                if (ct != _keyType) {\n                    type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(ct);\n                }\n            }\n        }\n        com.fasterxml.jackson.databind.JavaType srcCt = src.getContentType();\n        if (srcCt != null) {\n            com.fasterxml.jackson.databind.JavaType ct = _valueType.withHandlersFrom(srcCt);\n            if (ct != _valueType) {\n                type = type.withContentType(ct);\n            }\n        }\n        return type;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.type.MapLikeType withStaticTyping() {\n        if (_asStatic) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withStaticTyping(), _valueHandler, _typeHandler, true);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType refine(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(rawType, bindings, superClass, superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    @java.lang.Override\n    protected java.lang.String buildCanonicalName() {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(_class.getName());\n        if (_keyType != null) {\n            sb.append('<');\n            sb.append(_keyType.toCanonical());\n            sb.append(',');\n            sb.append(_valueType.toCanonical());\n            sb.append('>');\n        }\n        return sb.toString();\n    }\n\n    @java.lang.Override\n    public boolean isContainerType() {\n        return true;\n    }\n\n    @java.lang.Override\n    public boolean isMapLikeType() {\n        return true;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getKeyType() {\n        return _keyType;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType getContentType() {\n        return _valueType;\n    }\n\n    @java.lang.Override\n    public java.lang.Object getContentValueHandler() {\n        return _valueType.getValueHandler();\n    }\n\n    @java.lang.Override\n    public java.lang.Object getContentTypeHandler() {\n        return _valueType.getTypeHandler();\n    }\n\n    @java.lang.Override\n    public boolean hasHandlers() {\n        return (super.hasHandlers() || _valueType.hasHandlers()) || _keyType.hasHandlers();\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuilder getErasedSignature(java.lang.StringBuilder sb) {\n        return com.fasterxml.jackson.databind.type.TypeBase._classSignature(_class, sb, true);\n    }\n\n    @java.lang.Override\n    public java.lang.StringBuilder getGenericSignature(java.lang.StringBuilder sb) {\n        com.fasterxml.jackson.databind.type.TypeBase._classSignature(_class, sb, false);\n        sb.append('<');\n        _keyType.getGenericSignature(sb);\n        _valueType.getGenericSignature(sb);\n        sb.append(\">;\");\n        return sb;\n    }\n\n    public com.fasterxml.jackson.databind.type.MapLikeType withKeyTypeHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType.withTypeHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    public com.fasterxml.jackson.databind.type.MapLikeType withKeyValueHandler(java.lang.Object h) {\n        return new com.fasterxml.jackson.databind.type.MapLikeType(_class, _bindings, _superClass, _superInterfaces, _keyType.withValueHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic);\n    }\n\n    public boolean isTrueMapType() {\n        return java.util.Map.class.isAssignableFrom(_class);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return java.lang.String.format(\"[map-like type; class %s, %s -> %s]\", _class.getName(), _keyType, _valueType);\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o == this) {\n            return true;\n        }\n        if (o == null) {\n            return false;\n        }\n        if (o.getClass() != getClass()) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.type.MapLikeType other = ((com.fasterxml.jackson.databind.type.MapLikeType) (o));\n        return ((_class == other._class) && _keyType.equals(other._keyType)) && _valueType.equals(other._valueType);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "MapLikeType"
    }
  ],
  "id": "JacksonDatabind_59"
}