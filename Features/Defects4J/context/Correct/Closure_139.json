{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "case com.google.javascript.rhino.Token.FUNCTION :\n    normalizeFunctionDeclaration(n);\n    break;",
            "src_parent": "switch (n.getType()) {\n    case com.google.javascript.rhino.Token.WHILE :\n        if (com.google.javascript.jscomp.Normalize.CONVERT_WHILE_TO_FOR) {\n            com.google.javascript.rhino.Node expr = n.getFirstChild();\n            n.setType(Token.FOR);\n            n.addChildBefore(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY), expr);\n            n.addChildAfter(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY), expr);\n            reportCodeChange(\"WHILE node\");\n        }\n        break;\n    case com.google.javascript.rhino.Token.FUNCTION :\n        normalizeFunctionDeclaration(n);\n        break;\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private void normalizeFunctionDeclaration(com.google.javascript.rhino.Node n) {\n    com.google.common.base.Preconditions.checkState(n.getType() == com.google.javascript.rhino.Token.FUNCTION);\n    if ((!com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(n)) && (!com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(n))) {\n        rewriteFunctionDeclaration(n);\n    }\n}",
            "src_parent": "static class NormalizeStatements implements com.google.javascript.jscomp.NodeTraversal.Callback {\n    private final com.google.javascript.jscomp.AbstractCompiler compiler;\n\n    private final boolean assertOnChange;\n\n    NormalizeStatements(com.google.javascript.jscomp.AbstractCompiler compiler, boolean assertOnChange) {\n        this.compiler = compiler;\n        this.assertOnChange = assertOnChange;\n    }\n\n    private void reportCodeChange(java.lang.String changeDescription) {\n        if (assertOnChange) {\n            throw new java.lang.IllegalStateException(\"Normalize constraints violated:\\n\" + changeDescription);\n        }\n        compiler.reportCodeChange();\n    }\n\n    @java.lang.Override\n    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        doStatementNormalizations(t, n, parent);\n        return true;\n    }\n\n    @java.lang.Override\n    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.WHILE :\n                if (com.google.javascript.jscomp.Normalize.CONVERT_WHILE_TO_FOR) {\n                    com.google.javascript.rhino.Node expr = n.getFirstChild();\n                    n.setType(Token.FOR);\n                    n.addChildBefore(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY), expr);\n                    n.addChildAfter(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY), expr);\n                    reportCodeChange(\"WHILE node\");\n                }\n                break;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                normalizeFunctionDeclaration(n);\n                break;\n        }\n    }\n\n    private void normalizeFunctionDeclaration(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkState(n.getType() == com.google.javascript.rhino.Token.FUNCTION);\n        if ((!com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(n)) && (!com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(n))) {\n            rewriteFunctionDeclaration(n);\n        }\n    }\n\n    private void rewriteFunctionDeclaration(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node oldNameNode = n.getFirstChild();\n        com.google.javascript.rhino.Node fnNameNode = oldNameNode.cloneNode();\n        com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, fnNameNode, n.getLineno(), n.getCharno());\n        var.copyInformationFrom(n);\n        oldNameNode.setString(\"\");\n        com.google.javascript.rhino.Node parent = n.getParent();\n        parent.replaceChild(n, var);\n        fnNameNode.addChildToFront(n);\n        reportCodeChange(\"Function declaration\");\n    }\n\n    private void doStatementNormalizations(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {\n            normalizeLabels(n);\n        }\n        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(n) || (n.getType() == com.google.javascript.rhino.Token.LABEL)) {\n            extractForInitializer(n, null, null);\n        }\n        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(n)) {\n            splitVarDeclarations(n);\n        }\n        if (n.getType() == com.google.javascript.rhino.Token.FUNCTION) {\n            moveNamedFunctions(n.getLastChild());\n        }\n    }\n\n    private void normalizeLabels(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.LABEL);\n        com.google.javascript.rhino.Node last = n.getLastChild();\n        switch (last.getType()) {\n            case com.google.javascript.rhino.Token.LABEL :\n            case com.google.javascript.rhino.Token.BLOCK :\n            case com.google.javascript.rhino.Token.FOR :\n            case com.google.javascript.rhino.Token.WHILE :\n            case com.google.javascript.rhino.Token.DO :\n                return;\n            default :\n                com.google.javascript.rhino.Node block = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BLOCK);\n                n.replaceChild(last, block);\n                block.addChildToFront(last);\n                reportCodeChange(\"LABEL normalization\");\n                return;\n        }\n    }\n\n    private void extractForInitializer(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node before, com.google.javascript.rhino.Node beforeParent) {\n        for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {\n            next = c.getNext();\n            com.google.javascript.rhino.Node insertBefore = (before == null) ? c : before;\n            com.google.javascript.rhino.Node insertBeforeParent = (before == null) ? n : beforeParent;\n            switch (c.getType()) {\n                case com.google.javascript.rhino.Token.LABEL :\n                    extractForInitializer(c, insertBefore, insertBeforeParent);\n                    break;\n                case com.google.javascript.rhino.Token.FOR :\n                    if ((!com.google.javascript.jscomp.NodeUtil.isForIn(c)) && (c.getFirstChild().getType() != com.google.javascript.rhino.Token.EMPTY)) {\n                        com.google.javascript.rhino.Node init = c.getFirstChild();\n                        c.replaceChild(init, new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY));\n                        com.google.javascript.rhino.Node newStatement;\n                        if (init.getType() == com.google.javascript.rhino.Token.VAR) {\n                            newStatement = init;\n                        } else {\n                            newStatement = com.google.javascript.jscomp.NodeUtil.newExpr(init);\n                        }\n                        insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                        reportCodeChange(\"FOR initializer\");\n                    }\n                    break;\n            }\n        }\n    }\n\n    private void splitVarDeclarations(com.google.javascript.rhino.Node n) {\n        for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {\n            next = c.getNext();\n            if (c.getType() == com.google.javascript.rhino.Token.VAR) {\n                if (assertOnChange && (!c.hasChildren())) {\n                    throw new java.lang.IllegalStateException(\"Empty VAR node.\");\n                }\n                while (c.getFirstChild() != c.getLastChild()) {\n                    com.google.javascript.rhino.Node name = c.getFirstChild();\n                    c.removeChild(name);\n                    com.google.javascript.rhino.Node newVar = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, name, n.getLineno(), n.getCharno());\n                    n.addChildBefore(newVar, c);\n                    reportCodeChange(\"VAR with multiple children\");\n                } \n            }\n        }\n    }\n\n    private void moveNamedFunctions(com.google.javascript.rhino.Node functionBody) {\n        com.google.common.base.Preconditions.checkState(functionBody.getParent().getType() == com.google.javascript.rhino.Token.FUNCTION);\n        com.google.javascript.rhino.Node previous = null;\n        com.google.javascript.rhino.Node current = functionBody.getFirstChild();\n        while ((current != null) && com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(current)) {\n            previous = current;\n            current = current.getNext();\n        } \n        com.google.javascript.rhino.Node insertAfter = previous;\n        while (current != null) {\n            com.google.javascript.rhino.Node next = current.getNext();\n            if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(current)) {\n                com.google.common.base.Preconditions.checkNotNull(previous);\n                functionBody.removeChildAfter(previous);\n                insertAfter = addToFront(functionBody, current, insertAfter);\n                reportCodeChange(\"Move function declaration not at top of function\");\n            } else {\n                previous = current;\n            }\n            current = next;\n        } \n    }\n\n    private com.google.javascript.rhino.Node addToFront(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node after) {\n        if (after == null) {\n            parent.addChildToFront(newChild);\n        } else {\n            parent.addChildAfter(newChild, after);\n        }\n        return newChild;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private void rewriteFunctionDeclaration(com.google.javascript.rhino.Node n) {\n    com.google.javascript.rhino.Node oldNameNode = n.getFirstChild();\n    com.google.javascript.rhino.Node fnNameNode = oldNameNode.cloneNode();\n    com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, fnNameNode, n.getLineno(), n.getCharno());\n    var.copyInformationFrom(n);\n    oldNameNode.setString(\"\");\n    com.google.javascript.rhino.Node parent = n.getParent();\n    parent.replaceChild(n, var);\n    fnNameNode.addChildToFront(n);\n    reportCodeChange(\"Function declaration\");\n}",
            "src_parent": "static class NormalizeStatements implements com.google.javascript.jscomp.NodeTraversal.Callback {\n    private final com.google.javascript.jscomp.AbstractCompiler compiler;\n\n    private final boolean assertOnChange;\n\n    NormalizeStatements(com.google.javascript.jscomp.AbstractCompiler compiler, boolean assertOnChange) {\n        this.compiler = compiler;\n        this.assertOnChange = assertOnChange;\n    }\n\n    private void reportCodeChange(java.lang.String changeDescription) {\n        if (assertOnChange) {\n            throw new java.lang.IllegalStateException(\"Normalize constraints violated:\\n\" + changeDescription);\n        }\n        compiler.reportCodeChange();\n    }\n\n    @java.lang.Override\n    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        doStatementNormalizations(t, n, parent);\n        return true;\n    }\n\n    @java.lang.Override\n    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.WHILE :\n                if (com.google.javascript.jscomp.Normalize.CONVERT_WHILE_TO_FOR) {\n                    com.google.javascript.rhino.Node expr = n.getFirstChild();\n                    n.setType(Token.FOR);\n                    n.addChildBefore(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY), expr);\n                    n.addChildAfter(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY), expr);\n                    reportCodeChange(\"WHILE node\");\n                }\n                break;\n            case com.google.javascript.rhino.Token.FUNCTION :\n                normalizeFunctionDeclaration(n);\n                break;\n        }\n    }\n\n    private void normalizeFunctionDeclaration(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkState(n.getType() == com.google.javascript.rhino.Token.FUNCTION);\n        if ((!com.google.javascript.jscomp.NodeUtil.isFunctionAnonymous(n)) && (!com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(n))) {\n            rewriteFunctionDeclaration(n);\n        }\n    }\n\n    private void rewriteFunctionDeclaration(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node oldNameNode = n.getFirstChild();\n        com.google.javascript.rhino.Node fnNameNode = oldNameNode.cloneNode();\n        com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, fnNameNode, n.getLineno(), n.getCharno());\n        var.copyInformationFrom(n);\n        oldNameNode.setString(\"\");\n        com.google.javascript.rhino.Node parent = n.getParent();\n        parent.replaceChild(n, var);\n        fnNameNode.addChildToFront(n);\n        reportCodeChange(\"Function declaration\");\n    }\n\n    private void doStatementNormalizations(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        if (n.getType() == com.google.javascript.rhino.Token.LABEL) {\n            normalizeLabels(n);\n        }\n        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(n) || (n.getType() == com.google.javascript.rhino.Token.LABEL)) {\n            extractForInitializer(n, null, null);\n        }\n        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(n)) {\n            splitVarDeclarations(n);\n        }\n        if (n.getType() == com.google.javascript.rhino.Token.FUNCTION) {\n            moveNamedFunctions(n.getLastChild());\n        }\n    }\n\n    private void normalizeLabels(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.LABEL);\n        com.google.javascript.rhino.Node last = n.getLastChild();\n        switch (last.getType()) {\n            case com.google.javascript.rhino.Token.LABEL :\n            case com.google.javascript.rhino.Token.BLOCK :\n            case com.google.javascript.rhino.Token.FOR :\n            case com.google.javascript.rhino.Token.WHILE :\n            case com.google.javascript.rhino.Token.DO :\n                return;\n            default :\n                com.google.javascript.rhino.Node block = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.BLOCK);\n                n.replaceChild(last, block);\n                block.addChildToFront(last);\n                reportCodeChange(\"LABEL normalization\");\n                return;\n        }\n    }\n\n    private void extractForInitializer(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node before, com.google.javascript.rhino.Node beforeParent) {\n        for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {\n            next = c.getNext();\n            com.google.javascript.rhino.Node insertBefore = (before == null) ? c : before;\n            com.google.javascript.rhino.Node insertBeforeParent = (before == null) ? n : beforeParent;\n            switch (c.getType()) {\n                case com.google.javascript.rhino.Token.LABEL :\n                    extractForInitializer(c, insertBefore, insertBeforeParent);\n                    break;\n                case com.google.javascript.rhino.Token.FOR :\n                    if ((!com.google.javascript.jscomp.NodeUtil.isForIn(c)) && (c.getFirstChild().getType() != com.google.javascript.rhino.Token.EMPTY)) {\n                        com.google.javascript.rhino.Node init = c.getFirstChild();\n                        c.replaceChild(init, new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EMPTY));\n                        com.google.javascript.rhino.Node newStatement;\n                        if (init.getType() == com.google.javascript.rhino.Token.VAR) {\n                            newStatement = init;\n                        } else {\n                            newStatement = com.google.javascript.jscomp.NodeUtil.newExpr(init);\n                        }\n                        insertBeforeParent.addChildBefore(newStatement, insertBefore);\n                        reportCodeChange(\"FOR initializer\");\n                    }\n                    break;\n            }\n        }\n    }\n\n    private void splitVarDeclarations(com.google.javascript.rhino.Node n) {\n        for (com.google.javascript.rhino.Node next, c = n.getFirstChild(); c != null; c = next) {\n            next = c.getNext();\n            if (c.getType() == com.google.javascript.rhino.Token.VAR) {\n                if (assertOnChange && (!c.hasChildren())) {\n                    throw new java.lang.IllegalStateException(\"Empty VAR node.\");\n                }\n                while (c.getFirstChild() != c.getLastChild()) {\n                    com.google.javascript.rhino.Node name = c.getFirstChild();\n                    c.removeChild(name);\n                    com.google.javascript.rhino.Node newVar = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR, name, n.getLineno(), n.getCharno());\n                    n.addChildBefore(newVar, c);\n                    reportCodeChange(\"VAR with multiple children\");\n                } \n            }\n        }\n    }\n\n    private void moveNamedFunctions(com.google.javascript.rhino.Node functionBody) {\n        com.google.common.base.Preconditions.checkState(functionBody.getParent().getType() == com.google.javascript.rhino.Token.FUNCTION);\n        com.google.javascript.rhino.Node previous = null;\n        com.google.javascript.rhino.Node current = functionBody.getFirstChild();\n        while ((current != null) && com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(current)) {\n            previous = current;\n            current = current.getNext();\n        } \n        com.google.javascript.rhino.Node insertAfter = previous;\n        while (current != null) {\n            com.google.javascript.rhino.Node next = current.getNext();\n            if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(current)) {\n                com.google.common.base.Preconditions.checkNotNull(previous);\n                functionBody.removeChildAfter(previous);\n                insertAfter = addToFront(functionBody, current, insertAfter);\n                reportCodeChange(\"Move function declaration not at top of function\");\n            } else {\n                previous = current;\n            }\n            current = next;\n        } \n    }\n\n    private com.google.javascript.rhino.Node addToFront(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node after) {\n        if (after == null) {\n            parent.addChildToFront(newChild);\n        } else {\n            parent.addChildAfter(newChild, after);\n        }\n        return newChild;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.jscomp.Scope.Var v = s.getVar(name)",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkState(n.getType() == com.google.javascript.rhino.Token.NAME);\n    com.google.javascript.jscomp.Scope.Var v = s.getVar(name);\n    com.google.common.base.Preconditions.checkState((v == null) || (v.getParentNode().getType() != com.google.javascript.rhino.Token.CATCH));\n    if ((v != null) && (parent.getType() == com.google.javascript.rhino.Token.FUNCTION)) {\n        if (v.getParentNode().getType() == com.google.javascript.rhino.Token.VAR) {\n            s.undeclare(v);\n            s.declare(name, n, n.getJSType(), v.input);\n            replaceVarWithAssignment(v.getNameNode(), v.getParentNode(), v.getParentNode().getParent());\n        }\n    } else if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n        com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n        replaceVarWithAssignment(n, parent, gramps);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.common.base.Preconditions.checkState((v == null) || (v.getParentNode().getType() != com.google.javascript.rhino.Token.CATCH))",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkState(n.getType() == com.google.javascript.rhino.Token.NAME);\n    com.google.javascript.jscomp.Scope.Var v = s.getVar(name);\n    com.google.common.base.Preconditions.checkState((v == null) || (v.getParentNode().getType() != com.google.javascript.rhino.Token.CATCH));\n    if ((v != null) && (parent.getType() == com.google.javascript.rhino.Token.FUNCTION)) {\n        if (v.getParentNode().getType() == com.google.javascript.rhino.Token.VAR) {\n            s.undeclare(v);\n            s.declare(name, n, n.getJSType(), v.input);\n            replaceVarWithAssignment(v.getNameNode(), v.getParentNode(), v.getParentNode().getParent());\n        }\n    } else if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n        com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n        replaceVarWithAssignment(n, parent, gramps);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((v != null) && (parent.getType() == com.google.javascript.rhino.Token.FUNCTION)) {\n    if (v.getParentNode().getType() == com.google.javascript.rhino.Token.VAR) {\n        s.undeclare(v);\n        s.declare(name, n, n.getJSType(), v.input);\n        replaceVarWithAssignment(v.getNameNode(), v.getParentNode(), v.getParentNode().getParent());\n    }\n} else if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n    com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n    replaceVarWithAssignment(n, parent, gramps);\n}",
            "src_parent": "{\n    com.google.common.base.Preconditions.checkState(n.getType() == com.google.javascript.rhino.Token.NAME);\n    com.google.javascript.jscomp.Scope.Var v = s.getVar(name);\n    com.google.common.base.Preconditions.checkState((v == null) || (v.getParentNode().getType() != com.google.javascript.rhino.Token.CATCH));\n    if ((v != null) && (parent.getType() == com.google.javascript.rhino.Token.FUNCTION)) {\n        if (v.getParentNode().getType() == com.google.javascript.rhino.Token.VAR) {\n            s.undeclare(v);\n            s.declare(name, n, n.getJSType(), v.input);\n            replaceVarWithAssignment(v.getNameNode(), v.getParentNode(), v.getParentNode().getParent());\n        }\n    } else if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n        com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n        replaceVarWithAssignment(n, parent, gramps);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n    com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n    replaceVarWithAssignment(n, parent, gramps);\n}",
            "dst_parent": "{\n    com.google.common.base.Preconditions.checkState(n.getType() == com.google.javascript.rhino.Token.NAME);\n    if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n        com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n        replaceVarWithAssignment(n, parent, gramps);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n    com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n    replaceVarWithAssignment(n, parent, gramps);\n}",
            "src_parent": "{\n    if (parent.getType() == com.google.javascript.rhino.Token.VAR) {\n        com.google.common.base.Preconditions.checkState(parent.hasOneChild());\n        replaceVarWithAssignment(n, parent, gramps);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "Normalize"
    }
  ],
  "id": "Closure_139"
}