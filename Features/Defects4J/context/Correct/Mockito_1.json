{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class))",
            "src_parent": "{\n    ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (int position = indexOfVararg; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n        }\n    }\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "src_parent": "{\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        for (int position = 0; position < indexOfVararg; position++) {\n            org.hamcrest.Matcher m = matchers.get(position);\n            if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n            }\n        }\n        for (int position = indexOfVararg; position < matchers.size(); position++) {\n            org.hamcrest.Matcher m = matchers.get(position);\n            if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n            }\n        }\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            org.hamcrest.Matcher m = matchers.get(position);\n            if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    throw new java.lang.UnsupportedOperationException();\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "src_parent": "{\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        throw new java.lang.UnsupportedOperationException();\n    } else {\n        for (int position = 0; position < matchers.size(); position++) {\n            org.hamcrest.Matcher m = matchers.get(position);\n            if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "throw new java.lang.UnsupportedOperationException()",
            "src_parent": "{\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    throw new java.lang.UnsupportedOperationException();\n}",
            "src_parent_type": "Block",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "invocation.getMethod().isVarArgs()",
            "dst_parent": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    throw new java.lang.UnsupportedOperationException();\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "invocation.getMethod().isVarArgs()",
            "src_parent": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (int position = indexOfVararg; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n        }\n    }\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    throw new java.lang.UnsupportedOperationException();\n}",
            "dst_parent": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    throw new java.lang.UnsupportedOperationException();\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n}",
            "src_parent": "if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n    ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "dst_parent": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    throw new java.lang.UnsupportedOperationException();\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "src_parent": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (int position = indexOfVararg; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n        }\n    }\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "InvocationMatcher"
    }
  ],
  "id": "Mockito_1"
}