{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final int MAGIC_1 = 0x78;",
            "src_parent": "public class DeflateCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream {\n    private static final int MAGIC_1 = 0x78;\n\n    private static final int MAGIC_2a = 0x1;\n\n    private static final int MAGIC_2b = 0x5e;\n\n    private static final int MAGIC_2c = 0x9c;\n\n    private static final int MAGIC_2d = 0xda;\n\n    private final java.io.InputStream in;\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream) {\n        this(inputStream, new org.apache.commons.compress.compressors.deflate.DeflateParameters());\n    }\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters parameters) {\n        in = new java.util.zip.InflaterInputStream(inputStream, new java.util.zip.Inflater(!parameters.withZlibHeader()));\n    }\n\n    @java.lang.Override\n    public int read() throws java.io.IOException {\n        int ret = in.read();\n        count(ret == (-1) ? 0 : 1);\n        return ret;\n    }\n\n    @java.lang.Override\n    public int read(byte[] buf, int off, int len) throws java.io.IOException {\n        int ret = in.read(buf, off, len);\n        count(ret);\n        return ret;\n    }\n\n    @java.lang.Override\n    public long skip(long n) throws java.io.IOException {\n        return in.skip(n);\n    }\n\n    @java.lang.Override\n    public int available() throws java.io.IOException {\n        return in.available();\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        in.close();\n    }\n\n    public static boolean matches(byte[] signature, int length) {\n        return ((length > 3) && (signature[0] == org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1)) && ((((signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d))));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final int MAGIC_2a = 0x1;",
            "src_parent": "public class DeflateCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream {\n    private static final int MAGIC_1 = 0x78;\n\n    private static final int MAGIC_2a = 0x1;\n\n    private static final int MAGIC_2b = 0x5e;\n\n    private static final int MAGIC_2c = 0x9c;\n\n    private static final int MAGIC_2d = 0xda;\n\n    private final java.io.InputStream in;\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream) {\n        this(inputStream, new org.apache.commons.compress.compressors.deflate.DeflateParameters());\n    }\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters parameters) {\n        in = new java.util.zip.InflaterInputStream(inputStream, new java.util.zip.Inflater(!parameters.withZlibHeader()));\n    }\n\n    @java.lang.Override\n    public int read() throws java.io.IOException {\n        int ret = in.read();\n        count(ret == (-1) ? 0 : 1);\n        return ret;\n    }\n\n    @java.lang.Override\n    public int read(byte[] buf, int off, int len) throws java.io.IOException {\n        int ret = in.read(buf, off, len);\n        count(ret);\n        return ret;\n    }\n\n    @java.lang.Override\n    public long skip(long n) throws java.io.IOException {\n        return in.skip(n);\n    }\n\n    @java.lang.Override\n    public int available() throws java.io.IOException {\n        return in.available();\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        in.close();\n    }\n\n    public static boolean matches(byte[] signature, int length) {\n        return ((length > 3) && (signature[0] == org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1)) && ((((signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d))));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final int MAGIC_2b = 0x5e;",
            "src_parent": "public class DeflateCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream {\n    private static final int MAGIC_1 = 0x78;\n\n    private static final int MAGIC_2a = 0x1;\n\n    private static final int MAGIC_2b = 0x5e;\n\n    private static final int MAGIC_2c = 0x9c;\n\n    private static final int MAGIC_2d = 0xda;\n\n    private final java.io.InputStream in;\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream) {\n        this(inputStream, new org.apache.commons.compress.compressors.deflate.DeflateParameters());\n    }\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters parameters) {\n        in = new java.util.zip.InflaterInputStream(inputStream, new java.util.zip.Inflater(!parameters.withZlibHeader()));\n    }\n\n    @java.lang.Override\n    public int read() throws java.io.IOException {\n        int ret = in.read();\n        count(ret == (-1) ? 0 : 1);\n        return ret;\n    }\n\n    @java.lang.Override\n    public int read(byte[] buf, int off, int len) throws java.io.IOException {\n        int ret = in.read(buf, off, len);\n        count(ret);\n        return ret;\n    }\n\n    @java.lang.Override\n    public long skip(long n) throws java.io.IOException {\n        return in.skip(n);\n    }\n\n    @java.lang.Override\n    public int available() throws java.io.IOException {\n        return in.available();\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        in.close();\n    }\n\n    public static boolean matches(byte[] signature, int length) {\n        return ((length > 3) && (signature[0] == org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1)) && ((((signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d))));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final int MAGIC_2c = 0x9c;",
            "src_parent": "public class DeflateCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream {\n    private static final int MAGIC_1 = 0x78;\n\n    private static final int MAGIC_2a = 0x1;\n\n    private static final int MAGIC_2b = 0x5e;\n\n    private static final int MAGIC_2c = 0x9c;\n\n    private static final int MAGIC_2d = 0xda;\n\n    private final java.io.InputStream in;\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream) {\n        this(inputStream, new org.apache.commons.compress.compressors.deflate.DeflateParameters());\n    }\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters parameters) {\n        in = new java.util.zip.InflaterInputStream(inputStream, new java.util.zip.Inflater(!parameters.withZlibHeader()));\n    }\n\n    @java.lang.Override\n    public int read() throws java.io.IOException {\n        int ret = in.read();\n        count(ret == (-1) ? 0 : 1);\n        return ret;\n    }\n\n    @java.lang.Override\n    public int read(byte[] buf, int off, int len) throws java.io.IOException {\n        int ret = in.read(buf, off, len);\n        count(ret);\n        return ret;\n    }\n\n    @java.lang.Override\n    public long skip(long n) throws java.io.IOException {\n        return in.skip(n);\n    }\n\n    @java.lang.Override\n    public int available() throws java.io.IOException {\n        return in.available();\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        in.close();\n    }\n\n    public static boolean matches(byte[] signature, int length) {\n        return ((length > 3) && (signature[0] == org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1)) && ((((signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d))));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final int MAGIC_2d = 0xda;",
            "src_parent": "public class DeflateCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream {\n    private static final int MAGIC_1 = 0x78;\n\n    private static final int MAGIC_2a = 0x1;\n\n    private static final int MAGIC_2b = 0x5e;\n\n    private static final int MAGIC_2c = 0x9c;\n\n    private static final int MAGIC_2d = 0xda;\n\n    private final java.io.InputStream in;\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream) {\n        this(inputStream, new org.apache.commons.compress.compressors.deflate.DeflateParameters());\n    }\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters parameters) {\n        in = new java.util.zip.InflaterInputStream(inputStream, new java.util.zip.Inflater(!parameters.withZlibHeader()));\n    }\n\n    @java.lang.Override\n    public int read() throws java.io.IOException {\n        int ret = in.read();\n        count(ret == (-1) ? 0 : 1);\n        return ret;\n    }\n\n    @java.lang.Override\n    public int read(byte[] buf, int off, int len) throws java.io.IOException {\n        int ret = in.read(buf, off, len);\n        count(ret);\n        return ret;\n    }\n\n    @java.lang.Override\n    public long skip(long n) throws java.io.IOException {\n        return in.skip(n);\n    }\n\n    @java.lang.Override\n    public int available() throws java.io.IOException {\n        return in.available();\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        in.close();\n    }\n\n    public static boolean matches(byte[] signature, int length) {\n        return ((length > 3) && (signature[0] == org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1)) && ((((signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d))));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static boolean matches(byte[] signature, int length) {\n    return ((length > 3) && (signature[0] == org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1)) && ((((signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d))));\n}",
            "src_parent": "public class DeflateCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream {\n    private static final int MAGIC_1 = 0x78;\n\n    private static final int MAGIC_2a = 0x1;\n\n    private static final int MAGIC_2b = 0x5e;\n\n    private static final int MAGIC_2c = 0x9c;\n\n    private static final int MAGIC_2d = 0xda;\n\n    private final java.io.InputStream in;\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream) {\n        this(inputStream, new org.apache.commons.compress.compressors.deflate.DeflateParameters());\n    }\n\n    public DeflateCompressorInputStream(java.io.InputStream inputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters parameters) {\n        in = new java.util.zip.InflaterInputStream(inputStream, new java.util.zip.Inflater(!parameters.withZlibHeader()));\n    }\n\n    @java.lang.Override\n    public int read() throws java.io.IOException {\n        int ret = in.read();\n        count(ret == (-1) ? 0 : 1);\n        return ret;\n    }\n\n    @java.lang.Override\n    public int read(byte[] buf, int off, int len) throws java.io.IOException {\n        int ret = in.read(buf, off, len);\n        count(ret);\n        return ret;\n    }\n\n    @java.lang.Override\n    public long skip(long n) throws java.io.IOException {\n        return in.skip(n);\n    }\n\n    @java.lang.Override\n    public int available() throws java.io.IOException {\n        return in.available();\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        in.close();\n    }\n\n    public static boolean matches(byte[] signature, int length) {\n        return ((length > 3) && (signature[0] == org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_1)) && ((((signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2a))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2b)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2c)))) || (signature[1] == ((byte) (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.MAGIC_2d))));\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "DeflateCompressorInputStream"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(signature, signatureLength)) {\n    return new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream(in);\n}",
            "src_parent": "{\n    int signatureLength = org.apache.commons.compress.utils.IOUtils.readFully(in, signature);\n    in.reset();\n    if (org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(in, decompressConcatenated);\n    }\n    if (org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream(in, decompressConcatenated);\n    }\n    if (org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(in);\n    }\n    if (org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(in);\n    }\n    if (org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.compressors.z.ZCompressorInputStream(in);\n    }\n    if (org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream(in);\n    }\n    if (org.apache.commons.compress.compressors.xz.XZUtils.matches(signature, signatureLength) && org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable()) {\n        return new org.apache.commons.compress.compressors.xz.XZCompressorInputStream(in, decompressConcatenated);\n    }\n    if (org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(signature, signatureLength) && org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable()) {\n        return new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream(in);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "CompressorStreamFactory"
    }
  ],
  "id": "Compress_33"
}