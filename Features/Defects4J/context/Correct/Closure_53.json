{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (nodes.isEmpty()) {\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE);\n} else {\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    if (nodes.isEmpty()) {\n        replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE);\n    } else {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n        nodes = com.google.common.collect.Lists.reverse(nodes);\n        replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        com.google.javascript.rhino.Node cur = replacement;\n        int i;\n        for (i = 0; i < (nodes.size() - 2); i++) {\n            cur.addChildToFront(nodes.get(i));\n            com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n            cur.addChildToFront(t);\n            cur = t;\n        }\n        cur.addChildToFront(nodes.get(i));\n        cur.addChildToFront(nodes.get(i + 1));\n    }\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE))",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE))",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "nodes = com.google.common.collect.Lists.reverse(nodes)",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "nodes = com.google.common.collect.Lists.reverse(nodes)",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA)",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA)",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.javascript.rhino.Node cur = replacement",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.javascript.rhino.Node cur = replacement",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int i",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int i",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (i = 0; i < (nodes.size() - 2); i++) {\n    cur.addChildToFront(nodes.get(i));\n    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    cur.addChildToFront(t);\n    cur = t;\n}",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "For",
            "operator": "MOV",
            "src": "for (i = 0; i < (nodes.size() - 2); i++) {\n    cur.addChildToFront(nodes.get(i));\n    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    cur.addChildToFront(t);\n    cur = t;\n}",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "cur.addChildToFront(nodes.get(i))",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "cur.addChildToFront(nodes.get(i))",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "cur.addChildToFront(nodes.get(i + 1))",
            "dst_parent": "{\n    java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();\n    com.google.javascript.rhino.Node val = ref.getAssignedValue();\n    blacklistVarReferencesInTree(val, v.scope);\n    com.google.common.base.Preconditions.checkState(val.getType() == com.google.javascript.rhino.Token.OBJECTLIT);\n    java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());\n    for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n        java.lang.String var = key.getString();\n        com.google.javascript.rhino.Node value = key.removeFirstChild();\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), value));\n        all.remove(var);\n    }\n    for (java.lang.String var : all) {\n        nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ASSIGN, com.google.javascript.rhino.Node.newString(Token.NAME, varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));\n    }\n    com.google.javascript.rhino.Node replacement;\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n    com.google.javascript.rhino.Node replace = ref.getParent();\n    replacement.copyInformationFromForTree(replace);\n    if (replace.getType() == com.google.javascript.rhino.Token.VAR) {\n        replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));\n    } else {\n        replace.getParent().replaceChild(replace, replacement);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "cur.addChildToFront(nodes.get(i + 1))",
            "src_parent": "{\n    nodes.add(new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE));\n    nodes = com.google.common.collect.Lists.reverse(nodes);\n    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n    com.google.javascript.rhino.Node cur = replacement;\n    int i;\n    for (i = 0; i < (nodes.size() - 2); i++) {\n        cur.addChildToFront(nodes.get(i));\n        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);\n        cur.addChildToFront(t);\n        cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "InlineObjectLiterals"
    }
  ],
  "id": "Closure_53"
}