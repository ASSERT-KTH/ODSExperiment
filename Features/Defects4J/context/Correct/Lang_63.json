{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "OperatorAssignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days)",
            "dst_parent": "days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days)",
            "dst_parent_type": "OperatorAssignment",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH)",
            "src_parent": "days += end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH)",
            "src_parent_type": "OperatorAssignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Calendar.MINUTE",
            "dst_parent": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "java.util.Calendar.MONTH",
            "src_parent": "end.add(java.util.Calendar.MONTH, -1)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "While",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "while (days < 0) {\n    end.add(java.util.Calendar.MONTH, -1);\n    days += end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);\n    months -= 1;\n    end.add(java.util.Calendar.MONTH, 1);\n} ",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        end.add(java.util.Calendar.MONTH, -1);\n        days += end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);\n        months -= 1;\n        end.add(java.util.Calendar.MONTH, 1);\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "static int reduceAndCorrect(java.util.Calendar start, java.util.Calendar end, int field, int difference) {\n    end.add(field, (-1) * difference);\n    int endValue = end.get(field);\n    int startValue = start.get(field);\n    if (endValue < startValue) {\n        int newdiff = startValue - endValue;\n        end.add(field, newdiff);\n        return newdiff;\n    } else {\n        return 0;\n    }\n}",
            "src_parent": "public class DurationFormatUtils {\n    public DurationFormatUtils() {\n        super();\n    }\n\n    public static final java.lang.String ISO_EXTENDED_FORMAT_PATTERN = \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'\";\n\n    public static java.lang.String formatDurationHMS(long durationMillis) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, \"H:mm:ss.SSS\");\n    }\n\n    public static java.lang.String formatDurationISO(long durationMillis) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, org.apache.commons.lang.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false);\n    }\n\n    public static java.lang.String formatDuration(long durationMillis, java.lang.String format) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, format, true);\n    }\n\n    public static java.lang.String formatDuration(long durationMillis, java.lang.String format, boolean padWithZeros) {\n        org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n        int days = 0;\n        int hours = 0;\n        int minutes = 0;\n        int seconds = 0;\n        int milliseconds = 0;\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n            days = ((int) (durationMillis / DateUtils.MILLIS_PER_DAY));\n            durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);\n        }\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n            hours = ((int) (durationMillis / DateUtils.MILLIS_PER_HOUR));\n            durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);\n        }\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n            minutes = ((int) (durationMillis / DateUtils.MILLIS_PER_MINUTE));\n            durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);\n        }\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n            seconds = ((int) (durationMillis / DateUtils.MILLIS_PER_SECOND));\n            durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);\n        }\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.S)) {\n            milliseconds = ((int) (durationMillis));\n        }\n        return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);\n    }\n\n    public static java.lang.String formatDurationWords(long durationMillis, boolean suppressLeadingZeroElements, boolean suppressTrailingZeroElements) {\n        java.lang.String duration = org.apache.commons.lang.time.DurationFormatUtils.formatDuration(durationMillis, \"d' days 'H' hours 'm' minutes 's' seconds'\");\n        if (suppressLeadingZeroElements) {\n            duration = \" \" + duration;\n            java.lang.String tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 0 days\", \"\");\n            if (tmp.length() != duration.length()) {\n                duration = tmp;\n                tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 0 hours\", \"\");\n                if (tmp.length() != duration.length()) {\n                    duration = tmp;\n                    tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 0 minutes\", \"\");\n                    duration = tmp;\n                    if (tmp.length() != duration.length()) {\n                        duration = org.apache.commons.lang.StringUtils.replaceOnce(tmp, \" 0 seconds\", \"\");\n                    }\n                }\n            }\n            if (duration.length() != 0) {\n                duration = duration.substring(1);\n            }\n        }\n        if (suppressTrailingZeroElements) {\n            java.lang.String tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 0 seconds\", \"\");\n            if (tmp.length() != duration.length()) {\n                duration = tmp;\n                tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 0 minutes\", \"\");\n                if (tmp.length() != duration.length()) {\n                    duration = tmp;\n                    tmp = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 0 hours\", \"\");\n                    if (tmp.length() != duration.length()) {\n                        duration = org.apache.commons.lang.StringUtils.replaceOnce(tmp, \" 0 days\", \"\");\n                    }\n                }\n            }\n        }\n        duration = \" \" + duration;\n        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\");\n        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\");\n        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\");\n        duration = org.apache.commons.lang.StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\");\n        return duration.trim();\n    }\n\n    public static java.lang.String formatPeriodISO(long startMillis, long endMillis) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(startMillis, endMillis, org.apache.commons.lang.time.DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, java.util.TimeZone.getDefault());\n    }\n\n    public static java.lang.String formatPeriod(long startMillis, long endMillis, java.lang.String format) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatPeriod(startMillis, endMillis, format, true, java.util.TimeZone.getDefault());\n    }\n\n    public static java.lang.String formatPeriod(long startMillis, long endMillis, java.lang.String format, boolean padWithZeros, java.util.TimeZone timezone) {\n        long millis = endMillis - startMillis;\n        if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n            return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n        }\n        org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n        java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n        start.setTime(new java.util.Date(startMillis));\n        java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n        end.setTime(new java.util.Date(endMillis));\n        int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n        int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n        int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n        int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n        int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n        int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n        int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n        while (milliseconds < 0) {\n            milliseconds += 1000;\n            seconds -= 1;\n        } \n        while (seconds < 0) {\n            seconds += 60;\n            minutes -= 1;\n        } \n        while (minutes < 0) {\n            minutes += 60;\n            hours -= 1;\n        } \n        while (hours < 0) {\n            hours += 24;\n            days -= 1;\n        } \n        while (days < 0) {\n            days += 31;\n            months -= 1;\n        } \n        while (months < 0) {\n            months += 12;\n            years -= 1;\n        } \n        milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n        seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n        minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n        hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n        days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n        months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n        years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n            if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n                months += 12 * years;\n                years = 0;\n            } else {\n                days += 365 * years;\n                years = 0;\n            }\n        }\n        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n            months = 0;\n        }\n        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n            hours += 24 * days;\n            days = 0;\n        }\n        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n            minutes += 60 * hours;\n            hours = 0;\n        }\n        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n            seconds += 60 * minutes;\n            minutes = 0;\n        }\n        if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n            milliseconds += 1000 * seconds;\n            seconds = 0;\n        }\n        return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n    }\n\n    static java.lang.String format(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, int milliseconds, boolean padWithZeros) {\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        boolean lastOutputSeconds = false;\n        int sz = tokens.length;\n        for (int i = 0; i < sz; i++) {\n            org.apache.commons.lang.time.DurationFormatUtils.Token token = tokens[i];\n            java.lang.Object value = token.getValue();\n            int count = token.getCount();\n            if (value instanceof java.lang.StringBuffer) {\n                buffer.append(value.toString());\n            } else if (value == org.apache.commons.lang.time.DurationFormatUtils.y) {\n                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(years), count, '0') : java.lang.Integer.toString(years));\n                lastOutputSeconds = false;\n            } else if (value == org.apache.commons.lang.time.DurationFormatUtils.M) {\n                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(months), count, '0') : java.lang.Integer.toString(months));\n                lastOutputSeconds = false;\n            } else if (value == org.apache.commons.lang.time.DurationFormatUtils.d) {\n                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(days), count, '0') : java.lang.Integer.toString(days));\n                lastOutputSeconds = false;\n            } else if (value == org.apache.commons.lang.time.DurationFormatUtils.H) {\n                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(hours), count, '0') : java.lang.Integer.toString(hours));\n                lastOutputSeconds = false;\n            } else if (value == org.apache.commons.lang.time.DurationFormatUtils.m) {\n                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(minutes), count, '0') : java.lang.Integer.toString(minutes));\n                lastOutputSeconds = false;\n            } else if (value == org.apache.commons.lang.time.DurationFormatUtils.s) {\n                buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(seconds), count, '0') : java.lang.Integer.toString(seconds));\n                lastOutputSeconds = true;\n            } else if (value == org.apache.commons.lang.time.DurationFormatUtils.S) {\n                if (lastOutputSeconds) {\n                    milliseconds += 1000;\n                    java.lang.String str = (padWithZeros) ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : java.lang.Integer.toString(milliseconds);\n                    buffer.append(str.substring(1));\n                } else {\n                    buffer.append(padWithZeros ? org.apache.commons.lang.StringUtils.leftPad(java.lang.Integer.toString(milliseconds), count, '0') : java.lang.Integer.toString(milliseconds));\n                }\n                lastOutputSeconds = false;\n            }\n        }\n        return buffer.toString();\n    }\n\n    static int reduceAndCorrect(java.util.Calendar start, java.util.Calendar end, int field, int difference) {\n        end.add(field, (-1) * difference);\n        int endValue = end.get(field);\n        int startValue = start.get(field);\n        if (endValue < startValue) {\n            int newdiff = startValue - endValue;\n            end.add(field, newdiff);\n            return newdiff;\n        } else {\n            return 0;\n        }\n    }\n\n    static final java.lang.Object y = \"y\";\n\n    static final java.lang.Object M = \"M\";\n\n    static final java.lang.Object d = \"d\";\n\n    static final java.lang.Object H = \"H\";\n\n    static final java.lang.Object m = \"m\";\n\n    static final java.lang.Object s = \"s\";\n\n    static final java.lang.Object S = \"S\";\n\n    static org.apache.commons.lang.time.DurationFormatUtils.Token[] lexx(java.lang.String format) {\n        char[] array = format.toCharArray();\n        java.util.ArrayList list = new java.util.ArrayList(array.length);\n        boolean inLiteral = false;\n        java.lang.StringBuffer buffer = null;\n        org.apache.commons.lang.time.DurationFormatUtils.Token previous = null;\n        int sz = array.length;\n        for (int i = 0; i < sz; i++) {\n            char ch = array[i];\n            if (inLiteral && (ch != '\\'')) {\n                buffer.append(ch);\n                continue;\n            }\n            java.lang.Object value = null;\n            switch (ch) {\n                case '\\'' :\n                    if (inLiteral) {\n                        buffer = null;\n                        inLiteral = false;\n                    } else {\n                        buffer = new java.lang.StringBuffer();\n                        list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));\n                        inLiteral = true;\n                    }\n                    break;\n                case 'y' :\n                    value = org.apache.commons.lang.time.DurationFormatUtils.y;\n                    break;\n                case 'M' :\n                    value = org.apache.commons.lang.time.DurationFormatUtils.M;\n                    break;\n                case 'd' :\n                    value = org.apache.commons.lang.time.DurationFormatUtils.d;\n                    break;\n                case 'H' :\n                    value = org.apache.commons.lang.time.DurationFormatUtils.H;\n                    break;\n                case 'm' :\n                    value = org.apache.commons.lang.time.DurationFormatUtils.m;\n                    break;\n                case 's' :\n                    value = org.apache.commons.lang.time.DurationFormatUtils.s;\n                    break;\n                case 'S' :\n                    value = org.apache.commons.lang.time.DurationFormatUtils.S;\n                    break;\n                default :\n                    if (buffer == null) {\n                        buffer = new java.lang.StringBuffer();\n                        list.add(new org.apache.commons.lang.time.DurationFormatUtils.Token(buffer));\n                    }\n                    buffer.append(ch);\n            }\n            if (value != null) {\n                if ((previous != null) && (previous.getValue() == value)) {\n                    previous.increment();\n                } else {\n                    org.apache.commons.lang.time.DurationFormatUtils.Token token = new org.apache.commons.lang.time.DurationFormatUtils.Token(value);\n                    list.add(token);\n                    previous = token;\n                }\n                buffer = null;\n            }\n        }\n        return ((org.apache.commons.lang.time.DurationFormatUtils.Token[]) (list.toArray(new org.apache.commons.lang.time.DurationFormatUtils.Token[0])));\n    }\n\n    static class Token {\n        static boolean containsTokenWithValue(org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens, java.lang.Object value) {\n            int sz = tokens.length;\n            for (int i = 0; i < sz; i++) {\n                if (tokens[i].getValue() == value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        private java.lang.Object value;\n\n        private int count;\n\n        Token(java.lang.Object value) {\n            this.value = value;\n            this.count = 1;\n        }\n\n        Token(java.lang.Object value, int count) {\n            this.value = value;\n            this.count = count;\n        }\n\n        void increment() {\n            count++;\n        }\n\n        int getCount() {\n            return count;\n        }\n\n        java.lang.Object getValue() {\n            return value;\n        }\n\n        public boolean equals(java.lang.Object obj2) {\n            if (obj2 instanceof org.apache.commons.lang.time.DurationFormatUtils.Token) {\n                org.apache.commons.lang.time.DurationFormatUtils.Token tok2 = ((org.apache.commons.lang.time.DurationFormatUtils.Token) (obj2));\n                if (this.value.getClass() != tok2.value.getClass()) {\n                    return false;\n                }\n                if (this.count != tok2.count) {\n                    return false;\n                }\n                if (this.value instanceof java.lang.StringBuffer) {\n                    return this.value.toString().equals(tok2.value.toString());\n                } else if (this.value instanceof java.lang.Number) {\n                    return this.value.equals(tok2.value);\n                } else {\n                    return this.value == tok2.value;\n                }\n            } else {\n                return false;\n            }\n        }\n\n        public int hashCode() {\n            return this.value.hashCode();\n        }\n\n        public java.lang.String toString() {\n            return org.apache.commons.lang.StringUtils.repeat(this.value.toString(), this.count);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "while (days < 0) {\n    days += 31;\n    months -= 1;\n} ",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds)",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds)",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes)",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours)",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days)",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months)",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years)",
            "src_parent": "{\n    long millis = endMillis - startMillis;\n    if (millis < (28 * DateUtils.MILLIS_PER_DAY)) {\n        return org.apache.commons.lang.time.DurationFormatUtils.formatDuration(millis, format, padWithZeros);\n    }\n    org.apache.commons.lang.time.DurationFormatUtils.Token[] tokens = org.apache.commons.lang.time.DurationFormatUtils.lexx(format);\n    java.util.Calendar start = java.util.Calendar.getInstance(timezone);\n    start.setTime(new java.util.Date(startMillis));\n    java.util.Calendar end = java.util.Calendar.getInstance(timezone);\n    end.setTime(new java.util.Date(endMillis));\n    int milliseconds = end.get(java.util.Calendar.MILLISECOND) - start.get(java.util.Calendar.MILLISECOND);\n    int seconds = end.get(java.util.Calendar.SECOND) - start.get(java.util.Calendar.SECOND);\n    int minutes = end.get(java.util.Calendar.MINUTE) - start.get(java.util.Calendar.MINUTE);\n    int hours = end.get(java.util.Calendar.HOUR_OF_DAY) - start.get(java.util.Calendar.HOUR_OF_DAY);\n    int days = end.get(java.util.Calendar.DAY_OF_MONTH) - start.get(java.util.Calendar.DAY_OF_MONTH);\n    int months = end.get(java.util.Calendar.MONTH) - start.get(java.util.Calendar.MONTH);\n    int years = end.get(java.util.Calendar.YEAR) - start.get(java.util.Calendar.YEAR);\n    while (milliseconds < 0) {\n        milliseconds += 1000;\n        seconds -= 1;\n    } \n    while (seconds < 0) {\n        seconds += 60;\n        minutes -= 1;\n    } \n    while (minutes < 0) {\n        minutes += 60;\n        hours -= 1;\n    } \n    while (hours < 0) {\n        hours += 24;\n        days -= 1;\n    } \n    while (days < 0) {\n        days += 31;\n        months -= 1;\n    } \n    while (months < 0) {\n        months += 12;\n        years -= 1;\n    } \n    milliseconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MILLISECOND, milliseconds);\n    seconds -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.SECOND, seconds);\n    minutes -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes);\n    hours -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.HOUR_OF_DAY, hours);\n    days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days);\n    months -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months);\n    years -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.YEAR, years);\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.y)) {\n        if (org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n            months += 12 * years;\n            years = 0;\n        } else {\n            days += 365 * years;\n            years = 0;\n        }\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.M)) {\n        days += end.get(java.util.Calendar.DAY_OF_YEAR) - start.get(java.util.Calendar.DAY_OF_YEAR);\n        months = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.d)) {\n        hours += 24 * days;\n        days = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.H)) {\n        minutes += 60 * hours;\n        hours = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.m)) {\n        seconds += 60 * minutes;\n        minutes = 0;\n    }\n    if (!org.apache.commons.lang.time.DurationFormatUtils.Token.containsTokenWithValue(tokens, org.apache.commons.lang.time.DurationFormatUtils.s)) {\n        milliseconds += 1000 * seconds;\n        seconds = 0;\n    }\n    return org.apache.commons.lang.time.DurationFormatUtils.format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "While",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "days < 0",
            "dst_parent": "while (days < 0) {\n    days += 31;\n    months -= 1;\n} ",
            "dst_parent_type": "While",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "days < 0",
            "src_parent": "while (days < 0) {\n    end.add(java.util.Calendar.MONTH, -1);\n    days += end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);\n    months -= 1;\n    end.add(java.util.Calendar.MONTH, 1);\n} ",
            "src_parent_type": "While",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "While",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "months -= 1",
            "dst_parent": "{\n    days += 31;\n    months -= 1;\n}",
            "dst_parent_type": "Block",
            "dst_type": "OperatorAssignment",
            "operator": "MOV",
            "src": "months -= 1",
            "src_parent": "{\n    end.add(java.util.Calendar.MONTH, -1);\n    days += end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);\n    months -= 1;\n    end.add(java.util.Calendar.MONTH, 1);\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "OperatorAssignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "days",
            "dst_parent": "days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days)",
            "dst_parent_type": "OperatorAssignment",
            "dst_type": "VariableWrite",
            "operator": "MOV",
            "src": "days",
            "src_parent": "days += end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH)",
            "src_parent_type": "OperatorAssignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "OperatorAssignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days)",
            "dst_parent": "days -= org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.DAY_OF_MONTH, days)",
            "dst_parent_type": "OperatorAssignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH)",
            "src_parent": "days += end.getActualMaximum(java.util.Calendar.DAY_OF_MONTH)",
            "src_parent_type": "OperatorAssignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "end",
            "dst_parent": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "end",
            "src_parent": "end.add(java.util.Calendar.MONTH, -1)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Calendar.MINUTE",
            "dst_parent": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MINUTE, minutes)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.util.Calendar.MONTH",
            "src_parent": "end.add(java.util.Calendar.MONTH, -1)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "end",
            "dst_parent": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "end",
            "src_parent": "end.add(java.util.Calendar.MONTH, 1)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Calendar.MONTH",
            "dst_parent": "org.apache.commons.lang.time.DurationFormatUtils.reduceAndCorrect(start, end, java.util.Calendar.MONTH, months)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "java.util.Calendar.MONTH",
            "src_parent": "end.add(java.util.Calendar.MONTH, 1)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(-1)",
            "dst_parent": "(-1) * difference",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "-1",
            "src_parent": "end.add(java.util.Calendar.MONTH, -1)",
            "src_parent_type": "Invocation",
            "src_type": "UnaryOperator"
          }
        }
      ],
      "file_name": "DurationFormatUtils"
    }
  ],
  "id": "Lang_63"
}