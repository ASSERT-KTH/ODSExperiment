{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.util.List<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring> referrings = null",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n    com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    com.fasterxml.jackson.databind.util.TokenBuffer unknown = null;\n    com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n    java.util.List<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring> referrings = null;\n    for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n        java.lang.String propName = p.getCurrentName();\n        p.nextToken();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                p.nextToken();\n                java.lang.Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (java.lang.Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n                if (bean == null) {\n                    return ctxt.handleInstantiationProblem(handledType(), null, _creatorReturnedNullException());\n                }\n                p.setCurrentValue(bean);\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    return handlePolymorphic(p, ctxt, bean, unknown);\n                }\n                if (unknown != null) {\n                    bean = handleUnknownProperties(ctxt, bean, unknown);\n                }\n                return deserialize(p, ctxt, bean);\n            }\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            try {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n            } catch (com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) {\n                com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n                if (referrings == null) {\n                    referrings = new java.util.ArrayList<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring>();\n                }\n                referrings.add(referring);\n            }\n            continue;\n        }\n        if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        if (_anySetter != null) {\n            try {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            } catch (java.lang.Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            continue;\n        }\n        if (unknown == null) {\n            unknown = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        }\n        unknown.writeFieldName(propName);\n        unknown.copyCurrentStructure(p);\n    }\n    java.lang.Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (java.lang.Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        bean = null;\n    }\n    if (referrings != null) {\n        for (com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring : referrings) {\n            referring.setBean(bean);\n        }\n    }\n    if (unknown != null) {\n        if (bean.getClass() != _beanType.getRawClass()) {\n            return handlePolymorphic(null, ctxt, bean, unknown);\n        }\n        return handleUnknownProperties(ctxt, bean, unknown);\n    }\n    return bean;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "try {\n    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n} catch (com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) {\n    com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n    if (referrings == null) {\n        referrings = new java.util.ArrayList<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring>();\n    }\n    referrings.add(referring);\n}",
            "src_parent": "{\n    try {\n        buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n    } catch (com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) {\n        com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n        if (referrings == null) {\n            referrings = new java.util.ArrayList<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring>();\n        }\n        referrings.add(referring);\n    }\n    continue;\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (referrings != null) {\n    for (com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring : referrings) {\n        referring.setBean(bean);\n    }\n}",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n    com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n    com.fasterxml.jackson.databind.util.TokenBuffer unknown = null;\n    com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n    java.util.List<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring> referrings = null;\n    for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n        java.lang.String propName = p.getCurrentName();\n        p.nextToken();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n        if (creatorProp != null) {\n            if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                p.nextToken();\n                java.lang.Object bean;\n                try {\n                    bean = creator.build(ctxt, buffer);\n                } catch (java.lang.Exception e) {\n                    bean = wrapInstantiationProblem(e, ctxt);\n                }\n                if (bean == null) {\n                    return ctxt.handleInstantiationProblem(handledType(), null, _creatorReturnedNullException());\n                }\n                p.setCurrentValue(bean);\n                if (bean.getClass() != _beanType.getRawClass()) {\n                    return handlePolymorphic(p, ctxt, bean, unknown);\n                }\n                if (unknown != null) {\n                    bean = handleUnknownProperties(ctxt, bean, unknown);\n                }\n                return deserialize(p, ctxt, bean);\n            }\n            continue;\n        }\n        if (buffer.readIdProperty(propName)) {\n            continue;\n        }\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n        if (prop != null) {\n            try {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n            } catch (com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) {\n                com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n                if (referrings == null) {\n                    referrings = new java.util.ArrayList<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring>();\n                }\n                referrings.add(referring);\n            }\n            continue;\n        }\n        if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n            handleIgnoredProperty(p, ctxt, handledType(), propName);\n            continue;\n        }\n        if (_anySetter != null) {\n            try {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            } catch (java.lang.Exception e) {\n                wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n            }\n            continue;\n        }\n        if (unknown == null) {\n            unknown = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        }\n        unknown.writeFieldName(propName);\n        unknown.copyCurrentStructure(p);\n    }\n    java.lang.Object bean;\n    try {\n        bean = creator.build(ctxt, buffer);\n    } catch (java.lang.Exception e) {\n        wrapInstantiationProblem(e, ctxt);\n        bean = null;\n    }\n    if (referrings != null) {\n        for (com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring : referrings) {\n            referring.setBean(bean);\n        }\n    }\n    if (unknown != null) {\n        if (bean.getClass() != _beanType.getRawClass()) {\n            return handlePolymorphic(null, ctxt, bean, unknown);\n        }\n        return handleUnknownProperties(ctxt, bean, unknown);\n    }\n    return bean;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring handleUnresolvedReference(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) throws com.fasterxml.jackson.databind.JsonMappingException {\n    com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = new com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring(reference, prop.getType().getRawClass(), buffer, prop);\n    reference.getRoid().appendReferring(referring);\n    return referring;\n}",
            "src_parent": "public class BeanDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    protected transient java.lang.Exception _nullFromCreator;\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap properties, java.util.Map<java.lang.String, com.fasterxml.jackson.databind.deser.SettableBeanProperty> backRefs, java.util.HashSet<java.lang.String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs, ignorableProps, ignoreAllUnknown, hasViews);\n    }\n\n    protected BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src) {\n        super(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, com.fasterxml.jackson.databind.util.NameTransformer unwrapper) {\n        super(src, unwrapper);\n    }\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, com.fasterxml.jackson.databind.deser.impl.ObjectIdReader oir) {\n        super(src, oir);\n    }\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, java.util.Set<java.lang.String> ignorableProps) {\n        super(src, ignorableProps);\n    }\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap props) {\n        super(src, props);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer unwrapper) {\n        if (getClass() != com.fasterxml.jackson.databind.deser.BeanDeserializer.class) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, unwrapper);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.BeanDeserializer withObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader oir) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, oir);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.BeanDeserializer withIgnorableProperties(java.util.Set<java.lang.String> ignorableProps) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, ignorableProps);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.BeanDeserializerBase withBeanProperties(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap props) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, props);\n    }\n\n    @java.lang.Override\n    protected com.fasterxml.jackson.databind.deser.BeanDeserializerBase asArrayDeserializer() {\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer(this, props);\n    }\n\n    @java.lang.Override\n    public java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (p.isExpectedStartObjectToken()) {\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, p.nextToken());\n            }\n            p.nextToken();\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        }\n        return _deserializeOther(p, ctxt, p.getCurrentToken());\n    }\n\n    protected final java.lang.Object _deserializeOther(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.core.JsonToken t) throws java.io.IOException {\n        switch (t) {\n            case VALUE_STRING :\n                return deserializeFromString(p, ctxt);\n            case VALUE_NUMBER_INT :\n                return deserializeFromNumber(p, ctxt);\n            case VALUE_NUMBER_FLOAT :\n                return deserializeFromDouble(p, ctxt);\n            case VALUE_EMBEDDED_OBJECT :\n                return deserializeFromEmbedded(p, ctxt);\n            case VALUE_TRUE :\n            case VALUE_FALSE :\n                return deserializeFromBoolean(p, ctxt);\n            case VALUE_NULL :\n                return deserializeFromNull(p, ctxt);\n            case START_ARRAY :\n                return deserializeFromArray(p, ctxt);\n            case FIELD_NAME :\n            case END_OBJECT :\n                if (_vanillaProcessing) {\n                    return vanillaDeserialize(p, ctxt, t);\n                }\n                if (_objectIdReader != null) {\n                    return deserializeWithObjectId(p, ctxt);\n                }\n                return deserializeFromObject(p, ctxt);\n            default :\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    @java.lang.Deprecated\n    protected java.lang.Object _missingToken(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        throw ctxt.endOfInputException(handledType());\n    }\n\n    @java.lang.Override\n    public java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean) throws java.io.IOException {\n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, bean);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, bean);\n        }\n        java.lang.String propName;\n        if (p.isExpectedStartObjectToken()) {\n            propName = p.nextFieldName();\n            if (propName == null) {\n                return bean;\n            }\n        } else if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            propName = p.getCurrentName();\n        } else {\n            return bean;\n        }\n        if (_needViewProcesing) {\n            java.lang.Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        do {\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        } while ((propName = p.nextFieldName()) != null );\n        return bean;\n    }\n\n    private final java.lang.Object vanillaDeserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.core.JsonToken t) throws java.io.IOException {\n        final java.lang.Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        p.setCurrentValue(bean);\n        if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            java.lang.String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null );\n        }\n        return bean;\n    }\n\n    @java.lang.Override\n    public java.lang.Object deserializeFromObject(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if ((_objectIdReader != null) && _objectIdReader.maySerializeAsObject()) {\n            if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME) && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                return deserializeFromObjectId(p, ctxt);\n            }\n        }\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            java.lang.Object bean = deserializeFromObjectUsingNonDefault(p, ctxt);\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        }\n        final java.lang.Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        p.setCurrentValue(bean);\n        if (p.canReadObjectId()) {\n            java.lang.Object id = p.getObjectId();\n            if (id != null) {\n                _handleTypedObjectId(p, ctxt, bean, id);\n            }\n        }\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            java.lang.Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            java.lang.String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null );\n        }\n        return bean;\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object _deserializeUsingPropertyBased(final com.fasterxml.jackson.core.JsonParser p, final com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n        com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n        com.fasterxml.jackson.databind.util.TokenBuffer unknown = null;\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        java.util.List<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring> referrings = null;\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    p.nextToken();\n                    java.lang.Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (java.lang.Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    if (bean == null) {\n                        return ctxt.handleInstantiationProblem(handledType(), null, _creatorReturnedNullException());\n                    }\n                    p.setCurrentValue(bean);\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) {\n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    return deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                try {\n                    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                } catch (com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) {\n                    com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n                    if (referrings == null) {\n                        referrings = new java.util.ArrayList<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring>();\n                    }\n                    referrings.add(referring);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            if (unknown == null) {\n                unknown = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n        java.lang.Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (java.lang.Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            bean = null;\n        }\n        if (referrings != null) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring : referrings) {\n                referring.setBean(bean);\n            }\n        }\n        if (unknown != null) {\n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    private com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring handleUnresolvedReference(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = new com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring(reference, prop.getType().getRawClass(), buffer, prop);\n        reference.getRoid().appendReferring(referring);\n        return referring;\n    }\n\n    protected final java.lang.Object _deserializeWithErrorWrapping(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop) throws java.io.IOException {\n        try {\n            return prop.deserialize(p, ctxt);\n        } catch (java.lang.Exception e) {\n            wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n            return null;\n        }\n    }\n\n    protected java.lang.Object deserializeFromNull(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (p.requiresCustomCodec()) {\n            @java.lang.SuppressWarnings(\"resource\")\n            com.fasterxml.jackson.databind.util.TokenBuffer tb = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n            tb.writeEndObject();\n            com.fasterxml.jackson.core.JsonParser p2 = tb.asParser(p);\n            p2.nextToken();\n            java.lang.Object ob = (_vanillaProcessing) ? vanillaDeserialize(p2, ctxt, com.fasterxml.jackson.core.JsonToken.END_OBJECT) : deserializeFromObject(p2, ctxt);\n            p2.close();\n            return ob;\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    protected final java.lang.Object deserializeWithView(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean, java.lang.Class<?> activeView) throws java.io.IOException {\n        if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            java.lang.String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    if (!prop.visibleInView(activeView)) {\n                        p.skipChildren();\n                        continue;\n                    }\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null );\n        }\n        return bean;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final java.lang.Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        final java.lang.Class<?> activeView = (_needViewProcesing) ? ctxt.getActiveView() : null;\n        java.lang.String propName = (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) ? p.getCurrentName() : null;\n        for (; propName != null; propName = p.nextFieldName()) {\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                if ((activeView != null) && (!prop.visibleInView(activeView))) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean) throws java.io.IOException {\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final java.lang.Class<?> activeView = (_needViewProcesing) ? ctxt.getActiveView() : null;\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) {\n                if ((activeView != null) && (!prop.visibleInView(activeView))) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeUsingPropertyBasedWithUnwrapped(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n        com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken();\n                    java.lang.Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (java.lang.Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    p.setCurrentValue(bean);\n                    while (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                        p.nextToken();\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    } \n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        tokens.close();\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n        java.lang.Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (java.lang.Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null;\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    protected java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean) throws java.io.IOException {\n        final java.lang.Class<?> activeView = (_needViewProcesing) ? ctxt.getActiveView() : null;\n        final com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        for (com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken(); t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            t = p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if ((activeView != null) && (!prop.visibleInView(activeView))) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownProperty(p, ctxt, bean, propName);\n        }\n        return ext.complete(p, ctxt, bean);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeUsingPropertyBasedWithExternalTypeId(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        final com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n        com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                } else if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken();\n                    java.lang.Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue;\n                    }\n                    while (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                        p.nextToken();\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    } \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return ext.complete(p, ctxt, bean);\n                }\n                continue;\n            }\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (java.lang.Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    protected java.lang.Exception _creatorReturnedNullException() {\n        if (_nullFromCreator == null) {\n            _nullFromCreator = new java.lang.NullPointerException(\"JSON Creator returned null\");\n        }\n        return _nullFromCreator;\n    }\n\n    static class BeanReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {\n        private final com.fasterxml.jackson.databind.deser.SettableBeanProperty _prop;\n\n        private java.lang.Object _bean;\n\n        public void setBean(java.lang.Object bean) {\n            _bean = bean;\n        }\n\n        BeanReferring(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference ref, java.lang.Class<?> valueType, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop) {\n            super(ref, valueType);\n            _prop = prop;\n        }\n\n        @java.lang.Override\n        public void handleResolvedForwardReference(java.lang.Object id, java.lang.Object value) throws java.io.IOException {\n            _prop.set(_bean, value);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static class BeanReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {\n    private final com.fasterxml.jackson.databind.deser.SettableBeanProperty _prop;\n\n    private java.lang.Object _bean;\n\n    public void setBean(java.lang.Object bean) {\n        _bean = bean;\n    }\n\n    BeanReferring(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference ref, java.lang.Class<?> valueType, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop) {\n        super(ref, valueType);\n        _prop = prop;\n    }\n\n    @java.lang.Override\n    public void handleResolvedForwardReference(java.lang.Object id, java.lang.Object value) throws java.io.IOException {\n        _prop.set(_bean, value);\n    }\n}",
            "src_parent": "public class BeanDeserializer extends com.fasterxml.jackson.databind.deser.BeanDeserializerBase implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    protected transient java.lang.Exception _nullFromCreator;\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap properties, java.util.Map<java.lang.String, com.fasterxml.jackson.databind.deser.SettableBeanProperty> backRefs, java.util.HashSet<java.lang.String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) {\n        super(builder, beanDesc, properties, backRefs, ignorableProps, ignoreAllUnknown, hasViews);\n    }\n\n    protected BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src) {\n        super(src, src._ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, boolean ignoreAllUnknown) {\n        super(src, ignoreAllUnknown);\n    }\n\n    protected BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, com.fasterxml.jackson.databind.util.NameTransformer unwrapper) {\n        super(src, unwrapper);\n    }\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, com.fasterxml.jackson.databind.deser.impl.ObjectIdReader oir) {\n        super(src, oir);\n    }\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, java.util.Set<java.lang.String> ignorableProps) {\n        super(src, ignorableProps);\n    }\n\n    public BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase src, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap props) {\n        super(src, props);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer unwrapper) {\n        if (getClass() != com.fasterxml.jackson.databind.deser.BeanDeserializer.class) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, unwrapper);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.BeanDeserializer withObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader oir) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, oir);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.BeanDeserializer withIgnorableProperties(java.util.Set<java.lang.String> ignorableProps) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, ignorableProps);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.BeanDeserializerBase withBeanProperties(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap props) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializer(this, props);\n    }\n\n    @java.lang.Override\n    protected com.fasterxml.jackson.databind.deser.BeanDeserializerBase asArrayDeserializer() {\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n        return new com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer(this, props);\n    }\n\n    @java.lang.Override\n    public java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (p.isExpectedStartObjectToken()) {\n            if (_vanillaProcessing) {\n                return vanillaDeserialize(p, ctxt, p.nextToken());\n            }\n            p.nextToken();\n            if (_objectIdReader != null) {\n                return deserializeWithObjectId(p, ctxt);\n            }\n            return deserializeFromObject(p, ctxt);\n        }\n        return _deserializeOther(p, ctxt, p.getCurrentToken());\n    }\n\n    protected final java.lang.Object _deserializeOther(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.core.JsonToken t) throws java.io.IOException {\n        switch (t) {\n            case VALUE_STRING :\n                return deserializeFromString(p, ctxt);\n            case VALUE_NUMBER_INT :\n                return deserializeFromNumber(p, ctxt);\n            case VALUE_NUMBER_FLOAT :\n                return deserializeFromDouble(p, ctxt);\n            case VALUE_EMBEDDED_OBJECT :\n                return deserializeFromEmbedded(p, ctxt);\n            case VALUE_TRUE :\n            case VALUE_FALSE :\n                return deserializeFromBoolean(p, ctxt);\n            case VALUE_NULL :\n                return deserializeFromNull(p, ctxt);\n            case START_ARRAY :\n                return deserializeFromArray(p, ctxt);\n            case FIELD_NAME :\n            case END_OBJECT :\n                if (_vanillaProcessing) {\n                    return vanillaDeserialize(p, ctxt, t);\n                }\n                if (_objectIdReader != null) {\n                    return deserializeWithObjectId(p, ctxt);\n                }\n                return deserializeFromObject(p, ctxt);\n            default :\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    @java.lang.Deprecated\n    protected java.lang.Object _missingToken(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        throw ctxt.endOfInputException(handledType());\n    }\n\n    @java.lang.Override\n    public java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean) throws java.io.IOException {\n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_unwrappedPropertyHandler != null) {\n            return deserializeWithUnwrapped(p, ctxt, bean);\n        }\n        if (_externalTypeIdHandler != null) {\n            return deserializeWithExternalTypeId(p, ctxt, bean);\n        }\n        java.lang.String propName;\n        if (p.isExpectedStartObjectToken()) {\n            propName = p.nextFieldName();\n            if (propName == null) {\n                return bean;\n            }\n        } else if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            propName = p.getCurrentName();\n        } else {\n            return bean;\n        }\n        if (_needViewProcesing) {\n            java.lang.Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        do {\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownVanilla(p, ctxt, bean, propName);\n        } while ((propName = p.nextFieldName()) != null );\n        return bean;\n    }\n\n    private final java.lang.Object vanillaDeserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.core.JsonToken t) throws java.io.IOException {\n        final java.lang.Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        p.setCurrentValue(bean);\n        if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            java.lang.String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null );\n        }\n        return bean;\n    }\n\n    @java.lang.Override\n    public java.lang.Object deserializeFromObject(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if ((_objectIdReader != null) && _objectIdReader.maySerializeAsObject()) {\n            if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME) && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) {\n                return deserializeFromObjectId(p, ctxt);\n            }\n        }\n        if (_nonStandardCreation) {\n            if (_unwrappedPropertyHandler != null) {\n                return deserializeWithUnwrapped(p, ctxt);\n            }\n            if (_externalTypeIdHandler != null) {\n                return deserializeWithExternalTypeId(p, ctxt);\n            }\n            java.lang.Object bean = deserializeFromObjectUsingNonDefault(p, ctxt);\n            if (_injectables != null) {\n                injectValues(ctxt, bean);\n            }\n            return bean;\n        }\n        final java.lang.Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        p.setCurrentValue(bean);\n        if (p.canReadObjectId()) {\n            java.lang.Object id = p.getObjectId();\n            if (id != null) {\n                _handleTypedObjectId(p, ctxt, bean, id);\n            }\n        }\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        if (_needViewProcesing) {\n            java.lang.Class<?> view = ctxt.getActiveView();\n            if (view != null) {\n                return deserializeWithView(p, ctxt, bean, view);\n            }\n        }\n        if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            java.lang.String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null );\n        }\n        return bean;\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object _deserializeUsingPropertyBased(final com.fasterxml.jackson.core.JsonParser p, final com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n        com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n        com.fasterxml.jackson.databind.util.TokenBuffer unknown = null;\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        java.util.List<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring> referrings = null;\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    p.nextToken();\n                    java.lang.Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (java.lang.Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    if (bean == null) {\n                        return ctxt.handleInstantiationProblem(handledType(), null, _creatorReturnedNullException());\n                    }\n                    p.setCurrentValue(bean);\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        return handlePolymorphic(p, ctxt, bean, unknown);\n                    }\n                    if (unknown != null) {\n                        bean = handleUnknownProperties(ctxt, bean, unknown);\n                    }\n                    return deserialize(p, ctxt, bean);\n                }\n                continue;\n            }\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                try {\n                    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                } catch (com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) {\n                    com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = handleUnresolvedReference(p, prop, buffer, reference);\n                    if (referrings == null) {\n                        referrings = new java.util.ArrayList<com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring>();\n                    }\n                    referrings.add(referring);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n                continue;\n            }\n            if (unknown == null) {\n                unknown = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n            }\n            unknown.writeFieldName(propName);\n            unknown.copyCurrentStructure(p);\n        }\n        java.lang.Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (java.lang.Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            bean = null;\n        }\n        if (referrings != null) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring : referrings) {\n                referring.setBean(bean);\n            }\n        }\n        if (unknown != null) {\n            if (bean.getClass() != _beanType.getRawClass()) {\n                return handlePolymorphic(null, ctxt, bean, unknown);\n            }\n            return handleUnknownProperties(ctxt, bean, unknown);\n        }\n        return bean;\n    }\n\n    private com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring handleUnresolvedReference(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference reference) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring referring = new com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring(reference, prop.getType().getRawClass(), buffer, prop);\n        reference.getRoid().appendReferring(referring);\n        return referring;\n    }\n\n    protected final java.lang.Object _deserializeWithErrorWrapping(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop) throws java.io.IOException {\n        try {\n            return prop.deserialize(p, ctxt);\n        } catch (java.lang.Exception e) {\n            wrapAndThrow(e, _beanType.getRawClass(), prop.getName(), ctxt);\n            return null;\n        }\n    }\n\n    protected java.lang.Object deserializeFromNull(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (p.requiresCustomCodec()) {\n            @java.lang.SuppressWarnings(\"resource\")\n            com.fasterxml.jackson.databind.util.TokenBuffer tb = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n            tb.writeEndObject();\n            com.fasterxml.jackson.core.JsonParser p2 = tb.asParser(p);\n            p2.nextToken();\n            java.lang.Object ob = (_vanillaProcessing) ? vanillaDeserialize(p2, ctxt, com.fasterxml.jackson.core.JsonToken.END_OBJECT) : deserializeFromObject(p2, ctxt);\n            p2.close();\n            return ob;\n        }\n        return ctxt.handleUnexpectedToken(handledType(), p);\n    }\n\n    protected final java.lang.Object deserializeWithView(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean, java.lang.Class<?> activeView) throws java.io.IOException {\n        if (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) {\n            java.lang.String propName = p.getCurrentName();\n            do {\n                p.nextToken();\n                com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n                if (prop != null) {\n                    if (!prop.visibleInView(activeView)) {\n                        p.skipChildren();\n                        continue;\n                    }\n                    try {\n                        prop.deserializeAndSet(p, ctxt, bean);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, bean, propName, ctxt);\n                    }\n                    continue;\n                }\n                handleUnknownVanilla(p, ctxt, bean, propName);\n            } while ((propName = p.nextFieldName()) != null );\n        }\n        return bean;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithUnwrapped(p, ctxt);\n        }\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final java.lang.Object bean = _valueInstantiator.createUsingDefault(ctxt);\n        p.setCurrentValue(bean);\n        if (_injectables != null) {\n            injectValues(ctxt, bean);\n        }\n        final java.lang.Class<?> activeView = (_needViewProcesing) ? ctxt.getActiveView() : null;\n        java.lang.String propName = (p.hasTokenId(com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME)) ? p.getCurrentName() : null;\n        for (; propName != null; propName = p.nextFieldName()) {\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                if ((activeView != null) && (!prop.visibleInView(activeView))) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeWithUnwrapped(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean) throws java.io.IOException {\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n            t = p.nextToken();\n        }\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        final java.lang.Class<?> activeView = (_needViewProcesing) ? ctxt.getActiveView() : null;\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            p.nextToken();\n            if (prop != null) {\n                if ((activeView != null) && (!prop.visibleInView(activeView))) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            if (_anySetter != null) {\n                _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n            }\n        }\n        tokens.writeEndObject();\n        _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n        return bean;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeUsingPropertyBasedWithUnwrapped(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n        com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken();\n                    java.lang.Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (java.lang.Exception e) {\n                        bean = wrapInstantiationProblem(e, ctxt);\n                    }\n                    p.setCurrentValue(bean);\n                    while (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                        p.nextToken();\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    } \n                    tokens.writeEndObject();\n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        tokens.close();\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n                }\n                continue;\n            }\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            tokens.writeFieldName(propName);\n            tokens.copyCurrentStructure(p);\n            if (_anySetter != null) {\n                try {\n                    buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                }\n            }\n        }\n        java.lang.Object bean;\n        try {\n            bean = creator.build(ctxt, buffer);\n        } catch (java.lang.Exception e) {\n            wrapInstantiationProblem(e, ctxt);\n            return null;\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n    }\n\n    protected java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (_propertyBasedCreator != null) {\n            return deserializeUsingPropertyBasedWithExternalTypeId(p, ctxt);\n        }\n        if (_delegateDeserializer != null) {\n            return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));\n        }\n        return deserializeWithExternalTypeId(p, ctxt, _valueInstantiator.createUsingDefault(ctxt));\n    }\n\n    protected java.lang.Object deserializeWithExternalTypeId(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, java.lang.Object bean) throws java.io.IOException {\n        final java.lang.Class<?> activeView = (_needViewProcesing) ? ctxt.getActiveView() : null;\n        final com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        for (com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken(); t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            t = p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                if (t.isScalarValue()) {\n                    ext.handleTypePropertyValue(p, ctxt, propName, bean);\n                }\n                if ((activeView != null) && (!prop.visibleInView(activeView))) {\n                    p.skipChildren();\n                    continue;\n                }\n                try {\n                    prop.deserializeAndSet(p, ctxt, bean);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, bean, propName);\n                continue;\n            }\n            if (ext.handlePropertyValue(p, ctxt, propName, bean)) {\n                continue;\n            }\n            if (_anySetter != null) {\n                try {\n                    _anySetter.deserializeAndSet(p, ctxt, bean, propName);\n                } catch (java.lang.Exception e) {\n                    wrapAndThrow(e, bean, propName, ctxt);\n                }\n                continue;\n            }\n            handleUnknownProperty(p, ctxt, bean, propName);\n        }\n        return ext.complete(p, ctxt, bean);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object deserializeUsingPropertyBasedWithExternalTypeId(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        final com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler ext = _externalTypeIdHandler.start();\n        final com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator creator = _propertyBasedCreator;\n        com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n        com.fasterxml.jackson.databind.util.TokenBuffer tokens = new com.fasterxml.jackson.databind.util.TokenBuffer(p, ctxt);\n        tokens.writeStartObject();\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        for (; t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME; t = p.nextToken()) {\n            java.lang.String propName = p.getCurrentName();\n            p.nextToken();\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n            if (creatorProp != null) {\n                if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                } else if (buffer.assignParameter(creatorProp, _deserializeWithErrorWrapping(p, ctxt, creatorProp))) {\n                    t = p.nextToken();\n                    java.lang.Object bean;\n                    try {\n                        bean = creator.build(ctxt, buffer);\n                    } catch (java.lang.Exception e) {\n                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n                        continue;\n                    }\n                    while (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                        p.nextToken();\n                        tokens.copyCurrentStructure(p);\n                        t = p.nextToken();\n                    } \n                    if (bean.getClass() != _beanType.getRawClass()) {\n                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n                        return null;\n                    }\n                    return ext.complete(p, ctxt, bean);\n                }\n                continue;\n            }\n            if (buffer.readIdProperty(propName)) {\n                continue;\n            }\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = _beanProperties.find(propName);\n            if (prop != null) {\n                buffer.bufferProperty(prop, prop.deserialize(p, ctxt));\n                continue;\n            }\n            if (ext.handlePropertyValue(p, ctxt, propName, null)) {\n                continue;\n            }\n            if ((_ignorableProps != null) && _ignorableProps.contains(propName)) {\n                handleIgnoredProperty(p, ctxt, handledType(), propName);\n                continue;\n            }\n            if (_anySetter != null) {\n                buffer.bufferAnyProperty(_anySetter, propName, _anySetter.deserialize(p, ctxt));\n            }\n        }\n        try {\n            return ext.complete(p, ctxt, buffer, creator);\n        } catch (java.lang.Exception e) {\n            return wrapInstantiationProblem(e, ctxt);\n        }\n    }\n\n    protected java.lang.Exception _creatorReturnedNullException() {\n        if (_nullFromCreator == null) {\n            _nullFromCreator = new java.lang.NullPointerException(\"JSON Creator returned null\");\n        }\n        return _nullFromCreator;\n    }\n\n    static class BeanReferring extends com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring {\n        private final com.fasterxml.jackson.databind.deser.SettableBeanProperty _prop;\n\n        private java.lang.Object _bean;\n\n        public void setBean(java.lang.Object bean) {\n            _bean = bean;\n        }\n\n        BeanReferring(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference ref, java.lang.Class<?> valueType, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer buffer, com.fasterxml.jackson.databind.deser.SettableBeanProperty prop) {\n            super(ref, valueType);\n            _prop = prop;\n        }\n\n        @java.lang.Override\n        public void handleResolvedForwardReference(java.lang.Object id, java.lang.Object value) throws java.io.IOException {\n            _prop.set(_bean, value);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Continue",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop))",
            "dst_parent": "{\n    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n    continue;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop))",
            "src_parent": "{\n    buffer.bufferProperty(prop, _deserializeWithErrorWrapping(p, ctxt, prop));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "BeanDeserializer"
    }
  ],
  "id": "JacksonDatabind_50"
}