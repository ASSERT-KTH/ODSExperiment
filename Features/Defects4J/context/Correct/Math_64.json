{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "oldRes",
            "dst_parent": "determineLMParameter(oldRes, delta, diag, work1, work2, work3)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "qtf",
            "src_parent": "determineLMParameter(qtf, delta, diag, work1, work2, work3)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "double[] oldObj = new double[rows]",
            "src_parent": "{\n    solvedCols = java.lang.Math.min(rows, cols);\n    diagR = new double[cols];\n    jacNorm = new double[cols];\n    beta = new double[cols];\n    permutation = new int[cols];\n    lmDir = new double[cols];\n    double delta = 0;\n    double xNorm = 0;\n    double[] diag = new double[cols];\n    double[] oldX = new double[cols];\n    double[] oldRes = new double[rows];\n    double[] oldObj = new double[rows];\n    double[] qtf = new double[rows];\n    double[] work1 = new double[cols];\n    double[] work2 = new double[cols];\n    double[] work3 = new double[cols];\n    updateResidualsAndCost();\n    lmPar = 0;\n    boolean firstIteration = true;\n    org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n    while (true) {\n        for (int i = 0; i < rows; i++) {\n            qtf[i] = residuals[i];\n        }\n        incrementIterationsCounter();\n        org.apache.commons.math.optimization.VectorialPointValuePair previous = current;\n        updateJacobian();\n        qrDecomposition();\n        qTy(qtf);\n        for (int k = 0; k < solvedCols; ++k) {\n            int pk = permutation[k];\n            jacobian[k][pk] = diagR[pk];\n        }\n        if (firstIteration) {\n            xNorm = 0;\n            for (int k = 0; k < cols; ++k) {\n                double dk = jacNorm[k];\n                if (dk == 0) {\n                    dk = 1.0;\n                }\n                double xk = dk * point[k];\n                xNorm += xk * xk;\n                diag[k] = dk;\n            }\n            xNorm = java.lang.Math.sqrt(xNorm);\n            delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundFactor * xNorm;\n        }\n        double maxCosine = 0;\n        if (cost != 0) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = jacNorm[pj];\n                if (s != 0) {\n                    double sum = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        sum += jacobian[i][pj] * qtf[i];\n                    }\n                    maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost));\n                }\n            }\n        }\n        if (maxCosine <= orthoTolerance) {\n            updateResidualsAndCost();\n            current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n            return current;\n        }\n        for (int j = 0; j < cols; ++j) {\n            diag[j] = java.lang.Math.max(diag[j], jacNorm[j]);\n        }\n        for (double ratio = 0; ratio < 1.0E-4;) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                oldX[pj] = point[pj];\n            }\n            double previousCost = cost;\n            double[] tmpVec = residuals;\n            residuals = oldRes;\n            oldRes = tmpVec;\n            tmpVec = objective;\n            objective = oldObj;\n            oldObj = tmpVec;\n            determineLMParameter(qtf, delta, diag, work1, work2, work3);\n            double lmNorm = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                lmDir[pj] = -lmDir[pj];\n                point[pj] = oldX[pj] + lmDir[pj];\n                double s = diag[pj] * lmDir[pj];\n                lmNorm += s * s;\n            }\n            lmNorm = java.lang.Math.sqrt(lmNorm);\n            if (firstIteration) {\n                delta = java.lang.Math.min(delta, lmNorm);\n            }\n            updateResidualsAndCost();\n            double actRed = -1.0;\n            if ((0.1 * cost) < previousCost) {\n                double r = cost / previousCost;\n                actRed = 1.0 - (r * r);\n            }\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double dirJ = lmDir[pj];\n                work1[j] = 0;\n                for (int i = 0; i <= j; ++i) {\n                    work1[i] += jacobian[i][pj] * dirJ;\n                }\n            }\n            double coeff1 = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                coeff1 += work1[j] * work1[j];\n            }\n            double pc2 = previousCost * previousCost;\n            coeff1 = coeff1 / pc2;\n            double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n            double preRed = coeff1 + (2 * coeff2);\n            double dirDer = -(coeff1 + coeff2);\n            ratio = (preRed == 0) ? 0 : actRed / preRed;\n            if (ratio <= 0.25) {\n                double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n                if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {\n                    tmp = 0.1;\n                }\n                delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);\n                lmPar /= tmp;\n            } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                delta = 2 * lmNorm;\n                lmPar *= 0.5;\n            }\n            if (ratio >= 1.0E-4) {\n                firstIteration = false;\n                xNorm = 0;\n                for (int k = 0; k < cols; ++k) {\n                    double xK = diag[k] * point[k];\n                    xNorm += xK * xK;\n                }\n                xNorm = java.lang.Math.sqrt(xNorm);\n                current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n                if (checker != null) {\n                    if (checker.converged(getIterations(), previous, current)) {\n                        return current;\n                    }\n                }\n            } else {\n                cost = previousCost;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    point[pj] = oldX[pj];\n                }\n                tmpVec = residuals;\n                residuals = oldRes;\n                oldRes = tmpVec;\n                tmpVec = objective;\n                objective = oldObj;\n                oldObj = tmpVec;\n            }\n            if (checker == null) {\n                if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n                    return current;\n                }\n            }\n            if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {\n                throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n            } else if (delta <= (2.2204E-16 * xNorm)) {\n                throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n            } else if (maxCosine <= 2.2204E-16) {\n                throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n            }\n        }\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "double[] qtf = new double[rows]",
            "src_parent": "{\n    solvedCols = java.lang.Math.min(rows, cols);\n    diagR = new double[cols];\n    jacNorm = new double[cols];\n    beta = new double[cols];\n    permutation = new int[cols];\n    lmDir = new double[cols];\n    double delta = 0;\n    double xNorm = 0;\n    double[] diag = new double[cols];\n    double[] oldX = new double[cols];\n    double[] oldRes = new double[rows];\n    double[] oldObj = new double[rows];\n    double[] qtf = new double[rows];\n    double[] work1 = new double[cols];\n    double[] work2 = new double[cols];\n    double[] work3 = new double[cols];\n    updateResidualsAndCost();\n    lmPar = 0;\n    boolean firstIteration = true;\n    org.apache.commons.math.optimization.VectorialPointValuePair current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n    while (true) {\n        for (int i = 0; i < rows; i++) {\n            qtf[i] = residuals[i];\n        }\n        incrementIterationsCounter();\n        org.apache.commons.math.optimization.VectorialPointValuePair previous = current;\n        updateJacobian();\n        qrDecomposition();\n        qTy(qtf);\n        for (int k = 0; k < solvedCols; ++k) {\n            int pk = permutation[k];\n            jacobian[k][pk] = diagR[pk];\n        }\n        if (firstIteration) {\n            xNorm = 0;\n            for (int k = 0; k < cols; ++k) {\n                double dk = jacNorm[k];\n                if (dk == 0) {\n                    dk = 1.0;\n                }\n                double xk = dk * point[k];\n                xNorm += xk * xk;\n                diag[k] = dk;\n            }\n            xNorm = java.lang.Math.sqrt(xNorm);\n            delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundFactor * xNorm;\n        }\n        double maxCosine = 0;\n        if (cost != 0) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = jacNorm[pj];\n                if (s != 0) {\n                    double sum = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        sum += jacobian[i][pj] * qtf[i];\n                    }\n                    maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost));\n                }\n            }\n        }\n        if (maxCosine <= orthoTolerance) {\n            updateResidualsAndCost();\n            current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n            return current;\n        }\n        for (int j = 0; j < cols; ++j) {\n            diag[j] = java.lang.Math.max(diag[j], jacNorm[j]);\n        }\n        for (double ratio = 0; ratio < 1.0E-4;) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                oldX[pj] = point[pj];\n            }\n            double previousCost = cost;\n            double[] tmpVec = residuals;\n            residuals = oldRes;\n            oldRes = tmpVec;\n            tmpVec = objective;\n            objective = oldObj;\n            oldObj = tmpVec;\n            determineLMParameter(qtf, delta, diag, work1, work2, work3);\n            double lmNorm = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                lmDir[pj] = -lmDir[pj];\n                point[pj] = oldX[pj] + lmDir[pj];\n                double s = diag[pj] * lmDir[pj];\n                lmNorm += s * s;\n            }\n            lmNorm = java.lang.Math.sqrt(lmNorm);\n            if (firstIteration) {\n                delta = java.lang.Math.min(delta, lmNorm);\n            }\n            updateResidualsAndCost();\n            double actRed = -1.0;\n            if ((0.1 * cost) < previousCost) {\n                double r = cost / previousCost;\n                actRed = 1.0 - (r * r);\n            }\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double dirJ = lmDir[pj];\n                work1[j] = 0;\n                for (int i = 0; i <= j; ++i) {\n                    work1[i] += jacobian[i][pj] * dirJ;\n                }\n            }\n            double coeff1 = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                coeff1 += work1[j] * work1[j];\n            }\n            double pc2 = previousCost * previousCost;\n            coeff1 = coeff1 / pc2;\n            double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n            double preRed = coeff1 + (2 * coeff2);\n            double dirDer = -(coeff1 + coeff2);\n            ratio = (preRed == 0) ? 0 : actRed / preRed;\n            if (ratio <= 0.25) {\n                double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n                if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {\n                    tmp = 0.1;\n                }\n                delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);\n                lmPar /= tmp;\n            } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                delta = 2 * lmNorm;\n                lmPar *= 0.5;\n            }\n            if (ratio >= 1.0E-4) {\n                firstIteration = false;\n                xNorm = 0;\n                for (int k = 0; k < cols; ++k) {\n                    double xK = diag[k] * point[k];\n                    xNorm += xK * xK;\n                }\n                xNorm = java.lang.Math.sqrt(xNorm);\n                current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n                if (checker != null) {\n                    if (checker.converged(getIterations(), previous, current)) {\n                        return current;\n                    }\n                }\n            } else {\n                cost = previousCost;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    point[pj] = oldX[pj];\n                }\n                tmpVec = residuals;\n                residuals = oldRes;\n                oldRes = tmpVec;\n                tmpVec = objective;\n                objective = oldObj;\n                oldObj = tmpVec;\n            }\n            if (checker == null) {\n                if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n                    return current;\n                }\n            }\n            if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {\n                throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n            } else if (delta <= (2.2204E-16 * xNorm)) {\n                throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n            } else if (maxCosine <= 2.2204E-16) {\n                throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n            }\n        }\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (int i = 0; i < rows; i++) {\n    qtf[i] = residuals[i];\n}",
            "src_parent": "{\n    for (int i = 0; i < rows; i++) {\n        qtf[i] = residuals[i];\n    }\n    incrementIterationsCounter();\n    org.apache.commons.math.optimization.VectorialPointValuePair previous = current;\n    updateJacobian();\n    qrDecomposition();\n    qTy(qtf);\n    for (int k = 0; k < solvedCols; ++k) {\n        int pk = permutation[k];\n        jacobian[k][pk] = diagR[pk];\n    }\n    if (firstIteration) {\n        xNorm = 0;\n        for (int k = 0; k < cols; ++k) {\n            double dk = jacNorm[k];\n            if (dk == 0) {\n                dk = 1.0;\n            }\n            double xk = dk * point[k];\n            xNorm += xk * xk;\n            diag[k] = dk;\n        }\n        xNorm = java.lang.Math.sqrt(xNorm);\n        delta = (xNorm == 0) ? initialStepBoundFactor : initialStepBoundFactor * xNorm;\n    }\n    double maxCosine = 0;\n    if (cost != 0) {\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            double s = jacNorm[pj];\n            if (s != 0) {\n                double sum = 0;\n                for (int i = 0; i <= j; ++i) {\n                    sum += jacobian[i][pj] * qtf[i];\n                }\n                maxCosine = java.lang.Math.max(maxCosine, java.lang.Math.abs(sum) / (s * cost));\n            }\n        }\n    }\n    if (maxCosine <= orthoTolerance) {\n        updateResidualsAndCost();\n        current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n        return current;\n    }\n    for (int j = 0; j < cols; ++j) {\n        diag[j] = java.lang.Math.max(diag[j], jacNorm[j]);\n    }\n    for (double ratio = 0; ratio < 1.0E-4;) {\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            oldX[pj] = point[pj];\n        }\n        double previousCost = cost;\n        double[] tmpVec = residuals;\n        residuals = oldRes;\n        oldRes = tmpVec;\n        tmpVec = objective;\n        objective = oldObj;\n        oldObj = tmpVec;\n        determineLMParameter(qtf, delta, diag, work1, work2, work3);\n        double lmNorm = 0;\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            lmDir[pj] = -lmDir[pj];\n            point[pj] = oldX[pj] + lmDir[pj];\n            double s = diag[pj] * lmDir[pj];\n            lmNorm += s * s;\n        }\n        lmNorm = java.lang.Math.sqrt(lmNorm);\n        if (firstIteration) {\n            delta = java.lang.Math.min(delta, lmNorm);\n        }\n        updateResidualsAndCost();\n        double actRed = -1.0;\n        if ((0.1 * cost) < previousCost) {\n            double r = cost / previousCost;\n            actRed = 1.0 - (r * r);\n        }\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            double dirJ = lmDir[pj];\n            work1[j] = 0;\n            for (int i = 0; i <= j; ++i) {\n                work1[i] += jacobian[i][pj] * dirJ;\n            }\n        }\n        double coeff1 = 0;\n        for (int j = 0; j < solvedCols; ++j) {\n            coeff1 += work1[j] * work1[j];\n        }\n        double pc2 = previousCost * previousCost;\n        coeff1 = coeff1 / pc2;\n        double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n        double preRed = coeff1 + (2 * coeff2);\n        double dirDer = -(coeff1 + coeff2);\n        ratio = (preRed == 0) ? 0 : actRed / preRed;\n        if (ratio <= 0.25) {\n            double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n            if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {\n                tmp = 0.1;\n            }\n            delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);\n            lmPar /= tmp;\n        } else if ((lmPar == 0) || (ratio >= 0.75)) {\n            delta = 2 * lmNorm;\n            lmPar *= 0.5;\n        }\n        if (ratio >= 1.0E-4) {\n            firstIteration = false;\n            xNorm = 0;\n            for (int k = 0; k < cols; ++k) {\n                double xK = diag[k] * point[k];\n                xNorm += xK * xK;\n            }\n            xNorm = java.lang.Math.sqrt(xNorm);\n            current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n            if (checker != null) {\n                if (checker.converged(getIterations(), previous, current)) {\n                    return current;\n                }\n            }\n        } else {\n            cost = previousCost;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                point[pj] = oldX[pj];\n            }\n            tmpVec = residuals;\n            residuals = oldRes;\n            oldRes = tmpVec;\n            tmpVec = objective;\n            objective = oldObj;\n            oldObj = tmpVec;\n        }\n        if (checker == null) {\n            if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n                return current;\n            }\n        }\n        if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {\n            throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n        } else if (delta <= (2.2204E-16 * xNorm)) {\n            throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n        } else if (maxCosine <= 2.2204E-16) {\n            throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "qtf",
            "src_parent": "qTy(qtf)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "OperatorAssignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "qtf[i]",
            "src_parent": "jacobian[i][pj] * qtf[i]",
            "src_parent_type": "BinaryOperator",
            "src_type": "ArrayRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "updateResidualsAndCost()",
            "src_parent": "{\n    updateResidualsAndCost();\n    current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n    return current;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)",
            "src_parent": "{\n    updateResidualsAndCost();\n    current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n    return current;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "tmpVec = objective",
            "src_parent": "{\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        oldX[pj] = point[pj];\n    }\n    double previousCost = cost;\n    double[] tmpVec = residuals;\n    residuals = oldRes;\n    oldRes = tmpVec;\n    tmpVec = objective;\n    objective = oldObj;\n    oldObj = tmpVec;\n    determineLMParameter(qtf, delta, diag, work1, work2, work3);\n    double lmNorm = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        lmDir[pj] = -lmDir[pj];\n        point[pj] = oldX[pj] + lmDir[pj];\n        double s = diag[pj] * lmDir[pj];\n        lmNorm += s * s;\n    }\n    lmNorm = java.lang.Math.sqrt(lmNorm);\n    if (firstIteration) {\n        delta = java.lang.Math.min(delta, lmNorm);\n    }\n    updateResidualsAndCost();\n    double actRed = -1.0;\n    if ((0.1 * cost) < previousCost) {\n        double r = cost / previousCost;\n        actRed = 1.0 - (r * r);\n    }\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        double dirJ = lmDir[pj];\n        work1[j] = 0;\n        for (int i = 0; i <= j; ++i) {\n            work1[i] += jacobian[i][pj] * dirJ;\n        }\n    }\n    double coeff1 = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        coeff1 += work1[j] * work1[j];\n    }\n    double pc2 = previousCost * previousCost;\n    coeff1 = coeff1 / pc2;\n    double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n    double preRed = coeff1 + (2 * coeff2);\n    double dirDer = -(coeff1 + coeff2);\n    ratio = (preRed == 0) ? 0 : actRed / preRed;\n    if (ratio <= 0.25) {\n        double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n        if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {\n            tmp = 0.1;\n        }\n        delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);\n        lmPar /= tmp;\n    } else if ((lmPar == 0) || (ratio >= 0.75)) {\n        delta = 2 * lmNorm;\n        lmPar *= 0.5;\n    }\n    if (ratio >= 1.0E-4) {\n        firstIteration = false;\n        xNorm = 0;\n        for (int k = 0; k < cols; ++k) {\n            double xK = diag[k] * point[k];\n            xNorm += xK * xK;\n        }\n        xNorm = java.lang.Math.sqrt(xNorm);\n        current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n        if (checker != null) {\n            if (checker.converged(getIterations(), previous, current)) {\n                return current;\n            }\n        }\n    } else {\n        cost = previousCost;\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            point[pj] = oldX[pj];\n        }\n        tmpVec = residuals;\n        residuals = oldRes;\n        oldRes = tmpVec;\n        tmpVec = objective;\n        objective = oldObj;\n        oldObj = tmpVec;\n    }\n    if (checker == null) {\n        if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n            return current;\n        }\n    }\n    if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n    } else if (delta <= (2.2204E-16 * xNorm)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n    } else if (maxCosine <= 2.2204E-16) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "objective = oldObj",
            "src_parent": "{\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        oldX[pj] = point[pj];\n    }\n    double previousCost = cost;\n    double[] tmpVec = residuals;\n    residuals = oldRes;\n    oldRes = tmpVec;\n    tmpVec = objective;\n    objective = oldObj;\n    oldObj = tmpVec;\n    determineLMParameter(qtf, delta, diag, work1, work2, work3);\n    double lmNorm = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        lmDir[pj] = -lmDir[pj];\n        point[pj] = oldX[pj] + lmDir[pj];\n        double s = diag[pj] * lmDir[pj];\n        lmNorm += s * s;\n    }\n    lmNorm = java.lang.Math.sqrt(lmNorm);\n    if (firstIteration) {\n        delta = java.lang.Math.min(delta, lmNorm);\n    }\n    updateResidualsAndCost();\n    double actRed = -1.0;\n    if ((0.1 * cost) < previousCost) {\n        double r = cost / previousCost;\n        actRed = 1.0 - (r * r);\n    }\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        double dirJ = lmDir[pj];\n        work1[j] = 0;\n        for (int i = 0; i <= j; ++i) {\n            work1[i] += jacobian[i][pj] * dirJ;\n        }\n    }\n    double coeff1 = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        coeff1 += work1[j] * work1[j];\n    }\n    double pc2 = previousCost * previousCost;\n    coeff1 = coeff1 / pc2;\n    double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n    double preRed = coeff1 + (2 * coeff2);\n    double dirDer = -(coeff1 + coeff2);\n    ratio = (preRed == 0) ? 0 : actRed / preRed;\n    if (ratio <= 0.25) {\n        double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n        if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {\n            tmp = 0.1;\n        }\n        delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);\n        lmPar /= tmp;\n    } else if ((lmPar == 0) || (ratio >= 0.75)) {\n        delta = 2 * lmNorm;\n        lmPar *= 0.5;\n    }\n    if (ratio >= 1.0E-4) {\n        firstIteration = false;\n        xNorm = 0;\n        for (int k = 0; k < cols; ++k) {\n            double xK = diag[k] * point[k];\n            xNorm += xK * xK;\n        }\n        xNorm = java.lang.Math.sqrt(xNorm);\n        current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n        if (checker != null) {\n            if (checker.converged(getIterations(), previous, current)) {\n                return current;\n            }\n        }\n    } else {\n        cost = previousCost;\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            point[pj] = oldX[pj];\n        }\n        tmpVec = residuals;\n        residuals = oldRes;\n        oldRes = tmpVec;\n        tmpVec = objective;\n        objective = oldObj;\n        oldObj = tmpVec;\n    }\n    if (checker == null) {\n        if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n            return current;\n        }\n    }\n    if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n    } else if (delta <= (2.2204E-16 * xNorm)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n    } else if (maxCosine <= 2.2204E-16) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "oldObj = tmpVec",
            "src_parent": "{\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        oldX[pj] = point[pj];\n    }\n    double previousCost = cost;\n    double[] tmpVec = residuals;\n    residuals = oldRes;\n    oldRes = tmpVec;\n    tmpVec = objective;\n    objective = oldObj;\n    oldObj = tmpVec;\n    determineLMParameter(qtf, delta, diag, work1, work2, work3);\n    double lmNorm = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        lmDir[pj] = -lmDir[pj];\n        point[pj] = oldX[pj] + lmDir[pj];\n        double s = diag[pj] * lmDir[pj];\n        lmNorm += s * s;\n    }\n    lmNorm = java.lang.Math.sqrt(lmNorm);\n    if (firstIteration) {\n        delta = java.lang.Math.min(delta, lmNorm);\n    }\n    updateResidualsAndCost();\n    double actRed = -1.0;\n    if ((0.1 * cost) < previousCost) {\n        double r = cost / previousCost;\n        actRed = 1.0 - (r * r);\n    }\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        double dirJ = lmDir[pj];\n        work1[j] = 0;\n        for (int i = 0; i <= j; ++i) {\n            work1[i] += jacobian[i][pj] * dirJ;\n        }\n    }\n    double coeff1 = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        coeff1 += work1[j] * work1[j];\n    }\n    double pc2 = previousCost * previousCost;\n    coeff1 = coeff1 / pc2;\n    double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n    double preRed = coeff1 + (2 * coeff2);\n    double dirDer = -(coeff1 + coeff2);\n    ratio = (preRed == 0) ? 0 : actRed / preRed;\n    if (ratio <= 0.25) {\n        double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n        if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {\n            tmp = 0.1;\n        }\n        delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);\n        lmPar /= tmp;\n    } else if ((lmPar == 0) || (ratio >= 0.75)) {\n        delta = 2 * lmNorm;\n        lmPar *= 0.5;\n    }\n    if (ratio >= 1.0E-4) {\n        firstIteration = false;\n        xNorm = 0;\n        for (int k = 0; k < cols; ++k) {\n            double xK = diag[k] * point[k];\n            xNorm += xK * xK;\n        }\n        xNorm = java.lang.Math.sqrt(xNorm);\n        current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n        if (checker != null) {\n            if (checker.converged(getIterations(), previous, current)) {\n                return current;\n            }\n        }\n    } else {\n        cost = previousCost;\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            point[pj] = oldX[pj];\n        }\n        tmpVec = residuals;\n        residuals = oldRes;\n        oldRes = tmpVec;\n        tmpVec = objective;\n        objective = oldObj;\n        oldObj = tmpVec;\n    }\n    if (checker == null) {\n        if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n            return current;\n        }\n    }\n    if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n    } else if (delta <= (2.2204E-16 * xNorm)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n    } else if (maxCosine <= 2.2204E-16) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (checker != null) {\n    if (checker.converged(getIterations(), previous, current)) {\n        return current;\n    }\n}",
            "src_parent": "{\n    firstIteration = false;\n    xNorm = 0;\n    for (int k = 0; k < cols; ++k) {\n        double xK = diag[k] * point[k];\n        xNorm += xK * xK;\n    }\n    xNorm = java.lang.Math.sqrt(xNorm);\n    current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n    if (checker != null) {\n        if (checker.converged(getIterations(), previous, current)) {\n            return current;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "tmpVec = objective",
            "src_parent": "{\n    cost = previousCost;\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        point[pj] = oldX[pj];\n    }\n    tmpVec = residuals;\n    residuals = oldRes;\n    oldRes = tmpVec;\n    tmpVec = objective;\n    objective = oldObj;\n    oldObj = tmpVec;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "objective = oldObj",
            "src_parent": "{\n    cost = previousCost;\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        point[pj] = oldX[pj];\n    }\n    tmpVec = residuals;\n    residuals = oldRes;\n    oldRes = tmpVec;\n    tmpVec = objective;\n    objective = oldObj;\n    oldObj = tmpVec;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "oldObj = tmpVec",
            "src_parent": "{\n    cost = previousCost;\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        point[pj] = oldX[pj];\n    }\n    tmpVec = residuals;\n    residuals = oldRes;\n    oldRes = tmpVec;\n    tmpVec = objective;\n    objective = oldObj;\n    oldObj = tmpVec;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "residuals",
            "src_parent": "qTy(residuals)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (checker.converged(getIterations(), previous, current)) {\n        return current;\n    }\n}",
            "src_parent": "if (checker == null) {\n    if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n        return current;\n    }\n} else if (checker.converged(getIterations(), previous, current)) {\n    return current;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)",
            "dst_parent": "{\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        oldX[pj] = point[pj];\n    }\n    double previousCost = cost;\n    double[] tmpVec = residuals;\n    residuals = oldRes;\n    oldRes = tmpVec;\n    determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n    double lmNorm = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        lmDir[pj] = -lmDir[pj];\n        point[pj] = oldX[pj] + lmDir[pj];\n        double s = diag[pj] * lmDir[pj];\n        lmNorm += s * s;\n    }\n    lmNorm = java.lang.Math.sqrt(lmNorm);\n    if (firstIteration) {\n        delta = java.lang.Math.min(delta, lmNorm);\n    }\n    updateResidualsAndCost();\n    current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n    double actRed = -1.0;\n    if ((0.1 * cost) < previousCost) {\n        double r = cost / previousCost;\n        actRed = 1.0 - (r * r);\n    }\n    for (int j = 0; j < solvedCols; ++j) {\n        int pj = permutation[j];\n        double dirJ = lmDir[pj];\n        work1[j] = 0;\n        for (int i = 0; i <= j; ++i) {\n            work1[i] += jacobian[i][pj] * dirJ;\n        }\n    }\n    double coeff1 = 0;\n    for (int j = 0; j < solvedCols; ++j) {\n        coeff1 += work1[j] * work1[j];\n    }\n    double pc2 = previousCost * previousCost;\n    coeff1 = coeff1 / pc2;\n    double coeff2 = ((lmPar * lmNorm) * lmNorm) / pc2;\n    double preRed = coeff1 + (2 * coeff2);\n    double dirDer = -(coeff1 + coeff2);\n    ratio = (preRed == 0) ? 0 : actRed / preRed;\n    if (ratio <= 0.25) {\n        double tmp = (actRed < 0) ? (0.5 * dirDer) / (dirDer + (0.5 * actRed)) : 0.5;\n        if (((0.1 * cost) >= previousCost) || (tmp < 0.1)) {\n            tmp = 0.1;\n        }\n        delta = tmp * java.lang.Math.min(delta, 10.0 * lmNorm);\n        lmPar /= tmp;\n    } else if ((lmPar == 0) || (ratio >= 0.75)) {\n        delta = 2 * lmNorm;\n        lmPar *= 0.5;\n    }\n    if (ratio >= 1.0E-4) {\n        firstIteration = false;\n        xNorm = 0;\n        for (int k = 0; k < cols; ++k) {\n            double xK = diag[k] * point[k];\n            xNorm += xK * xK;\n        }\n        xNorm = java.lang.Math.sqrt(xNorm);\n    } else {\n        cost = previousCost;\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            point[pj] = oldX[pj];\n        }\n        tmpVec = residuals;\n        residuals = oldRes;\n        oldRes = tmpVec;\n    }\n    if (checker == null) {\n        if ((((java.lang.Math.abs(actRed) <= costRelativeTolerance) && (preRed <= costRelativeTolerance)) && (ratio <= 2.0)) || (delta <= (parRelativeTolerance * xNorm))) {\n            return current;\n        }\n    } else if (checker.converged(getIterations(), previous, current)) {\n        return current;\n    }\n    if (((java.lang.Math.abs(actRed) <= 2.2204E-16) && (preRed <= 2.2204E-16)) && (ratio <= 2.0)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE, costRelativeTolerance);\n    } else if (delta <= (2.2204E-16 * xNorm)) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE, parRelativeTolerance);\n    } else if (maxCosine <= 2.2204E-16) {\n        throw new org.apache.commons.math.optimization.OptimizationException(org.apache.commons.math.exception.util.LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE, orthoTolerance);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective)",
            "src_parent": "{\n    firstIteration = false;\n    xNorm = 0;\n    for (int k = 0; k < cols; ++k) {\n        double xK = diag[k] * point[k];\n        xNorm += xK * xK;\n    }\n    xNorm = java.lang.Math.sqrt(xNorm);\n    current = new org.apache.commons.math.optimization.VectorialPointValuePair(point, objective);\n    if (checker != null) {\n        if (checker.converged(getIterations(), previous, current)) {\n            return current;\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "For",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (checker.converged(getIterations(), previous, current)) {\n    return current;\n}",
            "dst_parent": "{\n    if (checker.converged(getIterations(), previous, current)) {\n        return current;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (checker.converged(getIterations(), previous, current)) {\n    return current;\n}",
            "src_parent": "{\n    if (checker.converged(getIterations(), previous, current)) {\n        return current;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "residuals[i]",
            "dst_parent": "jacobian[i][pj] * residuals[i]",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "ArrayRead",
            "operator": "MOV",
            "src": "residuals[i]",
            "src_parent": "qtf[i] = residuals[i]",
            "src_parent_type": "Assignment",
            "src_type": "ArrayRead"
          }
        }
      ],
      "file_name": "LevenbergMarquardtOptimizer"
    }
  ],
  "id": "Math_64"
}