{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (field == java.util.Calendar.MILLISECOND) {\n    return;\n}",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.util.Date date = val.getTime()",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "long time = date.getTime()",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean done = false",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "int millisecs = val.get(java.util.Calendar.MILLISECOND)",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((!round) || (millisecs < 500)) {\n    time = time - millisecs;\n    if (field == java.util.Calendar.SECOND) {\n        done = true;\n    }\n}",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "int seconds = val.get(java.util.Calendar.SECOND)",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((!done) && ((!round) || (seconds < 30))) {\n    time = time - (seconds * 1000L);\n    if (field == java.util.Calendar.MINUTE) {\n        done = true;\n    }\n}",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "int minutes = val.get(java.util.Calendar.MINUTE)",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((!done) && ((!round) || (minutes < 30))) {\n    time = time - (minutes * 60000L);\n}",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (date.getTime() != time) {\n    date.setTime(time);\n    val.setTime(date);\n}",
            "src_parent": "{\n    if (val.get(java.util.Calendar.YEAR) > 280000000) {\n        throw new java.lang.ArithmeticException(\"Calendar value too large for accurate calculations\");\n    }\n    if (field == java.util.Calendar.MILLISECOND) {\n        return;\n    }\n    java.util.Date date = val.getTime();\n    long time = date.getTime();\n    boolean done = false;\n    int millisecs = val.get(java.util.Calendar.MILLISECOND);\n    if ((!round) || (millisecs < 500)) {\n        time = time - millisecs;\n        if (field == java.util.Calendar.SECOND) {\n            done = true;\n        }\n    }\n    int seconds = val.get(java.util.Calendar.SECOND);\n    if ((!done) && ((!round) || (seconds < 30))) {\n        time = time - (seconds * 1000L);\n        if (field == java.util.Calendar.MINUTE) {\n            done = true;\n        }\n    }\n    int minutes = val.get(java.util.Calendar.MINUTE);\n    if ((!done) && ((!round) || (minutes < 30))) {\n        time = time - (minutes * 60000L);\n    }\n    if (date.getTime() != time) {\n        date.setTime(time);\n        val.setTime(date);\n    }\n    boolean roundUp = false;\n    for (int i = 0; i < org.apache.commons.lang.time.DateUtils.fields.length; i++) {\n        for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n            if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n                if (round && roundUp) {\n                    if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                        if (val.get(java.util.Calendar.DATE) == 1) {\n                            val.add(java.util.Calendar.DATE, 15);\n                        } else {\n                            val.add(java.util.Calendar.DATE, -15);\n                            val.add(java.util.Calendar.MONTH, 1);\n                        }\n                    } else {\n                        val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                    }\n                }\n                return;\n            }\n        }\n        int offset = 0;\n        boolean offsetSet = false;\n        switch (field) {\n            case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                    offset = val.get(java.util.Calendar.DATE) - 1;\n                    if (offset >= 15) {\n                        offset -= 15;\n                    }\n                    roundUp = offset > 7;\n                    offsetSet = true;\n                }\n                break;\n            case java.util.Calendar.AM_PM :\n                if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                    offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                    if (offset >= 12) {\n                        offset -= 12;\n                    }\n                    roundUp = offset > 6;\n                    offsetSet = true;\n                }\n                break;\n        }\n        if (!offsetSet) {\n            int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n            offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n            roundUp = offset > ((max - min) / 2);\n        }\n        if (offset != 0) {\n            val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n        }\n    }\n    throw new java.lang.IllegalArgumentException((\"The field \" + field) + \" is not supported\");\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (offset != 0) {\n    val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n}",
            "src_parent": "{\n    for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n        if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n            if (round && roundUp) {\n                if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                    if (val.get(java.util.Calendar.DATE) == 1) {\n                        val.add(java.util.Calendar.DATE, 15);\n                    } else {\n                        val.add(java.util.Calendar.DATE, -15);\n                        val.add(java.util.Calendar.MONTH, 1);\n                    }\n                } else {\n                    val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                }\n            }\n            return;\n        }\n    }\n    int offset = 0;\n    boolean offsetSet = false;\n    switch (field) {\n        case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n            if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                offset = val.get(java.util.Calendar.DATE) - 1;\n                if (offset >= 15) {\n                    offset -= 15;\n                }\n                roundUp = offset > 7;\n                offsetSet = true;\n            }\n            break;\n        case java.util.Calendar.AM_PM :\n            if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                if (offset >= 12) {\n                    offset -= 12;\n                }\n                roundUp = offset > 6;\n                offsetSet = true;\n            }\n            break;\n    }\n    if (!offsetSet) {\n        int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n        int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n        offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n        roundUp = offset > ((max - min) / 2);\n    }\n    if (offset != 0) {\n        val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset)",
            "dst_parent": "{\n    for (int j = 0; j < org.apache.commons.lang.time.DateUtils.fields[i].length; j++) {\n        if (org.apache.commons.lang.time.DateUtils.fields[i][j] == field) {\n            if (round && roundUp) {\n                if (field == org.apache.commons.lang.time.DateUtils.SEMI_MONTH) {\n                    if (val.get(java.util.Calendar.DATE) == 1) {\n                        val.add(java.util.Calendar.DATE, 15);\n                    } else {\n                        val.add(java.util.Calendar.DATE, -15);\n                        val.add(java.util.Calendar.MONTH, 1);\n                    }\n                } else {\n                    val.add(org.apache.commons.lang.time.DateUtils.fields[i][0], 1);\n                }\n            }\n            return;\n        }\n    }\n    int offset = 0;\n    boolean offsetSet = false;\n    switch (field) {\n        case org.apache.commons.lang.time.DateUtils.SEMI_MONTH :\n            if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.DATE) {\n                offset = val.get(java.util.Calendar.DATE) - 1;\n                if (offset >= 15) {\n                    offset -= 15;\n                }\n                roundUp = offset > 7;\n                offsetSet = true;\n            }\n            break;\n        case java.util.Calendar.AM_PM :\n            if (org.apache.commons.lang.time.DateUtils.fields[i][0] == java.util.Calendar.HOUR_OF_DAY) {\n                offset = val.get(java.util.Calendar.HOUR_OF_DAY);\n                if (offset >= 12) {\n                    offset -= 12;\n                }\n                roundUp = offset > 6;\n                offsetSet = true;\n            }\n            break;\n    }\n    if (!offsetSet) {\n        int min = val.getActualMinimum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n        int max = val.getActualMaximum(org.apache.commons.lang.time.DateUtils.fields[i][0]);\n        offset = val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - min;\n        roundUp = offset > ((max - min) / 2);\n    }\n    val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset)",
            "src_parent": "{\n    val.set(org.apache.commons.lang.time.DateUtils.fields[i][0], val.get(org.apache.commons.lang.time.DateUtils.fields[i][0]) - offset);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "DateUtils"
    }
  ],
  "id": "Lang_65"
}