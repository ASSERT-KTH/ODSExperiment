{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(options.outputCharset != null) ? java.nio.charset.Charset.forName(options.outputCharset) : null",
            "src_parent": "java.nio.charset.Charset charset = (options.outputCharset != null) ? java.nio.charset.Charset.forName(options.outputCharset) : null",
            "src_parent_type": "LocalVariable",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "options.outputCharset",
            "dst_parent": "java.nio.charset.Charset charset = options.outputCharset",
            "dst_parent_type": "LocalVariable",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "options.outputCharset",
            "src_parent": "java.nio.charset.Charset.forName(options.outputCharset)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "Compiler"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "initOptionsFromFlags(options)",
            "src_parent": "{\n    com.google.javascript.jscomp.CompilerOptions options = new com.google.javascript.jscomp.CompilerOptions();\n    options.setCodingConvention(new com.google.javascript.jscomp.ClosureCodingConvention());\n    com.google.javascript.jscomp.CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    com.google.javascript.jscomp.WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (com.google.javascript.jscomp.CommandLineRunner.FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.closurePass = flags.process_closure_primitives;\n    initOptionsFromFlags(options);\n    return options;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "CommandLineRunner"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.nio.charset.Charset",
            "dst_parent": "public java.nio.charset.Charset outputCharset;",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "java.lang.String outputCharset;",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public void setOutputCharset(java.lang.String charsetName) {\n    this.outputCharset = charsetName;\n}",
            "src_parent": "public class CompilerOptions implements java.io.Serializable , java.lang.Cloneable {\n    private static final long serialVersionUID = 7L;\n\n    public boolean ideMode;\n\n    boolean skipAllPasses;\n\n    boolean nameAnonymousFunctionsOnly;\n\n    com.google.javascript.jscomp.CompilerOptions.DevMode devMode;\n\n    boolean manageClosureDependencies = false;\n\n    public transient com.google.javascript.jscomp.MessageBundle messageBundle = null;\n\n    public boolean checkSymbols;\n\n    public com.google.javascript.jscomp.CheckLevel checkShadowVars;\n\n    public com.google.javascript.jscomp.CheckLevel aggressiveVarCheck;\n\n    public com.google.javascript.jscomp.CheckLevel checkFunctions;\n\n    public com.google.javascript.jscomp.CheckLevel checkMethods;\n\n    public boolean checkDuplicateMessages;\n\n    public boolean allowLegacyJsMessages;\n\n    public boolean strictMessageReplacement;\n\n    public boolean checkSuspiciousCode;\n\n    public boolean checkControlStructures;\n\n    public com.google.javascript.jscomp.CheckLevel checkUndefinedProperties;\n\n    public boolean checkUnusedPropertiesEarly;\n\n    public boolean checkTypes;\n\n    public boolean tightenTypes;\n\n    public boolean inferTypesInGlobalScope;\n\n    public boolean checkTypedPropertyCalls;\n\n    public com.google.javascript.jscomp.CheckLevel reportMissingOverride;\n\n    public com.google.javascript.jscomp.CheckLevel reportUnknownTypes;\n\n    public com.google.javascript.jscomp.CheckLevel checkRequires;\n\n    public com.google.javascript.jscomp.CheckLevel checkProvides;\n\n    public com.google.javascript.jscomp.CheckLevel checkGlobalNamesLevel;\n\n    public com.google.javascript.jscomp.CheckLevel brokenClosureRequiresLevel;\n\n    public com.google.javascript.jscomp.CheckLevel checkGlobalThisLevel;\n\n    public com.google.javascript.jscomp.CheckLevel checkMissingGetCssNameLevel;\n\n    public java.lang.String checkMissingGetCssNameBlacklist;\n\n    public boolean checkEs5Strict;\n\n    public boolean checkCaja;\n\n    public boolean foldConstants;\n\n    public boolean removeConstantExpressions;\n\n    public boolean deadAssignmentElimination;\n\n    public boolean inlineConstantVars;\n\n    public boolean inlineFunctions;\n\n    public boolean decomposeExpressions;\n\n    public boolean inlineAnonymousFunctionExpressions;\n\n    public boolean inlineLocalFunctions;\n\n    public boolean crossModuleCodeMotion;\n\n    public boolean coalesceVariableNames;\n\n    public boolean crossModuleMethodMotion;\n\n    public boolean inlineGetters;\n\n    public boolean inlineVariables;\n\n    public boolean inlineLocalVariables;\n\n    public boolean flowSensitiveInlineVariables;\n\n    public boolean smartNameRemoval;\n\n    public boolean removeDeadCode;\n\n    public com.google.javascript.jscomp.CheckLevel checkUnreachableCode;\n\n    public com.google.javascript.jscomp.CheckLevel checkMissingReturn;\n\n    public boolean extractPrototypeMemberDeclarations;\n\n    public boolean removeEmptyFunctions;\n\n    public boolean removeUnusedPrototypeProperties;\n\n    public boolean removeUnusedPrototypePropertiesInExterns;\n\n    public boolean removeUnusedVars;\n\n    public boolean removeUnusedVarsInGlobalScope;\n\n    public boolean aliasExternals;\n\n    public java.lang.String aliasableGlobals;\n\n    public java.lang.String unaliasableGlobals;\n\n    public boolean collapseVariableDeclarations;\n\n    public boolean groupVariableDeclarations;\n\n    public boolean collapseAnonymousFunctions;\n\n    public java.util.Set<java.lang.String> aliasableStrings;\n\n    public java.lang.String aliasStringsBlacklist;\n\n    public boolean aliasAllStrings;\n\n    boolean outputJsStringUsage;\n\n    public boolean convertToDottedProperties;\n\n    public boolean rewriteFunctionExpressions;\n\n    public boolean optimizeParameters;\n\n    public boolean optimizeArgumentsArray;\n\n    boolean chainCalls;\n\n    public com.google.javascript.jscomp.VariableRenamingPolicy variableRenaming;\n\n    public com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenaming;\n\n    public boolean labelRenaming;\n\n    public boolean reserveRawExports;\n\n    public boolean generatePseudoNames;\n\n    public java.lang.String renamePrefix;\n\n    public boolean aliasKeywords;\n\n    public boolean collapseProperties;\n\n    boolean collapsePropertiesOnExternTypes;\n\n    public boolean devirtualizePrototypeMethods;\n\n    public boolean computeFunctionSideEffects;\n\n    public java.lang.String debugFunctionSideEffectsPath;\n\n    public boolean disambiguateProperties;\n\n    public boolean ambiguateProperties;\n\n    public com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNaming;\n\n    public byte[] inputVariableMapSerialized;\n\n    public byte[] inputPropertyMapSerialized;\n\n    public boolean exportTestFunctions;\n\n    boolean runtimeTypeCheck;\n\n    java.lang.String runtimeTypeCheckLogFunction;\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention;\n\n    public boolean instrumentForCoverage;\n\n    public boolean instrumentForCoverageOnly;\n\n    public boolean ignoreCajaProperties;\n\n    public java.lang.String syntheticBlockStartMarker;\n\n    public java.lang.String syntheticBlockEndMarker;\n\n    public java.lang.String locale;\n\n    public boolean markAsCompiled;\n\n    public boolean removeTryCatchFinally;\n\n    public boolean closurePass;\n\n    boolean rewriteNewDateGoogNow;\n\n    boolean removeAbstractMethods;\n\n    public boolean gatherCssNames;\n\n    public java.util.Set<java.lang.String> stripTypes;\n\n    public java.util.Set<java.lang.String> stripNameSuffixes;\n\n    public java.util.Set<java.lang.String> stripNamePrefixes;\n\n    public java.util.Set<java.lang.String> stripTypePrefixes;\n\n    public transient com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPasses;\n\n    public boolean markNoSideEffectCalls;\n\n    private java.util.Map<java.lang.String, java.lang.Object> defineReplacements;\n\n    public boolean moveFunctionDeclarations;\n\n    public java.lang.String instrumentationTemplate;\n\n    public java.lang.String appNameStr;\n\n    public boolean recordFunctionInformation;\n\n    public boolean generateExports;\n\n    public com.google.javascript.jscomp.CssRenamingMap cssRenamingMap;\n\n    boolean processObjectPropertyString;\n\n    java.util.Set<java.lang.String> idGenerators;\n\n    java.util.List<java.lang.String> replaceStringsFunctionDescriptions;\n\n    java.lang.String replaceStringsPlaceholderToken;\n\n    public boolean prettyPrint;\n\n    public boolean lineBreak;\n\n    public boolean printInputDelimiter;\n\n    public java.lang.String inputDelimiter = \"// Input %num%\";\n\n    public java.lang.String reportPath;\n\n    public com.google.javascript.jscomp.CompilerOptions.TracerMode tracer;\n\n    private boolean colorizeErrorOutput;\n\n    public com.google.javascript.jscomp.ErrorFormat errorFormat;\n\n    public java.lang.String jsOutputFile;\n\n    private transient com.google.javascript.jscomp.ComposeWarningsGuard warningsGuard;\n\n    int summaryDetailLevel = 1;\n\n    private boolean externExports;\n\n    java.lang.String externExportsPath;\n\n    public java.lang.String nameReferenceReportPath;\n\n    public java.lang.String nameReferenceGraphPath;\n\n    public java.lang.String sourceMapOutputPath;\n\n    public SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.SYMBOLS;\n\n    java.lang.String outputCharset;\n\n    boolean looseTypes;\n\n    public CompilerOptions() {\n        skipAllPasses = false;\n        nameAnonymousFunctionsOnly = false;\n        devMode = com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;\n        checkSymbols = false;\n        checkShadowVars = CheckLevel.OFF;\n        aggressiveVarCheck = CheckLevel.OFF;\n        checkFunctions = CheckLevel.OFF;\n        checkMethods = CheckLevel.OFF;\n        checkDuplicateMessages = false;\n        allowLegacyJsMessages = false;\n        strictMessageReplacement = false;\n        checkSuspiciousCode = false;\n        checkControlStructures = false;\n        checkUndefinedProperties = CheckLevel.OFF;\n        checkUnusedPropertiesEarly = false;\n        checkTypes = false;\n        tightenTypes = false;\n        inferTypesInGlobalScope = false;\n        checkTypedPropertyCalls = false;\n        reportMissingOverride = CheckLevel.OFF;\n        reportUnknownTypes = CheckLevel.OFF;\n        checkRequires = CheckLevel.OFF;\n        checkProvides = CheckLevel.OFF;\n        checkGlobalNamesLevel = CheckLevel.OFF;\n        brokenClosureRequiresLevel = CheckLevel.ERROR;\n        checkGlobalThisLevel = CheckLevel.OFF;\n        checkUnreachableCode = CheckLevel.OFF;\n        checkMissingReturn = CheckLevel.OFF;\n        checkMissingGetCssNameLevel = CheckLevel.OFF;\n        checkMissingGetCssNameBlacklist = null;\n        checkEs5Strict = false;\n        checkCaja = false;\n        computeFunctionSideEffects = false;\n        chainCalls = false;\n        foldConstants = false;\n        removeConstantExpressions = false;\n        coalesceVariableNames = false;\n        deadAssignmentElimination = false;\n        inlineConstantVars = false;\n        inlineFunctions = false;\n        inlineLocalFunctions = false;\n        crossModuleCodeMotion = false;\n        crossModuleMethodMotion = false;\n        inlineGetters = false;\n        inlineVariables = false;\n        inlineLocalVariables = false;\n        smartNameRemoval = false;\n        removeDeadCode = false;\n        extractPrototypeMemberDeclarations = false;\n        removeUnusedPrototypeProperties = false;\n        removeUnusedPrototypePropertiesInExterns = false;\n        removeUnusedVars = false;\n        removeUnusedVarsInGlobalScope = true;\n        aliasExternals = false;\n        collapseVariableDeclarations = false;\n        groupVariableDeclarations = false;\n        collapseAnonymousFunctions = false;\n        aliasableStrings = java.util.Collections.emptySet();\n        aliasStringsBlacklist = \"\";\n        aliasAllStrings = false;\n        outputJsStringUsage = false;\n        convertToDottedProperties = false;\n        rewriteFunctionExpressions = false;\n        optimizeParameters = false;\n        variableRenaming = VariableRenamingPolicy.OFF;\n        propertyRenaming = PropertyRenamingPolicy.OFF;\n        labelRenaming = false;\n        generatePseudoNames = false;\n        renamePrefix = null;\n        aliasKeywords = false;\n        collapseProperties = false;\n        collapsePropertiesOnExternTypes = false;\n        devirtualizePrototypeMethods = false;\n        disambiguateProperties = false;\n        ambiguateProperties = false;\n        anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n        exportTestFunctions = false;\n        runtimeTypeCheck = false;\n        runtimeTypeCheckLogFunction = null;\n        instrumentForCoverage = false;\n        instrumentForCoverageOnly = false;\n        ignoreCajaProperties = false;\n        syntheticBlockStartMarker = null;\n        syntheticBlockEndMarker = null;\n        locale = null;\n        markAsCompiled = false;\n        removeTryCatchFinally = false;\n        closurePass = false;\n        rewriteNewDateGoogNow = true;\n        removeAbstractMethods = true;\n        stripTypes = java.util.Collections.emptySet();\n        stripNameSuffixes = java.util.Collections.emptySet();\n        stripNamePrefixes = java.util.Collections.emptySet();\n        stripTypePrefixes = java.util.Collections.emptySet();\n        customPasses = null;\n        markNoSideEffectCalls = false;\n        defineReplacements = com.google.common.collect.Maps.newHashMap();\n        moveFunctionDeclarations = false;\n        instrumentationTemplate = null;\n        appNameStr = \"\";\n        recordFunctionInformation = false;\n        generateExports = false;\n        cssRenamingMap = null;\n        processObjectPropertyString = false;\n        idGenerators = java.util.Collections.emptySet();\n        replaceStringsFunctionDescriptions = java.util.Collections.emptyList();\n        replaceStringsPlaceholderToken = \"\";\n        printInputDelimiter = false;\n        prettyPrint = false;\n        lineBreak = false;\n        reportPath = null;\n        tracer = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;\n        colorizeErrorOutput = false;\n        errorFormat = ErrorFormat.SINGLELINE;\n        warningsGuard = null;\n        debugFunctionSideEffectsPath = null;\n        jsOutputFile = \"\";\n        externExports = false;\n        nameReferenceReportPath = null;\n        nameReferenceGraphPath = null;\n    }\n\n    public java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getDefineReplacements() {\n        java.util.Map<java.lang.String, com.google.javascript.rhino.Node> map = com.google.common.collect.Maps.newHashMap();\n        for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : defineReplacements.entrySet()) {\n            java.lang.String name = entry.getKey();\n            java.lang.Object value = entry.getValue();\n            if (value instanceof java.lang.Boolean) {\n                map.put(name, ((java.lang.Boolean) (value)).booleanValue() ? new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE) : new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.FALSE));\n            } else if (value instanceof java.lang.Integer) {\n                map.put(name, com.google.javascript.rhino.Node.newNumber(((java.lang.Integer) (value)).intValue()));\n            } else if (value instanceof java.lang.Double) {\n                map.put(name, com.google.javascript.rhino.Node.newNumber(((java.lang.Double) (value)).doubleValue()));\n            } else {\n                com.google.common.base.Preconditions.checkState(value instanceof java.lang.String);\n                map.put(name, com.google.javascript.rhino.Node.newString(((java.lang.String) (value))));\n            }\n        }\n        return map;\n    }\n\n    public void setDefineToBooleanLiteral(java.lang.String defineName, boolean value) {\n        defineReplacements.put(defineName, new java.lang.Boolean(value));\n    }\n\n    public void setDefineToStringLiteral(java.lang.String defineName, java.lang.String value) {\n        defineReplacements.put(defineName, value);\n    }\n\n    public void setDefineToNumberLiteral(java.lang.String defineName, int value) {\n        defineReplacements.put(defineName, new java.lang.Integer(value));\n    }\n\n    public void setDefineToDoubleLiteral(java.lang.String defineName, double value) {\n        defineReplacements.put(defineName, new java.lang.Double(value));\n    }\n\n    public void skipAllCompilerPasses() {\n        skipAllPasses = true;\n    }\n\n    boolean enables(com.google.javascript.jscomp.DiagnosticGroup type) {\n        return (warningsGuard != null) && warningsGuard.enables(type);\n    }\n\n    boolean disables(com.google.javascript.jscomp.DiagnosticGroup type) {\n        return (warningsGuard != null) && warningsGuard.disables(type);\n    }\n\n    public void setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup type, com.google.javascript.jscomp.CheckLevel level) {\n        addWarningsGuard(new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(type, level));\n    }\n\n    com.google.javascript.jscomp.WarningsGuard getWarningsGuard() {\n        return warningsGuard;\n    }\n\n    public void addWarningsGuard(com.google.javascript.jscomp.WarningsGuard guard) {\n        if (warningsGuard == null) {\n            warningsGuard = new com.google.javascript.jscomp.ComposeWarningsGuard(guard);\n        } else {\n            warningsGuard.addGuard(guard);\n        }\n    }\n\n    public void setRenamingPolicy(com.google.javascript.jscomp.VariableRenamingPolicy newVariablePolicy, com.google.javascript.jscomp.PropertyRenamingPolicy newPropertyPolicy) {\n        this.variableRenaming = newVariablePolicy;\n        this.propertyRenaming = newPropertyPolicy;\n    }\n\n    public void setCollapsePropertiesOnExternTypes(boolean collapse) {\n        collapsePropertiesOnExternTypes = collapse;\n    }\n\n    public void setProcessObjectPropertyString(boolean process) {\n        processObjectPropertyString = process;\n    }\n\n    public void setIdGenerators(java.util.Set<java.lang.String> idGenerators) {\n        this.idGenerators = com.google.common.collect.Sets.newHashSet(idGenerators);\n    }\n\n    public void setReplaceStringsConfiguration(java.lang.String placeholderToken, java.util.List<java.lang.String> functionDescriptors) {\n        this.replaceStringsPlaceholderToken = placeholderToken;\n        this.replaceStringsFunctionDescriptions = com.google.common.collect.Lists.newArrayList(functionDescriptors);\n    }\n\n    public void setRewriteNewDateGoogNow(boolean rewrite) {\n        this.rewriteNewDateGoogNow = rewrite;\n    }\n\n    public void setRemoveAbstractMethods(boolean remove) {\n        this.removeAbstractMethods = remove;\n    }\n\n    public void setNameAnonymousFunctionsOnly(boolean value) {\n        this.nameAnonymousFunctionsOnly = value;\n    }\n\n    public void setColorizeErrorOutput(boolean colorizeErrorOutput) {\n        this.colorizeErrorOutput = colorizeErrorOutput;\n    }\n\n    public boolean shouldColorizeErrorOutput() {\n        return colorizeErrorOutput;\n    }\n\n    public void setChainCalls(boolean value) {\n        this.chainCalls = value;\n    }\n\n    public void enableRuntimeTypeCheck(java.lang.String logFunction) {\n        this.runtimeTypeCheck = true;\n        this.runtimeTypeCheckLogFunction = logFunction;\n    }\n\n    public void disableRuntimeTypeCheck() {\n        this.runtimeTypeCheck = false;\n    }\n\n    public void setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n    }\n\n    public com.google.javascript.jscomp.CodingConvention getCodingConvention() {\n        return codingConvention;\n    }\n\n    public void setManageClosureDependencies(boolean newVal) {\n        manageClosureDependencies = newVal;\n    }\n\n    public void setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n    }\n\n    public void enableExternExports(boolean enable) {\n        this.externExports = enable;\n    }\n\n    public boolean isExternExportsEnabled() {\n        return externExports;\n    }\n\n    public void setOutputCharset(java.lang.String charsetName) {\n        this.outputCharset = charsetName;\n    }\n\n    public void setLooseTypes(boolean looseTypes) {\n        this.looseTypes = looseTypes;\n    }\n\n    @java.lang.Override\n    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {\n        com.google.javascript.jscomp.CompilerOptions clone = ((com.google.javascript.jscomp.CompilerOptions) (super.clone()));\n        return clone;\n    }\n\n    static enum DevMode {\n\n        OFF,\n        START,\n        START_AND_END,\n        EVERY_PASS;}\n\n    public static enum TracerMode {\n\n        ALL,\n        FAST,\n        OFF;\n        boolean isOn() {\n            return this != com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "VE: Modifiers_Field",
            "src_parent": "public java.nio.charset.Charset outputCharset;",
            "src_parent_type": "Field",
            "src_type": "VirtualEle"
          }
        }
      ],
      "file_name": "CompilerOptions"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "options.outputCharset = getOutputCharset()",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements(config.define, options);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    options.outputCharset = getOutputCharset();\n    com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private java.lang.String getOutputCharset() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n    if (!config.charset.isEmpty()) {\n        if (!java.nio.charset.Charset.isSupported(config.charset)) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + \" is not a valid charset name.\");\n        }\n        return config.charset;\n    }\n    return \"US-ASCII\";\n}",
            "src_parent": "abstract class AbstractCommandLineRunner<A extends java.lang.Compiler, B extends com.google.javascript.jscomp.CompilerOptions> {\n    private final com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig config;\n\n    private java.lang.Appendable out;\n\n    private final java.io.PrintStream err;\n\n    private A compiler;\n\n    private static java.nio.charset.Charset inputCharset;\n\n    private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;\n\n    private final com.google.javascript.jscomp.AbstractCommandLineRunner<A, B>.RunTimeStats runTimeStats = new RunTimeStats();\n\n    AbstractCommandLineRunner() {\n        this(java.lang.System.out, java.lang.System.err);\n    }\n\n    AbstractCommandLineRunner(java.io.PrintStream out, java.io.PrintStream err) {\n        this.config = new com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig();\n        this.out = out;\n        this.err = err;\n    }\n\n    protected com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig getCommandLineConfig() {\n        return config;\n    }\n\n    protected abstract A createCompiler();\n\n    protected abstract B createOptions();\n\n    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {\n        return new com.google.javascript.jscomp.DiagnosticGroups();\n    }\n\n    @java.lang.Deprecated\n    protected void initOptionsFromFlags(com.google.javascript.jscomp.CompilerOptions options) {\n    }\n\n    protected final void setRunOptions(com.google.javascript.jscomp.CompilerOptions options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n        diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n        diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n        diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n        com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineReplacements(config.define, options);\n        options.manageClosureDependencies = config.manageClosureDependencies;\n        options.devMode = config.jscompDevMode;\n        options.setCodingConvention(config.codingConvention);\n        options.setSummaryDetailLevel(config.summaryDetailLevel);\n        options.outputCharset = getOutputCharset();\n        com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset = getInputCharset();\n        if (config.jsOutputFile.length() > 0) {\n            options.jsOutputFile = config.jsOutputFile;\n        }\n        if (config.createSourceMap.length() > 0) {\n            options.sourceMapOutputPath = config.createSourceMap;\n        }\n        options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n        if (!config.variableMapInputFile.equals(\"\")) {\n            options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();\n        }\n        if (!config.propertyMapInputFile.equals(\"\")) {\n            options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();\n        }\n    }\n\n    protected final A getCompiler() {\n        return compiler;\n    }\n\n    public final void run() {\n        int result = 0;\n        int runs = 1;\n        java.lang.Throwable error = null;\n        if (config.computePhaseOrdering) {\n            runs = com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;\n            com.google.javascript.jscomp.PhaseOptimizer.randomizeLoops();\n        }\n        try {\n            for (int i = 0; (i < runs) && (result == 0); i++) {\n                runTimeStats.recordStartRun();\n                result = doRun();\n                runTimeStats.recordEndRun();\n            }\n        } catch (java.lang.Throwable t) {\n            error = t;\n        }\n        exit(runTimeStats, error);\n    }\n\n    void exit(com.google.javascript.jscomp.AbstractCommandLineRunner<A, B>.RunTimeStats runTimeStats, java.lang.Throwable error) {\n        int result = 0;\n        if (error instanceof com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException) {\n            java.lang.System.err.println(error.getMessage());\n            result = -1;\n        } else if (error != null) {\n            error.printStackTrace();\n            result = -2;\n        }\n        if (config.computePhaseOrdering) {\n            runTimeStats.outputBestPhaseOrdering();\n        }\n        java.lang.System.exit(result);\n    }\n\n    protected java.io.PrintStream getErrorPrintStream() {\n        return err;\n    }\n\n    protected static class FlagUsageException extends java.lang.Exception {\n        private static final long serialVersionUID = 1L;\n\n        FlagUsageException(java.lang.String message) {\n            super(message);\n        }\n    }\n\n    private static java.util.List<com.google.javascript.jscomp.JSSourceFile> createInputs(java.util.List<java.lang.String> files, boolean allowStdIn) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        java.util.List<com.google.javascript.jscomp.JSSourceFile> inputs = new java.util.ArrayList<com.google.javascript.jscomp.JSSourceFile>(files.size());\n        boolean usingStdin = false;\n        for (java.lang.String filename : files) {\n            if (!\"-\".equals(filename)) {\n                com.google.javascript.jscomp.JSSourceFile newFile = com.google.javascript.jscomp.JSSourceFile.fromFile(filename, com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset);\n                inputs.add(newFile);\n            } else {\n                if (!allowStdIn) {\n                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Can't specify stdin.\");\n                }\n                if (usingStdin) {\n                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Can't specify stdin twice.\");\n                }\n                inputs.add(com.google.javascript.jscomp.JSSourceFile.fromInputStream(\"stdin\", java.lang.System.in));\n                usingStdin = true;\n            }\n        }\n        return inputs;\n    }\n\n    private static java.util.List<com.google.javascript.jscomp.JSSourceFile> createSourceInputs(java.util.List<java.lang.String> files) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        if (files.isEmpty()) {\n            files = java.util.Collections.singletonList(\"-\");\n        }\n        try {\n            return com.google.javascript.jscomp.AbstractCommandLineRunner.createInputs(files, true);\n        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Bad --js flag. \" + e.getMessage());\n        }\n    }\n\n    private static java.util.List<com.google.javascript.jscomp.JSSourceFile> createExternInputs(java.util.List<java.lang.String> files) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        if (files.isEmpty()) {\n            return com.google.common.collect.ImmutableList.of(com.google.javascript.jscomp.JSSourceFile.fromCode(\"/dev/null\", \"\"));\n        }\n        try {\n            return com.google.javascript.jscomp.AbstractCommandLineRunner.createInputs(files, false);\n        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Bad --externs flag. \" + e.getMessage());\n        }\n    }\n\n    static com.google.javascript.jscomp.JSModule[] createJsModules(java.util.List<java.lang.String> specs, java.util.List<java.lang.String> jsFiles) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        com.google.common.base.Preconditions.checkState(specs != null);\n        com.google.common.base.Preconditions.checkState(!specs.isEmpty());\n        com.google.common.base.Preconditions.checkState(jsFiles != null);\n        final int totalNumJsFiles = jsFiles.size();\n        int nextJsFileIndex = 0;\n        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();\n        for (java.lang.String spec : specs) {\n            java.lang.String[] parts = spec.split(\":\");\n            if ((parts.length < 2) || (parts.length > 4)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Expected 2-4 colon-delimited parts in \" + \"module spec: \") + spec);\n            }\n            java.lang.String name = parts[0];\n            if (!com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Invalid module name: '\" + name) + \"'\");\n            }\n            if (modulesByName.containsKey(name)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Duplicate module name: \" + name);\n            }\n            com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(name);\n            int numJsFiles = -1;\n            try {\n                numJsFiles = java.lang.Integer.parseInt(parts[1]);\n            } catch (java.lang.NumberFormatException ignored) {\n                numJsFiles = -1;\n            }\n            if (numJsFiles < 0) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(((\"Invalid js file count '\" + parts[1]) + \"' for module: \") + name);\n            }\n            if ((nextJsFileIndex + numJsFiles) > totalNumJsFiles) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(((\"Not enough js files specified. Expected \" + ((nextJsFileIndex + numJsFiles) - totalNumJsFiles)) + \" more in module:\") + name);\n            }\n            java.util.List<java.lang.String> moduleJsFiles = jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);\n            for (com.google.javascript.jscomp.JSSourceFile input : com.google.javascript.jscomp.AbstractCommandLineRunner.createInputs(moduleJsFiles, false)) {\n                module.add(input);\n            }\n            nextJsFileIndex += numJsFiles;\n            if (parts.length > 2) {\n                java.lang.String depList = parts[2];\n                if (depList.length() > 0) {\n                    java.lang.String[] deps = depList.split(\",\");\n                    for (java.lang.String dep : deps) {\n                        com.google.javascript.jscomp.JSModule other = modulesByName.get(dep);\n                        if (other == null) {\n                            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((((\"Module '\" + name) + \"' depends on unknown module '\") + dep) + \"'. Be sure to list modules in dependency order.\");\n                        }\n                        module.addDependency(other);\n                    }\n                }\n            }\n            modulesByName.put(name, module);\n        }\n        if (nextJsFileIndex < totalNumJsFiles) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(((\"Too many js files specified. Expected \" + nextJsFileIndex) + \" but found \") + totalNumJsFiles);\n        }\n        return modulesByName.values().toArray(new com.google.javascript.jscomp.JSModule[modulesByName.size()]);\n    }\n\n    static java.util.Map<java.lang.String, java.lang.String> parseModuleWrappers(java.util.List<java.lang.String> specs, com.google.javascript.jscomp.JSModule[] modules) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n        com.google.common.base.Preconditions.checkState(specs != null);\n        java.util.Map<java.lang.String, java.lang.String> wrappers = com.google.common.collect.Maps.newHashMapWithExpectedSize(modules.length);\n        for (com.google.javascript.jscomp.JSModule m : modules) {\n            wrappers.put(m.getName(), \"\");\n        }\n        for (java.lang.String spec : specs) {\n            int pos = spec.indexOf(':');\n            if (pos == (-1)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Expected module wrapper to have \" + \"<name>:<wrapper> format: \") + spec);\n            }\n            java.lang.String name = spec.substring(0, pos);\n            if (!wrappers.containsKey(name)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Unknown module: '\" + name) + \"'\");\n            }\n            java.lang.String wrapper = spec.substring(pos + 1);\n            if (!wrapper.contains(\"%s\")) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"No %s placeholder in module wrapper: '\" + wrapper) + \"'\");\n            }\n            wrappers.put(name, wrapper);\n        }\n        return wrappers;\n    }\n\n    static void writeOutput(java.lang.Appendable out, java.lang.Compiler compiler, java.lang.String code, java.lang.String wrapper, java.lang.String codePlaceholder) throws java.io.IOException {\n        int pos = wrapper.indexOf(codePlaceholder);\n        if (pos != (-1)) {\n            java.lang.String prefix = \"\";\n            if (pos > 0) {\n                prefix = wrapper.substring(0, pos);\n                out.append(prefix);\n            }\n            out.append(code);\n            int suffixStart = pos + codePlaceholder.length();\n            if (suffixStart != wrapper.length()) {\n                out.append(wrapper.substring(suffixStart));\n            }\n            out.append('\\n');\n            if ((compiler != null) && (compiler.getSourceMap() != null)) {\n                compiler.getSourceMap().setWrapperPrefix(prefix);\n            }\n        } else {\n            out.append(code);\n            out.append('\\n');\n        }\n    }\n\n    private static void maybeCreateDirsForPath(java.lang.String pathPrefix) {\n        if (pathPrefix.length() > 0) {\n            java.lang.String dirName = (pathPrefix.charAt(pathPrefix.length() - 1) == java.io.File.separatorChar) ? pathPrefix.substring(0, pathPrefix.length() - 1) : new java.io.File(pathPrefix).getParent();\n            if (dirName != null) {\n                new java.io.File(dirName).mkdirs();\n            }\n        }\n    }\n\n    protected int doRun() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        java.lang.Compiler.setLoggingLevel(java.util.logging.Level.parse(config.loggingLevel));\n        java.util.List<com.google.javascript.jscomp.JSSourceFile> externsList = createExterns();\n        com.google.javascript.jscomp.JSSourceFile[] externs = new com.google.javascript.jscomp.JSSourceFile[externsList.size()];\n        externsList.toArray(externs);\n        compiler = createCompiler();\n        B options = createOptions();\n        com.google.javascript.jscomp.JSModule[] modules = null;\n        com.google.javascript.jscomp.Result result;\n        setRunOptions(options);\n        boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n        if (writeOutputToFile) {\n            out = toWriter(options.jsOutputFile, com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset.name());\n        }\n        java.util.List<java.lang.String> jsFiles = config.js;\n        java.util.List<java.lang.String> moduleSpecs = config.module;\n        if (!moduleSpecs.isEmpty()) {\n            modules = com.google.javascript.jscomp.AbstractCommandLineRunner.createJsModules(moduleSpecs, jsFiles);\n            result = compiler.compile(externs, modules, options);\n        } else {\n            java.util.List<com.google.javascript.jscomp.JSSourceFile> inputList = com.google.javascript.jscomp.AbstractCommandLineRunner.createSourceInputs(jsFiles);\n            com.google.javascript.jscomp.JSSourceFile[] inputs = new com.google.javascript.jscomp.JSSourceFile[inputList.size()];\n            inputList.toArray(inputs);\n            result = compiler.compile(externs, inputs, options);\n        }\n        int errCode = processResults(result, modules, options);\n        if (writeOutputToFile) {\n            ((java.io.Writer) (out)).close();\n        }\n        return errCode;\n    }\n\n    int processResults(com.google.javascript.jscomp.Result result, com.google.javascript.jscomp.JSModule[] modules, B options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        if (config.computePhaseOrdering) {\n            return 0;\n        }\n        if (config.printPassGraph) {\n            if (compiler.getRoot() == null) {\n                return 1;\n            } else {\n                out.append(com.google.javascript.jscomp.DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n                out.append('\\n');\n                return 0;\n            }\n        }\n        if (config.printAst) {\n            if (compiler.getRoot() == null) {\n                return 1;\n            } else {\n                com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg = compiler.computeCFG();\n                com.google.javascript.jscomp.DotFormatter.appendDot(compiler.getRoot(), cfg, out);\n                out.append('\\n');\n                return 0;\n            }\n        }\n        if (config.printTree) {\n            if (compiler.getRoot() == null) {\n                out.append(\"Code contains errors; no tree was generated.\\n\");\n                return 1;\n            } else {\n                compiler.getRoot().appendStringTree(out);\n                out.append(\"\\n\");\n                return 0;\n            }\n        }\n        if (result.success) {\n            if (modules == null) {\n                com.google.javascript.jscomp.AbstractCommandLineRunner.writeOutput(out, compiler, compiler.toSource(), config.outputWrapper, config.outputWrapperMarker);\n                outputSourceMap(options);\n            } else {\n                java.lang.String moduleFilePrefix = config.moduleOutputPathPrefix;\n                com.google.javascript.jscomp.AbstractCommandLineRunner.maybeCreateDirsForPath(moduleFilePrefix);\n                java.util.Map<java.lang.String, java.lang.String> moduleWrappers = com.google.javascript.jscomp.AbstractCommandLineRunner.parseModuleWrappers(config.moduleWrapper, modules);\n                java.io.Writer mapOut = null;\n                if (!shouldGenerateMapPerModule(options)) {\n                    mapOut = toWriter(expandSourceMapPath(options, null));\n                }\n                for (com.google.javascript.jscomp.JSModule m : modules) {\n                    if (shouldGenerateMapPerModule(options)) {\n                        mapOut = toWriter(expandSourceMapPath(options, m));\n                    }\n                    java.io.Writer writer = toWriter((moduleFilePrefix + m.getName()) + \".js\");\n                    if (options.sourceMapOutputPath != null) {\n                        compiler.getSourceMap().reset();\n                    }\n                    com.google.javascript.jscomp.AbstractCommandLineRunner.writeOutput(writer, compiler, compiler.toSource(m), moduleWrappers.get(m.getName()), \"%s\");\n                    if (options.sourceMapOutputPath != null) {\n                        compiler.getSourceMap().appendTo(mapOut, m.getName());\n                    }\n                    writer.close();\n                    if (shouldGenerateMapPerModule(options) && (mapOut != null)) {\n                        mapOut.close();\n                        mapOut = null;\n                    }\n                }\n                if (mapOut != null) {\n                    mapOut.close();\n                }\n            }\n            if (options.externExportsPath != null) {\n                java.io.Writer eeOut = openExternExportsStream(options, options.jsOutputFile);\n                eeOut.append(result.externExport);\n                eeOut.close();\n            }\n            outputNameMaps(options);\n            outputManifest();\n        }\n        return java.lang.Math.min(result.errors.length, 0x7f);\n    }\n\n    private java.nio.charset.Charset getInputCharset() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n        if (!config.charset.isEmpty()) {\n            if (!java.nio.charset.Charset.isSupported(config.charset)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + \" is not a valid charset name.\");\n            }\n            return java.nio.charset.Charset.forName(config.charset);\n        }\n        return com.google.common.base.Charsets.UTF_8;\n    }\n\n    private java.lang.String getOutputCharset() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n        if (!config.charset.isEmpty()) {\n            if (!java.nio.charset.Charset.isSupported(config.charset)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + \" is not a valid charset name.\");\n            }\n            return config.charset;\n        }\n        return \"US-ASCII\";\n    }\n\n    protected java.util.List<com.google.javascript.jscomp.JSSourceFile> createExterns() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        return com.google.javascript.jscomp.AbstractCommandLineRunner.createExternInputs(config.externs);\n    }\n\n    private boolean shouldGenerateMapPerModule(B options) {\n        return (options.sourceMapOutputPath != null) && options.sourceMapOutputPath.contains(\"%outname%\");\n    }\n\n    private java.io.Writer openExternExportsStream(B options, java.lang.String path) throws java.io.IOException {\n        if (options.externExportsPath == null) {\n            return null;\n        }\n        java.lang.String exPath = options.externExportsPath;\n        if (!exPath.contains(java.io.File.separator)) {\n            java.io.File outputFile = new java.io.File(path);\n            exPath = (outputFile.getParent() + java.io.File.separatorChar) + exPath;\n        }\n        return toWriter(exPath);\n    }\n\n    private java.lang.String expandCommandLinePath(java.lang.String path, com.google.javascript.jscomp.JSModule forModule) {\n        java.lang.String sub;\n        if (forModule != null) {\n            sub = (config.moduleOutputPathPrefix + forModule.getName()) + \".js\";\n        } else if (!config.module.isEmpty()) {\n            sub = config.moduleOutputPathPrefix;\n        } else {\n            sub = config.jsOutputFile;\n        }\n        return path.replace(\"%outname%\", sub);\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    java.lang.String expandSourceMapPath(B options, com.google.javascript.jscomp.JSModule forModule) {\n        if (com.google.javascript.jscomp.Strings.isEmpty(options.sourceMapOutputPath)) {\n            return null;\n        }\n        return expandCommandLinePath(options.sourceMapOutputPath, forModule);\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    java.lang.String expandManifest(com.google.javascript.jscomp.JSModule forModule) {\n        if (com.google.javascript.jscomp.Strings.isEmpty(config.outputManifest)) {\n            return null;\n        }\n        return expandCommandLinePath(config.outputManifest, forModule);\n    }\n\n    private java.io.Writer toWriter(java.lang.String fileName) throws java.io.IOException {\n        if (fileName == null) {\n            return null;\n        }\n        return new java.io.BufferedWriter(new java.io.FileWriter(fileName));\n    }\n\n    private java.io.Writer toWriter(java.lang.String fileName, java.lang.String charSet) throws java.io.IOException {\n        if (fileName == null) {\n            return null;\n        }\n        return new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(fileName), charSet));\n    }\n\n    private void outputSourceMap(B options) throws java.io.IOException {\n        if (com.google.javascript.jscomp.Strings.isEmpty(options.sourceMapOutputPath)) {\n            return;\n        }\n        java.lang.String outName = expandSourceMapPath(options, null);\n        java.io.Writer out = toWriter(outName);\n        compiler.getSourceMap().appendTo(out, outName);\n        out.close();\n    }\n\n    private java.lang.String getMapPath(java.lang.String outputFile) {\n        java.lang.String basePath = \"\";\n        if (outputFile.equals(\"\")) {\n            if (!config.moduleOutputPathPrefix.equals(\"\")) {\n                basePath = config.moduleOutputPathPrefix;\n            } else {\n                basePath = \"jscompiler\";\n            }\n        } else {\n            java.io.File file = new java.io.File(outputFile);\n            java.lang.String outputFileName = file.getName();\n            if (outputFileName.endsWith(\".js\")) {\n                outputFileName = outputFileName.substring(0, outputFileName.length() - 3);\n            }\n            basePath = (file.getParent() + java.io.File.separatorChar) + outputFileName;\n        }\n        return basePath;\n    }\n\n    private void outputNameMaps(B options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        java.lang.String propertyMapOutputPath = null;\n        java.lang.String variableMapOutputPath = null;\n        java.lang.String functionInformationMapOutputPath = null;\n        if (config.createNameMapFiles) {\n            java.lang.String basePath = getMapPath(options.jsOutputFile);\n            propertyMapOutputPath = basePath + \"_props_map.out\";\n            variableMapOutputPath = basePath + \"_vars_map.out\";\n            functionInformationMapOutputPath = basePath + \"_functions_map.out\";\n        }\n        if (!config.variableMapOutputFile.equals(\"\")) {\n            if (variableMapOutputPath != null) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n            }\n            variableMapOutputPath = config.variableMapOutputFile;\n        }\n        if (!config.propertyMapOutputFile.equals(\"\")) {\n            if (propertyMapOutputPath != null) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n            }\n            propertyMapOutputPath = config.propertyMapOutputFile;\n        }\n        if (variableMapOutputPath != null) {\n            if (compiler.getVariableMap() != null) {\n                compiler.getVariableMap().save(variableMapOutputPath);\n            }\n        }\n        if (propertyMapOutputPath != null) {\n            if (compiler.getPropertyMap() != null) {\n                compiler.getPropertyMap().save(propertyMapOutputPath);\n            }\n        }\n        if (functionInformationMapOutputPath != null) {\n            if (compiler.getFunctionalInformationMap() != null) {\n                java.io.FileOutputStream file = new java.io.FileOutputStream(functionInformationMapOutputPath);\n                com.google.protobuf.CodedOutputStream outputStream = com.google.protobuf.CodedOutputStream.newInstance(file);\n                compiler.getFunctionalInformationMap().writeTo(outputStream);\n                outputStream.flush();\n                file.flush();\n                file.close();\n            }\n        }\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    static void createDefineReplacements(java.util.List<java.lang.String> definitions, com.google.javascript.jscomp.CompilerOptions options) {\n        for (java.lang.String override : definitions) {\n            java.lang.String[] assignment = override.split(\"=\", 2);\n            java.lang.String defName = assignment[0];\n            if (defName.length() > 0) {\n                if (assignment.length == 1) {\n                    options.setDefineToBooleanLiteral(defName, true);\n                    continue;\n                } else {\n                    java.lang.String defValue = assignment[1];\n                    if (defValue.equals(\"true\")) {\n                        options.setDefineToBooleanLiteral(defName, true);\n                        continue;\n                    } else if (defValue.equals(\"false\")) {\n                        options.setDefineToBooleanLiteral(defName, false);\n                        continue;\n                    } else if ((defValue.length() > 1) && (((defValue.charAt(0) == '\\'') && (defValue.charAt(defValue.length() - 1) == '\\'')) || ((defValue.charAt(0) == '\\\"') && (defValue.charAt(defValue.length() - 1) == '\\\"')))) {\n                        java.lang.String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                        if (maybeStringVal.indexOf(defValue.charAt(0)) == (-1)) {\n                            options.setDefineToStringLiteral(defName, maybeStringVal);\n                            continue;\n                        }\n                    } else {\n                        try {\n                            options.setDefineToDoubleLiteral(defName, java.lang.Double.parseDouble(defValue));\n                            continue;\n                        } catch (java.lang.NumberFormatException e) {\n                        }\n                    }\n                }\n            }\n            throw new java.lang.RuntimeException(\"--define flag syntax invalid: \" + override);\n        }\n    }\n\n    private boolean shouldGenerateManifestPerModule() {\n        return ((!config.module.isEmpty()) && (config.outputManifest != null)) && config.outputManifest.contains(\"%outname%\");\n    }\n\n    private void outputManifest() throws java.io.IOException {\n        java.lang.String outputManifest = config.outputManifest;\n        if (com.google.javascript.jscomp.Strings.isEmpty(outputManifest)) {\n            return;\n        }\n        com.google.javascript.jscomp.JSModuleGraph graph = compiler.getModuleGraph();\n        if (shouldGenerateManifestPerModule()) {\n            java.lang.Iterable<com.google.javascript.jscomp.JSModule> modules = graph.getAllModules();\n            for (com.google.javascript.jscomp.JSModule module : modules) {\n                java.io.Writer out = toWriter(expandManifest(module));\n                printManifestTo(module.getInputs(), out);\n                out.close();\n            }\n        } else {\n            java.io.Writer out = toWriter(expandManifest(null));\n            if (graph == null) {\n                printManifestTo(compiler.getInputsInOrder(), out);\n            } else {\n                printModuleGraphManifestTo(graph, out);\n            }\n            out.close();\n        }\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    void printModuleGraphManifestTo(com.google.javascript.jscomp.JSModuleGraph graph, java.lang.Appendable out) throws java.io.IOException {\n        com.google.common.base.Joiner commas = com.google.common.base.Joiner.on(\",\");\n        boolean requiresNewline = false;\n        for (com.google.javascript.jscomp.JSModule module : graph.getAllModulesInDependencyOrder()) {\n            if (requiresNewline) {\n                out.append(\"\\n\");\n            }\n            java.lang.String dependencies = commas.join(module.getSortedDependencyNames());\n            out.append(java.lang.String.format(\"{%s%s}\\n\", module.getName(), dependencies.isEmpty() ? \"\" : \":\" + dependencies));\n            printManifestTo(module.getInputs(), out);\n            requiresNewline = true;\n        }\n    }\n\n    private void printManifestTo(java.lang.Iterable<com.google.javascript.jscomp.CompilerInput> inputs, java.lang.Appendable out) throws java.io.IOException {\n        java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayList();\n        for (com.google.javascript.jscomp.CompilerInput input : inputs) {\n            names.add(input.getName());\n        }\n        java.lang.String result = com.google.common.base.Joiner.on(\"\\n\").join(names);\n        out.append(result);\n        out.append(\"\\n\");\n    }\n\n    class RunTimeStats {\n        private long bestRunTime = java.lang.Long.MAX_VALUE;\n\n        private long worstRunTime = java.lang.Long.MIN_VALUE;\n\n        long lastStartTime = 0;\n\n        private java.util.List<java.util.List<java.lang.String>> loopedPassesInBestRun = null;\n\n        private void recordStartRun() {\n            lastStartTime = java.lang.System.currentTimeMillis();\n            com.google.javascript.jscomp.PhaseOptimizer.clearLoopsRun();\n        }\n\n        private void recordEndRun() {\n            long endTime = java.lang.System.currentTimeMillis();\n            long length = endTime - lastStartTime;\n            worstRunTime = java.lang.Math.max(length, worstRunTime);\n            if (length < bestRunTime) {\n                loopedPassesInBestRun = com.google.javascript.jscomp.PhaseOptimizer.getLoopsRun();\n                bestRunTime = length;\n            }\n        }\n\n        private void outputBestPhaseOrdering() {\n            try {\n                out.append((\"Best time: \" + bestRunTime) + \"\\n\");\n                out.append((\"Worst time: \" + worstRunTime) + \"\\n\");\n                int i = 1;\n                for (java.util.List<java.lang.String> loop : loopedPassesInBestRun) {\n                    out.append((((\"\\nLoop \" + i) + \":\\n\") + com.google.common.base.Joiner.on(\"\\n\").join(loop)) + \"\\n\");\n                    i++;\n                }\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(\"unexpected exception\", e);\n            }\n        }\n    }\n\n    static class CommandLineConfig {\n        private boolean printTree = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n            this.printTree = printTree;\n            return this;\n        }\n\n        private boolean computePhaseOrdering = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n            this.computePhaseOrdering = computePhaseOrdering;\n            return this;\n        }\n\n        private boolean printAst = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n            this.printAst = printAst;\n            return this;\n        }\n\n        private boolean printPassGraph = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n            this.printPassGraph = printPassGraph;\n            return this;\n        }\n\n        private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n            this.jscompDevMode = jscompDevMode;\n            return this;\n        }\n\n        private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n            this.loggingLevel = loggingLevel;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n            this.externs.clear();\n            this.externs.addAll(externs);\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n            this.js.clear();\n            this.js.addAll(js);\n            return this;\n        }\n\n        private java.lang.String jsOutputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n            this.jsOutputFile = jsOutputFile;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n            this.module.clear();\n            this.module.addAll(module);\n            return this;\n        }\n\n        private java.lang.String variableMapInputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n            this.variableMapInputFile = variableMapInputFile;\n            return this;\n        }\n\n        private java.lang.String propertyMapInputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n            this.propertyMapInputFile = propertyMapInputFile;\n            return this;\n        }\n\n        private java.lang.String variableMapOutputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n            this.variableMapOutputFile = variableMapOutputFile;\n            return this;\n        }\n\n        private boolean createNameMapFiles = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n            this.createNameMapFiles = createNameMapFiles;\n            return this;\n        }\n\n        private java.lang.String propertyMapOutputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n            this.propertyMapOutputFile = propertyMapOutputFile;\n            return this;\n        }\n\n        private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n            this.codingConvention = codingConvention;\n            return this;\n        }\n\n        private int summaryDetailLevel = 1;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n            this.summaryDetailLevel = summaryDetailLevel;\n            return this;\n        }\n\n        private java.lang.String outputWrapper = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n            this.outputWrapper = outputWrapper;\n            return this;\n        }\n\n        private java.lang.String outputWrapperMarker = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapperMarker(java.lang.String outputWrapperMarker) {\n            this.outputWrapperMarker = outputWrapperMarker;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n            this.moduleWrapper.clear();\n            this.moduleWrapper.addAll(moduleWrapper);\n            return this;\n        }\n\n        private java.lang.String moduleOutputPathPrefix = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n            this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n            return this;\n        }\n\n        private java.lang.String createSourceMap = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n            this.createSourceMap = createSourceMap;\n            return this;\n        }\n\n        private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n            this.sourceMapDetailLevel = level;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n            this.jscompError.clear();\n            this.jscompError.addAll(jscompError);\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n            this.jscompWarning.clear();\n            this.jscompWarning.addAll(jscompWarning);\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n            this.jscompOff.clear();\n            this.jscompOff.addAll(jscompOff);\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n            this.define.clear();\n            this.define.addAll(define);\n            return this;\n        }\n\n        private java.lang.String charset = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n            this.charset = charset;\n            return this;\n        }\n\n        private boolean manageClosureDependencies = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n            this.manageClosureDependencies = newVal;\n            return this;\n        }\n\n        private java.lang.String outputManifest = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n            this.outputManifest = outputManifest;\n            return this;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset == com.google.common.base.Charsets.UTF_8) {\n    options.outputCharset = com.google.common.base.Charsets.US_ASCII;\n} else {\n    options.outputCharset = com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset;\n}",
            "src_parent": "{\n    java.lang.Compiler.setLoggingLevel(java.util.logging.Level.parse(config.loggingLevel));\n    java.util.List<com.google.javascript.jscomp.JSSourceFile> externsList = createExterns();\n    com.google.javascript.jscomp.JSSourceFile[] externs = new com.google.javascript.jscomp.JSSourceFile[externsList.size()];\n    externsList.toArray(externs);\n    compiler = createCompiler();\n    B options = createOptions();\n    com.google.javascript.jscomp.JSModule[] modules = null;\n    com.google.javascript.jscomp.Result result;\n    setRunOptions(options);\n    if (com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset == com.google.common.base.Charsets.UTF_8) {\n        options.outputCharset = com.google.common.base.Charsets.US_ASCII;\n    } else {\n        options.outputCharset = com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset;\n    }\n    boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n    if (writeOutputToFile) {\n        out = toWriter(options.jsOutputFile, com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset.name());\n    }\n    java.util.List<java.lang.String> jsFiles = config.js;\n    java.util.List<java.lang.String> moduleSpecs = config.module;\n    if (!moduleSpecs.isEmpty()) {\n        modules = com.google.javascript.jscomp.AbstractCommandLineRunner.createJsModules(moduleSpecs, jsFiles);\n        result = compiler.compile(externs, modules, options);\n    } else {\n        java.util.List<com.google.javascript.jscomp.JSSourceFile> inputList = com.google.javascript.jscomp.AbstractCommandLineRunner.createSourceInputs(jsFiles);\n        com.google.javascript.jscomp.JSSourceFile[] inputs = new com.google.javascript.jscomp.JSSourceFile[inputList.size()];\n        inputList.toArray(inputs);\n        result = compiler.compile(externs, inputs, options);\n    }\n    int errCode = processResults(result, modules, options);\n    if (writeOutputToFile) {\n        ((java.io.Writer) (out)).close();\n    }\n    return errCode;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "AbstractCommandLineRunner"
    }
  ],
  "id": "Closure_149"
}