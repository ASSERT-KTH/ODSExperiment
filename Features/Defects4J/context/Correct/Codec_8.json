{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n    if ((out != null) && (out.length == outAvail)) {\n        buffer = out;\n        pos = outPos;\n        readPos = outPos;\n    }\n}",
            "src_parent": "public class Base64 implements org.apache.commons.codec.BinaryDecoder , org.apache.commons.codec.BinaryEncoder {\n    private static final int DEFAULT_BUFFER_RESIZE_FACTOR = 2;\n\n    private static final int DEFAULT_BUFFER_SIZE = 8192;\n\n    public static final int MIME_CHUNK_SIZE = 76;\n\n    public static final int PEM_CHUNK_SIZE = 64;\n\n    static final byte[] CHUNK_SEPARATOR = new byte[]{ '\\r', '\\n' };\n\n    private static final byte[] STANDARD_ENCODE_TABLE = new byte[]{ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' };\n\n    private static final byte[] URL_SAFE_ENCODE_TABLE = new byte[]{ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' };\n\n    private static final byte PAD = '=';\n\n    private static final byte[] DECODE_TABLE = new byte[]{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };\n\n    private static final int MASK_6BITS = 0x3f;\n\n    private static final int MASK_8BITS = 0xff;\n\n    private final byte[] encodeTable;\n\n    private final int lineLength;\n\n    private final byte[] lineSeparator;\n\n    private final int decodeSize;\n\n    private final int encodeSize;\n\n    private byte[] buffer;\n\n    private int pos;\n\n    private int readPos;\n\n    private int currentLinePos;\n\n    private int modulus;\n\n    private boolean eof;\n\n    private int x;\n\n    public Base64() {\n        this(0);\n    }\n\n    public Base64(boolean urlSafe) {\n        this(org.apache.commons.codec.binary.Base64.MIME_CHUNK_SIZE, org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR, urlSafe);\n    }\n\n    public Base64(int lineLength) {\n        this(lineLength, org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR);\n    }\n\n    public Base64(int lineLength, byte[] lineSeparator) {\n        this(lineLength, lineSeparator, false);\n    }\n\n    public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\n        if (lineSeparator == null) {\n            lineLength = 0;\n            lineSeparator = org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR;\n        }\n        this.lineLength = (lineLength > 0) ? (lineLength / 4) * 4 : 0;\n        this.lineSeparator = new byte[lineSeparator.length];\n        java.lang.System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);\n        if (lineLength > 0) {\n            this.encodeSize = 4 + lineSeparator.length;\n        } else {\n            this.encodeSize = 4;\n        }\n        this.decodeSize = this.encodeSize - 1;\n        if (org.apache.commons.codec.binary.Base64.containsBase64Byte(lineSeparator)) {\n            java.lang.String sep = org.apache.commons.codec.binary.StringUtils.newStringUtf8(lineSeparator);\n            throw new java.lang.IllegalArgumentException((\"lineSeperator must not contain base64 characters: [\" + sep) + \"]\");\n        }\n        this.encodeTable = (urlSafe) ? org.apache.commons.codec.binary.Base64.URL_SAFE_ENCODE_TABLE : org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE;\n    }\n\n    public boolean isUrlSafe() {\n        return this.encodeTable == org.apache.commons.codec.binary.Base64.URL_SAFE_ENCODE_TABLE;\n    }\n\n    boolean hasData() {\n        return this.buffer != null;\n    }\n\n    int avail() {\n        return buffer != null ? pos - readPos : 0;\n    }\n\n    private void resizeBuffer() {\n        if (buffer == null) {\n            buffer = new byte[org.apache.commons.codec.binary.Base64.DEFAULT_BUFFER_SIZE];\n            pos = 0;\n            readPos = 0;\n        } else {\n            byte[] b = new byte[buffer.length * org.apache.commons.codec.binary.Base64.DEFAULT_BUFFER_RESIZE_FACTOR];\n            java.lang.System.arraycopy(buffer, 0, b, 0, buffer.length);\n            buffer = b;\n        }\n    }\n\n    int readResults(byte[] b, int bPos, int bAvail) {\n        if (buffer != null) {\n            int len = java.lang.Math.min(avail(), bAvail);\n            java.lang.System.arraycopy(buffer, readPos, b, bPos, len);\n            readPos += len;\n            if (readPos >= pos) {\n                buffer = null;\n            }\n            return len;\n        }\n        return eof ? -1 : 0;\n    }\n\n    void setInitialBuffer(byte[] out, int outPos, int outAvail) {\n        if ((out != null) && (out.length == outAvail)) {\n            buffer = out;\n            pos = outPos;\n            readPos = outPos;\n        }\n    }\n\n    void encode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n            if ((buffer == null) || ((buffer.length - pos) < encodeSize)) {\n                resizeBuffer();\n            }\n            switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    if (encodeTable == org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = org.apache.commons.codec.binary.Base64.PAD;\n                        buffer[pos++] = org.apache.commons.codec.binary.Base64.PAD;\n                    }\n                    break;\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    if (encodeTable == org.apache.commons.codec.binary.Base64.STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = org.apache.commons.codec.binary.Base64.PAD;\n                    }\n                    break;\n            }\n            byte b = lineSeparator[lineSeparator.length - 1];\n            if (((lineLength > 0) && (pos > 0)) && (buffer[pos - 1] != b)) {\n                java.lang.System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);\n                pos += lineSeparator.length;\n            }\n        } else {\n            for (int i = 0; i < inAvail; i++) {\n                if ((buffer == null) || ((buffer.length - pos) < encodeSize)) {\n                    resizeBuffer();\n                }\n                modulus = (++modulus) % 3;\n                int b = in[inPos++];\n                if (b < 0) {\n                    b += 256;\n                }\n                x = (x << 8) + b;\n                if (0 == modulus) {\n                    buffer[pos++] = encodeTable[(x >> 18) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 12) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 6) & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    buffer[pos++] = encodeTable[x & org.apache.commons.codec.binary.Base64.MASK_6BITS];\n                    currentLinePos += 4;\n                    if ((lineLength > 0) && (lineLength <= currentLinePos)) {\n                        java.lang.System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);\n                        pos += lineSeparator.length;\n                        currentLinePos = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    void decode(byte[] in, int inPos, int inAvail) {\n        if (eof) {\n            return;\n        }\n        if (inAvail < 0) {\n            eof = true;\n        }\n        for (int i = 0; i < inAvail; i++) {\n            if ((buffer == null) || ((buffer.length - pos) < decodeSize)) {\n                resizeBuffer();\n            }\n            byte b = in[inPos++];\n            if (b == org.apache.commons.codec.binary.Base64.PAD) {\n                eof = true;\n                break;\n            } else if ((b >= 0) && (b < org.apache.commons.codec.binary.Base64.DECODE_TABLE.length)) {\n                int result = org.apache.commons.codec.binary.Base64.DECODE_TABLE[b];\n                if (result >= 0) {\n                    modulus = (++modulus) % 4;\n                    x = (x << 6) + result;\n                    if (modulus == 0) {\n                        buffer[pos++] = ((byte) ((x >> 16) & org.apache.commons.codec.binary.Base64.MASK_8BITS));\n                        buffer[pos++] = ((byte) ((x >> 8) & org.apache.commons.codec.binary.Base64.MASK_8BITS));\n                        buffer[pos++] = ((byte) (x & org.apache.commons.codec.binary.Base64.MASK_8BITS));\n                    }\n                }\n            }\n        }\n        if (eof && (modulus != 0)) {\n            if ((buffer == null) || ((buffer.length - pos) < decodeSize)) {\n                resizeBuffer();\n            }\n            x = x << 6;\n            switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = ((byte) ((x >> 16) & org.apache.commons.codec.binary.Base64.MASK_8BITS));\n                    break;\n                case 3 :\n                    buffer[pos++] = ((byte) ((x >> 16) & org.apache.commons.codec.binary.Base64.MASK_8BITS));\n                    buffer[pos++] = ((byte) ((x >> 8) & org.apache.commons.codec.binary.Base64.MASK_8BITS));\n                    break;\n            }\n        }\n    }\n\n    public static boolean isBase64(byte octet) {\n        return (octet == org.apache.commons.codec.binary.Base64.PAD) || (((octet >= 0) && (octet < org.apache.commons.codec.binary.Base64.DECODE_TABLE.length)) && (org.apache.commons.codec.binary.Base64.DECODE_TABLE[octet] != (-1)));\n    }\n\n    public static boolean isArrayByteBase64(byte[] arrayOctet) {\n        for (int i = 0; i < arrayOctet.length; i++) {\n            if ((!org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i])) && (!org.apache.commons.codec.binary.Base64.isWhiteSpace(arrayOctet[i]))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean containsBase64Byte(byte[] arrayOctet) {\n        for (int i = 0; i < arrayOctet.length; i++) {\n            if (org.apache.commons.codec.binary.Base64.isBase64(arrayOctet[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static byte[] encodeBase64(byte[] binaryData) {\n        return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false);\n    }\n\n    public static java.lang.String encodeBase64String(byte[] binaryData) {\n        return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false));\n    }\n\n    public static byte[] encodeBase64URLSafe(byte[] binaryData) {\n        return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true);\n    }\n\n    public static java.lang.String encodeBase64URLSafeString(byte[] binaryData) {\n        return org.apache.commons.codec.binary.StringUtils.newStringUtf8(org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, false, true));\n    }\n\n    public static byte[] encodeBase64Chunked(byte[] binaryData) {\n        return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, true);\n    }\n\n    public java.lang.Object decode(java.lang.Object pObject) throws org.apache.commons.codec.DecoderException {\n        if (pObject instanceof byte[]) {\n            return decode(((byte[]) (pObject)));\n        } else if (pObject instanceof java.lang.String) {\n            return decode(((java.lang.String) (pObject)));\n        } else {\n            throw new org.apache.commons.codec.DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");\n        }\n    }\n\n    public byte[] decode(java.lang.String pArray) {\n        return decode(org.apache.commons.codec.binary.StringUtils.getBytesUtf8(pArray));\n    }\n\n    public byte[] decode(byte[] pArray) {\n        reset();\n        if ((pArray == null) || (pArray.length == 0)) {\n            return pArray;\n        }\n        decode(pArray, 0, pArray.length);\n        decode(pArray, 0, -1);\n        byte[] result = new byte[pos];\n        readResults(result, 0, result.length);\n        return result;\n    }\n\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) {\n        return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, false);\n    }\n\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) {\n        return org.apache.commons.codec.binary.Base64.encodeBase64(binaryData, isChunked, urlSafe, java.lang.Integer.MAX_VALUE);\n    }\n\n    public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize) {\n        if ((binaryData == null) || (binaryData.length == 0)) {\n            return binaryData;\n        }\n        long len = org.apache.commons.codec.binary.Base64.getEncodeLength(binaryData, org.apache.commons.codec.binary.Base64.MIME_CHUNK_SIZE, org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR);\n        if (len > maxResultSize) {\n            throw new java.lang.IllegalArgumentException(((\"Input array too big, the output array would be bigger (\" + len) + \") than the specified maxium size of \") + maxResultSize);\n        }\n        org.apache.commons.codec.binary.Base64 b64 = (isChunked) ? new org.apache.commons.codec.binary.Base64(urlSafe) : new org.apache.commons.codec.binary.Base64(0, org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR, urlSafe);\n        return b64.encode(binaryData);\n    }\n\n    public static byte[] decodeBase64(java.lang.String base64String) {\n        return new org.apache.commons.codec.binary.Base64().decode(base64String);\n    }\n\n    public static byte[] decodeBase64(byte[] base64Data) {\n        return new org.apache.commons.codec.binary.Base64().decode(base64Data);\n    }\n\n    static byte[] discardWhitespace(byte[] data) {\n        byte[] groomedData = new byte[data.length];\n        int bytesCopied = 0;\n        for (int i = 0; i < data.length; i++) {\n            switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }\n        }\n        byte[] packedData = new byte[bytesCopied];\n        java.lang.System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);\n        return packedData;\n    }\n\n    private static boolean isWhiteSpace(byte byteToCheck) {\n        switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }\n    }\n\n    public java.lang.Object encode(java.lang.Object pObject) throws org.apache.commons.codec.EncoderException {\n        if (!(pObject instanceof byte[])) {\n            throw new org.apache.commons.codec.EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");\n        }\n        return encode(((byte[]) (pObject)));\n    }\n\n    public java.lang.String encodeToString(byte[] pArray) {\n        return org.apache.commons.codec.binary.StringUtils.newStringUtf8(encode(pArray));\n    }\n\n    public byte[] encode(byte[] pArray) {\n        reset();\n        if ((pArray == null) || (pArray.length == 0)) {\n            return pArray;\n        }\n        encode(pArray, 0, pArray.length);\n        encode(pArray, 0, -1);\n        byte[] buf = new byte[pos - readPos];\n        readResults(buf, 0, buf.length);\n        return buf;\n    }\n\n    private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {\n        chunkSize = (chunkSize / 4) * 4;\n        long len = (pArray.length * 4) / 3;\n        long mod = len % 4;\n        if (mod != 0) {\n            len += 4 - mod;\n        }\n        if (chunkSize > 0) {\n            boolean lenChunksPerfectly = (len % chunkSize) == 0;\n            len += (len / chunkSize) * chunkSeparator.length;\n            if (!lenChunksPerfectly) {\n                len += chunkSeparator.length;\n            }\n        }\n        return len;\n    }\n\n    public static java.math.BigInteger decodeInteger(byte[] pArray) {\n        return new java.math.BigInteger(1, org.apache.commons.codec.binary.Base64.decodeBase64(pArray));\n    }\n\n    public static byte[] encodeInteger(java.math.BigInteger bigInt) {\n        if (bigInt == null) {\n            throw new java.lang.NullPointerException(\"encodeInteger called with null parameter\");\n        }\n        return org.apache.commons.codec.binary.Base64.encodeBase64(org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInt), false);\n    }\n\n    static byte[] toIntegerBytes(java.math.BigInteger bigInt) {\n        int bitlen = bigInt.bitLength();\n        bitlen = ((bitlen + 7) >> 3) << 3;\n        byte[] bigBytes = bigInt.toByteArray();\n        if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n            return bigBytes;\n        }\n        int startSrc = 0;\n        int len = bigBytes.length;\n        if ((bigInt.bitLength() % 8) == 0) {\n            startSrc = 1;\n            len--;\n        }\n        int startDst = (bitlen / 8) - len;\n        byte[] resizedBytes = new byte[bitlen / 8];\n        java.lang.System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);\n        return resizedBytes;\n    }\n\n    private void reset() {\n        buffer = null;\n        pos = 0;\n        readPos = 0;\n        currentLinePos = 0;\n        modulus = 0;\n        eof = false;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "Base64"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if ((c > 0) && (b.length == len)) {\n    base64.setInitialBuffer(b, offset, len);\n}",
            "src_parent": "{\n    byte[] buf = new byte[doEncode ? 4096 : 8192];\n    int c = in.read(buf);\n    if ((c > 0) && (b.length == len)) {\n        base64.setInitialBuffer(b, offset, len);\n    }\n    if (doEncode) {\n        base64.encode(buf, 0, c);\n    } else {\n        base64.decode(buf, 0, c);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "Base64InputStream"
    }
  ],
  "id": "Codec_8"
}