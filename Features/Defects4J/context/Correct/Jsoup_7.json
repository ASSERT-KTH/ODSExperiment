{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "normaliseStructure(\"head\", htmlEl)",
            "src_parent": "{\n    org.jsoup.nodes.Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n    }\n    if (head() == null) {\n        htmlEl.prependElement(\"head\");\n    }\n    if (body() == null) {\n        htmlEl.appendElement(\"body\");\n    }\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    normaliseStructure(\"head\", htmlEl);\n    normaliseStructure(\"body\", htmlEl);\n    return this;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "normaliseStructure(\"body\", htmlEl)",
            "src_parent": "{\n    org.jsoup.nodes.Element htmlEl = findFirstElementByTagName(\"html\", this);\n    if (htmlEl == null) {\n        htmlEl = appendElement(\"html\");\n    }\n    if (head() == null) {\n        htmlEl.prependElement(\"head\");\n    }\n    if (body() == null) {\n        htmlEl.appendElement(\"body\");\n    }\n    normaliseTextNodes(head());\n    normaliseTextNodes(htmlEl);\n    normaliseTextNodes(this);\n    normaliseStructure(\"head\", htmlEl);\n    normaliseStructure(\"body\", htmlEl);\n    return this;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private void normaliseStructure(java.lang.String tag, org.jsoup.nodes.Element htmlEl) {\n    org.jsoup.select.Elements elements = this.getElementsByTag(tag);\n    org.jsoup.nodes.Element master = elements.first();\n    if (elements.size() > 1) {\n        java.util.List<org.jsoup.nodes.Node> toMove = new java.util.ArrayList<org.jsoup.nodes.Node>();\n        for (int i = 1; i < elements.size(); i++) {\n            org.jsoup.nodes.Node dupe = elements.get(i);\n            for (org.jsoup.nodes.Node node : dupe.childNodes) {\n                toMove.add(node);\n            }\n            dupe.remove();\n        }\n        for (org.jsoup.nodes.Node dupe : toMove) {\n            master.appendChild(dupe);\n        }\n    }\n    if (!master.parent().equals(htmlEl)) {\n        htmlEl.appendChild(master);\n    }\n}",
            "src_parent": "public class Document extends org.jsoup.nodes.Element {\n    private org.jsoup.nodes.Document.OutputSettings outputSettings = new org.jsoup.nodes.Document.OutputSettings();\n\n    public Document(java.lang.String baseUri) {\n        super(org.jsoup.parser.Tag.valueOf(\"#root\"), baseUri);\n    }\n\n    public static org.jsoup.nodes.Document createShell(java.lang.String baseUri) {\n        org.jsoup.helper.Validate.notNull(baseUri);\n        org.jsoup.nodes.Document doc = new org.jsoup.nodes.Document(baseUri);\n        org.jsoup.nodes.Element html = doc.appendElement(\"html\");\n        html.appendElement(\"head\");\n        html.appendElement(\"body\");\n        return doc;\n    }\n\n    public org.jsoup.nodes.Element head() {\n        return findFirstElementByTagName(\"head\", this);\n    }\n\n    public org.jsoup.nodes.Element body() {\n        return findFirstElementByTagName(\"body\", this);\n    }\n\n    public java.lang.String title() {\n        org.jsoup.nodes.Element titleEl = getElementsByTag(\"title\").first();\n        return titleEl != null ? titleEl.text().trim() : \"\";\n    }\n\n    public void title(java.lang.String title) {\n        org.jsoup.helper.Validate.notNull(title);\n        org.jsoup.nodes.Element titleEl = getElementsByTag(\"title\").first();\n        if (titleEl == null) {\n            head().appendElement(\"title\").text(title);\n        } else {\n            titleEl.text(title);\n        }\n    }\n\n    public org.jsoup.nodes.Element createElement(java.lang.String tagName) {\n        return new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(tagName), this.baseUri());\n    }\n\n    public org.jsoup.nodes.Document normalise() {\n        org.jsoup.nodes.Element htmlEl = findFirstElementByTagName(\"html\", this);\n        if (htmlEl == null) {\n            htmlEl = appendElement(\"html\");\n        }\n        if (head() == null) {\n            htmlEl.prependElement(\"head\");\n        }\n        if (body() == null) {\n            htmlEl.appendElement(\"body\");\n        }\n        normaliseTextNodes(head());\n        normaliseTextNodes(htmlEl);\n        normaliseTextNodes(this);\n        normaliseStructure(\"head\", htmlEl);\n        normaliseStructure(\"body\", htmlEl);\n        return this;\n    }\n\n    private void normaliseTextNodes(org.jsoup.nodes.Element element) {\n        java.util.List<org.jsoup.nodes.Node> toMove = new java.util.ArrayList<org.jsoup.nodes.Node>();\n        for (org.jsoup.nodes.Node node : element.childNodes) {\n            if (node instanceof org.jsoup.nodes.TextNode) {\n                org.jsoup.nodes.TextNode tn = ((org.jsoup.nodes.TextNode) (node));\n                if (!tn.isBlank()) {\n                    toMove.add(tn);\n                }\n            }\n        }\n        for (int i = toMove.size() - 1; i >= 0; i--) {\n            org.jsoup.nodes.Node node = toMove.get(i);\n            element.removeChild(node);\n            body().prependChild(new org.jsoup.nodes.TextNode(\" \", \"\"));\n            body().prependChild(node);\n        }\n    }\n\n    private void normaliseStructure(java.lang.String tag, org.jsoup.nodes.Element htmlEl) {\n        org.jsoup.select.Elements elements = this.getElementsByTag(tag);\n        org.jsoup.nodes.Element master = elements.first();\n        if (elements.size() > 1) {\n            java.util.List<org.jsoup.nodes.Node> toMove = new java.util.ArrayList<org.jsoup.nodes.Node>();\n            for (int i = 1; i < elements.size(); i++) {\n                org.jsoup.nodes.Node dupe = elements.get(i);\n                for (org.jsoup.nodes.Node node : dupe.childNodes) {\n                    toMove.add(node);\n                }\n                dupe.remove();\n            }\n            for (org.jsoup.nodes.Node dupe : toMove) {\n                master.appendChild(dupe);\n            }\n        }\n        if (!master.parent().equals(htmlEl)) {\n            htmlEl.appendChild(master);\n        }\n    }\n\n    private org.jsoup.nodes.Element findFirstElementByTagName(java.lang.String tag, org.jsoup.nodes.Node node) {\n        if (node.nodeName().equals(tag)) {\n            return ((org.jsoup.nodes.Element) (node));\n        } else {\n            for (org.jsoup.nodes.Node child : node.childNodes) {\n                org.jsoup.nodes.Element found = findFirstElementByTagName(tag, child);\n                if (found != null) {\n                    return found;\n                }\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String outerHtml() {\n        return super.html();\n    }\n\n    @java.lang.Override\n    public org.jsoup.nodes.Element text(java.lang.String text) {\n        body().text(text);\n        return this;\n    }\n\n    @java.lang.Override\n    public java.lang.String nodeName() {\n        return \"#document\";\n    }\n\n    public class OutputSettings {\n        private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n\n        private java.nio.charset.Charset charset = java.nio.charset.Charset.forName(\"UTF-8\");\n\n        private java.nio.charset.CharsetEncoder charsetEncoder = charset.newEncoder();\n\n        private boolean prettyPrint = true;\n\n        private int indentAmount = 1;\n\n        public OutputSettings() {\n        }\n\n        public Entities.EscapeMode escapeMode() {\n            return escapeMode;\n        }\n\n        public org.jsoup.nodes.Document.OutputSettings escapeMode(org.jsoup.nodes.Entities.EscapeMode escapeMode) {\n            this.escapeMode = escapeMode;\n            return this;\n        }\n\n        public java.nio.charset.Charset charset() {\n            return charset;\n        }\n\n        public org.jsoup.nodes.Document.OutputSettings charset(java.nio.charset.Charset charset) {\n            this.charset = charset;\n            charsetEncoder = charset.newEncoder();\n            return this;\n        }\n\n        public org.jsoup.nodes.Document.OutputSettings charset(java.lang.String charset) {\n            charset(java.nio.charset.Charset.forName(charset));\n            return this;\n        }\n\n        java.nio.charset.CharsetEncoder encoder() {\n            return charsetEncoder;\n        }\n\n        public boolean prettyPrint() {\n            return prettyPrint;\n        }\n\n        public org.jsoup.nodes.Document.OutputSettings prettyPrint(boolean pretty) {\n            prettyPrint = pretty;\n            return this;\n        }\n\n        public int indentAmount() {\n            return indentAmount;\n        }\n\n        public org.jsoup.nodes.Document.OutputSettings indentAmount(int indentAmount) {\n            org.jsoup.helper.Validate.isTrue(indentAmount >= 0);\n            this.indentAmount = indentAmount;\n            return this;\n        }\n    }\n\n    public org.jsoup.nodes.Document.OutputSettings outputSettings() {\n        return outputSettings;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "Document"
    }
  ],
  "id": "Jsoup_7"
}