{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Do",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!((option == com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) && (token == JsDocToken.ANNOTATION))) {\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n}",
            "src_parent": "case EOF :\n    if (!((option == com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) && (token == JsDocToken.ANNOTATION))) {\n        java.lang.String multilineText = builder.toString();\n        if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n            multilineText = multilineText.trim();\n        }\n        int endLineno = stream.getLineno();\n        int endCharno = stream.getCharno();\n        if (multilineText.length() > 0) {\n            jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n        }\n        return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n    }",
            "src_parent_type": "Case",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String multilineText = builder.toString()",
            "dst_parent": "case EOF :\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);",
            "dst_parent_type": "Case",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.String multilineText = builder.toString()",
            "src_parent": "{\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n    multilineText = multilineText.trim();\n}",
            "dst_parent": "case EOF :\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);",
            "dst_parent_type": "Case",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n    multilineText = multilineText.trim();\n}",
            "src_parent": "{\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int endLineno = stream.getLineno()",
            "dst_parent": "case EOF :\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);",
            "dst_parent_type": "Case",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int endLineno = stream.getLineno()",
            "src_parent": "{\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int endCharno = stream.getCharno()",
            "dst_parent": "case EOF :\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);",
            "dst_parent_type": "Case",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int endCharno = stream.getCharno()",
            "src_parent": "{\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (multilineText.length() > 0) {\n    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n}",
            "dst_parent": "case EOF :\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);",
            "dst_parent_type": "Case",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (multilineText.length() > 0) {\n    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n}",
            "src_parent": "{\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token)",
            "dst_parent": "case EOF :\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);",
            "dst_parent_type": "Case",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token)",
            "src_parent": "{\n    java.lang.String multilineText = builder.toString();\n    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        }
      ],
      "file_name": "JsDocInfoParser"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (scope.getRootNode().getFirstChild().getNext().getChildCount() == 2) {\n    liveness.markAllParametersEscaped();\n}",
            "src_parent": "{\n    com.google.javascript.jscomp.Scope scope = t.getScope();\n    if (scope.isGlobal()) {\n        return;\n    }\n    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg = t.getControlFlowGraph();\n    com.google.javascript.jscomp.LiveVariablesAnalysis liveness = new com.google.javascript.jscomp.LiveVariablesAnalysis(cfg, scope, compiler);\n    if (scope.getRootNode().getFirstChild().getNext().getChildCount() == 2) {\n        liveness.markAllParametersEscaped();\n    }\n    liveness.analyze();\n    com.google.javascript.jscomp.graph.UndiGraph<com.google.javascript.jscomp.Scope.Var, java.lang.Void> interferenceGraph = computeVariableNamesInterferenceGraph(t, cfg, liveness.getEscapedLocals());\n    com.google.javascript.jscomp.graph.GraphColoring<com.google.javascript.jscomp.Scope.Var, java.lang.Void> coloring = new com.google.javascript.jscomp.graph.GraphColoring.GreedyGraphColoring<com.google.javascript.jscomp.Scope.Var, java.lang.Void>(interferenceGraph, com.google.javascript.jscomp.CoalesceVariableNames.coloringTieBreaker);\n    coloring.color();\n    colorings.push(coloring);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "CoalesceVariableNames"
    }
  ],
  "id": "Closure_142"
}