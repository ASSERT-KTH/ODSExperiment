{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "while (name.endsWith(\"/\")) {\n    name = name.substring(0, name.length() - 1);\n} ",
            "src_parent": "{\n    java.lang.String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n    while (name.endsWith(\"/\")) {\n        name = name.substring(0, name.length() - 1);\n    } \n    if (name.length() >= org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN) {\n        name = name.substring(0, org.apache.commons.compress.archivers.tar.TarConstants.NAMELEN - 1);\n    }\n    org.apache.commons.compress.archivers.tar.TarArchiveEntry pex = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(name, org.apache.commons.compress.archivers.tar.TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n    java.io.StringWriter w = new java.io.StringWriter();\n    for (java.util.Map.Entry<java.lang.String, java.lang.String> h : headers.entrySet()) {\n        java.lang.String key = h.getKey();\n        java.lang.String value = h.getValue();\n        int len = ((key.length() + value.length()) + 3) + 2;\n        java.lang.String line = ((((len + \" \") + key) + \"=\") + value) + \"\\n\";\n        int actualLength = line.getBytes(org.apache.commons.compress.utils.CharsetNames.UTF_8).length;\n        while (len != actualLength) {\n            len = actualLength;\n            line = ((((len + \" \") + key) + \"=\") + value) + \"\\n\";\n            actualLength = line.getBytes(org.apache.commons.compress.utils.CharsetNames.UTF_8).length;\n        } \n        w.write(line);\n    }\n    byte[] data = w.toString().getBytes(org.apache.commons.compress.utils.CharsetNames.UTF_8);\n    pex.setSize(data.length);\n    putArchiveEntry(pex);\n    write(data);\n    closeArchiveEntry();\n}",
            "src_parent_type": "Block",
            "src_type": "While"
          }
        }
      ],
      "file_name": "TarArchiveOutputStream"
    }
  ],
  "id": "Compress_18"
}