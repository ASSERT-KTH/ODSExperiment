{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (n.getString().equals(\"arguments\")) {\n    v = t.getScope().getArgumentsVar();\n} else {\n    v = t.getScope().getVar(n.getString());\n}",
            "src_parent": "{\n    com.google.javascript.jscomp.Scope.Var v;\n    if (n.getString().equals(\"arguments\")) {\n        v = t.getScope().getArgumentsVar();\n    } else {\n        v = t.getScope().getVar(n.getString());\n    }\n    if ((v != null) && varFilter.apply(v)) {\n        addReference(t, v, new com.google.javascript.jscomp.ReferenceCollectingCallback.Reference(n, parent, t, blockStack.peek()));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "t.getScope().getVar(n.getString())",
            "dst_parent": "com.google.javascript.jscomp.Scope.Var v = t.getScope().getVar(n.getString())",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "t.getScope().getVar(n.getString())",
            "src_parent": "v = t.getScope().getVar(n.getString())",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "ReferenceCollectingCallback"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private com.google.javascript.jscomp.Scope.Var arguments;",
            "src_parent": "public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> {\n    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();\n\n    private final com.google.javascript.jscomp.Scope parent;\n\n    private final int depth;\n\n    private final com.google.javascript.rhino.Node rootNode;\n\n    private final com.google.javascript.rhino.jstype.ObjectType thisType;\n\n    private final boolean isBottom;\n\n    private com.google.javascript.jscomp.Scope.Var arguments;\n\n    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {\n        final java.lang.String name;\n\n        final com.google.javascript.rhino.Node nameNode;\n\n        private com.google.javascript.rhino.jstype.JSType type;\n\n        private final com.google.javascript.rhino.JSDocInfo info;\n\n        private final boolean typeInferred;\n\n        final com.google.javascript.jscomp.CompilerInput input;\n\n        final boolean isDefine;\n\n        final int index;\n\n        final com.google.javascript.jscomp.Scope scope;\n\n        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {\n            this.name = name;\n            this.nameNode = nameNode;\n            this.type = type;\n            this.scope = scope;\n            this.index = index;\n            this.input = input;\n            this.isDefine = isDefine;\n            this.info = info;\n            this.typeInferred = inferred;\n        }\n\n        public java.lang.String getName() {\n            return name;\n        }\n\n        public com.google.javascript.rhino.Node getParentNode() {\n            return nameNode == null ? null : nameNode.getParent();\n        }\n\n        public boolean isBleedingFunction() {\n            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());\n        }\n\n        com.google.javascript.jscomp.Scope getScope() {\n            return scope;\n        }\n\n        public boolean isGlobal() {\n            return scope.isGlobal();\n        }\n\n        public boolean isLocal() {\n            return scope.isLocal();\n        }\n\n        boolean isExtern() {\n            return (input == null) || input.isExtern();\n        }\n\n        public boolean isConst() {\n            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);\n        }\n\n        public boolean isDefine() {\n            return isDefine;\n        }\n\n        public com.google.javascript.rhino.Node getInitialValue() {\n            com.google.javascript.rhino.Node parent = getParentNode();\n            int pType = parent.getType();\n            if (pType == com.google.javascript.rhino.Token.FUNCTION) {\n                return parent;\n            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {\n                return parent.getLastChild();\n            } else if (pType == com.google.javascript.rhino.Token.VAR) {\n                return nameNode.getFirstChild();\n            } else {\n                return null;\n            }\n        }\n\n        public com.google.javascript.rhino.jstype.JSType getType() {\n            return type;\n        }\n\n        public com.google.javascript.rhino.Node getNameNode() {\n            return nameNode;\n        }\n\n        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {\n            return info;\n        }\n\n        void setType(com.google.javascript.rhino.jstype.JSType type) {\n            com.google.common.base.Preconditions.checkState(isTypeInferred());\n            this.type = type;\n        }\n\n        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {\n            if (type != null) {\n                type = type.resolve(errorReporter, scope);\n            }\n        }\n\n        public boolean isTypeInferred() {\n            return typeInferred;\n        }\n\n        public java.lang.String getInputName() {\n            if (input == null) {\n                return \"<non-file>\";\n            } else {\n                return input.getName();\n            }\n        }\n\n        public boolean isNoShadow() {\n            if ((info != null) && info.isNoShadow()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object other) {\n            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {\n                return false;\n            }\n            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));\n            return otherVar.nameNode == nameNode;\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return nameNode.hashCode();\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \"Scope.Var \" + name;\n        }\n    }\n\n    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {\n        Arguments(com.google.javascript.jscomp.Scope scope) {\n            super(false, \"arguments\", null, null, scope, -1, null, false, null);\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object other) {\n            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {\n                return false;\n            }\n            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));\n            return otherVar.scope.getRootNode() == scope.getRootNode();\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return java.lang.System.identityHashCode(this);\n        }\n    }\n\n    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {\n        com.google.common.base.Preconditions.checkNotNull(parent);\n        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);\n        this.parent = parent;\n        this.rootNode = rootNode;\n        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();\n        if ((nodeType != null) && (nodeType instanceof com.google.javascript.rhino.jstype.FunctionType)) {\n            thisType = ((com.google.javascript.rhino.jstype.FunctionType) (nodeType)).getTypeOfThis();\n        } else {\n            thisType = parent.thisType;\n        }\n        this.isBottom = false;\n        this.depth = parent.depth + 1;\n    }\n\n    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {\n        this.parent = null;\n        this.rootNode = rootNode;\n        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.jscomp.GLOBAL_THIS);\n        this.isBottom = false;\n        this.depth = 0;\n    }\n\n    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {\n        this.parent = null;\n        this.rootNode = rootNode;\n        this.thisType = thisType;\n        this.isBottom = true;\n        this.depth = 0;\n    }\n\n    int getDepth() {\n        return depth;\n    }\n\n    boolean isBottom() {\n        return isBottom;\n    }\n\n    public com.google.javascript.rhino.Node getRootNode() {\n        return rootNode;\n    }\n\n    public com.google.javascript.jscomp.Scope getParent() {\n        return parent;\n    }\n\n    com.google.javascript.jscomp.Scope getGlobalScope() {\n        com.google.javascript.jscomp.Scope result = this;\n        while (result.getParent() != null) {\n            result = result.getParent();\n        } \n        return result;\n    }\n\n    @java.lang.Override\n    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {\n        return parent;\n    }\n\n    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {\n        return thisType;\n    }\n\n    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {\n        return declare(name, nameNode, type, input, true);\n    }\n\n    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {\n        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));\n        com.google.common.base.Preconditions.checkState(vars.get(name) == null);\n        com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(nameNode);\n        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);\n        vars.put(name, var);\n        return var;\n    }\n\n    void undeclare(com.google.javascript.jscomp.Scope.Var var) {\n        com.google.common.base.Preconditions.checkState(var.scope == this);\n        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);\n        vars.remove(var.name);\n    }\n\n    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {\n        return getVar(name);\n    }\n\n    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {\n        return vars.get(name);\n    }\n\n    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {\n        com.google.javascript.jscomp.Scope.Var var = vars.get(name);\n        if (var != null) {\n            return var;\n        } else if (parent != null) {\n            return parent.getVar(name);\n        } else {\n            return null;\n        }\n    }\n\n    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {\n        if (arguments == null) {\n            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);\n        }\n        return arguments;\n    }\n\n    public boolean isDeclared(java.lang.String name, boolean recurse) {\n        com.google.javascript.jscomp.Scope scope = this;\n        if (scope.vars.containsKey(name)) {\n            return true;\n        }\n        if ((scope.parent != null) && recurse) {\n            return scope.parent.isDeclared(name, recurse);\n        }\n        return false;\n    }\n\n    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {\n        return vars.values().iterator();\n    }\n\n    public int getVarCount() {\n        return vars.size();\n    }\n\n    public boolean isGlobal() {\n        return parent == null;\n    }\n\n    public boolean isLocal() {\n        return !isGlobal();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static class Arguments extends com.google.javascript.jscomp.Scope.Var {\n    Arguments(com.google.javascript.jscomp.Scope scope) {\n        super(false, \"arguments\", null, null, scope, -1, null, false, null);\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {\n            return false;\n        }\n        com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));\n        return otherVar.scope.getRootNode() == scope.getRootNode();\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return java.lang.System.identityHashCode(this);\n    }\n}",
            "src_parent": "public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> {\n    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();\n\n    private final com.google.javascript.jscomp.Scope parent;\n\n    private final int depth;\n\n    private final com.google.javascript.rhino.Node rootNode;\n\n    private final com.google.javascript.rhino.jstype.ObjectType thisType;\n\n    private final boolean isBottom;\n\n    private com.google.javascript.jscomp.Scope.Var arguments;\n\n    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {\n        final java.lang.String name;\n\n        final com.google.javascript.rhino.Node nameNode;\n\n        private com.google.javascript.rhino.jstype.JSType type;\n\n        private final com.google.javascript.rhino.JSDocInfo info;\n\n        private final boolean typeInferred;\n\n        final com.google.javascript.jscomp.CompilerInput input;\n\n        final boolean isDefine;\n\n        final int index;\n\n        final com.google.javascript.jscomp.Scope scope;\n\n        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {\n            this.name = name;\n            this.nameNode = nameNode;\n            this.type = type;\n            this.scope = scope;\n            this.index = index;\n            this.input = input;\n            this.isDefine = isDefine;\n            this.info = info;\n            this.typeInferred = inferred;\n        }\n\n        public java.lang.String getName() {\n            return name;\n        }\n\n        public com.google.javascript.rhino.Node getParentNode() {\n            return nameNode == null ? null : nameNode.getParent();\n        }\n\n        public boolean isBleedingFunction() {\n            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());\n        }\n\n        com.google.javascript.jscomp.Scope getScope() {\n            return scope;\n        }\n\n        public boolean isGlobal() {\n            return scope.isGlobal();\n        }\n\n        public boolean isLocal() {\n            return scope.isLocal();\n        }\n\n        boolean isExtern() {\n            return (input == null) || input.isExtern();\n        }\n\n        public boolean isConst() {\n            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);\n        }\n\n        public boolean isDefine() {\n            return isDefine;\n        }\n\n        public com.google.javascript.rhino.Node getInitialValue() {\n            com.google.javascript.rhino.Node parent = getParentNode();\n            int pType = parent.getType();\n            if (pType == com.google.javascript.rhino.Token.FUNCTION) {\n                return parent;\n            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {\n                return parent.getLastChild();\n            } else if (pType == com.google.javascript.rhino.Token.VAR) {\n                return nameNode.getFirstChild();\n            } else {\n                return null;\n            }\n        }\n\n        public com.google.javascript.rhino.jstype.JSType getType() {\n            return type;\n        }\n\n        public com.google.javascript.rhino.Node getNameNode() {\n            return nameNode;\n        }\n\n        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {\n            return info;\n        }\n\n        void setType(com.google.javascript.rhino.jstype.JSType type) {\n            com.google.common.base.Preconditions.checkState(isTypeInferred());\n            this.type = type;\n        }\n\n        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {\n            if (type != null) {\n                type = type.resolve(errorReporter, scope);\n            }\n        }\n\n        public boolean isTypeInferred() {\n            return typeInferred;\n        }\n\n        public java.lang.String getInputName() {\n            if (input == null) {\n                return \"<non-file>\";\n            } else {\n                return input.getName();\n            }\n        }\n\n        public boolean isNoShadow() {\n            if ((info != null) && info.isNoShadow()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object other) {\n            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {\n                return false;\n            }\n            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));\n            return otherVar.nameNode == nameNode;\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return nameNode.hashCode();\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \"Scope.Var \" + name;\n        }\n    }\n\n    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {\n        Arguments(com.google.javascript.jscomp.Scope scope) {\n            super(false, \"arguments\", null, null, scope, -1, null, false, null);\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object other) {\n            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {\n                return false;\n            }\n            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));\n            return otherVar.scope.getRootNode() == scope.getRootNode();\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return java.lang.System.identityHashCode(this);\n        }\n    }\n\n    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {\n        com.google.common.base.Preconditions.checkNotNull(parent);\n        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);\n        this.parent = parent;\n        this.rootNode = rootNode;\n        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();\n        if ((nodeType != null) && (nodeType instanceof com.google.javascript.rhino.jstype.FunctionType)) {\n            thisType = ((com.google.javascript.rhino.jstype.FunctionType) (nodeType)).getTypeOfThis();\n        } else {\n            thisType = parent.thisType;\n        }\n        this.isBottom = false;\n        this.depth = parent.depth + 1;\n    }\n\n    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {\n        this.parent = null;\n        this.rootNode = rootNode;\n        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.jscomp.GLOBAL_THIS);\n        this.isBottom = false;\n        this.depth = 0;\n    }\n\n    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {\n        this.parent = null;\n        this.rootNode = rootNode;\n        this.thisType = thisType;\n        this.isBottom = true;\n        this.depth = 0;\n    }\n\n    int getDepth() {\n        return depth;\n    }\n\n    boolean isBottom() {\n        return isBottom;\n    }\n\n    public com.google.javascript.rhino.Node getRootNode() {\n        return rootNode;\n    }\n\n    public com.google.javascript.jscomp.Scope getParent() {\n        return parent;\n    }\n\n    com.google.javascript.jscomp.Scope getGlobalScope() {\n        com.google.javascript.jscomp.Scope result = this;\n        while (result.getParent() != null) {\n            result = result.getParent();\n        } \n        return result;\n    }\n\n    @java.lang.Override\n    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {\n        return parent;\n    }\n\n    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {\n        return thisType;\n    }\n\n    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {\n        return declare(name, nameNode, type, input, true);\n    }\n\n    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {\n        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));\n        com.google.common.base.Preconditions.checkState(vars.get(name) == null);\n        com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(nameNode);\n        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);\n        vars.put(name, var);\n        return var;\n    }\n\n    void undeclare(com.google.javascript.jscomp.Scope.Var var) {\n        com.google.common.base.Preconditions.checkState(var.scope == this);\n        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);\n        vars.remove(var.name);\n    }\n\n    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {\n        return getVar(name);\n    }\n\n    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {\n        return vars.get(name);\n    }\n\n    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {\n        com.google.javascript.jscomp.Scope.Var var = vars.get(name);\n        if (var != null) {\n            return var;\n        } else if (parent != null) {\n            return parent.getVar(name);\n        } else {\n            return null;\n        }\n    }\n\n    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {\n        if (arguments == null) {\n            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);\n        }\n        return arguments;\n    }\n\n    public boolean isDeclared(java.lang.String name, boolean recurse) {\n        com.google.javascript.jscomp.Scope scope = this;\n        if (scope.vars.containsKey(name)) {\n            return true;\n        }\n        if ((scope.parent != null) && recurse) {\n            return scope.parent.isDeclared(name, recurse);\n        }\n        return false;\n    }\n\n    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {\n        return vars.values().iterator();\n    }\n\n    public int getVarCount() {\n        return vars.size();\n    }\n\n    public boolean isGlobal() {\n        return parent == null;\n    }\n\n    public boolean isLocal() {\n        return !isGlobal();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {\n    if (arguments == null) {\n        arguments = new com.google.javascript.jscomp.Scope.Arguments(this);\n    }\n    return arguments;\n}",
            "src_parent": "public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> {\n    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();\n\n    private final com.google.javascript.jscomp.Scope parent;\n\n    private final int depth;\n\n    private final com.google.javascript.rhino.Node rootNode;\n\n    private final com.google.javascript.rhino.jstype.ObjectType thisType;\n\n    private final boolean isBottom;\n\n    private com.google.javascript.jscomp.Scope.Var arguments;\n\n    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> {\n        final java.lang.String name;\n\n        final com.google.javascript.rhino.Node nameNode;\n\n        private com.google.javascript.rhino.jstype.JSType type;\n\n        private final com.google.javascript.rhino.JSDocInfo info;\n\n        private final boolean typeInferred;\n\n        final com.google.javascript.jscomp.CompilerInput input;\n\n        final boolean isDefine;\n\n        final int index;\n\n        final com.google.javascript.jscomp.Scope scope;\n\n        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {\n            this.name = name;\n            this.nameNode = nameNode;\n            this.type = type;\n            this.scope = scope;\n            this.index = index;\n            this.input = input;\n            this.isDefine = isDefine;\n            this.info = info;\n            this.typeInferred = inferred;\n        }\n\n        public java.lang.String getName() {\n            return name;\n        }\n\n        public com.google.javascript.rhino.Node getParentNode() {\n            return nameNode == null ? null : nameNode.getParent();\n        }\n\n        public boolean isBleedingFunction() {\n            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());\n        }\n\n        com.google.javascript.jscomp.Scope getScope() {\n            return scope;\n        }\n\n        public boolean isGlobal() {\n            return scope.isGlobal();\n        }\n\n        public boolean isLocal() {\n            return scope.isLocal();\n        }\n\n        boolean isExtern() {\n            return (input == null) || input.isExtern();\n        }\n\n        public boolean isConst() {\n            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);\n        }\n\n        public boolean isDefine() {\n            return isDefine;\n        }\n\n        public com.google.javascript.rhino.Node getInitialValue() {\n            com.google.javascript.rhino.Node parent = getParentNode();\n            int pType = parent.getType();\n            if (pType == com.google.javascript.rhino.Token.FUNCTION) {\n                return parent;\n            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {\n                return parent.getLastChild();\n            } else if (pType == com.google.javascript.rhino.Token.VAR) {\n                return nameNode.getFirstChild();\n            } else {\n                return null;\n            }\n        }\n\n        public com.google.javascript.rhino.jstype.JSType getType() {\n            return type;\n        }\n\n        public com.google.javascript.rhino.Node getNameNode() {\n            return nameNode;\n        }\n\n        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {\n            return info;\n        }\n\n        void setType(com.google.javascript.rhino.jstype.JSType type) {\n            com.google.common.base.Preconditions.checkState(isTypeInferred());\n            this.type = type;\n        }\n\n        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {\n            if (type != null) {\n                type = type.resolve(errorReporter, scope);\n            }\n        }\n\n        public boolean isTypeInferred() {\n            return typeInferred;\n        }\n\n        public java.lang.String getInputName() {\n            if (input == null) {\n                return \"<non-file>\";\n            } else {\n                return input.getName();\n            }\n        }\n\n        public boolean isNoShadow() {\n            if ((info != null) && info.isNoShadow()) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object other) {\n            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {\n                return false;\n            }\n            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));\n            return otherVar.nameNode == nameNode;\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return nameNode.hashCode();\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return \"Scope.Var \" + name;\n        }\n    }\n\n    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {\n        Arguments(com.google.javascript.jscomp.Scope scope) {\n            super(false, \"arguments\", null, null, scope, -1, null, false, null);\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object other) {\n            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {\n                return false;\n            }\n            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));\n            return otherVar.scope.getRootNode() == scope.getRootNode();\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return java.lang.System.identityHashCode(this);\n        }\n    }\n\n    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {\n        com.google.common.base.Preconditions.checkNotNull(parent);\n        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);\n        this.parent = parent;\n        this.rootNode = rootNode;\n        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();\n        if ((nodeType != null) && (nodeType instanceof com.google.javascript.rhino.jstype.FunctionType)) {\n            thisType = ((com.google.javascript.rhino.jstype.FunctionType) (nodeType)).getTypeOfThis();\n        } else {\n            thisType = parent.thisType;\n        }\n        this.isBottom = false;\n        this.depth = parent.depth + 1;\n    }\n\n    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {\n        this.parent = null;\n        this.rootNode = rootNode;\n        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.jscomp.GLOBAL_THIS);\n        this.isBottom = false;\n        this.depth = 0;\n    }\n\n    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {\n        this.parent = null;\n        this.rootNode = rootNode;\n        this.thisType = thisType;\n        this.isBottom = true;\n        this.depth = 0;\n    }\n\n    int getDepth() {\n        return depth;\n    }\n\n    boolean isBottom() {\n        return isBottom;\n    }\n\n    public com.google.javascript.rhino.Node getRootNode() {\n        return rootNode;\n    }\n\n    public com.google.javascript.jscomp.Scope getParent() {\n        return parent;\n    }\n\n    com.google.javascript.jscomp.Scope getGlobalScope() {\n        com.google.javascript.jscomp.Scope result = this;\n        while (result.getParent() != null) {\n            result = result.getParent();\n        } \n        return result;\n    }\n\n    @java.lang.Override\n    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {\n        return parent;\n    }\n\n    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {\n        return thisType;\n    }\n\n    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {\n        return declare(name, nameNode, type, input, true);\n    }\n\n    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {\n        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));\n        com.google.common.base.Preconditions.checkState(vars.get(name) == null);\n        com.google.javascript.rhino.JSDocInfo info = com.google.javascript.jscomp.NodeUtil.getInfoForNameNode(nameNode);\n        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);\n        vars.put(name, var);\n        return var;\n    }\n\n    void undeclare(com.google.javascript.jscomp.Scope.Var var) {\n        com.google.common.base.Preconditions.checkState(var.scope == this);\n        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);\n        vars.remove(var.name);\n    }\n\n    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {\n        return getVar(name);\n    }\n\n    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {\n        return vars.get(name);\n    }\n\n    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {\n        com.google.javascript.jscomp.Scope.Var var = vars.get(name);\n        if (var != null) {\n            return var;\n        } else if (parent != null) {\n            return parent.getVar(name);\n        } else {\n            return null;\n        }\n    }\n\n    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {\n        if (arguments == null) {\n            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);\n        }\n        return arguments;\n    }\n\n    public boolean isDeclared(java.lang.String name, boolean recurse) {\n        com.google.javascript.jscomp.Scope scope = this;\n        if (scope.vars.containsKey(name)) {\n            return true;\n        }\n        if ((scope.parent != null) && recurse) {\n            return scope.parent.isDeclared(name, recurse);\n        }\n        return false;\n    }\n\n    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {\n        return vars.values().iterator();\n    }\n\n    public int getVarCount() {\n        return vars.size();\n    }\n\n    public boolean isGlobal() {\n        return parent == null;\n    }\n\n    public boolean isLocal() {\n        return !isGlobal();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "Scope"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "referenceInfo.isAssignedOnceInLifetime()",
            "dst_parent": "((!staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "referenceInfo.isWellDefined()",
            "src_parent": "(((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined())",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap)",
            "src_parent": "{\n    boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n    for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {\n        com.google.javascript.jscomp.Scope.Var v = it.next();\n        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);\n        if ((referenceInfo == null) || isVarInlineForbidden(v)) {\n            continue;\n        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReferenceForConstants();\n            com.google.javascript.rhino.Node value = init.getAssignedValue();\n            inlineDeclaredConstant(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (mode == com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {\n            continue;\n        } else {\n            inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "maybeModifiedArguments",
            "src_parent": "inlineNonConstants(v, referenceInfo, maybeModifiedArguments)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope scope, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n    if (scope.isLocal()) {\n        com.google.javascript.jscomp.Scope.Var arguments = scope.getArgumentsVar();\n        com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refs = referenceMap.get(arguments);\n        if ((refs != null) && (!refs.references.isEmpty())) {\n            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs.references) {\n                com.google.javascript.rhino.Node refNode = ref.getNameNode();\n                com.google.javascript.rhino.Node refParent = ref.getParent();\n                if (!((com.google.javascript.jscomp.NodeUtil.isGet(refParent) && (refNode == ref.getParent().getFirstChild())) && (!isLValue(refParent)))) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
            "src_parent": "private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {\n    private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();\n\n    final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineVariables.AliasCandidate> aliasCandidates = com.google.common.collect.Maps.newHashMap();\n\n    @java.lang.Override\n    public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        collectAliasCandidates(t, referenceMap);\n        doInlinesForScope(t, referenceMap);\n    }\n\n    private void collectAliasCandidates(com.google.javascript.jscomp.NodeTraversal t, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        if (mode != com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {\n            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {\n                com.google.javascript.jscomp.Scope.Var v = it.next();\n                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);\n                if ((((referenceInfo != null) && (referenceInfo.references.size() >= 2)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {\n                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();\n                    com.google.javascript.rhino.Node value = init.getAssignedValue();\n                    if ((value != null) && (value.getType() == com.google.javascript.rhino.Token.NAME)) {\n                        aliasCandidates.put(value, new com.google.javascript.jscomp.InlineVariables.AliasCandidate(v, referenceInfo));\n                    }\n                }\n            }\n        }\n    }\n\n    private void doInlinesForScope(com.google.javascript.jscomp.NodeTraversal t, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {\n            com.google.javascript.jscomp.Scope.Var v = it.next();\n            com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);\n            if ((referenceInfo == null) || isVarInlineForbidden(v)) {\n                continue;\n            } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReferenceForConstants();\n                com.google.javascript.rhino.Node value = init.getAssignedValue();\n                inlineDeclaredConstant(v, value, referenceInfo.references);\n                staleVars.add(v);\n            } else if (mode == com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {\n                continue;\n            } else {\n                inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n            }\n        }\n    }\n\n    private boolean maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope scope, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        if (scope.isLocal()) {\n            com.google.javascript.jscomp.Scope.Var arguments = scope.getArgumentsVar();\n            com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refs = referenceMap.get(arguments);\n            if ((refs != null) && (!refs.references.isEmpty())) {\n                for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs.references) {\n                    com.google.javascript.rhino.Node refNode = ref.getNameNode();\n                    com.google.javascript.rhino.Node refParent = ref.getParent();\n                    if (!((com.google.javascript.jscomp.NodeUtil.isGet(refParent) && (refNode == ref.getParent().getFirstChild())) && (!isLValue(refParent)))) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean isLValue(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node parent = n.getParent();\n        return ((parent.getType() == com.google.javascript.rhino.Token.INC) || (parent.getType() == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n));\n    }\n\n    private void inlineNonConstants(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {\n        int refCount = referenceInfo.references.size();\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();\n        int firstRefAfterInit = (declaration == init) ? 2 : 3;\n        if ((refCount > 1) && isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n            com.google.javascript.rhino.Node value;\n            if (init != null) {\n                value = init.getAssignedValue();\n            } else {\n                com.google.javascript.rhino.Node srcLocation = declaration.getNameNode();\n                value = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);\n            }\n            com.google.common.base.Preconditions.checkNotNull(value);\n            inlineWellDefinedVariable(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (refCount == firstRefAfterInit) {\n            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n            if (canInline(declaration, init, reference)) {\n                inline(v, declaration, init, reference);\n                staleVars.add(v);\n            }\n        } else if ((declaration != init) && (refCount == 2)) {\n            if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n                com.google.javascript.rhino.Node value = init.getAssignedValue();\n                com.google.common.base.Preconditions.checkNotNull(value);\n                inlineWellDefinedVariable(v, value, referenceInfo.references);\n                staleVars.add(v);\n            }\n        }\n        if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {\n            java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;\n            for (int i = 1; i < refs.size(); i++) {\n                com.google.javascript.rhino.Node nameNode = refs.get(i).getNameNode();\n                if (aliasCandidates.containsKey(nameNode)) {\n                    com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);\n                    if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {\n                        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;\n                        aliasInit = candidate.refInfo.getInitializingReference();\n                        com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();\n                        com.google.common.base.Preconditions.checkNotNull(value);\n                        inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n                        staleVars.add(candidate.alias);\n                    }\n                }\n            }\n        }\n    }\n\n    private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope scope) {\n        for (com.google.javascript.rhino.Node c = root.getFirstChild(); c != null; c = c.getNext()) {\n            blacklistVarReferencesInTree(c, scope);\n        }\n        if (root.getType() == com.google.javascript.rhino.Token.NAME) {\n            staleVars.add(scope.getVar(root.getString()));\n        }\n    }\n\n    private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {\n        return (compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);\n    }\n\n    private void inline(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        com.google.javascript.rhino.Node value = init.getAssignedValue();\n        com.google.common.base.Preconditions.checkState(value != null);\n        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(value);\n        inlineValue(v, reference, value.detachFromParent());\n        if (declaration != init) {\n            com.google.javascript.rhino.Node expressRoot = init.getGrandparent();\n            com.google.common.base.Preconditions.checkState(expressRoot.getType() == com.google.javascript.rhino.Token.EXPR_RESULT);\n            com.google.javascript.jscomp.NodeUtil.removeChild(expressRoot.getParent(), expressRoot);\n        }\n        if (!isFunctionDeclaration) {\n            removeDeclaration(declaration);\n        } else {\n            compiler.reportCodeChange();\n        }\n    }\n\n    private void inlineWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = refSet.get(0);\n        for (int i = 1; i < refSet.size(); i++) {\n            inlineValue(v, refSet.get(i), value.cloneTree());\n        }\n        removeDeclaration(decl);\n    }\n\n    private void inlineDeclaredConstant(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = null;\n        for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference r : refSet) {\n            if (r.getNameNode() == v.getNameNode()) {\n                decl = r;\n            } else {\n                inlineValue(v, r, value.cloneTree());\n            }\n        }\n        removeDeclaration(decl);\n    }\n\n    private void removeDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {\n        com.google.javascript.rhino.Node varNode = declaration.getParent();\n        varNode.removeChild(declaration.getNameNode());\n        if (!varNode.hasChildren()) {\n            com.google.common.base.Preconditions.checkState(varNode.getType() == com.google.javascript.rhino.Token.VAR);\n            com.google.javascript.rhino.Node grandparent = declaration.getGrandparent();\n            com.google.javascript.jscomp.NodeUtil.removeChild(grandparent, varNode);\n        }\n        compiler.reportCodeChange();\n    }\n\n    private void inlineValue(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, com.google.javascript.rhino.Node value) {\n        if (ref.isSimpleAssignmentToName()) {\n            ref.getGrandparent().replaceChild(ref.getParent(), value);\n        } else {\n            ref.getParent().replaceChild(ref.getNameNode(), value);\n        }\n        blacklistVarReferencesInTree(value, v.scope);\n        compiler.reportCodeChange();\n    }\n\n    private boolean isInlineableDeclaredConstant(com.google.javascript.jscomp.Scope.Var var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {\n        if (!identifyConstants.apply(var)) {\n            return false;\n        }\n        if (!refInfo.isAssignedOnceInLifetime()) {\n            return false;\n        }\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = refInfo.getInitializingReferenceForConstants();\n        if (init == null) {\n            return false;\n        }\n        com.google.javascript.rhino.Node value = init.getAssignedValue();\n        if (value == null) {\n            return false;\n        }\n        if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {\n            return false;\n        }\n        return (value.getType() != com.google.javascript.rhino.Token.STRING) || isStringWorthInlining(var, refInfo.references);\n    }\n\n    private boolean isStringWorthInlining(com.google.javascript.jscomp.Scope.Var var, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {\n        if ((!inlineAllStrings) && (!var.isDefine())) {\n            int len = var.getInitialValue().getString().length() + \"''\".length();\n            int noInlineBytes = (\"var xx=;\".length() + len) + (4 * (refs.size() - 1));\n            int inlineBytes = (len - 1) * (refs.size() - 1);\n            return noInlineBytes >= inlineBytes;\n        }\n        return true;\n    }\n\n    private boolean canInline(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        if (((!isValidDeclaration(declaration)) || (!isValidInitialization(initialization))) || (!isValidReference(reference))) {\n            return false;\n        }\n        if ((declaration != initialization) && (initialization.getGrandparent().getType() != com.google.javascript.rhino.Token.EXPR_RESULT)) {\n            return false;\n        }\n        if ((declaration.getBasicBlock() != initialization.getBasicBlock()) || (declaration.getBasicBlock() != reference.getBasicBlock())) {\n            return false;\n        }\n        com.google.javascript.rhino.Node value = initialization.getAssignedValue();\n        com.google.common.base.Preconditions.checkState(value != null);\n        if (((value.getType() == com.google.javascript.rhino.Token.GETPROP) && (reference.getParent().getType() == com.google.javascript.rhino.Token.CALL)) && (reference.getParent().getFirstChild() == reference.getNameNode())) {\n            return false;\n        }\n        if (value.getType() == com.google.javascript.rhino.Token.FUNCTION) {\n            com.google.javascript.rhino.Node callNode = reference.getParent();\n            if (reference.getParent().getType() == com.google.javascript.rhino.Token.CALL) {\n                com.google.javascript.jscomp.CodingConvention.SubclassRelationship relationship = compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n                if (relationship != null) {\n                    return false;\n                }\n            }\n        }\n        return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n    }\n\n    private boolean canMoveAggressively(com.google.javascript.rhino.Node value) {\n        return com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true) || (value.getType() == com.google.javascript.rhino.Token.FUNCTION);\n    }\n\n    private boolean canMoveModerately(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        java.util.Iterator<com.google.javascript.rhino.Node> it;\n        if (initialization.getParent().getType() == com.google.javascript.rhino.Token.VAR) {\n            it = NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n        } else if (initialization.getParent().getType() == com.google.javascript.rhino.Token.ASSIGN) {\n            com.google.common.base.Preconditions.checkState(initialization.getGrandparent().getType() == com.google.javascript.rhino.Token.EXPR_RESULT);\n            it = NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n        } else {\n            throw new java.lang.IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n        }\n        com.google.javascript.rhino.Node targetName = reference.getNameNode();\n        while (it.hasNext()) {\n            com.google.javascript.rhino.Node curNode = it.next();\n            if (curNode == targetName) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean isValidDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {\n        return ((declaration.getParent().getType() == com.google.javascript.rhino.Token.VAR) && (declaration.getGrandparent().getType() != com.google.javascript.rhino.Token.FOR)) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(declaration.getParent());\n    }\n\n    private boolean isValidInitialization(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization) {\n        if (initialization == null) {\n            return false;\n        } else if (initialization.isDeclaration()) {\n            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(initialization.getParent()) || (initialization.getNameNode().getFirstChild() != null);\n        } else {\n            com.google.javascript.rhino.Node parent = initialization.getParent();\n            com.google.common.base.Preconditions.checkState((parent.getType() == com.google.javascript.rhino.Token.ASSIGN) && (parent.getFirstChild() == initialization.getNameNode()));\n            return true;\n        }\n    }\n\n    private boolean isValidReference(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        return (!reference.isDeclaration()) && (!reference.isLvalue());\n    }\n\n    private boolean isImmutableAndWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {\n        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet = refInfo.references;\n        int startingReadRef = 1;\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refDecl = refSet.get(0);\n        if (!isValidDeclaration(refDecl)) {\n            return false;\n        }\n        boolean isNeverAssigned = refInfo.isNeverAssigned();\n        if (!isNeverAssigned) {\n            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refInit = refInfo.getInitializingReference();\n            if (!isValidInitialization(refInit)) {\n                return false;\n            }\n            if (refDecl != refInit) {\n                com.google.common.base.Preconditions.checkState(refInit == refSet.get(1));\n                startingReadRef = 2;\n            }\n            if (!refInfo.isWellDefined()) {\n                return false;\n            }\n            com.google.javascript.rhino.Node value = refInit.getAssignedValue();\n            com.google.common.base.Preconditions.checkNotNull(value);\n            boolean isImmutableValueWorthInlining = com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) && ((value.getType() != com.google.javascript.rhino.Token.STRING) || isStringWorthInlining(v, refInfo.references));\n            boolean isInlinableThisAlias = (value.getType() == com.google.javascript.rhino.Token.THIS) && (!refInfo.isEscaped());\n            if ((!isImmutableValueWorthInlining) && (!isInlinableThisAlias)) {\n                return false;\n            }\n        }\n        for (int i = startingReadRef; i < refSet.size(); i++) {\n            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = refSet.get(i);\n            if (!isValidReference(ref)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean isLValue(com.google.javascript.rhino.Node n) {\n    com.google.javascript.rhino.Node parent = n.getParent();\n    return ((parent.getType() == com.google.javascript.rhino.Token.INC) || (parent.getType() == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n));\n}",
            "src_parent": "private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {\n    private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();\n\n    final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineVariables.AliasCandidate> aliasCandidates = com.google.common.collect.Maps.newHashMap();\n\n    @java.lang.Override\n    public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        collectAliasCandidates(t, referenceMap);\n        doInlinesForScope(t, referenceMap);\n    }\n\n    private void collectAliasCandidates(com.google.javascript.jscomp.NodeTraversal t, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        if (mode != com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {\n            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {\n                com.google.javascript.jscomp.Scope.Var v = it.next();\n                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);\n                if ((((referenceInfo != null) && (referenceInfo.references.size() >= 2)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {\n                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();\n                    com.google.javascript.rhino.Node value = init.getAssignedValue();\n                    if ((value != null) && (value.getType() == com.google.javascript.rhino.Token.NAME)) {\n                        aliasCandidates.put(value, new com.google.javascript.jscomp.InlineVariables.AliasCandidate(v, referenceInfo));\n                    }\n                }\n            }\n        }\n    }\n\n    private void doInlinesForScope(com.google.javascript.jscomp.NodeTraversal t, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);\n        for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {\n            com.google.javascript.jscomp.Scope.Var v = it.next();\n            com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.get(v);\n            if ((referenceInfo == null) || isVarInlineForbidden(v)) {\n                continue;\n            } else if (isInlineableDeclaredConstant(v, referenceInfo)) {\n                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReferenceForConstants();\n                com.google.javascript.rhino.Node value = init.getAssignedValue();\n                inlineDeclaredConstant(v, value, referenceInfo.references);\n                staleVars.add(v);\n            } else if (mode == com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {\n                continue;\n            } else {\n                inlineNonConstants(v, referenceInfo, maybeModifiedArguments);\n            }\n        }\n    }\n\n    private boolean maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope scope, java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> referenceMap) {\n        if (scope.isLocal()) {\n            com.google.javascript.jscomp.Scope.Var arguments = scope.getArgumentsVar();\n            com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refs = referenceMap.get(arguments);\n            if ((refs != null) && (!refs.references.isEmpty())) {\n                for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs.references) {\n                    com.google.javascript.rhino.Node refNode = ref.getNameNode();\n                    com.google.javascript.rhino.Node refParent = ref.getParent();\n                    if (!((com.google.javascript.jscomp.NodeUtil.isGet(refParent) && (refNode == ref.getParent().getFirstChild())) && (!isLValue(refParent)))) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private boolean isLValue(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node parent = n.getParent();\n        return ((parent.getType() == com.google.javascript.rhino.Token.INC) || (parent.getType() == com.google.javascript.rhino.Token.DEC)) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n));\n    }\n\n    private void inlineNonConstants(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {\n        int refCount = referenceInfo.references.size();\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();\n        int firstRefAfterInit = (declaration == init) ? 2 : 3;\n        if ((refCount > 1) && isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n            com.google.javascript.rhino.Node value;\n            if (init != null) {\n                value = init.getAssignedValue();\n            } else {\n                com.google.javascript.rhino.Node srcLocation = declaration.getNameNode();\n                value = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);\n            }\n            com.google.common.base.Preconditions.checkNotNull(value);\n            inlineWellDefinedVariable(v, value, referenceInfo.references);\n            staleVars.add(v);\n        } else if (refCount == firstRefAfterInit) {\n            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n            if (canInline(declaration, init, reference)) {\n                inline(v, declaration, init, reference);\n                staleVars.add(v);\n            }\n        } else if ((declaration != init) && (refCount == 2)) {\n            if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n                com.google.javascript.rhino.Node value = init.getAssignedValue();\n                com.google.common.base.Preconditions.checkNotNull(value);\n                inlineWellDefinedVariable(v, value, referenceInfo.references);\n                staleVars.add(v);\n            }\n        }\n        if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {\n            java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;\n            for (int i = 1; i < refs.size(); i++) {\n                com.google.javascript.rhino.Node nameNode = refs.get(i).getNameNode();\n                if (aliasCandidates.containsKey(nameNode)) {\n                    com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);\n                    if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {\n                        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;\n                        aliasInit = candidate.refInfo.getInitializingReference();\n                        com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();\n                        com.google.common.base.Preconditions.checkNotNull(value);\n                        inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n                        staleVars.add(candidate.alias);\n                    }\n                }\n            }\n        }\n    }\n\n    private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope scope) {\n        for (com.google.javascript.rhino.Node c = root.getFirstChild(); c != null; c = c.getNext()) {\n            blacklistVarReferencesInTree(c, scope);\n        }\n        if (root.getType() == com.google.javascript.rhino.Token.NAME) {\n            staleVars.add(scope.getVar(root.getString()));\n        }\n    }\n\n    private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {\n        return (compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);\n    }\n\n    private void inline(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        com.google.javascript.rhino.Node value = init.getAssignedValue();\n        com.google.common.base.Preconditions.checkState(value != null);\n        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(value);\n        inlineValue(v, reference, value.detachFromParent());\n        if (declaration != init) {\n            com.google.javascript.rhino.Node expressRoot = init.getGrandparent();\n            com.google.common.base.Preconditions.checkState(expressRoot.getType() == com.google.javascript.rhino.Token.EXPR_RESULT);\n            com.google.javascript.jscomp.NodeUtil.removeChild(expressRoot.getParent(), expressRoot);\n        }\n        if (!isFunctionDeclaration) {\n            removeDeclaration(declaration);\n        } else {\n            compiler.reportCodeChange();\n        }\n    }\n\n    private void inlineWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = refSet.get(0);\n        for (int i = 1; i < refSet.size(); i++) {\n            inlineValue(v, refSet.get(i), value.cloneTree());\n        }\n        removeDeclaration(decl);\n    }\n\n    private void inlineDeclaredConstant(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = null;\n        for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference r : refSet) {\n            if (r.getNameNode() == v.getNameNode()) {\n                decl = r;\n            } else {\n                inlineValue(v, r, value.cloneTree());\n            }\n        }\n        removeDeclaration(decl);\n    }\n\n    private void removeDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {\n        com.google.javascript.rhino.Node varNode = declaration.getParent();\n        varNode.removeChild(declaration.getNameNode());\n        if (!varNode.hasChildren()) {\n            com.google.common.base.Preconditions.checkState(varNode.getType() == com.google.javascript.rhino.Token.VAR);\n            com.google.javascript.rhino.Node grandparent = declaration.getGrandparent();\n            com.google.javascript.jscomp.NodeUtil.removeChild(grandparent, varNode);\n        }\n        compiler.reportCodeChange();\n    }\n\n    private void inlineValue(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, com.google.javascript.rhino.Node value) {\n        if (ref.isSimpleAssignmentToName()) {\n            ref.getGrandparent().replaceChild(ref.getParent(), value);\n        } else {\n            ref.getParent().replaceChild(ref.getNameNode(), value);\n        }\n        blacklistVarReferencesInTree(value, v.scope);\n        compiler.reportCodeChange();\n    }\n\n    private boolean isInlineableDeclaredConstant(com.google.javascript.jscomp.Scope.Var var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {\n        if (!identifyConstants.apply(var)) {\n            return false;\n        }\n        if (!refInfo.isAssignedOnceInLifetime()) {\n            return false;\n        }\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = refInfo.getInitializingReferenceForConstants();\n        if (init == null) {\n            return false;\n        }\n        com.google.javascript.rhino.Node value = init.getAssignedValue();\n        if (value == null) {\n            return false;\n        }\n        if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {\n            return false;\n        }\n        return (value.getType() != com.google.javascript.rhino.Token.STRING) || isStringWorthInlining(var, refInfo.references);\n    }\n\n    private boolean isStringWorthInlining(com.google.javascript.jscomp.Scope.Var var, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {\n        if ((!inlineAllStrings) && (!var.isDefine())) {\n            int len = var.getInitialValue().getString().length() + \"''\".length();\n            int noInlineBytes = (\"var xx=;\".length() + len) + (4 * (refs.size() - 1));\n            int inlineBytes = (len - 1) * (refs.size() - 1);\n            return noInlineBytes >= inlineBytes;\n        }\n        return true;\n    }\n\n    private boolean canInline(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        if (((!isValidDeclaration(declaration)) || (!isValidInitialization(initialization))) || (!isValidReference(reference))) {\n            return false;\n        }\n        if ((declaration != initialization) && (initialization.getGrandparent().getType() != com.google.javascript.rhino.Token.EXPR_RESULT)) {\n            return false;\n        }\n        if ((declaration.getBasicBlock() != initialization.getBasicBlock()) || (declaration.getBasicBlock() != reference.getBasicBlock())) {\n            return false;\n        }\n        com.google.javascript.rhino.Node value = initialization.getAssignedValue();\n        com.google.common.base.Preconditions.checkState(value != null);\n        if (((value.getType() == com.google.javascript.rhino.Token.GETPROP) && (reference.getParent().getType() == com.google.javascript.rhino.Token.CALL)) && (reference.getParent().getFirstChild() == reference.getNameNode())) {\n            return false;\n        }\n        if (value.getType() == com.google.javascript.rhino.Token.FUNCTION) {\n            com.google.javascript.rhino.Node callNode = reference.getParent();\n            if (reference.getParent().getType() == com.google.javascript.rhino.Token.CALL) {\n                com.google.javascript.jscomp.CodingConvention.SubclassRelationship relationship = compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n                if (relationship != null) {\n                    return false;\n                }\n            }\n        }\n        return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n    }\n\n    private boolean canMoveAggressively(com.google.javascript.rhino.Node value) {\n        return com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true) || (value.getType() == com.google.javascript.rhino.Token.FUNCTION);\n    }\n\n    private boolean canMoveModerately(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        java.util.Iterator<com.google.javascript.rhino.Node> it;\n        if (initialization.getParent().getType() == com.google.javascript.rhino.Token.VAR) {\n            it = NodeIterators.LocalVarMotion.forVar(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent());\n        } else if (initialization.getParent().getType() == com.google.javascript.rhino.Token.ASSIGN) {\n            com.google.common.base.Preconditions.checkState(initialization.getGrandparent().getType() == com.google.javascript.rhino.Token.EXPR_RESULT);\n            it = NodeIterators.LocalVarMotion.forAssign(initialization.getNameNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());\n        } else {\n            throw new java.lang.IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree());\n        }\n        com.google.javascript.rhino.Node targetName = reference.getNameNode();\n        while (it.hasNext()) {\n            com.google.javascript.rhino.Node curNode = it.next();\n            if (curNode == targetName) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    private boolean isValidDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {\n        return ((declaration.getParent().getType() == com.google.javascript.rhino.Token.VAR) && (declaration.getGrandparent().getType() != com.google.javascript.rhino.Token.FOR)) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(declaration.getParent());\n    }\n\n    private boolean isValidInitialization(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization) {\n        if (initialization == null) {\n            return false;\n        } else if (initialization.isDeclaration()) {\n            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(initialization.getParent()) || (initialization.getNameNode().getFirstChild() != null);\n        } else {\n            com.google.javascript.rhino.Node parent = initialization.getParent();\n            com.google.common.base.Preconditions.checkState((parent.getType() == com.google.javascript.rhino.Token.ASSIGN) && (parent.getFirstChild() == initialization.getNameNode()));\n            return true;\n        }\n    }\n\n    private boolean isValidReference(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {\n        return (!reference.isDeclaration()) && (!reference.isLvalue());\n    }\n\n    private boolean isImmutableAndWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {\n        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet = refInfo.references;\n        int startingReadRef = 1;\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refDecl = refSet.get(0);\n        if (!isValidDeclaration(refDecl)) {\n            return false;\n        }\n        boolean isNeverAssigned = refInfo.isNeverAssigned();\n        if (!isNeverAssigned) {\n            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refInit = refInfo.getInitializingReference();\n            if (!isValidInitialization(refInit)) {\n                return false;\n            }\n            if (refDecl != refInit) {\n                com.google.common.base.Preconditions.checkState(refInit == refSet.get(1));\n                startingReadRef = 2;\n            }\n            if (!refInfo.isWellDefined()) {\n                return false;\n            }\n            com.google.javascript.rhino.Node value = refInit.getAssignedValue();\n            com.google.common.base.Preconditions.checkNotNull(value);\n            boolean isImmutableValueWorthInlining = com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) && ((value.getType() != com.google.javascript.rhino.Token.STRING) || isStringWorthInlining(v, refInfo.references));\n            boolean isInlinableThisAlias = (value.getType() == com.google.javascript.rhino.Token.THIS) && (!refInfo.isEscaped());\n            if ((!isImmutableValueWorthInlining) && (!isInlinableThisAlias)) {\n                return false;\n            }\n        }\n        for (int i = startingReadRef; i < refSet.size(); i++) {\n            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = refSet.get(i);\n            if (!isValidReference(ref)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean maybeModifiedArguments",
            "src_parent": "private void inlineNonConstants(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {\n    int refCount = referenceInfo.references.size();\n    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);\n    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();\n    int firstRefAfterInit = (declaration == init) ? 2 : 3;\n    if ((refCount > 1) && isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        com.google.javascript.rhino.Node value;\n        if (init != null) {\n            value = init.getAssignedValue();\n        } else {\n            com.google.javascript.rhino.Node srcLocation = declaration.getNameNode();\n            value = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);\n        }\n        com.google.common.base.Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n    } else if (refCount == firstRefAfterInit) {\n        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);\n        if (canInline(declaration, init, reference)) {\n            inline(v, declaration, init, reference);\n            staleVars.add(v);\n        }\n    } else if ((declaration != init) && (refCount == 2)) {\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n            com.google.javascript.rhino.Node value = init.getAssignedValue();\n            com.google.common.base.Preconditions.checkNotNull(value);\n            inlineWellDefinedVariable(v, value, referenceInfo.references);\n            staleVars.add(v);\n        }\n    }\n    if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {\n        java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;\n        for (int i = 1; i < refs.size(); i++) {\n            com.google.javascript.rhino.Node nameNode = refs.get(i).getNameNode();\n            if (aliasCandidates.containsKey(nameNode)) {\n                com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);\n                if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {\n                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;\n                    aliasInit = candidate.refInfo.getInitializingReference();\n                    com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();\n                    com.google.common.base.Preconditions.checkNotNull(value);\n                    inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n                    staleVars.add(candidate.alias);\n                }\n            }\n        }\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(!maybeModifiedArguments)",
            "src_parent": "((!maybeModifiedArguments) && (!staleVars.contains(v)))",
            "src_parent_type": "BinaryOperator",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()",
            "src_parent": "if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {\n    java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) {\n        com.google.javascript.rhino.Node nameNode = refs.get(i).getNameNode();\n        if (aliasCandidates.containsKey(nameNode)) {\n            com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);\n            if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {\n                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;\n                aliasInit = candidate.refInfo.getInitializingReference();\n                com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();\n                com.google.common.base.Preconditions.checkNotNull(value);\n                inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n                staleVars.add(candidate.alias);\n            }\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "referenceInfo.isWellDefined()",
            "src_parent": "((!staleVars.contains(v)) && referenceInfo.isWellDefined())",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((!staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()",
            "dst_parent": "if (((!staleVars.contains(v)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {\n    java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;\n    for (int i = 1; i < refs.size(); i++) {\n        com.google.javascript.rhino.Node nameNode = refs.get(i).getNameNode();\n        if (aliasCandidates.containsKey(nameNode)) {\n            com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);\n            if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {\n                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;\n                aliasInit = candidate.refInfo.getInitializingReference();\n                com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();\n                com.google.common.base.Preconditions.checkNotNull(value);\n                inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);\n                staleVars.add(candidate.alias);\n            }\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined())",
            "src_parent": "(((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "InlineVariables"
    }
  ],
  "id": "Closure_155"
}