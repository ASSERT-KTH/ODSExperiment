{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_findRootDeserializer(ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE)",
            "dst_parent": "com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findRootDeserializer(ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_findTreeDeserializer(ctxt)",
            "src_parent": "com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findTreeDeserializer(ctxt)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _findTreeDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt) throws com.fasterxml.jackson.databind.JsonMappingException {\n    com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _rootDeserializers.get(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n    if (deser == null) {\n        deser = ctxt.findRootValueDeserializer(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n        if (deser == null) {\n            throw new com.fasterxml.jackson.databind.JsonMappingException(\"Can not find a deserializer for type \" + com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n        }\n        _rootDeserializers.put(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, deser);\n    }\n    return deser;\n}",
            "src_parent": "public class ObjectReader extends com.fasterxml.jackson.core.ObjectCodec implements com.fasterxml.jackson.core.Versioned , java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final com.fasterxml.jackson.databind.JavaType JSON_NODE_TYPE = com.fasterxml.jackson.databind.type.SimpleType.constructUnsafe(com.fasterxml.jackson.databind.JsonNode.class);\n\n    protected final com.fasterxml.jackson.databind.DeserializationConfig _config;\n\n    protected final com.fasterxml.jackson.databind.deser.DefaultDeserializationContext _context;\n\n    protected final com.fasterxml.jackson.core.JsonFactory _parserFactory;\n\n    protected final boolean _unwrapRoot;\n\n    protected final com.fasterxml.jackson.databind.JavaType _valueType;\n\n    protected final com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _rootDeserializer;\n\n    protected final java.lang.Object _valueToUpdate;\n\n    protected final com.fasterxml.jackson.core.FormatSchema _schema;\n\n    protected final com.fasterxml.jackson.databind.InjectableValues _injectableValues;\n\n    protected final com.fasterxml.jackson.databind.deser.DataFormatReaders _dataFormatReaders;\n\n    protected final java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>> _rootDeserializers;\n\n    protected final com.fasterxml.jackson.databind.util.RootNameLookup _rootNames;\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectMapper mapper, com.fasterxml.jackson.databind.DeserializationConfig config) {\n        this(mapper, config, null, null, null, null);\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectMapper mapper, com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.JavaType valueType, java.lang.Object valueToUpdate, com.fasterxml.jackson.core.FormatSchema schema, com.fasterxml.jackson.databind.InjectableValues injectableValues) {\n        _config = config;\n        _context = mapper._deserializationContext;\n        _rootDeserializers = mapper._rootDeserializers;\n        _parserFactory = mapper._jsonFactory;\n        _rootNames = mapper._rootNames;\n        _valueType = valueType;\n        _valueToUpdate = valueToUpdate;\n        if ((valueToUpdate != null) && valueType.isArrayType()) {\n            throw new java.lang.IllegalArgumentException(\"Can not update an array value\");\n        }\n        _schema = schema;\n        _injectableValues = injectableValues;\n        _unwrapRoot = config.useRootWrapping();\n        _rootDeserializer = _prefetchRootDeserializer(config, valueType);\n        _dataFormatReaders = null;\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> rootDeser, java.lang.Object valueToUpdate, com.fasterxml.jackson.core.FormatSchema schema, com.fasterxml.jackson.databind.InjectableValues injectableValues, com.fasterxml.jackson.databind.deser.DataFormatReaders dataFormatReaders) {\n        _config = config;\n        _context = base._context;\n        _rootDeserializers = base._rootDeserializers;\n        _parserFactory = base._parserFactory;\n        _rootNames = base._rootNames;\n        _valueType = valueType;\n        _rootDeserializer = rootDeser;\n        _valueToUpdate = valueToUpdate;\n        if ((valueToUpdate != null) && valueType.isArrayType()) {\n            throw new java.lang.IllegalArgumentException(\"Can not update an array value\");\n        }\n        _schema = schema;\n        _injectableValues = injectableValues;\n        _unwrapRoot = config.useRootWrapping();\n        _dataFormatReaders = dataFormatReaders;\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config) {\n        _config = config;\n        _context = base._context;\n        _rootDeserializers = base._rootDeserializers;\n        _parserFactory = base._parserFactory;\n        _rootNames = base._rootNames;\n        _valueType = base._valueType;\n        _rootDeserializer = base._rootDeserializer;\n        _valueToUpdate = base._valueToUpdate;\n        _schema = base._schema;\n        _injectableValues = base._injectableValues;\n        _unwrapRoot = config.useRootWrapping();\n        _dataFormatReaders = base._dataFormatReaders;\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.core.JsonFactory f) {\n        _config = base._config.with(com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering());\n        _context = base._context;\n        _rootDeserializers = base._rootDeserializers;\n        _parserFactory = f;\n        _rootNames = base._rootNames;\n        _valueType = base._valueType;\n        _rootDeserializer = base._rootDeserializer;\n        _valueToUpdate = base._valueToUpdate;\n        _schema = base._schema;\n        _injectableValues = base._injectableValues;\n        _unwrapRoot = base._unwrapRoot;\n        _dataFormatReaders = base._dataFormatReaders;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _new(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.core.JsonFactory f) {\n        return new com.fasterxml.jackson.databind.ObjectReader(base, f);\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _new(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config) {\n        return new com.fasterxml.jackson.databind.ObjectReader(base, config);\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _new(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> rootDeser, java.lang.Object valueToUpdate, com.fasterxml.jackson.core.FormatSchema schema, com.fasterxml.jackson.databind.InjectableValues injectableValues, com.fasterxml.jackson.databind.deser.DataFormatReaders dataFormatReaders) {\n        return new com.fasterxml.jackson.databind.ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders);\n    }\n\n    protected <T> com.fasterxml.jackson.databind.MappingIterator<T> _newIterator(com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.core.JsonParser parser, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JsonDeserializer<?> deser, boolean parserManaged, java.lang.Object valueToUpdate) {\n        return new com.fasterxml.jackson.databind.MappingIterator<T>(valueType, parser, ctxt, deser, parserManaged, valueToUpdate);\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _initForReading(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        if (_schema != null) {\n            p.setSchema(_schema);\n        }\n        _config.initialize(p);\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        if (t == null) {\n            t = p.nextToken();\n            if (t == null) {\n                throw com.fasterxml.jackson.databind.JsonMappingException.from(p, \"No content to map due to end-of-input\");\n            }\n        }\n        return t;\n    }\n\n    protected void _initForMultiRead(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        if (_schema != null) {\n            p.setSchema(_schema);\n        }\n        _config.initialize(p);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.DeserializationFeature feature) {\n        return _with(_config.with(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.DeserializationFeature first, com.fasterxml.jackson.databind.DeserializationFeature... other) {\n        return _with(_config.with(first, other));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFeatures(com.fasterxml.jackson.databind.DeserializationFeature... features) {\n        return _with(_config.withFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader without(com.fasterxml.jackson.databind.DeserializationFeature feature) {\n        return _with(_config.without(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader without(com.fasterxml.jackson.databind.DeserializationFeature first, com.fasterxml.jackson.databind.DeserializationFeature... other) {\n        return _with(_config.without(first, other));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutFeatures(com.fasterxml.jackson.databind.DeserializationFeature... features) {\n        return _with(_config.withoutFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.JsonParser.Feature feature) {\n        return _with(_config.with(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFeatures(com.fasterxml.jackson.core.JsonParser.Feature... features) {\n        return _with(_config.withFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader without(com.fasterxml.jackson.core.JsonParser.Feature feature) {\n        return _with(_config.without(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutFeatures(com.fasterxml.jackson.core.JsonParser.Feature... features) {\n        return _with(_config.withoutFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.DeserializationConfig config) {\n        return _with(config);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.InjectableValues injectableValues) {\n        if (_injectableValues == injectableValues) {\n            return this;\n        }\n        return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, injectableValues, _dataFormatReaders);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.node.JsonNodeFactory f) {\n        return _with(_config.with(f));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.JsonFactory f) {\n        if (f == _parserFactory) {\n            return this;\n        }\n        com.fasterxml.jackson.databind.ObjectReader r = _new(this, f);\n        if (f.getCodec() == null) {\n            f.setCodec(r);\n        }\n        return r;\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withRootName(java.lang.String rootName) {\n        return _with(_config.withRootName(rootName));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.FormatSchema schema) {\n        if (_schema == schema) {\n            return this;\n        }\n        _verifySchemaType(schema);\n        return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader forType(com.fasterxml.jackson.databind.JavaType valueType) {\n        if ((valueType != null) && valueType.equals(_valueType)) {\n            return this;\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> rootDeser = _prefetchRootDeserializer(_config, valueType);\n        com.fasterxml.jackson.databind.deser.DataFormatReaders det = _dataFormatReaders;\n        if (det != null) {\n            det = det.withType(valueType);\n        }\n        return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader forType(java.lang.Class<?> valueType) {\n        return forType(_config.constructType(valueType));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader forType(com.fasterxml.jackson.core.type.TypeReference<?> valueTypeRef) {\n        return forType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(com.fasterxml.jackson.databind.JavaType valueType) {\n        return forType(valueType);\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(java.lang.Class<?> valueType) {\n        return forType(_config.constructType(valueType));\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(java.lang.reflect.Type valueType) {\n        return forType(_config.getTypeFactory().constructType(valueType));\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(com.fasterxml.jackson.core.type.TypeReference<?> valueTypeRef) {\n        return forType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withValueToUpdate(java.lang.Object value) {\n        if (value == _valueToUpdate) {\n            return this;\n        }\n        if (value == null) {\n            throw new java.lang.IllegalArgumentException(\"cat not update null value\");\n        }\n        com.fasterxml.jackson.databind.JavaType t;\n        if (_valueType == null) {\n            t = _config.constructType(value.getClass());\n        } else {\n            t = _valueType;\n        }\n        return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withView(java.lang.Class<?> activeView) {\n        return _with(_config.withView(activeView));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(java.util.Locale l) {\n        return _with(_config.with(l));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(java.util.TimeZone tz) {\n        return _with(_config.with(tz));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler h) {\n        return _with(_config.withHandler(h));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.Base64Variant defaultBase64) {\n        return _with(_config.with(defaultBase64));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFormatDetection(com.fasterxml.jackson.databind.ObjectReader... readers) {\n        return withFormatDetection(new com.fasterxml.jackson.databind.deser.DataFormatReaders(readers));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFormatDetection(com.fasterxml.jackson.databind.deser.DataFormatReaders readers) {\n        return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, _injectableValues, readers);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.cfg.ContextAttributes attrs) {\n        return _with(_config.with(attrs));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withAttributes(java.util.Map<java.lang.Object, java.lang.Object> attrs) {\n        return _with(_config.withAttributes(attrs));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withAttribute(java.lang.Object key, java.lang.Object value) {\n        return _with(_config.withAttribute(key, value));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutAttribute(java.lang.Object key) {\n        return _with(_config.withoutAttribute(key));\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _with(com.fasterxml.jackson.databind.DeserializationConfig newConfig) {\n        if (newConfig == _config) {\n            return this;\n        }\n        com.fasterxml.jackson.databind.ObjectReader r = _new(this, newConfig);\n        if (_dataFormatReaders != null) {\n            r = r.withFormatDetection(_dataFormatReaders.with(newConfig));\n        }\n        return r;\n    }\n\n    public boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature f) {\n        return _config.isEnabled(f);\n    }\n\n    public boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature f) {\n        return _config.isEnabled(f);\n    }\n\n    public boolean isEnabled(com.fasterxml.jackson.core.JsonParser.Feature f) {\n        return _parserFactory.isEnabled(f);\n    }\n\n    public com.fasterxml.jackson.databind.DeserializationConfig getConfig() {\n        return _config;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonFactory getFactory() {\n        return _parserFactory;\n    }\n\n    @java.lang.Deprecated\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonFactory getJsonFactory() {\n        return _parserFactory;\n    }\n\n    public com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory() {\n        return _config.getTypeFactory();\n    }\n\n    public com.fasterxml.jackson.databind.cfg.ContextAttributes getAttributes() {\n        return _config.getAttributes();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser jp) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return ((T) (_bind(jp, _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser jp, java.lang.Class<T> valueType) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return ((T) (withType(valueType).readValue(jp)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.core.type.TypeReference<?> valueTypeRef) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return ((T) (withType(valueTypeRef).readValue(jp)));\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.core.type.ResolvedType valueType) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return ((T) (withType(((com.fasterxml.jackson.databind.JavaType) (valueType))).readValue(jp)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.databind.JavaType valueType) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return ((T) (withType(valueType).readValue(jp)));\n    }\n\n    @java.lang.Override\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser jp, java.lang.Class<T> valueType) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return withType(valueType).readValues(jp);\n    }\n\n    @java.lang.Override\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.core.type.TypeReference<?> valueTypeRef) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return withType(valueTypeRef).readValues(jp);\n    }\n\n    @java.lang.Override\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.core.type.ResolvedType valueType) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return readValues(jp, ((com.fasterxml.jackson.databind.JavaType) (valueType)));\n    }\n\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.databind.JavaType valueType) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return withType(valueType).readValues(jp);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode createArrayNode() {\n        return _config.getNodeFactory().arrayNode();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode createObjectNode() {\n        return _config.getNodeFactory().objectNode();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonParser treeAsTokens(com.fasterxml.jackson.core.TreeNode n) {\n        return new com.fasterxml.jackson.databind.node.TreeTraversingParser(((com.fasterxml.jackson.databind.JsonNode) (n)), this);\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public <T extends com.fasterxml.jackson.core.TreeNode> T readTree(com.fasterxml.jackson.core.JsonParser jp) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return ((T) (_bindAsTree(jp)));\n    }\n\n    @java.lang.Override\n    public void writeTree(com.fasterxml.jackson.core.JsonGenerator jgen, com.fasterxml.jackson.core.TreeNode rootNode) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.io.InputStream src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(_dataFormatReaders.findFormat(src), false)));\n        }\n        return ((T) (_bindAndClose(_parserFactory.createParser(src), _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.io.Reader src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return ((T) (_bindAndClose(_parserFactory.createParser(src), _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.lang.String src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return ((T) (_bindAndClose(_parserFactory.createParser(src), _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(byte[] src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(src, 0, src.length)));\n        }\n        return ((T) (_bindAndClose(_parserFactory.createParser(src), _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(byte[] src, int offset, int length) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(src, offset, length)));\n        }\n        return ((T) (_bindAndClose(_parserFactory.createParser(src, offset, length), _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.io.File src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true)));\n        }\n        return ((T) (_bindAndClose(_parserFactory.createParser(src), _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.net.URL src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true)));\n        }\n        return ((T) (_bindAndClose(_parserFactory.createParser(src), _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(com.fasterxml.jackson.databind.JsonNode src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return ((T) (_bindAndClose(treeAsTokens(src), _valueToUpdate)));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(java.io.InputStream in) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndCloseAsTree(in);\n        }\n        return _bindAndCloseAsTree(_parserFactory.createParser(in));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(java.io.Reader r) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(r);\n        }\n        return _bindAndCloseAsTree(_parserFactory.createParser(r));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(java.lang.String json) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(json);\n        }\n        return _bindAndCloseAsTree(_parserFactory.createParser(json));\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(com.fasterxml.jackson.core.JsonParser jp) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(jp, _config);\n        return _newIterator(_valueType, jp, ctxt, _findRootDeserializer(ctxt, _valueType), false, _valueToUpdate);\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.io.InputStream src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n        }\n        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.io.Reader src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        com.fasterxml.jackson.core.JsonParser p = _parserFactory.createParser(src);\n        _initForMultiRead(p);\n        p.nextToken();\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p, _config);\n        return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.lang.String json) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(json);\n        }\n        com.fasterxml.jackson.core.JsonParser p = _parserFactory.createParser(json);\n        _initForMultiRead(p);\n        p.nextToken();\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p, _config);\n        return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(byte[] src, int offset, int length) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n        }\n        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n    }\n\n    public final <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(byte[] src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        return readValues(src, 0, src.length);\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.io.File src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(_inputStream(src)), false);\n        }\n        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.net.URL src) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(_inputStream(src)), true);\n        }\n        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n    }\n\n    @java.lang.Override\n    public <T> T treeToValue(com.fasterxml.jackson.core.TreeNode n, java.lang.Class<T> valueType) throws com.fasterxml.jackson.core.JsonProcessingException {\n        try {\n            return readValue(treeAsTokens(n), valueType);\n        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n            throw e;\n        } catch (java.io.IOException e) {\n            throw new java.lang.IllegalArgumentException(e.getMessage(), e);\n        }\n    }\n\n    @java.lang.Override\n    public void writeValue(com.fasterxml.jackson.core.JsonGenerator jgen, java.lang.Object value) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        throw new java.lang.UnsupportedOperationException(\"Not implemented for ObjectReader\");\n    }\n\n    protected java.lang.Object _bind(com.fasterxml.jackson.core.JsonParser jp, java.lang.Object valueToUpdate) throws java.io.IOException {\n        java.lang.Object result;\n        com.fasterxml.jackson.core.JsonToken t = _initForReading(jp);\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n            if (valueToUpdate == null) {\n                com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(jp, _config);\n                result = _findRootDeserializer(ctxt, _valueType).getNullValue();\n            } else {\n                result = valueToUpdate;\n            }\n        } else if ((t == com.fasterxml.jackson.core.JsonToken.END_ARRAY) || (t == com.fasterxml.jackson.core.JsonToken.END_OBJECT)) {\n            result = valueToUpdate;\n        } else {\n            com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(jp, _config);\n            com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findRootDeserializer(ctxt, _valueType);\n            if (_unwrapRoot) {\n                result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser);\n            } else if (valueToUpdate == null) {\n                result = deser.deserialize(jp, ctxt);\n            } else {\n                deser.deserialize(jp, ctxt, valueToUpdate);\n                result = valueToUpdate;\n            }\n        }\n        jp.clearCurrentToken();\n        return result;\n    }\n\n    protected java.lang.Object _bindAndClose(com.fasterxml.jackson.core.JsonParser jp, java.lang.Object valueToUpdate) throws java.io.IOException {\n        try {\n            java.lang.Object result;\n            com.fasterxml.jackson.core.JsonToken t = _initForReading(jp);\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n                if (valueToUpdate == null) {\n                    com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(jp, _config);\n                    result = _findRootDeserializer(ctxt, _valueType).getNullValue();\n                } else {\n                    result = valueToUpdate;\n                }\n            } else if ((t == com.fasterxml.jackson.core.JsonToken.END_ARRAY) || (t == com.fasterxml.jackson.core.JsonToken.END_OBJECT)) {\n                result = valueToUpdate;\n            } else {\n                com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(jp, _config);\n                com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findRootDeserializer(ctxt, _valueType);\n                if (_unwrapRoot) {\n                    result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser);\n                } else if (valueToUpdate == null) {\n                    result = deser.deserialize(jp, ctxt);\n                } else {\n                    deser.deserialize(jp, ctxt, valueToUpdate);\n                    result = valueToUpdate;\n                }\n            }\n            return result;\n        } finally {\n            try {\n                jp.close();\n            } catch (java.io.IOException ioe) {\n            }\n        }\n    }\n\n    protected com.fasterxml.jackson.databind.JsonNode _bindAndCloseAsTree(com.fasterxml.jackson.core.JsonParser jp) throws java.io.IOException {\n        try {\n            return _bindAsTree(jp);\n        } finally {\n            try {\n                jp.close();\n            } catch (java.io.IOException ioe) {\n            }\n        }\n    }\n\n    protected com.fasterxml.jackson.databind.JsonNode _bindAsTree(com.fasterxml.jackson.core.JsonParser jp) throws java.io.IOException {\n        com.fasterxml.jackson.databind.JsonNode result;\n        com.fasterxml.jackson.core.JsonToken t = _initForReading(jp);\n        if (((t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) || (t == com.fasterxml.jackson.core.JsonToken.END_ARRAY)) || (t == com.fasterxml.jackson.core.JsonToken.END_OBJECT)) {\n            result = com.fasterxml.jackson.databind.node.NullNode.instance;\n        } else {\n            com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(jp, _config);\n            com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findTreeDeserializer(ctxt);\n            if (_unwrapRoot) {\n                result = ((com.fasterxml.jackson.databind.JsonNode) (_unwrapAndDeserialize(jp, ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, deser)));\n            } else {\n                result = ((com.fasterxml.jackson.databind.JsonNode) (deser.deserialize(jp, ctxt)));\n            }\n        }\n        jp.clearCurrentToken();\n        return result;\n    }\n\n    protected <T> com.fasterxml.jackson.databind.MappingIterator<T> _bindAndReadValues(com.fasterxml.jackson.core.JsonParser p, java.lang.Object valueToUpdate) throws java.io.IOException {\n        _initForMultiRead(p);\n        p.nextToken();\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p, _config);\n        return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n    }\n\n    protected java.lang.Object _unwrapAndDeserialize(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType rootType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser) throws java.io.IOException {\n        java.lang.String expName = _config.getRootName();\n        if (expName == null) {\n            com.fasterxml.jackson.databind.PropertyName pname = _rootNames.findRootName(rootType, _config);\n            expName = pname.getSimpleName();\n        }\n        if (jp.getCurrentToken() != com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n            throw com.fasterxml.jackson.databind.JsonMappingException.from(jp, ((\"Current token not START_OBJECT (needed to unwrap root name '\" + expName) + \"'), but \") + jp.getCurrentToken());\n        }\n        if (jp.nextToken() != com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            throw com.fasterxml.jackson.databind.JsonMappingException.from(jp, ((\"Current token not FIELD_NAME (to contain expected root name '\" + expName) + \"'), but \") + jp.getCurrentToken());\n        }\n        java.lang.String actualName = jp.getCurrentName();\n        if (!expName.equals(actualName)) {\n            throw com.fasterxml.jackson.databind.JsonMappingException.from(jp, ((((\"Root name '\" + actualName) + \"' does not match expected ('\") + expName) + \"') for type \") + rootType);\n        }\n        jp.nextToken();\n        java.lang.Object result;\n        if (_valueToUpdate == null) {\n            result = deser.deserialize(jp, ctxt);\n        } else {\n            deser.deserialize(jp, ctxt, _valueToUpdate);\n            result = _valueToUpdate;\n        }\n        if (jp.nextToken() != com.fasterxml.jackson.core.JsonToken.END_OBJECT) {\n            throw com.fasterxml.jackson.databind.JsonMappingException.from(jp, ((\"Current token not END_OBJECT (to match wrapper object with root name '\" + expName) + \"'), but \") + jp.getCurrentToken());\n        }\n        return result;\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (_rootDeserializer != null) {\n            return _rootDeserializer;\n        }\n        if (valueType == null) {\n            throw new com.fasterxml.jackson.databind.JsonMappingException(\"No value type configured for ObjectReader\");\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _rootDeserializers.get(valueType);\n        if (deser != null) {\n            return deser;\n        }\n        deser = ctxt.findRootValueDeserializer(valueType);\n        if (deser == null) {\n            throw new com.fasterxml.jackson.databind.JsonMappingException(\"Can not find a deserializer for type \" + valueType);\n        }\n        _rootDeserializers.put(valueType, deser);\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _findTreeDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _rootDeserializers.get(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n        if (deser == null) {\n            deser = ctxt.findRootValueDeserializer(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n            if (deser == null) {\n                throw new com.fasterxml.jackson.databind.JsonMappingException(\"Can not find a deserializer for type \" + com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n            }\n            _rootDeserializers.put(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, deser);\n        }\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _prefetchRootDeserializer(com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.JavaType valueType) {\n        if ((valueType == null) || (!_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH))) {\n            return null;\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _rootDeserializers.get(valueType);\n        if (deser == null) {\n            try {\n                com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(null, _config);\n                deser = ctxt.findRootValueDeserializer(valueType);\n                if (deser != null) {\n                    _rootDeserializers.put(valueType, deser);\n                }\n                return deser;\n            } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n            }\n        }\n        return deser;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object _detectBindAndClose(byte[] src, int offset, int length) throws java.io.IOException {\n        com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length);\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser jp = match.createParserWithMatch();\n        return match.getReader()._bindAndClose(jp, _valueToUpdate);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object _detectBindAndClose(com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match, boolean forceClosing) throws java.io.IOException {\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser p = match.createParserWithMatch();\n        if (forceClosing) {\n            p.enable(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE);\n        }\n        return match.getReader()._bindAndClose(p, _valueToUpdate);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected <T> com.fasterxml.jackson.databind.MappingIterator<T> _detectBindAndReadValues(com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match, boolean forceClosing) throws com.fasterxml.jackson.core.JsonProcessingException, java.io.IOException {\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser p = match.createParserWithMatch();\n        if (forceClosing) {\n            p.enable(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE);\n        }\n        return match.getReader()._bindAndReadValues(p, _valueToUpdate);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected com.fasterxml.jackson.databind.JsonNode _detectBindAndCloseAsTree(java.io.InputStream in) throws java.io.IOException {\n        com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match = _dataFormatReaders.findFormat(in);\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser p = match.createParserWithMatch();\n        p.enable(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE);\n        return match.getReader()._bindAndCloseAsTree(p);\n    }\n\n    protected void _reportUnkownFormat(com.fasterxml.jackson.databind.deser.DataFormatReaders detector, com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match) throws com.fasterxml.jackson.core.JsonProcessingException {\n        throw new com.fasterxml.jackson.core.JsonParseException(\"Can not detect format from input, does not look like any of detectable formats \" + detector.toString(), com.fasterxml.jackson.core.JsonLocation.NA);\n    }\n\n    protected void _verifySchemaType(com.fasterxml.jackson.core.FormatSchema schema) {\n        if (schema != null) {\n            if (!_parserFactory.canUseSchema(schema)) {\n                throw new java.lang.IllegalArgumentException(((\"Can not use FormatSchema of type \" + schema.getClass().getName()) + \" for format \") + _parserFactory.getFormatName());\n            }\n        }\n    }\n\n    protected com.fasterxml.jackson.databind.deser.DefaultDeserializationContext createDeserializationContext(com.fasterxml.jackson.core.JsonParser jp, com.fasterxml.jackson.databind.DeserializationConfig cfg) {\n        return _context.createInstance(cfg, jp, _injectableValues);\n    }\n\n    protected void _reportUndetectableSource(java.lang.Object src) throws com.fasterxml.jackson.core.JsonProcessingException {\n        throw new com.fasterxml.jackson.core.JsonParseException((\"Can not use source of type \" + src.getClass().getName()) + \" with format auto-detection: must be byte- not char-based\", com.fasterxml.jackson.core.JsonLocation.NA);\n    }\n\n    protected java.io.InputStream _inputStream(java.net.URL src) throws java.io.IOException {\n        return src.openStream();\n    }\n\n    protected java.io.InputStream _inputStream(java.io.File f) throws java.io.IOException {\n        return new java.io.FileInputStream(f);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "ObjectReader"
    }
  ],
  "id": "JacksonDatabind_14"
}