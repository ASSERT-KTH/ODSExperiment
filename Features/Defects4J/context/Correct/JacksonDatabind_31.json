{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text))",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text))",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text))",
            "dst_parent": "{\n    if ((offset > 0) || (len != text.length())) {\n        text = text.substring(offset, offset + len);\n    }\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text))",
            "src_parent": "{\n    if ((offset > 0) || (len != text.length())) {\n        text = text.substring(offset, offset + len);\n    }\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new java.lang.String(text, offset, len))",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new java.lang.String(text, offset, len));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new java.lang.String(text, offset, len))",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new java.lang.String(text, offset, len));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Short.valueOf(i))",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Short.valueOf(i));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Short.valueOf(i))",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Short.valueOf(i));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Integer.valueOf(i))",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Integer.valueOf(i));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Integer.valueOf(i))",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Integer.valueOf(i));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Long.valueOf(l))",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Long.valueOf(l));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Long.valueOf(l))",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Long.valueOf(l));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Double.valueOf(d))",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Double.valueOf(d));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Double.valueOf(d))",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Double.valueOf(d));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Float.valueOf(f))",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Float.valueOf(f));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Float.valueOf(f))",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Float.valueOf(f));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, encodedValue)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, encodedValue)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(state ? com.fasterxml.jackson.core.JsonToken.VALUE_TRUE : com.fasterxml.jackson.core.JsonToken.VALUE_FALSE)",
            "dst_parent": "{\n    _append(state ? com.fasterxml.jackson.core.JsonToken.VALUE_TRUE : com.fasterxml.jackson.core.JsonToken.VALUE_FALSE);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(state ? com.fasterxml.jackson.core.JsonToken.VALUE_TRUE : com.fasterxml.jackson.core.JsonToken.VALUE_FALSE)",
            "src_parent": "{\n    _appendValue(state ? com.fasterxml.jackson.core.JsonToken.VALUE_TRUE : com.fasterxml.jackson.core.JsonToken.VALUE_FALSE);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NULL)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NULL);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NULL)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NULL);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, dec)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, dec);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, dec)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, dec);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, v)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, v);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, v)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, v);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n    return;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n    return;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, node)",
            "dst_parent": "{\n    _append(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, node);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, node)",
            "src_parent": "{\n    _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, node);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected final void _appendValue(com.fasterxml.jackson.core.JsonToken type) {\n    _writeContext.writeValue();\n    com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, _objectId, _typeId) : _last.append(_appendAt, type);\n    if (next == null) {\n        ++_appendAt;\n    } else {\n        _last = next;\n        _appendAt = 1;\n    }\n}",
            "src_parent": "public class TokenBuffer extends com.fasterxml.jackson.core.JsonGenerator {\n    protected static final int DEFAULT_GENERATOR_FEATURES = com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults();\n\n    protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;\n\n    protected int _generatorFeatures;\n\n    protected boolean _closed;\n\n    protected boolean _hasNativeTypeIds;\n\n    protected boolean _hasNativeObjectIds;\n\n    protected boolean _mayHaveNativeIds;\n\n    protected boolean _forceBigDecimal;\n\n    protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _first;\n\n    protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _last;\n\n    protected int _appendAt;\n\n    protected java.lang.Object _typeId;\n\n    protected java.lang.Object _objectId;\n\n    protected boolean _hasNativeId = false;\n\n    protected com.fasterxml.jackson.core.json.JsonWriteContext _writeContext;\n\n    @java.lang.Deprecated\n    public TokenBuffer(com.fasterxml.jackson.core.ObjectCodec codec) {\n        this(codec, false);\n    }\n\n    public TokenBuffer(com.fasterxml.jackson.core.ObjectCodec codec, boolean hasNativeIds) {\n        _objectCodec = codec;\n        _generatorFeatures = com.fasterxml.jackson.databind.util.TokenBuffer.DEFAULT_GENERATOR_FEATURES;\n        _writeContext = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(null);\n        _first = _last = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n        _appendAt = 0;\n        _hasNativeTypeIds = hasNativeIds;\n        _hasNativeObjectIds = hasNativeIds;\n        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;\n    }\n\n    public TokenBuffer(com.fasterxml.jackson.core.JsonParser p) {\n        this(p, null);\n    }\n\n    public TokenBuffer(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) {\n        _objectCodec = p.getCodec();\n        _generatorFeatures = com.fasterxml.jackson.databind.util.TokenBuffer.DEFAULT_GENERATOR_FEATURES;\n        _writeContext = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(null);\n        _first = _last = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n        _appendAt = 0;\n        _hasNativeTypeIds = p.canReadTypeId();\n        _hasNativeObjectIds = p.canReadObjectId();\n        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;\n        _forceBigDecimal = (ctxt == null) ? false : ctxt.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n    }\n\n    public com.fasterxml.jackson.databind.util.TokenBuffer forceUseOfBigDecimal(boolean b) {\n        _forceBigDecimal = b;\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    public com.fasterxml.jackson.core.JsonParser asParser() {\n        return asParser(_objectCodec);\n    }\n\n    public com.fasterxml.jackson.core.JsonParser asParser(com.fasterxml.jackson.core.ObjectCodec codec) {\n        return new com.fasterxml.jackson.databind.util.TokenBuffer.Parser(_first, codec, _hasNativeTypeIds, _hasNativeObjectIds);\n    }\n\n    public com.fasterxml.jackson.core.JsonParser asParser(com.fasterxml.jackson.core.JsonParser src) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Parser p = new com.fasterxml.jackson.databind.util.TokenBuffer.Parser(_first, src.getCodec(), _hasNativeTypeIds, _hasNativeObjectIds);\n        p.setLocation(src.getTokenLocation());\n        return p;\n    }\n\n    public com.fasterxml.jackson.core.JsonToken firstToken() {\n        if (_first != null) {\n            return _first.type(0);\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    public com.fasterxml.jackson.databind.util.TokenBuffer append(com.fasterxml.jackson.databind.util.TokenBuffer other) throws java.io.IOException {\n        if (!_hasNativeTypeIds) {\n            _hasNativeTypeIds = other.canWriteTypeId();\n        }\n        if (!_hasNativeObjectIds) {\n            _hasNativeObjectIds = other.canWriteObjectId();\n        }\n        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;\n        com.fasterxml.jackson.core.JsonParser p = other.asParser();\n        while (p.nextToken() != null) {\n            copyCurrentStructure(p);\n        } \n        return this;\n    }\n\n    public void serialize(com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment segment = _first;\n        int ptr = -1;\n        final boolean checkIds = _mayHaveNativeIds;\n        boolean hasIds = checkIds && segment.hasIds();\n        while (true) {\n            if ((++ptr) >= com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                ptr = 0;\n                segment = segment.next();\n                if (segment == null) {\n                    break;\n                }\n                hasIds = checkIds && segment.hasIds();\n            }\n            com.fasterxml.jackson.core.JsonToken t = segment.type(ptr);\n            if (t == null) {\n                break;\n            }\n            if (hasIds) {\n                java.lang.Object id = segment.findObjectId(ptr);\n                if (id != null) {\n                    gen.writeObjectId(id);\n                }\n                id = segment.findTypeId(ptr);\n                if (id != null) {\n                    gen.writeTypeId(id);\n                }\n            }\n            switch (t) {\n                case START_OBJECT :\n                    gen.writeStartObject();\n                    break;\n                case END_OBJECT :\n                    gen.writeEndObject();\n                    break;\n                case START_ARRAY :\n                    gen.writeStartArray();\n                    break;\n                case END_ARRAY :\n                    gen.writeEndArray();\n                    break;\n                case FIELD_NAME :\n                    {\n                        java.lang.Object ob = segment.get(ptr);\n                        if (ob instanceof com.fasterxml.jackson.core.SerializableString) {\n                            gen.writeFieldName(((com.fasterxml.jackson.core.SerializableString) (ob)));\n                        } else {\n                            gen.writeFieldName(((java.lang.String) (ob)));\n                        }\n                    }\n                    break;\n                case VALUE_STRING :\n                    {\n                        java.lang.Object ob = segment.get(ptr);\n                        if (ob instanceof com.fasterxml.jackson.core.SerializableString) {\n                            gen.writeString(((com.fasterxml.jackson.core.SerializableString) (ob)));\n                        } else {\n                            gen.writeString(((java.lang.String) (ob)));\n                        }\n                    }\n                    break;\n                case VALUE_NUMBER_INT :\n                    {\n                        java.lang.Object n = segment.get(ptr);\n                        if (n instanceof java.lang.Integer) {\n                            gen.writeNumber(((java.lang.Integer) (n)));\n                        } else if (n instanceof java.math.BigInteger) {\n                            gen.writeNumber(((java.math.BigInteger) (n)));\n                        } else if (n instanceof java.lang.Long) {\n                            gen.writeNumber(((java.lang.Long) (n)));\n                        } else if (n instanceof java.lang.Short) {\n                            gen.writeNumber(((java.lang.Short) (n)));\n                        } else {\n                            gen.writeNumber(((java.lang.Number) (n)).intValue());\n                        }\n                    }\n                    break;\n                case VALUE_NUMBER_FLOAT :\n                    {\n                        java.lang.Object n = segment.get(ptr);\n                        if (n instanceof java.lang.Double) {\n                            gen.writeNumber(((java.lang.Double) (n)).doubleValue());\n                        } else if (n instanceof java.math.BigDecimal) {\n                            gen.writeNumber(((java.math.BigDecimal) (n)));\n                        } else if (n instanceof java.lang.Float) {\n                            gen.writeNumber(((java.lang.Float) (n)).floatValue());\n                        } else if (n == null) {\n                            gen.writeNull();\n                        } else if (n instanceof java.lang.String) {\n                            gen.writeNumber(((java.lang.String) (n)));\n                        } else {\n                            throw new com.fasterxml.jackson.core.JsonGenerationException((\"Unrecognized value type for VALUE_NUMBER_FLOAT: \" + n.getClass().getName()) + \", can not serialize\");\n                        }\n                    }\n                    break;\n                case VALUE_TRUE :\n                    gen.writeBoolean(true);\n                    break;\n                case VALUE_FALSE :\n                    gen.writeBoolean(false);\n                    break;\n                case VALUE_NULL :\n                    gen.writeNull();\n                    break;\n                case VALUE_EMBEDDED_OBJECT :\n                    {\n                        java.lang.Object value = segment.get(ptr);\n                        if (value instanceof com.fasterxml.jackson.databind.util.RawValue) {\n                            ((com.fasterxml.jackson.databind.util.RawValue) (value)).serialize(gen);\n                        } else {\n                            gen.writeObject(value);\n                        }\n                    }\n                    break;\n                default :\n                    throw new java.lang.RuntimeException(\"Internal error: should never end up through this code path\");\n            }\n        } \n    }\n\n    public com.fasterxml.jackson.databind.util.TokenBuffer deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (p.getCurrentTokenId() != com.fasterxml.jackson.core.JsonToken.FIELD_NAME.id()) {\n            copyCurrentStructure(p);\n            return this;\n        }\n        com.fasterxml.jackson.core.JsonToken t;\n        writeStartObject();\n        do {\n            copyCurrentStructure(p);\n        } while ((t = p.nextToken()) == com.fasterxml.jackson.core.JsonToken.FIELD_NAME );\n        if (t != com.fasterxml.jackson.core.JsonToken.END_OBJECT) {\n            throw ctxt.mappingException(\"Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got \" + t);\n        }\n        writeEndObject();\n        return this;\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings(\"resource\")\n    public java.lang.String toString() {\n        final int MAX_COUNT = 100;\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(\"[TokenBuffer: \");\n        com.fasterxml.jackson.core.JsonParser jp = asParser();\n        int count = 0;\n        final boolean hasNativeIds = _hasNativeTypeIds || _hasNativeObjectIds;\n        while (true) {\n            com.fasterxml.jackson.core.JsonToken t;\n            try {\n                t = jp.nextToken();\n                if (t == null) {\n                    break;\n                }\n                if (hasNativeIds) {\n                    _appendNativeIds(sb);\n                }\n                if (count < MAX_COUNT) {\n                    if (count > 0) {\n                        sb.append(\", \");\n                    }\n                    sb.append(t.toString());\n                    if (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                        sb.append('(');\n                        sb.append(jp.getCurrentName());\n                        sb.append(')');\n                    }\n                }\n            } catch (java.io.IOException ioe) {\n                throw new java.lang.IllegalStateException(ioe);\n            }\n            ++count;\n        } \n        if (count >= MAX_COUNT) {\n            sb.append(\" ... (truncated \").append(count - MAX_COUNT).append(\" entries)\");\n        }\n        sb.append(']');\n        return sb.toString();\n    }\n\n    private final void _appendNativeIds(java.lang.StringBuilder sb) {\n        java.lang.Object objectId = _last.findObjectId(_appendAt - 1);\n        if (objectId != null) {\n            sb.append(\"[objectId=\").append(java.lang.String.valueOf(objectId)).append(']');\n        }\n        java.lang.Object typeId = _last.findTypeId(_appendAt - 1);\n        if (typeId != null) {\n            sb.append(\"[typeId=\").append(java.lang.String.valueOf(typeId)).append(']');\n        }\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator.Feature f) {\n        _generatorFeatures |= f.getMask();\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator.Feature f) {\n        _generatorFeatures &= ~f.getMask();\n        return this;\n    }\n\n    @java.lang.Override\n    public boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature f) {\n        return (_generatorFeatures & f.getMask()) != 0;\n    }\n\n    @java.lang.Override\n    public int getFeatureMask() {\n        return _generatorFeatures;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int mask) {\n        _generatorFeatures = mask;\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter() {\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec oc) {\n        _objectCodec = oc;\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.ObjectCodec getCodec() {\n        return _objectCodec;\n    }\n\n    @java.lang.Override\n    public final com.fasterxml.jackson.core.json.JsonWriteContext getOutputContext() {\n        return _writeContext;\n    }\n\n    @java.lang.Override\n    public boolean canWriteBinaryNatively() {\n        return true;\n    }\n\n    @java.lang.Override\n    public void flush() throws java.io.IOException {\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        _closed = true;\n    }\n\n    @java.lang.Override\n    public boolean isClosed() {\n        return _closed;\n    }\n\n    @java.lang.Override\n    public final void writeStartArray() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.START_ARRAY);\n        _writeContext = _writeContext.createChildArrayContext();\n    }\n\n    @java.lang.Override\n    public final void writeEndArray() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.END_ARRAY);\n        com.fasterxml.jackson.core.json.JsonWriteContext c = _writeContext.getParent();\n        if (c != null) {\n            _writeContext = c;\n        }\n    }\n\n    @java.lang.Override\n    public final void writeStartObject() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.START_OBJECT);\n        _writeContext = _writeContext.createChildObjectContext();\n    }\n\n    @java.lang.Override\n    public final void writeEndObject() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.END_OBJECT);\n        com.fasterxml.jackson.core.json.JsonWriteContext c = _writeContext.getParent();\n        if (c != null) {\n            _writeContext = c;\n        }\n    }\n\n    @java.lang.Override\n    public final void writeFieldName(java.lang.String name) throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.FIELD_NAME, name);\n        _writeContext.writeFieldName(name);\n    }\n\n    @java.lang.Override\n    public void writeFieldName(com.fasterxml.jackson.core.SerializableString name) throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.FIELD_NAME, name);\n        _writeContext.writeFieldName(name.getValue());\n    }\n\n    @java.lang.Override\n    public void writeString(java.lang.String text) throws java.io.IOException {\n        if (text == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n        }\n    }\n\n    @java.lang.Override\n    public void writeString(char[] text, int offset, int len) throws java.io.IOException {\n        writeString(new java.lang.String(text, offset, len));\n    }\n\n    @java.lang.Override\n    public void writeString(com.fasterxml.jackson.core.SerializableString text) throws java.io.IOException {\n        if (text == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n        }\n    }\n\n    @java.lang.Override\n    public void writeRawUTF8String(byte[] text, int offset, int length) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeUTF8String(byte[] text, int offset, int length) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(java.lang.String text) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(java.lang.String text, int offset, int len) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(com.fasterxml.jackson.core.SerializableString text) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(char[] text, int offset, int len) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(char c) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRawValue(java.lang.String text) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n    }\n\n    @java.lang.Override\n    public void writeRawValue(java.lang.String text, int offset, int len) throws java.io.IOException {\n        if ((offset > 0) || (len != text.length())) {\n            text = text.substring(offset, offset + len);\n        }\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n    }\n\n    @java.lang.Override\n    public void writeRawValue(char[] text, int offset, int len) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new java.lang.String(text, offset, len));\n    }\n\n    @java.lang.Override\n    public void writeNumber(short i) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Short.valueOf(i));\n    }\n\n    @java.lang.Override\n    public void writeNumber(int i) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Integer.valueOf(i));\n    }\n\n    @java.lang.Override\n    public void writeNumber(long l) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Long.valueOf(l));\n    }\n\n    @java.lang.Override\n    public void writeNumber(double d) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Double.valueOf(d));\n    }\n\n    @java.lang.Override\n    public void writeNumber(float f) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Float.valueOf(f));\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.math.BigDecimal dec) throws java.io.IOException {\n        if (dec == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, dec);\n        }\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.math.BigInteger v) throws java.io.IOException {\n        if (v == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, v);\n        }\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.lang.String encodedValue) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n    }\n\n    @java.lang.Override\n    public void writeBoolean(boolean state) throws java.io.IOException {\n        _appendValue(state ? com.fasterxml.jackson.core.JsonToken.VALUE_TRUE : com.fasterxml.jackson.core.JsonToken.VALUE_FALSE);\n    }\n\n    @java.lang.Override\n    public void writeNull() throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NULL);\n    }\n\n    @java.lang.Override\n    public void writeObject(java.lang.Object value) throws java.io.IOException {\n        if (value == null) {\n            writeNull();\n            return;\n        }\n        java.lang.Class<?> raw = value.getClass();\n        if ((raw == byte[].class) || (value instanceof com.fasterxml.jackson.databind.util.RawValue)) {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n            return;\n        }\n        if (_objectCodec == null) {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n        } else {\n            _objectCodec.writeValue(this, value);\n        }\n    }\n\n    @java.lang.Override\n    public void writeTree(com.fasterxml.jackson.core.TreeNode node) throws java.io.IOException {\n        if (node == null) {\n            writeNull();\n            return;\n        }\n        if (_objectCodec == null) {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, node);\n        } else {\n            _objectCodec.writeTree(this, node);\n        }\n    }\n\n    @java.lang.Override\n    public void writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, byte[] data, int offset, int len) throws java.io.IOException {\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(data, offset, copy, 0, len);\n        writeObject(copy);\n    }\n\n    @java.lang.Override\n    public int writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.InputStream data, int dataLength) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    @java.lang.Override\n    public boolean canWriteTypeId() {\n        return _hasNativeTypeIds;\n    }\n\n    @java.lang.Override\n    public boolean canWriteObjectId() {\n        return _hasNativeObjectIds;\n    }\n\n    @java.lang.Override\n    public void writeTypeId(java.lang.Object id) {\n        _typeId = id;\n        _hasNativeId = true;\n    }\n\n    @java.lang.Override\n    public void writeObjectId(java.lang.Object id) {\n        _objectId = id;\n        _hasNativeId = true;\n    }\n\n    @java.lang.Override\n    public void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        if (_mayHaveNativeIds) {\n            _checkNativeIds(p);\n        }\n        switch (p.getCurrentToken()) {\n            case START_OBJECT :\n                writeStartObject();\n                break;\n            case END_OBJECT :\n                writeEndObject();\n                break;\n            case START_ARRAY :\n                writeStartArray();\n                break;\n            case END_ARRAY :\n                writeEndArray();\n                break;\n            case FIELD_NAME :\n                writeFieldName(p.getCurrentName());\n                break;\n            case VALUE_STRING :\n                if (p.hasTextCharacters()) {\n                    writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\n                } else {\n                    writeString(p.getText());\n                }\n                break;\n            case VALUE_NUMBER_INT :\n                switch (p.getNumberType()) {\n                    case INT :\n                        writeNumber(p.getIntValue());\n                        break;\n                    case BIG_INTEGER :\n                        writeNumber(p.getBigIntegerValue());\n                        break;\n                    default :\n                        writeNumber(p.getLongValue());\n                }\n                break;\n            case VALUE_NUMBER_FLOAT :\n                if (_forceBigDecimal) {\n                    writeNumber(p.getDecimalValue());\n                } else {\n                    switch (p.getNumberType()) {\n                        case BIG_DECIMAL :\n                            writeNumber(p.getDecimalValue());\n                            break;\n                        case FLOAT :\n                            writeNumber(p.getFloatValue());\n                            break;\n                        default :\n                            writeNumber(p.getDoubleValue());\n                    }\n                }\n                break;\n            case VALUE_TRUE :\n                writeBoolean(true);\n                break;\n            case VALUE_FALSE :\n                writeBoolean(false);\n                break;\n            case VALUE_NULL :\n                writeNull();\n                break;\n            case VALUE_EMBEDDED_OBJECT :\n                writeObject(p.getEmbeddedObject());\n                break;\n            default :\n                throw new java.lang.RuntimeException(\"Internal error: should never end up through this code path\");\n        }\n    }\n\n    @java.lang.Override\n    public void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser jp) throws java.io.IOException {\n        com.fasterxml.jackson.core.JsonToken t = jp.getCurrentToken();\n        if (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            if (_mayHaveNativeIds) {\n                _checkNativeIds(jp);\n            }\n            writeFieldName(jp.getCurrentName());\n            t = jp.nextToken();\n        }\n        if (_mayHaveNativeIds) {\n            _checkNativeIds(jp);\n        }\n        switch (t) {\n            case START_ARRAY :\n                writeStartArray();\n                while (jp.nextToken() != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n                    copyCurrentStructure(jp);\n                } \n                writeEndArray();\n                break;\n            case START_OBJECT :\n                writeStartObject();\n                while (jp.nextToken() != com.fasterxml.jackson.core.JsonToken.END_OBJECT) {\n                    copyCurrentStructure(jp);\n                } \n                writeEndObject();\n                break;\n            default :\n                copyCurrentEvent(jp);\n        }\n    }\n\n    private final void _checkNativeIds(com.fasterxml.jackson.core.JsonParser jp) throws java.io.IOException {\n        if ((_typeId = jp.getTypeId()) != null) {\n            _hasNativeId = true;\n        }\n        if ((_objectId = jp.getObjectId()) != null) {\n            _hasNativeId = true;\n        }\n    }\n\n    protected final void _append(com.fasterxml.jackson.core.JsonToken type) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, _objectId, _typeId) : _last.append(_appendAt, type);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _append(com.fasterxml.jackson.core.JsonToken type, java.lang.Object value) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, value, _objectId, _typeId) : _last.append(_appendAt, type, value);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _appendValue(com.fasterxml.jackson.core.JsonToken type) {\n        _writeContext.writeValue();\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, _objectId, _typeId) : _last.append(_appendAt, type);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _appendValue(com.fasterxml.jackson.core.JsonToken type, java.lang.Object value) {\n        _writeContext.writeValue();\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, value, _objectId, _typeId) : _last.append(_appendAt, type, value);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _appendRaw(int rawType, java.lang.Object value) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.appendRaw(_appendAt, rawType, value, _objectId, _typeId) : _last.appendRaw(_appendAt, rawType, value);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    @java.lang.Override\n    protected void _reportUnsupportedOperation() {\n        throw new java.lang.UnsupportedOperationException(\"Called operation not supported for TokenBuffer\");\n    }\n\n    protected static final class Parser extends com.fasterxml.jackson.core.base.ParserMinimalBase {\n        protected com.fasterxml.jackson.core.ObjectCodec _codec;\n\n        protected final boolean _hasNativeTypeIds;\n\n        protected final boolean _hasNativeObjectIds;\n\n        protected final boolean _hasNativeIds;\n\n        protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _segment;\n\n        protected int _segmentPtr;\n\n        protected com.fasterxml.jackson.core.json.JsonReadContext _parsingContext;\n\n        protected boolean _closed;\n\n        protected transient com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder;\n\n        protected com.fasterxml.jackson.core.JsonLocation _location = null;\n\n        public Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment firstSeg, com.fasterxml.jackson.core.ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds) {\n            super(0);\n            _segment = firstSeg;\n            _segmentPtr = -1;\n            _codec = codec;\n            _parsingContext = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(null);\n            _hasNativeTypeIds = hasNativeTypeIds;\n            _hasNativeObjectIds = hasNativeObjectIds;\n            _hasNativeIds = hasNativeTypeIds | hasNativeObjectIds;\n        }\n\n        public void setLocation(com.fasterxml.jackson.core.JsonLocation l) {\n            _location = l;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.ObjectCodec getCodec() {\n            return _codec;\n        }\n\n        @java.lang.Override\n        public void setCodec(com.fasterxml.jackson.core.ObjectCodec c) {\n            _codec = c;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.Version version() {\n            return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n        }\n\n        public com.fasterxml.jackson.core.JsonToken peekNextToken() throws java.io.IOException {\n            if (_closed) {\n                return null;\n            }\n            com.fasterxml.jackson.databind.util.TokenBuffer.Segment seg = _segment;\n            int ptr = _segmentPtr + 1;\n            if (ptr >= com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                ptr = 0;\n                seg = (seg == null) ? null : seg.next();\n            }\n            return seg == null ? null : seg.type(ptr);\n        }\n\n        @java.lang.Override\n        public void close() throws java.io.IOException {\n            if (!_closed) {\n                _closed = true;\n            }\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException {\n            if (_closed || (_segment == null)) {\n                return null;\n            }\n            if ((++_segmentPtr) >= com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                _segmentPtr = 0;\n                _segment = _segment.next();\n                if (_segment == null) {\n                    return null;\n                }\n            }\n            _currToken = _segment.type(_segmentPtr);\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                java.lang.Object ob = _currentObject();\n                java.lang.String name = (ob instanceof java.lang.String) ? ((java.lang.String) (ob)) : ob.toString();\n                _parsingContext.setCurrentName(name);\n            } else if (_currToken == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            } else if (_currToken == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            } else if ((_currToken == com.fasterxml.jackson.core.JsonToken.END_OBJECT) || (_currToken == com.fasterxml.jackson.core.JsonToken.END_ARRAY)) {\n                _parsingContext = _parsingContext.getParent();\n                if (_parsingContext == null) {\n                    _parsingContext = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(null);\n                }\n            }\n            return _currToken;\n        }\n\n        @java.lang.Override\n        public java.lang.String nextFieldName() throws java.io.IOException {\n            if (_closed || (_segment == null)) {\n                return null;\n            }\n            int ptr = _segmentPtr + 1;\n            if ((ptr < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) && (_segment.type(ptr) == com.fasterxml.jackson.core.JsonToken.FIELD_NAME)) {\n                _segmentPtr = ptr;\n                java.lang.Object ob = _segment.get(ptr);\n                java.lang.String name = (ob instanceof java.lang.String) ? ((java.lang.String) (ob)) : ob.toString();\n                _parsingContext.setCurrentName(name);\n                return name;\n            }\n            return nextToken() == com.fasterxml.jackson.core.JsonToken.FIELD_NAME ? getCurrentName() : null;\n        }\n\n        @java.lang.Override\n        public boolean isClosed() {\n            return _closed;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonStreamContext getParsingContext() {\n            return _parsingContext;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonLocation getTokenLocation() {\n            return getCurrentLocation();\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonLocation getCurrentLocation() {\n            return _location == null ? com.fasterxml.jackson.core.JsonLocation.NA : _location;\n        }\n\n        @java.lang.Override\n        public java.lang.String getCurrentName() {\n            if ((_currToken == com.fasterxml.jackson.core.JsonToken.START_OBJECT) || (_currToken == com.fasterxml.jackson.core.JsonToken.START_ARRAY)) {\n                com.fasterxml.jackson.core.json.JsonReadContext parent = _parsingContext.getParent();\n                return parent.getCurrentName();\n            }\n            return _parsingContext.getCurrentName();\n        }\n\n        @java.lang.Override\n        public void overrideCurrentName(java.lang.String name) {\n            com.fasterxml.jackson.core.json.JsonReadContext ctxt = _parsingContext;\n            if ((_currToken == com.fasterxml.jackson.core.JsonToken.START_OBJECT) || (_currToken == com.fasterxml.jackson.core.JsonToken.START_ARRAY)) {\n                ctxt = ctxt.getParent();\n            }\n            try {\n                ctxt.setCurrentName(name);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getText() {\n            if ((_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) || (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME)) {\n                java.lang.Object ob = _currentObject();\n                if (ob instanceof java.lang.String) {\n                    return ((java.lang.String) (ob));\n                }\n                return ob == null ? null : ob.toString();\n            }\n            if (_currToken == null) {\n                return null;\n            }\n            switch (_currToken) {\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    java.lang.Object ob = _currentObject();\n                    return ob == null ? null : ob.toString();\n                default :\n                    return _currToken.asString();\n            }\n        }\n\n        @java.lang.Override\n        public char[] getTextCharacters() {\n            java.lang.String str = getText();\n            return str == null ? null : str.toCharArray();\n        }\n\n        @java.lang.Override\n        public int getTextLength() {\n            java.lang.String str = getText();\n            return str == null ? 0 : str.length();\n        }\n\n        @java.lang.Override\n        public int getTextOffset() {\n            return 0;\n        }\n\n        @java.lang.Override\n        public boolean hasTextCharacters() {\n            return false;\n        }\n\n        @java.lang.Override\n        public java.math.BigInteger getBigIntegerValue() throws java.io.IOException {\n            java.lang.Number n = getNumberValue();\n            if (n instanceof java.math.BigInteger) {\n                return ((java.math.BigInteger) (n));\n            }\n            if (getNumberType() == com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL) {\n                return ((java.math.BigDecimal) (n)).toBigInteger();\n            }\n            return java.math.BigInteger.valueOf(n.longValue());\n        }\n\n        @java.lang.Override\n        public java.math.BigDecimal getDecimalValue() throws java.io.IOException {\n            java.lang.Number n = getNumberValue();\n            if (n instanceof java.math.BigDecimal) {\n                return ((java.math.BigDecimal) (n));\n            }\n            switch (getNumberType()) {\n                case INT :\n                case LONG :\n                    return java.math.BigDecimal.valueOf(n.longValue());\n                case BIG_INTEGER :\n                    return new java.math.BigDecimal(((java.math.BigInteger) (n)));\n                default :\n            }\n            return java.math.BigDecimal.valueOf(n.doubleValue());\n        }\n\n        @java.lang.Override\n        public double getDoubleValue() throws java.io.IOException {\n            return getNumberValue().doubleValue();\n        }\n\n        @java.lang.Override\n        public float getFloatValue() throws java.io.IOException {\n            return getNumberValue().floatValue();\n        }\n\n        @java.lang.Override\n        public int getIntValue() throws java.io.IOException {\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT) {\n                return ((java.lang.Number) (_currentObject())).intValue();\n            }\n            return getNumberValue().intValue();\n        }\n\n        @java.lang.Override\n        public long getLongValue() throws java.io.IOException {\n            return getNumberValue().longValue();\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonParser.NumberType getNumberType() throws java.io.IOException {\n            java.lang.Number n = getNumberValue();\n            if (n instanceof java.lang.Integer) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.INT;\n            }\n            if (n instanceof java.lang.Long) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.LONG;\n            }\n            if (n instanceof java.lang.Double) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.DOUBLE;\n            }\n            if (n instanceof java.math.BigDecimal) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL;\n            }\n            if (n instanceof java.math.BigInteger) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER;\n            }\n            if (n instanceof java.lang.Float) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.FLOAT;\n            }\n            if (n instanceof java.lang.Short) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.INT;\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        public final java.lang.Number getNumberValue() throws java.io.IOException {\n            _checkIsNumber();\n            java.lang.Object value = _currentObject();\n            if (value instanceof java.lang.Number) {\n                return ((java.lang.Number) (value));\n            }\n            if (value instanceof java.lang.String) {\n                java.lang.String str = ((java.lang.String) (value));\n                if (str.indexOf('.') >= 0) {\n                    return java.lang.Double.parseDouble(str);\n                }\n                return java.lang.Long.parseLong(str);\n            }\n            if (value == null) {\n                return null;\n            }\n            throw new java.lang.IllegalStateException(\"Internal error: entry should be a Number, but is of type \" + value.getClass().getName());\n        }\n\n        @java.lang.Override\n        public java.lang.Object getEmbeddedObject() {\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT) {\n                return _currentObject();\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        @java.lang.SuppressWarnings(\"resource\")\n        public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT) {\n                java.lang.Object ob = _currentObject();\n                if (ob instanceof byte[]) {\n                    return ((byte[]) (ob));\n                }\n            }\n            if (_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n                throw _constructError((\"Current token (\" + _currToken) + \") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary\");\n            }\n            final java.lang.String str = getText();\n            if (str == null) {\n                return null;\n            }\n            com.fasterxml.jackson.core.util.ByteArrayBuilder builder = _byteBuilder;\n            if (builder == null) {\n                _byteBuilder = builder = new com.fasterxml.jackson.core.util.ByteArrayBuilder(100);\n            } else {\n                _byteBuilder.reset();\n            }\n            _decodeBase64(str, builder, b64variant);\n            return builder.toByteArray();\n        }\n\n        @java.lang.Override\n        public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.OutputStream out) throws java.io.IOException {\n            byte[] data = getBinaryValue(b64variant);\n            if (data != null) {\n                out.write(data, 0, data.length);\n                return data.length;\n            }\n            return 0;\n        }\n\n        @java.lang.Override\n        public boolean canReadObjectId() {\n            return _hasNativeObjectIds;\n        }\n\n        @java.lang.Override\n        public boolean canReadTypeId() {\n            return _hasNativeTypeIds;\n        }\n\n        @java.lang.Override\n        public java.lang.Object getTypeId() {\n            return _segment.findTypeId(_segmentPtr);\n        }\n\n        @java.lang.Override\n        public java.lang.Object getObjectId() {\n            return _segment.findObjectId(_segmentPtr);\n        }\n\n        protected final java.lang.Object _currentObject() {\n            return _segment.get(_segmentPtr);\n        }\n\n        protected final void _checkIsNumber() throws com.fasterxml.jackson.core.JsonParseException {\n            if ((_currToken == null) || (!_currToken.isNumeric())) {\n                throw _constructError((\"Current token (\" + _currToken) + \") not numeric, can not use numeric value accessors\");\n            }\n        }\n\n        @java.lang.Override\n        protected void _handleEOF() throws com.fasterxml.jackson.core.JsonParseException {\n            _throwInternal();\n        }\n    }\n\n    protected static final class Segment {\n        public static final int TOKENS_PER_SEGMENT = 16;\n\n        private static final com.fasterxml.jackson.core.JsonToken[] TOKEN_TYPES_BY_INDEX;\n\n        static {\n            TOKEN_TYPES_BY_INDEX = new com.fasterxml.jackson.core.JsonToken[16];\n            com.fasterxml.jackson.core.JsonToken[] t = com.fasterxml.jackson.core.JsonToken.values();\n            java.lang.System.arraycopy(t, 1, TOKEN_TYPES_BY_INDEX, 1, java.lang.Math.min(15, t.length - 1));\n        }\n\n        protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _next;\n\n        protected long _tokenTypes;\n\n        protected final java.lang.Object[] _tokens = new java.lang.Object[com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT];\n\n        protected java.util.TreeMap<java.lang.Integer, java.lang.Object> _nativeIds;\n\n        public Segment() {\n        }\n\n        public com.fasterxml.jackson.core.JsonToken type(int index) {\n            long l = _tokenTypes;\n            if (index > 0) {\n                l >>= index << 2;\n            }\n            int ix = ((int) (l)) & 0xf;\n            return com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKEN_TYPES_BY_INDEX[ix];\n        }\n\n        public int rawType(int index) {\n            long l = _tokenTypes;\n            if (index > 0) {\n                l >>= index << 2;\n            }\n            int ix = ((int) (l)) & 0xf;\n            return ix;\n        }\n\n        public java.lang.Object get(int index) {\n            return _tokens[index];\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment next() {\n            return _next;\n        }\n\n        public boolean hasIds() {\n            return _nativeIds != null;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object objectId, java.lang.Object typeId) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType, objectId, typeId);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType, objectId, typeId);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType, value);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType, value);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType, value, objectId, typeId);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType, value, objectId, typeId);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment appendRaw(int index, int rawTokenType, java.lang.Object value) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, rawTokenType, value);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, rawTokenType, value);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment appendRaw(int index, int rawTokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, rawTokenType, value, objectId, typeId);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, rawTokenType, value, objectId, typeId);\n            return _next;\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType) {\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object objectId, java.lang.Object typeId) {\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n            assignNativeIds(index, objectId, typeId);\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value) {\n            _tokens[index] = value;\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            _tokens[index] = value;\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n            assignNativeIds(index, objectId, typeId);\n        }\n\n        private void set(int index, int rawTokenType, java.lang.Object value) {\n            _tokens[index] = value;\n            long typeCode = ((long) (rawTokenType));\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n        }\n\n        private void set(int index, int rawTokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            _tokens[index] = value;\n            long typeCode = ((long) (rawTokenType));\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n            assignNativeIds(index, objectId, typeId);\n        }\n\n        private final void assignNativeIds(int index, java.lang.Object objectId, java.lang.Object typeId) {\n            if (_nativeIds == null) {\n                _nativeIds = new java.util.TreeMap<java.lang.Integer, java.lang.Object>();\n            }\n            if (objectId != null) {\n                _nativeIds.put(_objectIdIndex(index), objectId);\n            }\n            if (typeId != null) {\n                _nativeIds.put(_typeIdIndex(index), typeId);\n            }\n        }\n\n        public java.lang.Object findObjectId(int index) {\n            return _nativeIds == null ? null : _nativeIds.get(_objectIdIndex(index));\n        }\n\n        public java.lang.Object findTypeId(int index) {\n            return _nativeIds == null ? null : _nativeIds.get(_typeIdIndex(index));\n        }\n\n        private final int _typeIdIndex(int i) {\n            return i + i;\n        }\n\n        private final int _objectIdIndex(int i) {\n            return (i + i) + 1;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected final void _appendValue(com.fasterxml.jackson.core.JsonToken type, java.lang.Object value) {\n    _writeContext.writeValue();\n    com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, value, _objectId, _typeId) : _last.append(_appendAt, type, value);\n    if (next == null) {\n        ++_appendAt;\n    } else {\n        _last = next;\n        _appendAt = 1;\n    }\n}",
            "src_parent": "public class TokenBuffer extends com.fasterxml.jackson.core.JsonGenerator {\n    protected static final int DEFAULT_GENERATOR_FEATURES = com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults();\n\n    protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;\n\n    protected int _generatorFeatures;\n\n    protected boolean _closed;\n\n    protected boolean _hasNativeTypeIds;\n\n    protected boolean _hasNativeObjectIds;\n\n    protected boolean _mayHaveNativeIds;\n\n    protected boolean _forceBigDecimal;\n\n    protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _first;\n\n    protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _last;\n\n    protected int _appendAt;\n\n    protected java.lang.Object _typeId;\n\n    protected java.lang.Object _objectId;\n\n    protected boolean _hasNativeId = false;\n\n    protected com.fasterxml.jackson.core.json.JsonWriteContext _writeContext;\n\n    @java.lang.Deprecated\n    public TokenBuffer(com.fasterxml.jackson.core.ObjectCodec codec) {\n        this(codec, false);\n    }\n\n    public TokenBuffer(com.fasterxml.jackson.core.ObjectCodec codec, boolean hasNativeIds) {\n        _objectCodec = codec;\n        _generatorFeatures = com.fasterxml.jackson.databind.util.TokenBuffer.DEFAULT_GENERATOR_FEATURES;\n        _writeContext = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(null);\n        _first = _last = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n        _appendAt = 0;\n        _hasNativeTypeIds = hasNativeIds;\n        _hasNativeObjectIds = hasNativeIds;\n        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;\n    }\n\n    public TokenBuffer(com.fasterxml.jackson.core.JsonParser p) {\n        this(p, null);\n    }\n\n    public TokenBuffer(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) {\n        _objectCodec = p.getCodec();\n        _generatorFeatures = com.fasterxml.jackson.databind.util.TokenBuffer.DEFAULT_GENERATOR_FEATURES;\n        _writeContext = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(null);\n        _first = _last = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n        _appendAt = 0;\n        _hasNativeTypeIds = p.canReadTypeId();\n        _hasNativeObjectIds = p.canReadObjectId();\n        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;\n        _forceBigDecimal = (ctxt == null) ? false : ctxt.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);\n    }\n\n    public com.fasterxml.jackson.databind.util.TokenBuffer forceUseOfBigDecimal(boolean b) {\n        _forceBigDecimal = b;\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    public com.fasterxml.jackson.core.JsonParser asParser() {\n        return asParser(_objectCodec);\n    }\n\n    public com.fasterxml.jackson.core.JsonParser asParser(com.fasterxml.jackson.core.ObjectCodec codec) {\n        return new com.fasterxml.jackson.databind.util.TokenBuffer.Parser(_first, codec, _hasNativeTypeIds, _hasNativeObjectIds);\n    }\n\n    public com.fasterxml.jackson.core.JsonParser asParser(com.fasterxml.jackson.core.JsonParser src) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Parser p = new com.fasterxml.jackson.databind.util.TokenBuffer.Parser(_first, src.getCodec(), _hasNativeTypeIds, _hasNativeObjectIds);\n        p.setLocation(src.getTokenLocation());\n        return p;\n    }\n\n    public com.fasterxml.jackson.core.JsonToken firstToken() {\n        if (_first != null) {\n            return _first.type(0);\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    public com.fasterxml.jackson.databind.util.TokenBuffer append(com.fasterxml.jackson.databind.util.TokenBuffer other) throws java.io.IOException {\n        if (!_hasNativeTypeIds) {\n            _hasNativeTypeIds = other.canWriteTypeId();\n        }\n        if (!_hasNativeObjectIds) {\n            _hasNativeObjectIds = other.canWriteObjectId();\n        }\n        _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds;\n        com.fasterxml.jackson.core.JsonParser p = other.asParser();\n        while (p.nextToken() != null) {\n            copyCurrentStructure(p);\n        } \n        return this;\n    }\n\n    public void serialize(com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment segment = _first;\n        int ptr = -1;\n        final boolean checkIds = _mayHaveNativeIds;\n        boolean hasIds = checkIds && segment.hasIds();\n        while (true) {\n            if ((++ptr) >= com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                ptr = 0;\n                segment = segment.next();\n                if (segment == null) {\n                    break;\n                }\n                hasIds = checkIds && segment.hasIds();\n            }\n            com.fasterxml.jackson.core.JsonToken t = segment.type(ptr);\n            if (t == null) {\n                break;\n            }\n            if (hasIds) {\n                java.lang.Object id = segment.findObjectId(ptr);\n                if (id != null) {\n                    gen.writeObjectId(id);\n                }\n                id = segment.findTypeId(ptr);\n                if (id != null) {\n                    gen.writeTypeId(id);\n                }\n            }\n            switch (t) {\n                case START_OBJECT :\n                    gen.writeStartObject();\n                    break;\n                case END_OBJECT :\n                    gen.writeEndObject();\n                    break;\n                case START_ARRAY :\n                    gen.writeStartArray();\n                    break;\n                case END_ARRAY :\n                    gen.writeEndArray();\n                    break;\n                case FIELD_NAME :\n                    {\n                        java.lang.Object ob = segment.get(ptr);\n                        if (ob instanceof com.fasterxml.jackson.core.SerializableString) {\n                            gen.writeFieldName(((com.fasterxml.jackson.core.SerializableString) (ob)));\n                        } else {\n                            gen.writeFieldName(((java.lang.String) (ob)));\n                        }\n                    }\n                    break;\n                case VALUE_STRING :\n                    {\n                        java.lang.Object ob = segment.get(ptr);\n                        if (ob instanceof com.fasterxml.jackson.core.SerializableString) {\n                            gen.writeString(((com.fasterxml.jackson.core.SerializableString) (ob)));\n                        } else {\n                            gen.writeString(((java.lang.String) (ob)));\n                        }\n                    }\n                    break;\n                case VALUE_NUMBER_INT :\n                    {\n                        java.lang.Object n = segment.get(ptr);\n                        if (n instanceof java.lang.Integer) {\n                            gen.writeNumber(((java.lang.Integer) (n)));\n                        } else if (n instanceof java.math.BigInteger) {\n                            gen.writeNumber(((java.math.BigInteger) (n)));\n                        } else if (n instanceof java.lang.Long) {\n                            gen.writeNumber(((java.lang.Long) (n)));\n                        } else if (n instanceof java.lang.Short) {\n                            gen.writeNumber(((java.lang.Short) (n)));\n                        } else {\n                            gen.writeNumber(((java.lang.Number) (n)).intValue());\n                        }\n                    }\n                    break;\n                case VALUE_NUMBER_FLOAT :\n                    {\n                        java.lang.Object n = segment.get(ptr);\n                        if (n instanceof java.lang.Double) {\n                            gen.writeNumber(((java.lang.Double) (n)).doubleValue());\n                        } else if (n instanceof java.math.BigDecimal) {\n                            gen.writeNumber(((java.math.BigDecimal) (n)));\n                        } else if (n instanceof java.lang.Float) {\n                            gen.writeNumber(((java.lang.Float) (n)).floatValue());\n                        } else if (n == null) {\n                            gen.writeNull();\n                        } else if (n instanceof java.lang.String) {\n                            gen.writeNumber(((java.lang.String) (n)));\n                        } else {\n                            throw new com.fasterxml.jackson.core.JsonGenerationException((\"Unrecognized value type for VALUE_NUMBER_FLOAT: \" + n.getClass().getName()) + \", can not serialize\");\n                        }\n                    }\n                    break;\n                case VALUE_TRUE :\n                    gen.writeBoolean(true);\n                    break;\n                case VALUE_FALSE :\n                    gen.writeBoolean(false);\n                    break;\n                case VALUE_NULL :\n                    gen.writeNull();\n                    break;\n                case VALUE_EMBEDDED_OBJECT :\n                    {\n                        java.lang.Object value = segment.get(ptr);\n                        if (value instanceof com.fasterxml.jackson.databind.util.RawValue) {\n                            ((com.fasterxml.jackson.databind.util.RawValue) (value)).serialize(gen);\n                        } else {\n                            gen.writeObject(value);\n                        }\n                    }\n                    break;\n                default :\n                    throw new java.lang.RuntimeException(\"Internal error: should never end up through this code path\");\n            }\n        } \n    }\n\n    public com.fasterxml.jackson.databind.util.TokenBuffer deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {\n        if (p.getCurrentTokenId() != com.fasterxml.jackson.core.JsonToken.FIELD_NAME.id()) {\n            copyCurrentStructure(p);\n            return this;\n        }\n        com.fasterxml.jackson.core.JsonToken t;\n        writeStartObject();\n        do {\n            copyCurrentStructure(p);\n        } while ((t = p.nextToken()) == com.fasterxml.jackson.core.JsonToken.FIELD_NAME );\n        if (t != com.fasterxml.jackson.core.JsonToken.END_OBJECT) {\n            throw ctxt.mappingException(\"Expected END_OBJECT after copying contents of a JsonParser into TokenBuffer, got \" + t);\n        }\n        writeEndObject();\n        return this;\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings(\"resource\")\n    public java.lang.String toString() {\n        final int MAX_COUNT = 100;\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(\"[TokenBuffer: \");\n        com.fasterxml.jackson.core.JsonParser jp = asParser();\n        int count = 0;\n        final boolean hasNativeIds = _hasNativeTypeIds || _hasNativeObjectIds;\n        while (true) {\n            com.fasterxml.jackson.core.JsonToken t;\n            try {\n                t = jp.nextToken();\n                if (t == null) {\n                    break;\n                }\n                if (hasNativeIds) {\n                    _appendNativeIds(sb);\n                }\n                if (count < MAX_COUNT) {\n                    if (count > 0) {\n                        sb.append(\", \");\n                    }\n                    sb.append(t.toString());\n                    if (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                        sb.append('(');\n                        sb.append(jp.getCurrentName());\n                        sb.append(')');\n                    }\n                }\n            } catch (java.io.IOException ioe) {\n                throw new java.lang.IllegalStateException(ioe);\n            }\n            ++count;\n        } \n        if (count >= MAX_COUNT) {\n            sb.append(\" ... (truncated \").append(count - MAX_COUNT).append(\" entries)\");\n        }\n        sb.append(']');\n        return sb.toString();\n    }\n\n    private final void _appendNativeIds(java.lang.StringBuilder sb) {\n        java.lang.Object objectId = _last.findObjectId(_appendAt - 1);\n        if (objectId != null) {\n            sb.append(\"[objectId=\").append(java.lang.String.valueOf(objectId)).append(']');\n        }\n        java.lang.Object typeId = _last.findTypeId(_appendAt - 1);\n        if (typeId != null) {\n            sb.append(\"[typeId=\").append(java.lang.String.valueOf(typeId)).append(']');\n        }\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator.Feature f) {\n        _generatorFeatures |= f.getMask();\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator.Feature f) {\n        _generatorFeatures &= ~f.getMask();\n        return this;\n    }\n\n    @java.lang.Override\n    public boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature f) {\n        return (_generatorFeatures & f.getMask()) != 0;\n    }\n\n    @java.lang.Override\n    public int getFeatureMask() {\n        return _generatorFeatures;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int mask) {\n        _generatorFeatures = mask;\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter() {\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec oc) {\n        _objectCodec = oc;\n        return this;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.ObjectCodec getCodec() {\n        return _objectCodec;\n    }\n\n    @java.lang.Override\n    public final com.fasterxml.jackson.core.json.JsonWriteContext getOutputContext() {\n        return _writeContext;\n    }\n\n    @java.lang.Override\n    public boolean canWriteBinaryNatively() {\n        return true;\n    }\n\n    @java.lang.Override\n    public void flush() throws java.io.IOException {\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        _closed = true;\n    }\n\n    @java.lang.Override\n    public boolean isClosed() {\n        return _closed;\n    }\n\n    @java.lang.Override\n    public final void writeStartArray() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.START_ARRAY);\n        _writeContext = _writeContext.createChildArrayContext();\n    }\n\n    @java.lang.Override\n    public final void writeEndArray() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.END_ARRAY);\n        com.fasterxml.jackson.core.json.JsonWriteContext c = _writeContext.getParent();\n        if (c != null) {\n            _writeContext = c;\n        }\n    }\n\n    @java.lang.Override\n    public final void writeStartObject() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.START_OBJECT);\n        _writeContext = _writeContext.createChildObjectContext();\n    }\n\n    @java.lang.Override\n    public final void writeEndObject() throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.END_OBJECT);\n        com.fasterxml.jackson.core.json.JsonWriteContext c = _writeContext.getParent();\n        if (c != null) {\n            _writeContext = c;\n        }\n    }\n\n    @java.lang.Override\n    public final void writeFieldName(java.lang.String name) throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.FIELD_NAME, name);\n        _writeContext.writeFieldName(name);\n    }\n\n    @java.lang.Override\n    public void writeFieldName(com.fasterxml.jackson.core.SerializableString name) throws java.io.IOException {\n        _append(com.fasterxml.jackson.core.JsonToken.FIELD_NAME, name);\n        _writeContext.writeFieldName(name.getValue());\n    }\n\n    @java.lang.Override\n    public void writeString(java.lang.String text) throws java.io.IOException {\n        if (text == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n        }\n    }\n\n    @java.lang.Override\n    public void writeString(char[] text, int offset, int len) throws java.io.IOException {\n        writeString(new java.lang.String(text, offset, len));\n    }\n\n    @java.lang.Override\n    public void writeString(com.fasterxml.jackson.core.SerializableString text) throws java.io.IOException {\n        if (text == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_STRING, text);\n        }\n    }\n\n    @java.lang.Override\n    public void writeRawUTF8String(byte[] text, int offset, int length) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeUTF8String(byte[] text, int offset, int length) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(java.lang.String text) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(java.lang.String text, int offset, int len) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(com.fasterxml.jackson.core.SerializableString text) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(char[] text, int offset, int len) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRaw(char c) throws java.io.IOException {\n        _reportUnsupportedOperation();\n    }\n\n    @java.lang.Override\n    public void writeRawValue(java.lang.String text) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n    }\n\n    @java.lang.Override\n    public void writeRawValue(java.lang.String text, int offset, int len) throws java.io.IOException {\n        if ((offset > 0) || (len != text.length())) {\n            text = text.substring(offset, offset + len);\n        }\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new com.fasterxml.jackson.databind.util.RawValue(text));\n    }\n\n    @java.lang.Override\n    public void writeRawValue(char[] text, int offset, int len) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, new java.lang.String(text, offset, len));\n    }\n\n    @java.lang.Override\n    public void writeNumber(short i) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Short.valueOf(i));\n    }\n\n    @java.lang.Override\n    public void writeNumber(int i) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Integer.valueOf(i));\n    }\n\n    @java.lang.Override\n    public void writeNumber(long l) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, java.lang.Long.valueOf(l));\n    }\n\n    @java.lang.Override\n    public void writeNumber(double d) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Double.valueOf(d));\n    }\n\n    @java.lang.Override\n    public void writeNumber(float f) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, java.lang.Float.valueOf(f));\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.math.BigDecimal dec) throws java.io.IOException {\n        if (dec == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, dec);\n        }\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.math.BigInteger v) throws java.io.IOException {\n        if (v == null) {\n            writeNull();\n        } else {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT, v);\n        }\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.lang.String encodedValue) throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT, encodedValue);\n    }\n\n    @java.lang.Override\n    public void writeBoolean(boolean state) throws java.io.IOException {\n        _appendValue(state ? com.fasterxml.jackson.core.JsonToken.VALUE_TRUE : com.fasterxml.jackson.core.JsonToken.VALUE_FALSE);\n    }\n\n    @java.lang.Override\n    public void writeNull() throws java.io.IOException {\n        _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_NULL);\n    }\n\n    @java.lang.Override\n    public void writeObject(java.lang.Object value) throws java.io.IOException {\n        if (value == null) {\n            writeNull();\n            return;\n        }\n        java.lang.Class<?> raw = value.getClass();\n        if ((raw == byte[].class) || (value instanceof com.fasterxml.jackson.databind.util.RawValue)) {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n            return;\n        }\n        if (_objectCodec == null) {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, value);\n        } else {\n            _objectCodec.writeValue(this, value);\n        }\n    }\n\n    @java.lang.Override\n    public void writeTree(com.fasterxml.jackson.core.TreeNode node) throws java.io.IOException {\n        if (node == null) {\n            writeNull();\n            return;\n        }\n        if (_objectCodec == null) {\n            _appendValue(com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT, node);\n        } else {\n            _objectCodec.writeTree(this, node);\n        }\n    }\n\n    @java.lang.Override\n    public void writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, byte[] data, int offset, int len) throws java.io.IOException {\n        byte[] copy = new byte[len];\n        java.lang.System.arraycopy(data, offset, copy, 0, len);\n        writeObject(copy);\n    }\n\n    @java.lang.Override\n    public int writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.InputStream data, int dataLength) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    @java.lang.Override\n    public boolean canWriteTypeId() {\n        return _hasNativeTypeIds;\n    }\n\n    @java.lang.Override\n    public boolean canWriteObjectId() {\n        return _hasNativeObjectIds;\n    }\n\n    @java.lang.Override\n    public void writeTypeId(java.lang.Object id) {\n        _typeId = id;\n        _hasNativeId = true;\n    }\n\n    @java.lang.Override\n    public void writeObjectId(java.lang.Object id) {\n        _objectId = id;\n        _hasNativeId = true;\n    }\n\n    @java.lang.Override\n    public void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        if (_mayHaveNativeIds) {\n            _checkNativeIds(p);\n        }\n        switch (p.getCurrentToken()) {\n            case START_OBJECT :\n                writeStartObject();\n                break;\n            case END_OBJECT :\n                writeEndObject();\n                break;\n            case START_ARRAY :\n                writeStartArray();\n                break;\n            case END_ARRAY :\n                writeEndArray();\n                break;\n            case FIELD_NAME :\n                writeFieldName(p.getCurrentName());\n                break;\n            case VALUE_STRING :\n                if (p.hasTextCharacters()) {\n                    writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\n                } else {\n                    writeString(p.getText());\n                }\n                break;\n            case VALUE_NUMBER_INT :\n                switch (p.getNumberType()) {\n                    case INT :\n                        writeNumber(p.getIntValue());\n                        break;\n                    case BIG_INTEGER :\n                        writeNumber(p.getBigIntegerValue());\n                        break;\n                    default :\n                        writeNumber(p.getLongValue());\n                }\n                break;\n            case VALUE_NUMBER_FLOAT :\n                if (_forceBigDecimal) {\n                    writeNumber(p.getDecimalValue());\n                } else {\n                    switch (p.getNumberType()) {\n                        case BIG_DECIMAL :\n                            writeNumber(p.getDecimalValue());\n                            break;\n                        case FLOAT :\n                            writeNumber(p.getFloatValue());\n                            break;\n                        default :\n                            writeNumber(p.getDoubleValue());\n                    }\n                }\n                break;\n            case VALUE_TRUE :\n                writeBoolean(true);\n                break;\n            case VALUE_FALSE :\n                writeBoolean(false);\n                break;\n            case VALUE_NULL :\n                writeNull();\n                break;\n            case VALUE_EMBEDDED_OBJECT :\n                writeObject(p.getEmbeddedObject());\n                break;\n            default :\n                throw new java.lang.RuntimeException(\"Internal error: should never end up through this code path\");\n        }\n    }\n\n    @java.lang.Override\n    public void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser jp) throws java.io.IOException {\n        com.fasterxml.jackson.core.JsonToken t = jp.getCurrentToken();\n        if (t == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            if (_mayHaveNativeIds) {\n                _checkNativeIds(jp);\n            }\n            writeFieldName(jp.getCurrentName());\n            t = jp.nextToken();\n        }\n        if (_mayHaveNativeIds) {\n            _checkNativeIds(jp);\n        }\n        switch (t) {\n            case START_ARRAY :\n                writeStartArray();\n                while (jp.nextToken() != com.fasterxml.jackson.core.JsonToken.END_ARRAY) {\n                    copyCurrentStructure(jp);\n                } \n                writeEndArray();\n                break;\n            case START_OBJECT :\n                writeStartObject();\n                while (jp.nextToken() != com.fasterxml.jackson.core.JsonToken.END_OBJECT) {\n                    copyCurrentStructure(jp);\n                } \n                writeEndObject();\n                break;\n            default :\n                copyCurrentEvent(jp);\n        }\n    }\n\n    private final void _checkNativeIds(com.fasterxml.jackson.core.JsonParser jp) throws java.io.IOException {\n        if ((_typeId = jp.getTypeId()) != null) {\n            _hasNativeId = true;\n        }\n        if ((_objectId = jp.getObjectId()) != null) {\n            _hasNativeId = true;\n        }\n    }\n\n    protected final void _append(com.fasterxml.jackson.core.JsonToken type) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, _objectId, _typeId) : _last.append(_appendAt, type);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _append(com.fasterxml.jackson.core.JsonToken type, java.lang.Object value) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, value, _objectId, _typeId) : _last.append(_appendAt, type, value);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _appendValue(com.fasterxml.jackson.core.JsonToken type) {\n        _writeContext.writeValue();\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, _objectId, _typeId) : _last.append(_appendAt, type);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _appendValue(com.fasterxml.jackson.core.JsonToken type, java.lang.Object value) {\n        _writeContext.writeValue();\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.append(_appendAt, type, value, _objectId, _typeId) : _last.append(_appendAt, type, value);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    protected final void _appendRaw(int rawType, java.lang.Object value) {\n        com.fasterxml.jackson.databind.util.TokenBuffer.Segment next = (_hasNativeId) ? _last.appendRaw(_appendAt, rawType, value, _objectId, _typeId) : _last.appendRaw(_appendAt, rawType, value);\n        if (next == null) {\n            ++_appendAt;\n        } else {\n            _last = next;\n            _appendAt = 1;\n        }\n    }\n\n    @java.lang.Override\n    protected void _reportUnsupportedOperation() {\n        throw new java.lang.UnsupportedOperationException(\"Called operation not supported for TokenBuffer\");\n    }\n\n    protected static final class Parser extends com.fasterxml.jackson.core.base.ParserMinimalBase {\n        protected com.fasterxml.jackson.core.ObjectCodec _codec;\n\n        protected final boolean _hasNativeTypeIds;\n\n        protected final boolean _hasNativeObjectIds;\n\n        protected final boolean _hasNativeIds;\n\n        protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _segment;\n\n        protected int _segmentPtr;\n\n        protected com.fasterxml.jackson.core.json.JsonReadContext _parsingContext;\n\n        protected boolean _closed;\n\n        protected transient com.fasterxml.jackson.core.util.ByteArrayBuilder _byteBuilder;\n\n        protected com.fasterxml.jackson.core.JsonLocation _location = null;\n\n        public Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment firstSeg, com.fasterxml.jackson.core.ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds) {\n            super(0);\n            _segment = firstSeg;\n            _segmentPtr = -1;\n            _codec = codec;\n            _parsingContext = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(null);\n            _hasNativeTypeIds = hasNativeTypeIds;\n            _hasNativeObjectIds = hasNativeObjectIds;\n            _hasNativeIds = hasNativeTypeIds | hasNativeObjectIds;\n        }\n\n        public void setLocation(com.fasterxml.jackson.core.JsonLocation l) {\n            _location = l;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.ObjectCodec getCodec() {\n            return _codec;\n        }\n\n        @java.lang.Override\n        public void setCodec(com.fasterxml.jackson.core.ObjectCodec c) {\n            _codec = c;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.Version version() {\n            return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n        }\n\n        public com.fasterxml.jackson.core.JsonToken peekNextToken() throws java.io.IOException {\n            if (_closed) {\n                return null;\n            }\n            com.fasterxml.jackson.databind.util.TokenBuffer.Segment seg = _segment;\n            int ptr = _segmentPtr + 1;\n            if (ptr >= com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                ptr = 0;\n                seg = (seg == null) ? null : seg.next();\n            }\n            return seg == null ? null : seg.type(ptr);\n        }\n\n        @java.lang.Override\n        public void close() throws java.io.IOException {\n            if (!_closed) {\n                _closed = true;\n            }\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException {\n            if (_closed || (_segment == null)) {\n                return null;\n            }\n            if ((++_segmentPtr) >= com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                _segmentPtr = 0;\n                _segment = _segment.next();\n                if (_segment == null) {\n                    return null;\n                }\n            }\n            _currToken = _segment.type(_segmentPtr);\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n                java.lang.Object ob = _currentObject();\n                java.lang.String name = (ob instanceof java.lang.String) ? ((java.lang.String) (ob)) : ob.toString();\n                _parsingContext.setCurrentName(name);\n            } else if (_currToken == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n            } else if (_currToken == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n            } else if ((_currToken == com.fasterxml.jackson.core.JsonToken.END_OBJECT) || (_currToken == com.fasterxml.jackson.core.JsonToken.END_ARRAY)) {\n                _parsingContext = _parsingContext.getParent();\n                if (_parsingContext == null) {\n                    _parsingContext = com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(null);\n                }\n            }\n            return _currToken;\n        }\n\n        @java.lang.Override\n        public java.lang.String nextFieldName() throws java.io.IOException {\n            if (_closed || (_segment == null)) {\n                return null;\n            }\n            int ptr = _segmentPtr + 1;\n            if ((ptr < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) && (_segment.type(ptr) == com.fasterxml.jackson.core.JsonToken.FIELD_NAME)) {\n                _segmentPtr = ptr;\n                java.lang.Object ob = _segment.get(ptr);\n                java.lang.String name = (ob instanceof java.lang.String) ? ((java.lang.String) (ob)) : ob.toString();\n                _parsingContext.setCurrentName(name);\n                return name;\n            }\n            return nextToken() == com.fasterxml.jackson.core.JsonToken.FIELD_NAME ? getCurrentName() : null;\n        }\n\n        @java.lang.Override\n        public boolean isClosed() {\n            return _closed;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonStreamContext getParsingContext() {\n            return _parsingContext;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonLocation getTokenLocation() {\n            return getCurrentLocation();\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonLocation getCurrentLocation() {\n            return _location == null ? com.fasterxml.jackson.core.JsonLocation.NA : _location;\n        }\n\n        @java.lang.Override\n        public java.lang.String getCurrentName() {\n            if ((_currToken == com.fasterxml.jackson.core.JsonToken.START_OBJECT) || (_currToken == com.fasterxml.jackson.core.JsonToken.START_ARRAY)) {\n                com.fasterxml.jackson.core.json.JsonReadContext parent = _parsingContext.getParent();\n                return parent.getCurrentName();\n            }\n            return _parsingContext.getCurrentName();\n        }\n\n        @java.lang.Override\n        public void overrideCurrentName(java.lang.String name) {\n            com.fasterxml.jackson.core.json.JsonReadContext ctxt = _parsingContext;\n            if ((_currToken == com.fasterxml.jackson.core.JsonToken.START_OBJECT) || (_currToken == com.fasterxml.jackson.core.JsonToken.START_ARRAY)) {\n                ctxt = ctxt.getParent();\n            }\n            try {\n                ctxt.setCurrentName(name);\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(e);\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getText() {\n            if ((_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) || (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME)) {\n                java.lang.Object ob = _currentObject();\n                if (ob instanceof java.lang.String) {\n                    return ((java.lang.String) (ob));\n                }\n                return ob == null ? null : ob.toString();\n            }\n            if (_currToken == null) {\n                return null;\n            }\n            switch (_currToken) {\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    java.lang.Object ob = _currentObject();\n                    return ob == null ? null : ob.toString();\n                default :\n                    return _currToken.asString();\n            }\n        }\n\n        @java.lang.Override\n        public char[] getTextCharacters() {\n            java.lang.String str = getText();\n            return str == null ? null : str.toCharArray();\n        }\n\n        @java.lang.Override\n        public int getTextLength() {\n            java.lang.String str = getText();\n            return str == null ? 0 : str.length();\n        }\n\n        @java.lang.Override\n        public int getTextOffset() {\n            return 0;\n        }\n\n        @java.lang.Override\n        public boolean hasTextCharacters() {\n            return false;\n        }\n\n        @java.lang.Override\n        public java.math.BigInteger getBigIntegerValue() throws java.io.IOException {\n            java.lang.Number n = getNumberValue();\n            if (n instanceof java.math.BigInteger) {\n                return ((java.math.BigInteger) (n));\n            }\n            if (getNumberType() == com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL) {\n                return ((java.math.BigDecimal) (n)).toBigInteger();\n            }\n            return java.math.BigInteger.valueOf(n.longValue());\n        }\n\n        @java.lang.Override\n        public java.math.BigDecimal getDecimalValue() throws java.io.IOException {\n            java.lang.Number n = getNumberValue();\n            if (n instanceof java.math.BigDecimal) {\n                return ((java.math.BigDecimal) (n));\n            }\n            switch (getNumberType()) {\n                case INT :\n                case LONG :\n                    return java.math.BigDecimal.valueOf(n.longValue());\n                case BIG_INTEGER :\n                    return new java.math.BigDecimal(((java.math.BigInteger) (n)));\n                default :\n            }\n            return java.math.BigDecimal.valueOf(n.doubleValue());\n        }\n\n        @java.lang.Override\n        public double getDoubleValue() throws java.io.IOException {\n            return getNumberValue().doubleValue();\n        }\n\n        @java.lang.Override\n        public float getFloatValue() throws java.io.IOException {\n            return getNumberValue().floatValue();\n        }\n\n        @java.lang.Override\n        public int getIntValue() throws java.io.IOException {\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT) {\n                return ((java.lang.Number) (_currentObject())).intValue();\n            }\n            return getNumberValue().intValue();\n        }\n\n        @java.lang.Override\n        public long getLongValue() throws java.io.IOException {\n            return getNumberValue().longValue();\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.core.JsonParser.NumberType getNumberType() throws java.io.IOException {\n            java.lang.Number n = getNumberValue();\n            if (n instanceof java.lang.Integer) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.INT;\n            }\n            if (n instanceof java.lang.Long) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.LONG;\n            }\n            if (n instanceof java.lang.Double) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.DOUBLE;\n            }\n            if (n instanceof java.math.BigDecimal) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL;\n            }\n            if (n instanceof java.math.BigInteger) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER;\n            }\n            if (n instanceof java.lang.Float) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.FLOAT;\n            }\n            if (n instanceof java.lang.Short) {\n                return com.fasterxml.jackson.core.JsonParser.NumberType.INT;\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        public final java.lang.Number getNumberValue() throws java.io.IOException {\n            _checkIsNumber();\n            java.lang.Object value = _currentObject();\n            if (value instanceof java.lang.Number) {\n                return ((java.lang.Number) (value));\n            }\n            if (value instanceof java.lang.String) {\n                java.lang.String str = ((java.lang.String) (value));\n                if (str.indexOf('.') >= 0) {\n                    return java.lang.Double.parseDouble(str);\n                }\n                return java.lang.Long.parseLong(str);\n            }\n            if (value == null) {\n                return null;\n            }\n            throw new java.lang.IllegalStateException(\"Internal error: entry should be a Number, but is of type \" + value.getClass().getName());\n        }\n\n        @java.lang.Override\n        public java.lang.Object getEmbeddedObject() {\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT) {\n                return _currentObject();\n            }\n            return null;\n        }\n\n        @java.lang.Override\n        @java.lang.SuppressWarnings(\"resource\")\n        public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n            if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT) {\n                java.lang.Object ob = _currentObject();\n                if (ob instanceof byte[]) {\n                    return ((byte[]) (ob));\n                }\n            }\n            if (_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n                throw _constructError((\"Current token (\" + _currToken) + \") not VALUE_STRING (or VALUE_EMBEDDED_OBJECT with byte[]), can not access as binary\");\n            }\n            final java.lang.String str = getText();\n            if (str == null) {\n                return null;\n            }\n            com.fasterxml.jackson.core.util.ByteArrayBuilder builder = _byteBuilder;\n            if (builder == null) {\n                _byteBuilder = builder = new com.fasterxml.jackson.core.util.ByteArrayBuilder(100);\n            } else {\n                _byteBuilder.reset();\n            }\n            _decodeBase64(str, builder, b64variant);\n            return builder.toByteArray();\n        }\n\n        @java.lang.Override\n        public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.OutputStream out) throws java.io.IOException {\n            byte[] data = getBinaryValue(b64variant);\n            if (data != null) {\n                out.write(data, 0, data.length);\n                return data.length;\n            }\n            return 0;\n        }\n\n        @java.lang.Override\n        public boolean canReadObjectId() {\n            return _hasNativeObjectIds;\n        }\n\n        @java.lang.Override\n        public boolean canReadTypeId() {\n            return _hasNativeTypeIds;\n        }\n\n        @java.lang.Override\n        public java.lang.Object getTypeId() {\n            return _segment.findTypeId(_segmentPtr);\n        }\n\n        @java.lang.Override\n        public java.lang.Object getObjectId() {\n            return _segment.findObjectId(_segmentPtr);\n        }\n\n        protected final java.lang.Object _currentObject() {\n            return _segment.get(_segmentPtr);\n        }\n\n        protected final void _checkIsNumber() throws com.fasterxml.jackson.core.JsonParseException {\n            if ((_currToken == null) || (!_currToken.isNumeric())) {\n                throw _constructError((\"Current token (\" + _currToken) + \") not numeric, can not use numeric value accessors\");\n            }\n        }\n\n        @java.lang.Override\n        protected void _handleEOF() throws com.fasterxml.jackson.core.JsonParseException {\n            _throwInternal();\n        }\n    }\n\n    protected static final class Segment {\n        public static final int TOKENS_PER_SEGMENT = 16;\n\n        private static final com.fasterxml.jackson.core.JsonToken[] TOKEN_TYPES_BY_INDEX;\n\n        static {\n            TOKEN_TYPES_BY_INDEX = new com.fasterxml.jackson.core.JsonToken[16];\n            com.fasterxml.jackson.core.JsonToken[] t = com.fasterxml.jackson.core.JsonToken.values();\n            java.lang.System.arraycopy(t, 1, TOKEN_TYPES_BY_INDEX, 1, java.lang.Math.min(15, t.length - 1));\n        }\n\n        protected com.fasterxml.jackson.databind.util.TokenBuffer.Segment _next;\n\n        protected long _tokenTypes;\n\n        protected final java.lang.Object[] _tokens = new java.lang.Object[com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT];\n\n        protected java.util.TreeMap<java.lang.Integer, java.lang.Object> _nativeIds;\n\n        public Segment() {\n        }\n\n        public com.fasterxml.jackson.core.JsonToken type(int index) {\n            long l = _tokenTypes;\n            if (index > 0) {\n                l >>= index << 2;\n            }\n            int ix = ((int) (l)) & 0xf;\n            return com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKEN_TYPES_BY_INDEX[ix];\n        }\n\n        public int rawType(int index) {\n            long l = _tokenTypes;\n            if (index > 0) {\n                l >>= index << 2;\n            }\n            int ix = ((int) (l)) & 0xf;\n            return ix;\n        }\n\n        public java.lang.Object get(int index) {\n            return _tokens[index];\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment next() {\n            return _next;\n        }\n\n        public boolean hasIds() {\n            return _nativeIds != null;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object objectId, java.lang.Object typeId) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType, objectId, typeId);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType, objectId, typeId);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType, value);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType, value);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment append(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, tokenType, value, objectId, typeId);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, tokenType, value, objectId, typeId);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment appendRaw(int index, int rawTokenType, java.lang.Object value) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, rawTokenType, value);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, rawTokenType, value);\n            return _next;\n        }\n\n        public com.fasterxml.jackson.databind.util.TokenBuffer.Segment appendRaw(int index, int rawTokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            if (index < com.fasterxml.jackson.databind.util.TokenBuffer.Segment.TOKENS_PER_SEGMENT) {\n                set(index, rawTokenType, value, objectId, typeId);\n                return null;\n            }\n            _next = new com.fasterxml.jackson.databind.util.TokenBuffer.Segment();\n            _next.set(0, rawTokenType, value, objectId, typeId);\n            return _next;\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType) {\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object objectId, java.lang.Object typeId) {\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n            assignNativeIds(index, objectId, typeId);\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value) {\n            _tokens[index] = value;\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n        }\n\n        private void set(int index, com.fasterxml.jackson.core.JsonToken tokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            _tokens[index] = value;\n            long typeCode = tokenType.ordinal();\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n            assignNativeIds(index, objectId, typeId);\n        }\n\n        private void set(int index, int rawTokenType, java.lang.Object value) {\n            _tokens[index] = value;\n            long typeCode = ((long) (rawTokenType));\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n        }\n\n        private void set(int index, int rawTokenType, java.lang.Object value, java.lang.Object objectId, java.lang.Object typeId) {\n            _tokens[index] = value;\n            long typeCode = ((long) (rawTokenType));\n            if (index > 0) {\n                typeCode <<= index << 2;\n            }\n            _tokenTypes |= typeCode;\n            assignNativeIds(index, objectId, typeId);\n        }\n\n        private final void assignNativeIds(int index, java.lang.Object objectId, java.lang.Object typeId) {\n            if (_nativeIds == null) {\n                _nativeIds = new java.util.TreeMap<java.lang.Integer, java.lang.Object>();\n            }\n            if (objectId != null) {\n                _nativeIds.put(_objectIdIndex(index), objectId);\n            }\n            if (typeId != null) {\n                _nativeIds.put(_typeIdIndex(index), typeId);\n            }\n        }\n\n        public java.lang.Object findObjectId(int index) {\n            return _nativeIds == null ? null : _nativeIds.get(_objectIdIndex(index));\n        }\n\n        public java.lang.Object findTypeId(int index) {\n            return _nativeIds == null ? null : _nativeIds.get(_typeIdIndex(index));\n        }\n\n        private final int _typeIdIndex(int i) {\n            return i + i;\n        }\n\n        private final int _objectIdIndex(int i) {\n            return (i + i) + 1;\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "TokenBuffer"
    }
  ],
  "id": "JacksonDatabind_31"
}