{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "restoreLookAhead(token)",
            "src_parent": "{\n    if (token == JsDocToken.STAR) {\n        return newNode(Token.STAR);\n    } else if (token == JsDocToken.LB) {\n        skipEOLs();\n        return parseArrayType(next());\n    } else if (token == JsDocToken.LC) {\n        skipEOLs();\n        return parseRecordType(next());\n    } else if (token == JsDocToken.LP) {\n        skipEOLs();\n        return parseUnionType(next());\n    } else if (token == JsDocToken.STRING) {\n        java.lang.String string = stream.getString();\n        if (\"function\".equals(string)) {\n            skipEOLs();\n            return parseFunctionType(next());\n        } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n            return newStringNode(string);\n        } else {\n            return parseTypeName(token);\n        }\n    }\n    restoreLookAhead(token);\n    return reportGenericTypeSyntaxWarning();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "restoreLookAhead(token)",
            "src_parent": "{\n    restoreLookAhead(token);\n    return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "token = eatTokensUntilEOL()",
            "dst_parent": "{\n    switch (annotation) {\n        case DEFINE :\n            if (!jsdocBuilder.recordDefineType(type)) {\n                parser.addParserWarning(\"msg.jsdoc.define\", lineno, charno);\n            }\n            break;\n        case RETURN :\n            if (!jsdocBuilder.recordReturnType(type)) {\n                parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n                break;\n            }\n            if (jsdocBuilder.shouldParseDocumentation()) {\n                com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token);\n                java.lang.String returnDescription = returnDescriptionInfo.string;\n                if (returnDescription.length() > 0) {\n                    jsdocBuilder.recordReturnDescription(returnDescription);\n                }\n                token = returnDescriptionInfo.token;\n            } else {\n                token = eatTokensUntilEOL(token);\n            }\n            continue retry;\n        case THIS :\n            if (!jsdocBuilder.recordThisType(type)) {\n                parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n            }\n            break;\n        case TYPE :\n            if (!jsdocBuilder.recordType(type)) {\n                parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n            }\n            break;\n        case TYPEDEF :\n            if (!jsdocBuilder.recordTypedef(type)) {\n                parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n            }\n            break;\n    }\n    token = eatTokensUntilEOL();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Assignment",
            "operator": "MOV",
            "src": "token = eatTokensUntilEOL()",
            "src_parent": "case TYPEDEF :\n    lineno = stream.getLineno();\n    charno = stream.getCharno();\n    com.google.javascript.rhino.Node typeNode = null;\n    if ((!lookAheadForTypeAnnotation()) && (annotation == Annotation.RETURN)) {\n        typeNode = newNode(Token.QMARK);\n    } else {\n        skipEOLs();\n        token = next();\n        typeNode = parseAndRecordTypeNode(token, lineno, charno);\n    }\n    if (annotation == Annotation.THIS) {\n        typeNode = wrapNode(Token.BANG, typeNode);\n        if ((typeNode != null) && (token != JsDocToken.LC)) {\n            typeNode.putBooleanProp(Node.BRACELESS_TYPE, true);\n        }\n    }\n    type = createJSTypeExpression(typeNode);\n    if (type == null) {\n    } else {\n        switch (annotation) {\n            case DEFINE :\n                if (!jsdocBuilder.recordDefineType(type)) {\n                    parser.addParserWarning(\"msg.jsdoc.define\", lineno, charno);\n                }\n                break;\n            case RETURN :\n                if (!jsdocBuilder.recordReturnType(type)) {\n                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n                    break;\n                }\n                if (jsdocBuilder.shouldParseDocumentation()) {\n                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token);\n                    java.lang.String returnDescription = returnDescriptionInfo.string;\n                    if (returnDescription.length() > 0) {\n                        jsdocBuilder.recordReturnDescription(returnDescription);\n                    }\n                    token = returnDescriptionInfo.token;\n                } else {\n                    token = eatTokensUntilEOL(token);\n                }\n                continue retry;\n            case THIS :\n                if (!jsdocBuilder.recordThisType(type)) {\n                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n            case TYPE :\n                if (!jsdocBuilder.recordType(type)) {\n                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n            case TYPEDEF :\n                if (!jsdocBuilder.recordTypedef(type)) {\n                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n        }\n    }\n    token = eatTokensUntilEOL();\n    continue retry;",
            "src_parent_type": "Case",
            "src_type": "Assignment"
          }
        }
      ],
      "file_name": "JsDocInfoParser"
    }
  ],
  "id": "Closure_68"
}