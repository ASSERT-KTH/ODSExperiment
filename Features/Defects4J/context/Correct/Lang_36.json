{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(!java.lang.Character.isDigit(lastChar)) && (lastChar != '.')",
            "src_parent": "if ((!java.lang.Character.isDigit(lastChar)) && (lastChar != '.')) {\n    if ((expPos > (-1)) && (expPos < (str.length() - 1))) {\n        exp = str.substring(expPos + 1, str.length() - 1);\n    } else {\n        exp = null;\n    }\n    java.lang.String numeric = str.substring(0, str.length() - 1);\n    boolean allZeros = org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant) && org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp);\n    switch (lastChar) {\n        case 'l' :\n        case 'L' :\n            if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang3.math.NumberUtils.isDigits(numeric))) {\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                } catch (java.lang.NumberFormatException nfe) {\n                }\n                return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n            }\n            throw new java.lang.NumberFormatException(str + \" is not a valid number.\");\n        case 'f' :\n        case 'F' :\n            try {\n                java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {\n                    return f;\n                }\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n        case 'd' :\n        case 'D' :\n            try {\n                java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {\n                    return d;\n                }\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n            try {\n                return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        default :\n            throw new java.lang.NumberFormatException(str + \" is not a valid number.\");\n    }\n} else {\n    if ((expPos > (-1)) && (expPos < (str.length() - 1))) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if ((dec == null) && (exp == null)) {\n        try {\n            return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        try {\n            return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n    } else {\n        boolean allZeros = org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant) && org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp);\n        try {\n            java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n            if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {\n                return f;\n            }\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        try {\n            java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n            if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {\n                return d;\n            }\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "UnaryOperator",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (chars[i] == '.') {\n    if (hasDecPoint || hasExp) {\n        return false;\n    }\n    return foundDigit;\n}",
            "src_parent": "{\n    if ((chars[i] >= '0') && (chars[i] <= '9')) {\n        return true;\n    }\n    if ((chars[i] == 'e') || (chars[i] == 'E')) {\n        return false;\n    }\n    if (chars[i] == '.') {\n        if (hasDecPoint || hasExp) {\n            return false;\n        }\n        return foundDigit;\n    }\n    if ((!allowSigns) && ((((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F'))) {\n        return foundDigit;\n    }\n    if ((chars[i] == 'l') || (chars[i] == 'L')) {\n        return foundDigit && (!hasExp);\n    }\n    return false;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!java.lang.Character.isDigit(lastChar)",
            "dst_parent": "if (!java.lang.Character.isDigit(lastChar)) {\n    if ((expPos > (-1)) && (expPos < (str.length() - 1))) {\n        exp = str.substring(expPos + 1, str.length() - 1);\n    } else {\n        exp = null;\n    }\n    java.lang.String numeric = str.substring(0, str.length() - 1);\n    boolean allZeros = org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant) && org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp);\n    switch (lastChar) {\n        case 'l' :\n        case 'L' :\n            if (((dec == null) && (exp == null)) && (((numeric.charAt(0) == '-') && org.apache.commons.lang3.math.NumberUtils.isDigits(numeric.substring(1))) || org.apache.commons.lang3.math.NumberUtils.isDigits(numeric))) {\n                try {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(numeric);\n                } catch (java.lang.NumberFormatException nfe) {\n                }\n                return org.apache.commons.lang3.math.NumberUtils.createBigInteger(numeric);\n            }\n            throw new java.lang.NumberFormatException(str + \" is not a valid number.\");\n        case 'f' :\n        case 'F' :\n            try {\n                java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(numeric);\n                if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {\n                    return f;\n                }\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n        case 'd' :\n        case 'D' :\n            try {\n                java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(numeric);\n                if (!(d.isInfinite() || ((d.floatValue() == 0.0) && (!allZeros)))) {\n                    return d;\n                }\n            } catch (java.lang.NumberFormatException nfe) {\n            }\n            try {\n                return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(numeric);\n            } catch (java.lang.NumberFormatException e) {\n            }\n        default :\n            throw new java.lang.NumberFormatException(str + \" is not a valid number.\");\n    }\n} else {\n    if ((expPos > (-1)) && (expPos < (str.length() - 1))) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if ((dec == null) && (exp == null)) {\n        try {\n            return org.apache.commons.lang3.math.NumberUtils.createInteger(str);\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        try {\n            return org.apache.commons.lang3.math.NumberUtils.createLong(str);\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        return org.apache.commons.lang3.math.NumberUtils.createBigInteger(str);\n    } else {\n        boolean allZeros = org.apache.commons.lang3.math.NumberUtils.isAllZeros(mant) && org.apache.commons.lang3.math.NumberUtils.isAllZeros(exp);\n        try {\n            java.lang.Float f = org.apache.commons.lang3.math.NumberUtils.createFloat(str);\n            if (!(f.isInfinite() || ((f.floatValue() == 0.0F) && (!allZeros)))) {\n                return f;\n            }\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        try {\n            java.lang.Double d = org.apache.commons.lang3.math.NumberUtils.createDouble(str);\n            if (!(d.isInfinite() || ((d.doubleValue() == 0.0) && (!allZeros)))) {\n                return d;\n            }\n        } catch (java.lang.NumberFormatException nfe) {\n        }\n        return org.apache.commons.lang3.math.NumberUtils.createBigDecimal(str);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "(!java.lang.Character.isDigit(lastChar))",
            "src_parent": "(!java.lang.Character.isDigit(lastChar)) && (lastChar != '.')",
            "src_parent_type": "BinaryOperator",
            "src_type": "UnaryOperator"
          }
        }
      ],
      "file_name": "NumberUtils"
    }
  ],
  "id": "Lang_36"
}