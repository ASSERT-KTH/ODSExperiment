{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "owner != null",
            "src_parent": "if (owner != null) {\n    org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n    if (entities != null) {\n        entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((plotState != null) && (hotspot != null)) {\n    org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner();\n    if (owner != null) {\n        org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n}",
            "src_parent": "{\n    if (state == null) {\n        throw new java.lang.IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || label.equals(\"\")) {\n        return state;\n    }\n    java.awt.Font font = getLabelFont();\n    org.jfree.chart.util.RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    java.awt.FontMetrics fm = g2.getFontMetrics();\n    java.awt.geom.Rectangle2D labelBounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n    java.awt.Shape hotspot = null;\n    if (edge == org.jfree.chart.util.RectangleEdge.TOP) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) (dataArea.getCenterX()));\n        float labely = ((float) ((state.getCursor() - insets.getBottom()) - (h / 2.0)));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorUp((insets.getTop() + labelBounds.getHeight()) + insets.getBottom());\n    } else if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) (dataArea.getCenterX()));\n        float labely = ((float) ((state.getCursor() + insets.getTop()) + (h / 2.0)));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorDown((insets.getTop() + labelBounds.getHeight()) + insets.getBottom());\n    } else if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle() - (java.lang.Math.PI / 2.0), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) ((state.getCursor() - insets.getRight()) - (w / 2.0)));\n        float labely = ((float) (dataArea.getCenterY()));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - (java.lang.Math.PI / 2.0), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorLeft((insets.getLeft() + labelBounds.getWidth()) + insets.getRight());\n    } else if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle() + (java.lang.Math.PI / 2.0), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) ((state.getCursor() + insets.getLeft()) + (w / 2.0)));\n        float labely = ((float) (dataArea.getY() + (dataArea.getHeight() / 2.0)));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + (java.lang.Math.PI / 2.0), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorRight((insets.getLeft() + labelBounds.getWidth()) + insets.getRight());\n    }\n    if ((plotState != null) && (hotspot != null)) {\n        org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner();\n        if (owner != null) {\n            org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n            }\n        }\n    }\n    return state;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((plotState != null) && (hotspot != null)) {\n    org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner();\n    org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n    if (entities != null) {\n        entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n    }\n}",
            "dst_parent": "{\n    if (state == null) {\n        throw new java.lang.IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    if ((label == null) || label.equals(\"\")) {\n        return state;\n    }\n    java.awt.Font font = getLabelFont();\n    org.jfree.chart.util.RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    java.awt.FontMetrics fm = g2.getFontMetrics();\n    java.awt.geom.Rectangle2D labelBounds = org.jfree.chart.text.TextUtilities.getTextBounds(label, g2, fm);\n    java.awt.Shape hotspot = null;\n    if (edge == org.jfree.chart.util.RectangleEdge.TOP) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) (dataArea.getCenterX()));\n        float labely = ((float) ((state.getCursor() - insets.getBottom()) - (h / 2.0)));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorUp((insets.getTop() + labelBounds.getHeight()) + insets.getBottom());\n    } else if (edge == org.jfree.chart.util.RectangleEdge.BOTTOM) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle(), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) (dataArea.getCenterX()));\n        float labely = ((float) ((state.getCursor() + insets.getTop()) + (h / 2.0)));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorDown((insets.getTop() + labelBounds.getHeight()) + insets.getBottom());\n    } else if (edge == org.jfree.chart.util.RectangleEdge.LEFT) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle() - (java.lang.Math.PI / 2.0), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) ((state.getCursor() - insets.getRight()) - (w / 2.0)));\n        float labely = ((float) (dataArea.getCenterY()));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() - (java.lang.Math.PI / 2.0), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorLeft((insets.getLeft() + labelBounds.getWidth()) + insets.getRight());\n    } else if (edge == org.jfree.chart.util.RectangleEdge.RIGHT) {\n        java.awt.geom.AffineTransform t = java.awt.geom.AffineTransform.getRotateInstance(getLabelAngle() + (java.lang.Math.PI / 2.0), labelBounds.getCenterX(), labelBounds.getCenterY());\n        java.awt.Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = ((float) (labelBounds.getWidth()));\n        float h = ((float) (labelBounds.getHeight()));\n        float labelx = ((float) ((state.getCursor() + insets.getLeft()) + (w / 2.0)));\n        float labely = ((float) (dataArea.getY() + (dataArea.getHeight() / 2.0)));\n        org.jfree.chart.text.TextUtilities.drawRotatedString(label, g2, labelx, labely, TextAnchor.CENTER, getLabelAngle() + (java.lang.Math.PI / 2.0), TextAnchor.CENTER);\n        hotspot = new java.awt.geom.Rectangle2D.Float(labelx - (w / 2.0F), labely - (h / 2.0F), w, h);\n        state.cursorRight((insets.getLeft() + labelBounds.getWidth()) + insets.getRight());\n    }\n    if ((plotState != null) && (hotspot != null)) {\n        org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner();\n        org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n    return state;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (owner != null) {\n    org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n    if (entities != null) {\n        entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n    }\n}",
            "src_parent": "{\n    org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner();\n    if (owner != null) {\n        org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner()",
            "dst_parent": "{\n    org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner();\n    org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n    if (entities != null) {\n        entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner()",
            "src_parent": "{\n    org.jfree.chart.ChartRenderingInfo owner = plotState.getOwner();\n    if (owner != null) {\n        org.jfree.chart.entity.EntityCollection entities = owner.getEntityCollection();\n        if (entities != null) {\n            entities.add(new org.jfree.chart.entity.AxisLabelEntity(this, hotspot, this.labelToolTip, this.labelURL));\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        }
      ],
      "file_name": "Axis"
    }
  ],
  "id": "Chart_26"
}