{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "writeRaw(buf, 0, len2)",
            "dst_parent": "{\n    int len2 = java.lang.Math.min(buf.length, len);\n    text.getChars(offset, offset + len2, buf, 0);\n    writeRaw(buf, 0, len2);\n    offset += len2;\n    len -= len2;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "_writeRawSegment(buf, 0, len2)",
            "src_parent": "{\n    int len2 = java.lang.Math.min(maxChunk, len);\n    text.getChars(offset, offset + len2, buf, 0);\n    if ((_outputTail + maxBytes) > _outputEnd) {\n        _flushBuffer();\n    }\n    if (len > 0) {\n        char ch = buf[len2 - 1];\n        if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n            --len2;\n        }\n    }\n    _writeRawSegment(buf, 0, len2);\n    offset += len2;\n    len -= len2;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"Split surrogate on writeRaw() input (last character)\"",
            "dst_parent": "_reportError(\"Split surrogate on writeRaw() input (last character)\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "UPD",
            "src": "\"Split surrogate on writeRaw() input (last character): first character 0x%4x\"",
            "src_parent": "java.lang.String.format(\"Split surrogate on writeRaw() input (last character): first character 0x%4x\", ch)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (len <= buf.length) {\n    text.getChars(offset, offset + len, buf, 0);\n    _writeRawSegment(buf, 0, len);\n    return;\n}",
            "src_parent": "{\n    final char[] buf = _charBuffer;\n    if (len <= buf.length) {\n        text.getChars(offset, offset + len, buf, 0);\n        _writeRawSegment(buf, 0, len);\n        return;\n    }\n    final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4);\n    final int maxBytes = maxChunk * 3;\n    while (len > 0) {\n        int len2 = java.lang.Math.min(maxChunk, len);\n        text.getChars(offset, offset + len2, buf, 0);\n        if ((_outputTail + maxBytes) > _outputEnd) {\n            _flushBuffer();\n        }\n        if (len > 0) {\n            char ch = buf[len2 - 1];\n            if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n                --len2;\n            }\n        }\n        _writeRawSegment(buf, 0, len2);\n        offset += len2;\n        len -= len2;\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4)",
            "src_parent": "{\n    final char[] buf = _charBuffer;\n    if (len <= buf.length) {\n        text.getChars(offset, offset + len, buf, 0);\n        _writeRawSegment(buf, 0, len);\n        return;\n    }\n    final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4);\n    final int maxBytes = maxChunk * 3;\n    while (len > 0) {\n        int len2 = java.lang.Math.min(maxChunk, len);\n        text.getChars(offset, offset + len2, buf, 0);\n        if ((_outputTail + maxBytes) > _outputEnd) {\n            _flushBuffer();\n        }\n        if (len > 0) {\n            char ch = buf[len2 - 1];\n            if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n                --len2;\n            }\n        }\n        _writeRawSegment(buf, 0, len2);\n        offset += len2;\n        len -= len2;\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "final int maxBytes = maxChunk * 3",
            "src_parent": "{\n    final char[] buf = _charBuffer;\n    if (len <= buf.length) {\n        text.getChars(offset, offset + len, buf, 0);\n        _writeRawSegment(buf, 0, len);\n        return;\n    }\n    final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4);\n    final int maxBytes = maxChunk * 3;\n    while (len > 0) {\n        int len2 = java.lang.Math.min(maxChunk, len);\n        text.getChars(offset, offset + len2, buf, 0);\n        if ((_outputTail + maxBytes) > _outputEnd) {\n            _flushBuffer();\n        }\n        if (len > 0) {\n            char ch = buf[len2 - 1];\n            if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n                --len2;\n            }\n        }\n        _writeRawSegment(buf, 0, len2);\n        offset += len2;\n        len -= len2;\n    } \n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "maxChunk",
            "src_parent": "java.lang.Math.min(maxChunk, len)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((_outputTail + maxBytes) > _outputEnd) {\n    _flushBuffer();\n}",
            "src_parent": "{\n    int len2 = java.lang.Math.min(maxChunk, len);\n    text.getChars(offset, offset + len2, buf, 0);\n    if ((_outputTail + maxBytes) > _outputEnd) {\n        _flushBuffer();\n    }\n    if (len > 0) {\n        char ch = buf[len2 - 1];\n        if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n            --len2;\n        }\n    }\n    _writeRawSegment(buf, 0, len2);\n    offset += len2;\n    len -= len2;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (len > 0) {\n    char ch = buf[len2 - 1];\n    if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n        --len2;\n    }\n}",
            "src_parent": "{\n    int len2 = java.lang.Math.min(maxChunk, len);\n    text.getChars(offset, offset + len2, buf, 0);\n    if ((_outputTail + maxBytes) > _outputEnd) {\n        _flushBuffer();\n    }\n    if (len > 0) {\n        char ch = buf[len2 - 1];\n        if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n            --len2;\n        }\n    }\n    _writeRawSegment(buf, 0, len2);\n    offset += len2;\n    len -= len2;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private void _writeRawSegment(char[] cbuf, int offset, int end) throws java.io.IOException {\n    main_loop : while (offset < end) {\n        inner_loop : while (true) {\n            int ch = ((int) (cbuf[offset]));\n            if (ch > 0x7f) {\n                break inner_loop;\n            }\n            _outputBuffer[_outputTail++] = ((byte) (ch));\n            if ((++offset) >= end) {\n                break main_loop;\n            }\n        } \n        char ch = cbuf[offset++];\n        if (ch < 0x800) {\n            _outputBuffer[_outputTail++] = ((byte) (0xc0 | (ch >> 6)));\n            _outputBuffer[_outputTail++] = ((byte) (0x80 | (ch & 0x3f)));\n        } else {\n            offset = _outputRawMultiByteChar(ch, cbuf, offset, end);\n        }\n    } \n}",
            "src_parent": "public class UTF8JsonGenerator extends com.fasterxml.jackson.core.json.JsonGeneratorImpl {\n    private static final byte BYTE_u = ((byte) ('u'));\n\n    private static final byte BYTE_0 = ((byte) ('0'));\n\n    private static final byte BYTE_LBRACKET = ((byte) ('['));\n\n    private static final byte BYTE_RBRACKET = ((byte) (']'));\n\n    private static final byte BYTE_LCURLY = ((byte) ('{'));\n\n    private static final byte BYTE_RCURLY = ((byte) ('}'));\n\n    private static final byte BYTE_BACKSLASH = ((byte) ('\\\\'));\n\n    private static final byte BYTE_COMMA = ((byte) (','));\n\n    private static final byte BYTE_COLON = ((byte) (':'));\n\n    private static final byte BYTE_QUOTE = ((byte) ('\\\"'));\n\n    private static final int MAX_BYTES_TO_BUFFER = 512;\n\n    private static final byte[] HEX_CHARS = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes();\n\n    private static final byte[] NULL_BYTES = new byte[]{ 'n', 'u', 'l', 'l' };\n\n    private static final byte[] TRUE_BYTES = new byte[]{ 't', 'r', 'u', 'e' };\n\n    private static final byte[] FALSE_BYTES = new byte[]{ 'f', 'a', 'l', 's', 'e' };\n\n    protected final java.io.OutputStream _outputStream;\n\n    protected byte[] _outputBuffer;\n\n    protected int _outputTail;\n\n    protected final int _outputEnd;\n\n    protected final int _outputMaxContiguous;\n\n    protected char[] _charBuffer;\n\n    protected final int _charBufferLength;\n\n    protected byte[] _entityBuffer;\n\n    protected boolean _bufferRecyclable;\n\n    public UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext ctxt, int features, com.fasterxml.jackson.core.ObjectCodec codec, java.io.OutputStream out) {\n        super(ctxt, features, codec);\n        _outputStream = out;\n        _bufferRecyclable = true;\n        _outputBuffer = ctxt.allocWriteEncodingBuffer();\n        _outputEnd = _outputBuffer.length;\n        _outputMaxContiguous = _outputEnd >> 3;\n        _charBuffer = ctxt.allocConcatBuffer();\n        _charBufferLength = _charBuffer.length;\n        if (isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII)) {\n            setHighestNonEscapedChar(127);\n        }\n    }\n\n    public UTF8JsonGenerator(com.fasterxml.jackson.core.io.IOContext ctxt, int features, com.fasterxml.jackson.core.ObjectCodec codec, java.io.OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable) {\n        super(ctxt, features, codec);\n        _outputStream = out;\n        _bufferRecyclable = bufferRecyclable;\n        _outputTail = outputOffset;\n        _outputBuffer = outputBuffer;\n        _outputEnd = _outputBuffer.length;\n        _outputMaxContiguous = _outputEnd >> 3;\n        _charBuffer = ctxt.allocConcatBuffer();\n        _charBufferLength = _charBuffer.length;\n    }\n\n    @java.lang.Override\n    public java.lang.Object getOutputTarget() {\n        return _outputStream;\n    }\n\n    @java.lang.Override\n    public int getOutputBuffered() {\n        return _outputTail;\n    }\n\n    @java.lang.Override\n    public void writeFieldName(java.lang.String name) throws java.io.IOException {\n        if (_cfgPrettyPrinter != null) {\n            _writePPFieldName(name);\n            return;\n        }\n        final int status = _writeContext.writeFieldName(name);\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COMMA;\n        }\n        if (_cfgUnqNames) {\n            _writeStringSegments(name, false);\n            return;\n        }\n        final int len = name.length();\n        if (len > _charBufferLength) {\n            _writeStringSegments(name, true);\n            return;\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        if (len <= _outputMaxContiguous) {\n            if ((_outputTail + len) > _outputEnd) {\n                _flushBuffer();\n            }\n            _writeStringSegment(name, 0, len);\n        } else {\n            _writeStringSegments(name, 0, len);\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeFieldName(com.fasterxml.jackson.core.SerializableString name) throws java.io.IOException {\n        if (_cfgPrettyPrinter != null) {\n            _writePPFieldName(name);\n            return;\n        }\n        final int status = _writeContext.writeFieldName(name.getValue());\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COMMA;\n        }\n        if (_cfgUnqNames) {\n            _writeUnq(name);\n            return;\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        int len = name.appendQuotedUTF8(_outputBuffer, _outputTail);\n        if (len < 0) {\n            _writeBytes(name.asQuotedUTF8());\n        } else {\n            _outputTail += len;\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    private final void _writeUnq(com.fasterxml.jackson.core.SerializableString name) throws java.io.IOException {\n        int len = name.appendQuotedUTF8(_outputBuffer, _outputTail);\n        if (len < 0) {\n            _writeBytes(name.asQuotedUTF8());\n        } else {\n            _outputTail += len;\n        }\n    }\n\n    @java.lang.Override\n    public final void writeStartArray() throws java.io.IOException {\n        _verifyValueWrite(\"start an array\");\n        _writeContext = _writeContext.createChildArrayContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartArray(this);\n        } else {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_LBRACKET;\n        }\n    }\n\n    @java.lang.Override\n    public final void writeEndArray() throws java.io.IOException {\n        if (!_writeContext.inArray()) {\n            _reportError(\"Current context not an ARRAY but \" + _writeContext.getTypeDesc());\n        }\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());\n        } else {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_RBRACKET;\n        }\n        _writeContext = _writeContext.clearAndGetParent();\n    }\n\n    @java.lang.Override\n    public final void writeStartObject() throws java.io.IOException {\n        _verifyValueWrite(\"start an object\");\n        _writeContext = _writeContext.createChildObjectContext();\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeStartObject(this);\n        } else {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_LCURLY;\n        }\n    }\n\n    @java.lang.Override\n    public final void writeEndObject() throws java.io.IOException {\n        if (!_writeContext.inObject()) {\n            _reportError(\"Current context not an object but \" + _writeContext.getTypeDesc());\n        }\n        if (_cfgPrettyPrinter != null) {\n            _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());\n        } else {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_RCURLY;\n        }\n        _writeContext = _writeContext.clearAndGetParent();\n    }\n\n    protected final void _writePPFieldName(java.lang.String name) throws java.io.IOException {\n        int status = _writeContext.writeFieldName(name);\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n            _cfgPrettyPrinter.writeObjectEntrySeparator(this);\n        } else {\n            _cfgPrettyPrinter.beforeObjectEntries(this);\n        }\n        if (_cfgUnqNames) {\n            _writeStringSegments(name, false);\n            return;\n        }\n        final int len = name.length();\n        if (len > _charBufferLength) {\n            _writeStringSegments(name, true);\n            return;\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        name.getChars(0, len, _charBuffer, 0);\n        if (len <= _outputMaxContiguous) {\n            if ((_outputTail + len) > _outputEnd) {\n                _flushBuffer();\n            }\n            _writeStringSegment(_charBuffer, 0, len);\n        } else {\n            _writeStringSegments(_charBuffer, 0, len);\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    protected final void _writePPFieldName(com.fasterxml.jackson.core.SerializableString name) throws java.io.IOException {\n        final int status = _writeContext.writeFieldName(name.getValue());\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_VALUE) {\n            _reportError(\"Can not write a field name, expecting a value\");\n        }\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n            _cfgPrettyPrinter.writeObjectEntrySeparator(this);\n        } else {\n            _cfgPrettyPrinter.beforeObjectEntries(this);\n        }\n        final boolean addQuotes = !_cfgUnqNames;\n        if (addQuotes) {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        }\n        _writeBytes(name.asQuotedUTF8());\n        if (addQuotes) {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        }\n    }\n\n    @java.lang.Override\n    public void writeString(java.lang.String text) throws java.io.IOException {\n        _verifyValueWrite(WRITE_STRING);\n        if (text == null) {\n            _writeNull();\n            return;\n        }\n        final int len = text.length();\n        if (len > _outputMaxContiguous) {\n            _writeStringSegments(text, true);\n            return;\n        }\n        if ((_outputTail + len) >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        _writeStringSegment(text, 0, len);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeString(char[] text, int offset, int len) throws java.io.IOException {\n        _verifyValueWrite(WRITE_STRING);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        if (len <= _outputMaxContiguous) {\n            if ((_outputTail + len) > _outputEnd) {\n                _flushBuffer();\n            }\n            _writeStringSegment(text, offset, len);\n        } else {\n            _writeStringSegments(text, offset, len);\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public final void writeString(com.fasterxml.jackson.core.SerializableString text) throws java.io.IOException {\n        _verifyValueWrite(WRITE_STRING);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        int len = text.appendQuotedUTF8(_outputBuffer, _outputTail);\n        if (len < 0) {\n            _writeBytes(text.asQuotedUTF8());\n        } else {\n            _outputTail += len;\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeRawUTF8String(byte[] text, int offset, int length) throws java.io.IOException {\n        _verifyValueWrite(WRITE_STRING);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        _writeBytes(text, offset, length);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeUTF8String(byte[] text, int offset, int len) throws java.io.IOException {\n        _verifyValueWrite(WRITE_STRING);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        if (len <= _outputMaxContiguous) {\n            _writeUTF8Segment(text, offset, len);\n        } else {\n            _writeUTF8Segments(text, offset, len);\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeRaw(java.lang.String text) throws java.io.IOException {\n        writeRaw(text, 0, text.length());\n    }\n\n    @java.lang.Override\n    public void writeRaw(java.lang.String text, int offset, int len) throws java.io.IOException {\n        final char[] buf = _charBuffer;\n        if (len <= buf.length) {\n            text.getChars(offset, offset + len, buf, 0);\n            _writeRawSegment(buf, 0, len);\n            return;\n        }\n        final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4);\n        final int maxBytes = maxChunk * 3;\n        while (len > 0) {\n            int len2 = java.lang.Math.min(maxChunk, len);\n            text.getChars(offset, offset + len2, buf, 0);\n            if ((_outputTail + maxBytes) > _outputEnd) {\n                _flushBuffer();\n            }\n            if (len > 0) {\n                char ch = buf[len2 - 1];\n                if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST)) {\n                    --len2;\n                }\n            }\n            _writeRawSegment(buf, 0, len2);\n            offset += len2;\n            len -= len2;\n        } \n    }\n\n    @java.lang.Override\n    public void writeRaw(com.fasterxml.jackson.core.SerializableString text) throws java.io.IOException {\n        byte[] raw = text.asUnquotedUTF8();\n        if (raw.length > 0) {\n            _writeBytes(raw);\n        }\n    }\n\n    @java.lang.Override\n    public void writeRawValue(com.fasterxml.jackson.core.SerializableString text) throws java.io.IOException {\n        _verifyValueWrite(WRITE_RAW);\n        byte[] raw = text.asUnquotedUTF8();\n        if (raw.length > 0) {\n            _writeBytes(raw);\n        }\n    }\n\n    @java.lang.Override\n    public final void writeRaw(char[] cbuf, int offset, int len) throws java.io.IOException {\n        {\n            int len3 = (len + len) + len;\n            if ((_outputTail + len3) > _outputEnd) {\n                if (_outputEnd < len3) {\n                    _writeSegmentedRaw(cbuf, offset, len);\n                    return;\n                }\n                _flushBuffer();\n            }\n        }\n        len += offset;\n        main_loop : while (offset < len) {\n            inner_loop : while (true) {\n                int ch = ((int) (cbuf[offset]));\n                if (ch > 0x7f) {\n                    break inner_loop;\n                }\n                _outputBuffer[_outputTail++] = ((byte) (ch));\n                if ((++offset) >= len) {\n                    break main_loop;\n                }\n            } \n            char ch = cbuf[offset++];\n            if (ch < 0x800) {\n                _outputBuffer[_outputTail++] = ((byte) (0xc0 | (ch >> 6)));\n                _outputBuffer[_outputTail++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                offset = _outputRawMultiByteChar(ch, cbuf, offset, len);\n            }\n        } \n    }\n\n    @java.lang.Override\n    public void writeRaw(char ch) throws java.io.IOException {\n        if ((_outputTail + 3) >= _outputEnd) {\n            _flushBuffer();\n        }\n        final byte[] bbuf = _outputBuffer;\n        if (ch <= 0x7f) {\n            bbuf[_outputTail++] = ((byte) (ch));\n        } else if (ch < 0x800) {\n            bbuf[_outputTail++] = ((byte) (0xc0 | (ch >> 6)));\n            bbuf[_outputTail++] = ((byte) (0x80 | (ch & 0x3f)));\n        } else {\n            _outputRawMultiByteChar(ch, null, 0, 0);\n        }\n    }\n\n    private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws java.io.IOException {\n        final int end = _outputEnd;\n        final byte[] bbuf = _outputBuffer;\n        final int inputEnd = offset + len;\n        main_loop : while (offset < inputEnd) {\n            inner_loop : while (true) {\n                int ch = ((int) (cbuf[offset]));\n                if (ch >= 0x80) {\n                    break inner_loop;\n                }\n                if (_outputTail >= end) {\n                    _flushBuffer();\n                }\n                bbuf[_outputTail++] = ((byte) (ch));\n                if ((++offset) >= inputEnd) {\n                    break main_loop;\n                }\n            } \n            if ((_outputTail + 3) >= _outputEnd) {\n                _flushBuffer();\n            }\n            char ch = cbuf[offset++];\n            if (ch < 0x800) {\n                bbuf[_outputTail++] = ((byte) (0xc0 | (ch >> 6)));\n                bbuf[_outputTail++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                offset = _outputRawMultiByteChar(ch, cbuf, offset, inputEnd);\n            }\n        } \n    }\n\n    private void _writeRawSegment(char[] cbuf, int offset, int end) throws java.io.IOException {\n        main_loop : while (offset < end) {\n            inner_loop : while (true) {\n                int ch = ((int) (cbuf[offset]));\n                if (ch > 0x7f) {\n                    break inner_loop;\n                }\n                _outputBuffer[_outputTail++] = ((byte) (ch));\n                if ((++offset) >= end) {\n                    break main_loop;\n                }\n            } \n            char ch = cbuf[offset++];\n            if (ch < 0x800) {\n                _outputBuffer[_outputTail++] = ((byte) (0xc0 | (ch >> 6)));\n                _outputBuffer[_outputTail++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                offset = _outputRawMultiByteChar(ch, cbuf, offset, end);\n            }\n        } \n    }\n\n    @java.lang.Override\n    public void writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, byte[] data, int offset, int len) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        _verifyValueWrite(WRITE_BINARY);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        _writeBinary(b64variant, data, offset, offset + len);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public int writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.InputStream data, int dataLength) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        _verifyValueWrite(WRITE_BINARY);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        byte[] encodingBuffer = _ioContext.allocBase64Buffer();\n        int bytes;\n        try {\n            if (dataLength < 0) {\n                bytes = _writeBinary(b64variant, data, encodingBuffer);\n            } else {\n                int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);\n                if (missing > 0) {\n                    _reportError((((\"Too few bytes available: missing \" + missing) + \" bytes (out of \") + dataLength) + \")\");\n                }\n                bytes = dataLength;\n            }\n        } finally {\n            _ioContext.releaseBase64Buffer(encodingBuffer);\n        }\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        return bytes;\n    }\n\n    @java.lang.Override\n    public void writeNumber(short s) throws java.io.IOException {\n        _verifyValueWrite(WRITE_NUMBER);\n        if ((_outputTail + 6) >= _outputEnd) {\n            _flushBuffer();\n        }\n        if (_cfgNumbersAsStrings) {\n            _writeQuotedShort(s);\n            return;\n        }\n        _outputTail = com.fasterxml.jackson.core.io.NumberOutput.outputInt(s, _outputBuffer, _outputTail);\n    }\n\n    private final void _writeQuotedShort(short s) throws java.io.IOException {\n        if ((_outputTail + 8) >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        _outputTail = com.fasterxml.jackson.core.io.NumberOutput.outputInt(s, _outputBuffer, _outputTail);\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeNumber(int i) throws java.io.IOException {\n        _verifyValueWrite(WRITE_NUMBER);\n        if ((_outputTail + 11) >= _outputEnd) {\n            _flushBuffer();\n        }\n        if (_cfgNumbersAsStrings) {\n            _writeQuotedInt(i);\n            return;\n        }\n        _outputTail = com.fasterxml.jackson.core.io.NumberOutput.outputInt(i, _outputBuffer, _outputTail);\n    }\n\n    private final void _writeQuotedInt(int i) throws java.io.IOException {\n        if ((_outputTail + 13) >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        _outputTail = com.fasterxml.jackson.core.io.NumberOutput.outputInt(i, _outputBuffer, _outputTail);\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeNumber(long l) throws java.io.IOException {\n        _verifyValueWrite(WRITE_NUMBER);\n        if (_cfgNumbersAsStrings) {\n            _writeQuotedLong(l);\n            return;\n        }\n        if ((_outputTail + 21) >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputTail = com.fasterxml.jackson.core.io.NumberOutput.outputLong(l, _outputBuffer, _outputTail);\n    }\n\n    private final void _writeQuotedLong(long l) throws java.io.IOException {\n        if ((_outputTail + 23) >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        _outputTail = com.fasterxml.jackson.core.io.NumberOutput.outputLong(l, _outputBuffer, _outputTail);\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.math.BigInteger value) throws java.io.IOException {\n        _verifyValueWrite(WRITE_NUMBER);\n        if (value == null) {\n            _writeNull();\n        } else if (_cfgNumbersAsStrings) {\n            _writeQuotedRaw(value.toString());\n        } else {\n            writeRaw(value.toString());\n        }\n    }\n\n    @java.lang.Override\n    public void writeNumber(double d) throws java.io.IOException {\n        if (_cfgNumbersAsStrings || ((java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) && com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features))) {\n            writeString(java.lang.String.valueOf(d));\n            return;\n        }\n        _verifyValueWrite(WRITE_NUMBER);\n        writeRaw(java.lang.String.valueOf(d));\n    }\n\n    @java.lang.Override\n    public void writeNumber(float f) throws java.io.IOException {\n        if (_cfgNumbersAsStrings || ((java.lang.Float.isNaN(f) || java.lang.Float.isInfinite(f)) && com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features))) {\n            writeString(java.lang.String.valueOf(f));\n            return;\n        }\n        _verifyValueWrite(WRITE_NUMBER);\n        writeRaw(java.lang.String.valueOf(f));\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.math.BigDecimal value) throws java.io.IOException {\n        _verifyValueWrite(WRITE_NUMBER);\n        if (value == null) {\n            _writeNull();\n        } else if (_cfgNumbersAsStrings) {\n            java.lang.String raw = (com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) ? value.toPlainString() : value.toString();\n            _writeQuotedRaw(raw);\n        } else if (com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {\n            writeRaw(value.toPlainString());\n        } else {\n            writeRaw(value.toString());\n        }\n    }\n\n    @java.lang.Override\n    public void writeNumber(java.lang.String encodedValue) throws java.io.IOException {\n        _verifyValueWrite(WRITE_NUMBER);\n        if (_cfgNumbersAsStrings) {\n            _writeQuotedRaw(encodedValue);\n        } else {\n            writeRaw(encodedValue);\n        }\n    }\n\n    private final void _writeQuotedRaw(java.lang.String value) throws java.io.IOException {\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        writeRaw(value);\n        if (_outputTail >= _outputEnd) {\n            _flushBuffer();\n        }\n        _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n    }\n\n    @java.lang.Override\n    public void writeBoolean(boolean state) throws java.io.IOException {\n        _verifyValueWrite(WRITE_BOOLEAN);\n        if ((_outputTail + 5) >= _outputEnd) {\n            _flushBuffer();\n        }\n        byte[] keyword = (state) ? com.fasterxml.jackson.core.json.UTF8JsonGenerator.TRUE_BYTES : com.fasterxml.jackson.core.json.UTF8JsonGenerator.FALSE_BYTES;\n        int len = keyword.length;\n        java.lang.System.arraycopy(keyword, 0, _outputBuffer, _outputTail, len);\n        _outputTail += len;\n    }\n\n    @java.lang.Override\n    public void writeNull() throws java.io.IOException {\n        _verifyValueWrite(WRITE_NULL);\n        _writeNull();\n    }\n\n    @java.lang.Override\n    protected final void _verifyValueWrite(java.lang.String typeMsg) throws java.io.IOException {\n        int status = _writeContext.writeValue();\n        if (status == com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_NAME) {\n            _reportError((\"Can not \" + typeMsg) + \", expecting field name\");\n        }\n        if (_cfgPrettyPrinter == null) {\n            byte b;\n            switch (status) {\n                case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA :\n                    b = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COMMA;\n                    break;\n                case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COLON :\n                    b = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COLON;\n                    break;\n                case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_SPACE :\n                    if (_rootValueSeparator != null) {\n                        byte[] raw = _rootValueSeparator.asUnquotedUTF8();\n                        if (raw.length > 0) {\n                            _writeBytes(raw);\n                        }\n                    }\n                    return;\n                case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AS_IS :\n                default :\n                    return;\n            }\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail] = b;\n            ++_outputTail;\n            return;\n        }\n        _verifyPrettyValueWrite(typeMsg, status);\n    }\n\n    protected final void _verifyPrettyValueWrite(java.lang.String typeMsg, int status) throws java.io.IOException {\n        switch (status) {\n            case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA :\n                _cfgPrettyPrinter.writeArrayValueSeparator(this);\n                break;\n            case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COLON :\n                _cfgPrettyPrinter.writeObjectFieldValueSeparator(this);\n                break;\n            case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_SPACE :\n                _cfgPrettyPrinter.writeRootValueSeparator(this);\n                break;\n            case com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AS_IS :\n                if (_writeContext.inArray()) {\n                    _cfgPrettyPrinter.beforeArrayValues(this);\n                } else if (_writeContext.inObject()) {\n                    _cfgPrettyPrinter.beforeObjectEntries(this);\n                }\n                break;\n            default :\n                _throwInternal();\n                break;\n        }\n    }\n\n    @java.lang.Override\n    public void flush() throws java.io.IOException {\n        _flushBuffer();\n        if (_outputStream != null) {\n            if (isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {\n                _outputStream.flush();\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        super.close();\n        if ((_outputBuffer != null) && isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {\n            while (true) {\n                com.fasterxml.jackson.core.JsonStreamContext ctxt = getOutputContext();\n                if (ctxt.inArray()) {\n                    writeEndArray();\n                } else if (ctxt.inObject()) {\n                    writeEndObject();\n                } else {\n                    break;\n                }\n            } \n        }\n        _flushBuffer();\n        _outputTail = 0;\n        if (_outputStream != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {\n                _outputStream.close();\n            } else if (isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {\n                _outputStream.flush();\n            }\n        }\n        _releaseBuffers();\n    }\n\n    @java.lang.Override\n    protected void _releaseBuffers() {\n        byte[] buf = _outputBuffer;\n        if ((buf != null) && _bufferRecyclable) {\n            _outputBuffer = null;\n            _ioContext.releaseWriteEncodingBuffer(buf);\n        }\n        char[] cbuf = _charBuffer;\n        if (cbuf != null) {\n            _charBuffer = null;\n            _ioContext.releaseConcatBuffer(cbuf);\n        }\n    }\n\n    private final void _writeBytes(byte[] bytes) throws java.io.IOException {\n        final int len = bytes.length;\n        if ((_outputTail + len) > _outputEnd) {\n            _flushBuffer();\n            if (len > com.fasterxml.jackson.core.json.UTF8JsonGenerator.MAX_BYTES_TO_BUFFER) {\n                _outputStream.write(bytes, 0, len);\n                return;\n            }\n        }\n        java.lang.System.arraycopy(bytes, 0, _outputBuffer, _outputTail, len);\n        _outputTail += len;\n    }\n\n    private final void _writeBytes(byte[] bytes, int offset, int len) throws java.io.IOException {\n        if ((_outputTail + len) > _outputEnd) {\n            _flushBuffer();\n            if (len > com.fasterxml.jackson.core.json.UTF8JsonGenerator.MAX_BYTES_TO_BUFFER) {\n                _outputStream.write(bytes, offset, len);\n                return;\n            }\n        }\n        java.lang.System.arraycopy(bytes, offset, _outputBuffer, _outputTail, len);\n        _outputTail += len;\n    }\n\n    private final void _writeStringSegments(java.lang.String text, boolean addQuotes) throws java.io.IOException {\n        if (addQuotes) {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        }\n        int left = text.length();\n        int offset = 0;\n        while (left > 0) {\n            int len = java.lang.Math.min(_outputMaxContiguous, left);\n            if ((_outputTail + len) > _outputEnd) {\n                _flushBuffer();\n            }\n            _writeStringSegment(text, offset, len);\n            offset += len;\n            left -= len;\n        } \n        if (addQuotes) {\n            if (_outputTail >= _outputEnd) {\n                _flushBuffer();\n            }\n            _outputBuffer[_outputTail++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_QUOTE;\n        }\n    }\n\n    private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws java.io.IOException {\n        do {\n            int len = java.lang.Math.min(_outputMaxContiguous, totalLen);\n            if ((_outputTail + len) > _outputEnd) {\n                _flushBuffer();\n            }\n            _writeStringSegment(cbuf, offset, len);\n            offset += len;\n            totalLen -= len;\n        } while (totalLen > 0 );\n    }\n\n    private final void _writeStringSegments(java.lang.String text, int offset, int totalLen) throws java.io.IOException {\n        do {\n            int len = java.lang.Math.min(_outputMaxContiguous, totalLen);\n            if ((_outputTail + len) > _outputEnd) {\n                _flushBuffer();\n            }\n            _writeStringSegment(text, offset, len);\n            offset += len;\n            totalLen -= len;\n        } while (totalLen > 0 );\n    }\n\n    private final void _writeStringSegment(char[] cbuf, int offset, int len) throws java.io.IOException {\n        len += offset;\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        while (offset < len) {\n            int ch = cbuf[offset];\n            if ((ch > 0x7f) || (escCodes[ch] != 0)) {\n                break;\n            }\n            outputBuffer[outputPtr++] = ((byte) (ch));\n            ++offset;\n        } \n        _outputTail = outputPtr;\n        if (offset < len) {\n            if (_characterEscapes != null) {\n                _writeCustomStringSegment2(cbuf, offset, len);\n            } else if (_maximumNonEscapedChar == 0) {\n                _writeStringSegment2(cbuf, offset, len);\n            } else {\n                _writeStringSegmentASCII2(cbuf, offset, len);\n            }\n        }\n    }\n\n    private final void _writeStringSegment(java.lang.String text, int offset, int len) throws java.io.IOException {\n        len += offset;\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        while (offset < len) {\n            int ch = text.charAt(offset);\n            if ((ch > 0x7f) || (escCodes[ch] != 0)) {\n                break;\n            }\n            outputBuffer[outputPtr++] = ((byte) (ch));\n            ++offset;\n        } \n        _outputTail = outputPtr;\n        if (offset < len) {\n            if (_characterEscapes != null) {\n                _writeCustomStringSegment2(text, offset, len);\n            } else if (_maximumNonEscapedChar == 0) {\n                _writeStringSegment2(text, offset, len);\n            } else {\n                _writeStringSegmentASCII2(text, offset, len);\n            }\n        }\n    }\n\n    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws java.io.IOException {\n        if ((_outputTail + (6 * (end - offset))) > _outputEnd) {\n            _flushBuffer();\n        }\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        while (offset < end) {\n            int ch = cbuf[offset++];\n            if (ch <= 0x7f) {\n                if (escCodes[ch] == 0) {\n                    outputBuffer[outputPtr++] = ((byte) (ch));\n                    continue;\n                }\n                int escape = escCodes[ch];\n                if (escape > 0) {\n                    outputBuffer[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n                    outputBuffer[outputPtr++] = ((byte) (escape));\n                } else {\n                    outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7ff) {\n                outputBuffer[outputPtr++] = ((byte) (0xc0 | (ch >> 6)));\n                outputBuffer[outputPtr++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        } \n        _outputTail = outputPtr;\n    }\n\n    private final void _writeStringSegment2(final java.lang.String text, int offset, final int end) throws java.io.IOException {\n        if ((_outputTail + (6 * (end - offset))) > _outputEnd) {\n            _flushBuffer();\n        }\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        while (offset < end) {\n            int ch = text.charAt(offset++);\n            if (ch <= 0x7f) {\n                if (escCodes[ch] == 0) {\n                    outputBuffer[outputPtr++] = ((byte) (ch));\n                    continue;\n                }\n                int escape = escCodes[ch];\n                if (escape > 0) {\n                    outputBuffer[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n                    outputBuffer[outputPtr++] = ((byte) (escape));\n                } else {\n                    outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch <= 0x7ff) {\n                outputBuffer[outputPtr++] = ((byte) (0xc0 | (ch >> 6)));\n                outputBuffer[outputPtr++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        } \n        _outputTail = outputPtr;\n    }\n\n    private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws java.io.IOException {\n        if ((_outputTail + (6 * (end - offset))) > _outputEnd) {\n            _flushBuffer();\n        }\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        final int maxUnescaped = _maximumNonEscapedChar;\n        while (offset < end) {\n            int ch = cbuf[offset++];\n            if (ch <= 0x7f) {\n                if (escCodes[ch] == 0) {\n                    outputBuffer[outputPtr++] = ((byte) (ch));\n                    continue;\n                }\n                int escape = escCodes[ch];\n                if (escape > 0) {\n                    outputBuffer[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n                    outputBuffer[outputPtr++] = ((byte) (escape));\n                } else {\n                    outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch > maxUnescaped) {\n                outputPtr = _writeGenericEscape(ch, outputPtr);\n                continue;\n            }\n            if (ch <= 0x7ff) {\n                outputBuffer[outputPtr++] = ((byte) (0xc0 | (ch >> 6)));\n                outputBuffer[outputPtr++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        } \n        _outputTail = outputPtr;\n    }\n\n    private final void _writeStringSegmentASCII2(final java.lang.String text, int offset, final int end) throws java.io.IOException {\n        if ((_outputTail + (6 * (end - offset))) > _outputEnd) {\n            _flushBuffer();\n        }\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        final int maxUnescaped = _maximumNonEscapedChar;\n        while (offset < end) {\n            int ch = text.charAt(offset++);\n            if (ch <= 0x7f) {\n                if (escCodes[ch] == 0) {\n                    outputBuffer[outputPtr++] = ((byte) (ch));\n                    continue;\n                }\n                int escape = escCodes[ch];\n                if (escape > 0) {\n                    outputBuffer[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n                    outputBuffer[outputPtr++] = ((byte) (escape));\n                } else {\n                    outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch > maxUnescaped) {\n                outputPtr = _writeGenericEscape(ch, outputPtr);\n                continue;\n            }\n            if (ch <= 0x7ff) {\n                outputBuffer[outputPtr++] = ((byte) (0xc0 | (ch >> 6)));\n                outputBuffer[outputPtr++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        } \n        _outputTail = outputPtr;\n    }\n\n    private final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws java.io.IOException {\n        if ((_outputTail + (6 * (end - offset))) > _outputEnd) {\n            _flushBuffer();\n        }\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        final int maxUnescaped = (_maximumNonEscapedChar <= 0) ? 0xffff : _maximumNonEscapedChar;\n        final com.fasterxml.jackson.core.io.CharacterEscapes customEscapes = _characterEscapes;\n        while (offset < end) {\n            int ch = cbuf[offset++];\n            if (ch <= 0x7f) {\n                if (escCodes[ch] == 0) {\n                    outputBuffer[outputPtr++] = ((byte) (ch));\n                    continue;\n                }\n                int escape = escCodes[ch];\n                if (escape > 0) {\n                    outputBuffer[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n                    outputBuffer[outputPtr++] = ((byte) (escape));\n                } else if (escape == com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_CUSTOM) {\n                    com.fasterxml.jackson.core.SerializableString esc = customEscapes.getEscapeSequence(ch);\n                    if (esc == null) {\n                        _reportError((\"Invalid custom escape definitions; custom escape not found for character code 0x\" + java.lang.Integer.toHexString(ch)) + \", although was supposed to have one\");\n                    }\n                    outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);\n                } else {\n                    outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch > maxUnescaped) {\n                outputPtr = _writeGenericEscape(ch, outputPtr);\n                continue;\n            }\n            com.fasterxml.jackson.core.SerializableString esc = customEscapes.getEscapeSequence(ch);\n            if (esc != null) {\n                outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);\n                continue;\n            }\n            if (ch <= 0x7ff) {\n                outputBuffer[outputPtr++] = ((byte) (0xc0 | (ch >> 6)));\n                outputBuffer[outputPtr++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        } \n        _outputTail = outputPtr;\n    }\n\n    private final void _writeCustomStringSegment2(final java.lang.String text, int offset, final int end) throws java.io.IOException {\n        if ((_outputTail + (6 * (end - offset))) > _outputEnd) {\n            _flushBuffer();\n        }\n        int outputPtr = _outputTail;\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        final int maxUnescaped = (_maximumNonEscapedChar <= 0) ? 0xffff : _maximumNonEscapedChar;\n        final com.fasterxml.jackson.core.io.CharacterEscapes customEscapes = _characterEscapes;\n        while (offset < end) {\n            int ch = text.charAt(offset++);\n            if (ch <= 0x7f) {\n                if (escCodes[ch] == 0) {\n                    outputBuffer[outputPtr++] = ((byte) (ch));\n                    continue;\n                }\n                int escape = escCodes[ch];\n                if (escape > 0) {\n                    outputBuffer[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n                    outputBuffer[outputPtr++] = ((byte) (escape));\n                } else if (escape == com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_CUSTOM) {\n                    com.fasterxml.jackson.core.SerializableString esc = customEscapes.getEscapeSequence(ch);\n                    if (esc == null) {\n                        _reportError((\"Invalid custom escape definitions; custom escape not found for character code 0x\" + java.lang.Integer.toHexString(ch)) + \", although was supposed to have one\");\n                    }\n                    outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);\n                } else {\n                    outputPtr = _writeGenericEscape(ch, outputPtr);\n                }\n                continue;\n            }\n            if (ch > maxUnescaped) {\n                outputPtr = _writeGenericEscape(ch, outputPtr);\n                continue;\n            }\n            com.fasterxml.jackson.core.SerializableString esc = customEscapes.getEscapeSequence(ch);\n            if (esc != null) {\n                outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);\n                continue;\n            }\n            if (ch <= 0x7ff) {\n                outputBuffer[outputPtr++] = ((byte) (0xc0 | (ch >> 6)));\n                outputBuffer[outputPtr++] = ((byte) (0x80 | (ch & 0x3f)));\n            } else {\n                outputPtr = _outputMultiByteChar(ch, outputPtr);\n            }\n        } \n        _outputTail = outputPtr;\n    }\n\n    private final int _writeCustomEscape(byte[] outputBuffer, int outputPtr, com.fasterxml.jackson.core.SerializableString esc, int remainingChars) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        byte[] raw = esc.asUnquotedUTF8();\n        int len = raw.length;\n        if (len > 6) {\n            return _handleLongCustomEscape(outputBuffer, outputPtr, _outputEnd, raw, remainingChars);\n        }\n        java.lang.System.arraycopy(raw, 0, outputBuffer, outputPtr, len);\n        return outputPtr + len;\n    }\n\n    private final int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        int len = raw.length;\n        if ((outputPtr + len) > outputEnd) {\n            _outputTail = outputPtr;\n            _flushBuffer();\n            outputPtr = _outputTail;\n            if (len > outputBuffer.length) {\n                _outputStream.write(raw, 0, len);\n                return outputPtr;\n            }\n            java.lang.System.arraycopy(raw, 0, outputBuffer, outputPtr, len);\n            outputPtr += len;\n        }\n        if ((outputPtr + (6 * remainingChars)) > outputEnd) {\n            _flushBuffer();\n            return _outputTail;\n        }\n        return outputPtr;\n    }\n\n    private final void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        do {\n            int len = java.lang.Math.min(_outputMaxContiguous, totalLen);\n            _writeUTF8Segment(utf8, offset, len);\n            offset += len;\n            totalLen -= len;\n        } while (totalLen > 0 );\n    }\n\n    private final void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        final int[] escCodes = _outputEscapes;\n        for (int ptr = offset, end = offset + len; ptr < end;) {\n            int ch = utf8[ptr++];\n            if ((ch >= 0) && (escCodes[ch] != 0)) {\n                _writeUTF8Segment2(utf8, offset, len);\n                return;\n            }\n        }\n        if ((_outputTail + len) > _outputEnd) {\n            _flushBuffer();\n        }\n        java.lang.System.arraycopy(utf8, offset, _outputBuffer, _outputTail, len);\n        _outputTail += len;\n    }\n\n    private final void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        int outputPtr = _outputTail;\n        if ((outputPtr + (len * 6)) > _outputEnd) {\n            _flushBuffer();\n            outputPtr = _outputTail;\n        }\n        final byte[] outputBuffer = _outputBuffer;\n        final int[] escCodes = _outputEscapes;\n        len += offset;\n        while (offset < len) {\n            byte b = utf8[offset++];\n            int ch = b;\n            if ((ch < 0) || (escCodes[ch] == 0)) {\n                outputBuffer[outputPtr++] = b;\n                continue;\n            }\n            int escape = escCodes[ch];\n            if (escape > 0) {\n                outputBuffer[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n                outputBuffer[outputPtr++] = ((byte) (escape));\n            } else {\n                outputPtr = _writeGenericEscape(ch, outputPtr);\n            }\n        } \n        _outputTail = outputPtr;\n    }\n\n    protected final void _writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        int safeInputEnd = inputEnd - 3;\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n        while (inputPtr <= safeInputEnd) {\n            if (_outputTail > safeOutputEnd) {\n                _flushBuffer();\n            }\n            int b24 = ((int) (input[inputPtr++])) << 8;\n            b24 |= ((int) (input[inputPtr++])) & 0xff;\n            b24 = (b24 << 8) | (((int) (input[inputPtr++])) & 0xff);\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if ((--chunksBeforeLF) <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        } \n        int inputLeft = inputEnd - inputPtr;\n        if (inputLeft > 0) {\n            if (_outputTail > safeOutputEnd) {\n                _flushBuffer();\n            }\n            int b24 = ((int) (input[inputPtr++])) << 16;\n            if (inputLeft == 2) {\n                b24 |= (((int) (input[inputPtr++])) & 0xff) << 8;\n            }\n            _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);\n        }\n    }\n\n    protected final int _writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.InputStream data, byte[] readBuffer, int bytesLeft) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n        while (bytesLeft > 2) {\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n                inputPtr = 0;\n                if (inputEnd < 3) {\n                    break;\n                }\n                lastFullOffset = inputEnd - 3;\n            }\n            if (_outputTail > safeOutputEnd) {\n                _flushBuffer();\n            }\n            int b24 = ((int) (readBuffer[inputPtr++])) << 8;\n            b24 |= ((int) (readBuffer[inputPtr++])) & 0xff;\n            b24 = (b24 << 8) | (((int) (readBuffer[inputPtr++])) & 0xff);\n            bytesLeft -= 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if ((--chunksBeforeLF) <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        } \n        if (bytesLeft > 0) {\n            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);\n            inputPtr = 0;\n            if (inputEnd > 0) {\n                if (_outputTail > safeOutputEnd) {\n                    _flushBuffer();\n                }\n                int b24 = ((int) (readBuffer[inputPtr++])) << 16;\n                int amount;\n                if (inputPtr < inputEnd) {\n                    b24 |= (((int) (readBuffer[inputPtr])) & 0xff) << 8;\n                    amount = 2;\n                } else {\n                    amount = 1;\n                }\n                _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n                bytesLeft -= amount;\n            }\n        }\n        return bytesLeft;\n    }\n\n    protected final int _writeBinary(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.InputStream data, byte[] readBuffer) throws com.fasterxml.jackson.core.JsonGenerationException, java.io.IOException {\n        int inputPtr = 0;\n        int inputEnd = 0;\n        int lastFullOffset = -3;\n        int bytesDone = 0;\n        int safeOutputEnd = _outputEnd - 6;\n        int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n        while (true) {\n            if (inputPtr > lastFullOffset) {\n                inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);\n                inputPtr = 0;\n                if (inputEnd < 3) {\n                    break;\n                }\n                lastFullOffset = inputEnd - 3;\n            }\n            if (_outputTail > safeOutputEnd) {\n                _flushBuffer();\n            }\n            int b24 = ((int) (readBuffer[inputPtr++])) << 8;\n            b24 |= ((int) (readBuffer[inputPtr++])) & 0xff;\n            b24 = (b24 << 8) | (((int) (readBuffer[inputPtr++])) & 0xff);\n            bytesDone += 3;\n            _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);\n            if ((--chunksBeforeLF) <= 0) {\n                _outputBuffer[_outputTail++] = '\\\\';\n                _outputBuffer[_outputTail++] = 'n';\n                chunksBeforeLF = b64variant.getMaxLineLength() >> 2;\n            }\n        } \n        if (inputPtr < inputEnd) {\n            if (_outputTail > safeOutputEnd) {\n                _flushBuffer();\n            }\n            int b24 = ((int) (readBuffer[inputPtr++])) << 16;\n            int amount = 1;\n            if (inputPtr < inputEnd) {\n                b24 |= (((int) (readBuffer[inputPtr])) & 0xff) << 8;\n                amount = 2;\n            }\n            bytesDone += amount;\n            _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);\n        }\n        return bytesDone;\n    }\n\n    private final int _readMore(java.io.InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws java.io.IOException {\n        int i = 0;\n        while (inputPtr < inputEnd) {\n            readBuffer[i++] = readBuffer[inputPtr++];\n        } \n        inputPtr = 0;\n        inputEnd = i;\n        maxRead = java.lang.Math.min(maxRead, readBuffer.length);\n        do {\n            int length = maxRead - inputEnd;\n            if (length == 0) {\n                break;\n            }\n            int count = in.read(readBuffer, inputEnd, length);\n            if (count < 0) {\n                return inputEnd;\n            }\n            inputEnd += count;\n        } while (inputEnd < 3 );\n        return inputEnd;\n    }\n\n    private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws java.io.IOException {\n        if (ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) {\n            if (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR2_LAST) {\n                if ((inputOffset >= inputEnd) || (cbuf == null)) {\n                    _reportError(java.lang.String.format(\"Split surrogate on writeRaw() input (last character): first character 0x%4x\", ch));\n                }\n                _outputSurrogates(ch, cbuf[inputOffset]);\n                return inputOffset + 1;\n            }\n        }\n        final byte[] bbuf = _outputBuffer;\n        bbuf[_outputTail++] = ((byte) (0xe0 | (ch >> 12)));\n        bbuf[_outputTail++] = ((byte) (0x80 | ((ch >> 6) & 0x3f)));\n        bbuf[_outputTail++] = ((byte) (0x80 | (ch & 0x3f)));\n        return inputOffset;\n    }\n\n    protected final void _outputSurrogates(int surr1, int surr2) throws java.io.IOException {\n        int c = _decodeSurrogate(surr1, surr2);\n        if ((_outputTail + 4) > _outputEnd) {\n            _flushBuffer();\n        }\n        final byte[] bbuf = _outputBuffer;\n        bbuf[_outputTail++] = ((byte) (0xf0 | (c >> 18)));\n        bbuf[_outputTail++] = ((byte) (0x80 | ((c >> 12) & 0x3f)));\n        bbuf[_outputTail++] = ((byte) (0x80 | ((c >> 6) & 0x3f)));\n        bbuf[_outputTail++] = ((byte) (0x80 | (c & 0x3f)));\n    }\n\n    private final int _outputMultiByteChar(int ch, int outputPtr) throws java.io.IOException {\n        byte[] bbuf = _outputBuffer;\n        if ((ch >= com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST) && (ch <= com.fasterxml.jackson.core.base.GeneratorBase.SURR2_LAST)) {\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_u;\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[(ch >> 12) & 0xf];\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[(ch >> 8) & 0xf];\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[(ch >> 4) & 0xf];\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[ch & 0xf];\n        } else {\n            bbuf[outputPtr++] = ((byte) (0xe0 | (ch >> 12)));\n            bbuf[outputPtr++] = ((byte) (0x80 | ((ch >> 6) & 0x3f)));\n            bbuf[outputPtr++] = ((byte) (0x80 | (ch & 0x3f)));\n        }\n        return outputPtr;\n    }\n\n    private final void _writeNull() throws java.io.IOException {\n        if ((_outputTail + 4) >= _outputEnd) {\n            _flushBuffer();\n        }\n        java.lang.System.arraycopy(com.fasterxml.jackson.core.json.UTF8JsonGenerator.NULL_BYTES, 0, _outputBuffer, _outputTail, 4);\n        _outputTail += 4;\n    }\n\n    private int _writeGenericEscape(int charToEscape, int outputPtr) throws java.io.IOException {\n        final byte[] bbuf = _outputBuffer;\n        bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH;\n        bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_u;\n        if (charToEscape > 0xff) {\n            int hi = (charToEscape >> 8) & 0xff;\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[hi >> 4];\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[hi & 0xf];\n            charToEscape &= 0xff;\n        } else {\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_0;\n            bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_0;\n        }\n        bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[charToEscape >> 4];\n        bbuf[outputPtr++] = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS[charToEscape & 0xf];\n        return outputPtr;\n    }\n\n    protected final void _flushBuffer() throws java.io.IOException {\n        int len = _outputTail;\n        if (len > 0) {\n            _outputTail = 0;\n            _outputStream.write(_outputBuffer, 0, len);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.String.format(\"Split surrogate on writeRaw() input (last character): first character 0x%4x\", ch)",
            "src_parent": "_reportError(java.lang.String.format(\"Split surrogate on writeRaw() input (last character): first character 0x%4x\", ch))",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "buf.length",
            "dst_parent": "java.lang.Math.min(buf.length, len)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "buf.length",
            "src_parent": "len <= buf.length",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "\"Split surrogate on writeRaw() input (last character)\"",
            "dst_parent": "_reportError(\"Split surrogate on writeRaw() input (last character)\")",
            "dst_parent_type": "Invocation",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "\"Split surrogate on writeRaw() input (last character): first character 0x%4x\"",
            "src_parent": "java.lang.String.format(\"Split surrogate on writeRaw() input (last character): first character 0x%4x\", ch)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        }
      ],
      "file_name": "UTF8JsonGenerator"
    }
  ],
  "id": "JacksonCore_17"
}