{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "n.isExprResult() || n.isBlock()",
            "src_parent": "if (n.isExprResult() || n.isBlock()) {\n    return;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (parent.getType() == com.google.javascript.rhino.Token.COMMA) {\n    com.google.javascript.rhino.Node gramps = parent.getParent();\n    if (gramps.isCall() && (parent == gramps.getFirstChild())) {\n        if ((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && \"eval\".equals(n.getNext().getString())) {\n            return;\n        }\n    }\n    if (n == parent.getLastChild()) {\n        for (com.google.javascript.rhino.Node an : parent.getAncestors()) {\n            int ancestorType = an.getType();\n            if (ancestorType == com.google.javascript.rhino.Token.COMMA) {\n                continue;\n            }\n            if ((ancestorType != com.google.javascript.rhino.Token.EXPR_RESULT) && (ancestorType != com.google.javascript.rhino.Token.BLOCK)) {\n                return;\n            } else {\n                break;\n            }\n        }\n    }\n} else if ((parent.getType() != com.google.javascript.rhino.Token.EXPR_RESULT) && (parent.getType() != com.google.javascript.rhino.Token.BLOCK)) {\n    if (((parent.getType() == com.google.javascript.rhino.Token.FOR) && (parent.getChildCount() == 4)) && ((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext()))) {\n    } else {\n        return;\n    }\n}",
            "src_parent": "{\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n    if (parent == null) {\n        return;\n    }\n    if (parent.getType() == com.google.javascript.rhino.Token.COMMA) {\n        com.google.javascript.rhino.Node gramps = parent.getParent();\n        if (gramps.isCall() && (parent == gramps.getFirstChild())) {\n            if ((((n == parent.getFirstChild()) && (parent.getChildCount() == 2)) && n.getNext().isName()) && \"eval\".equals(n.getNext().getString())) {\n                return;\n            }\n        }\n        if (n == parent.getLastChild()) {\n            for (com.google.javascript.rhino.Node an : parent.getAncestors()) {\n                int ancestorType = an.getType();\n                if (ancestorType == com.google.javascript.rhino.Token.COMMA) {\n                    continue;\n                }\n                if ((ancestorType != com.google.javascript.rhino.Token.EXPR_RESULT) && (ancestorType != com.google.javascript.rhino.Token.BLOCK)) {\n                    return;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else if ((parent.getType() != com.google.javascript.rhino.Token.EXPR_RESULT) && (parent.getType() != com.google.javascript.rhino.Token.BLOCK)) {\n        if (((parent.getType() == com.google.javascript.rhino.Token.FOR) && (parent.getChildCount() == 4)) && ((n == parent.getFirstChild()) || (n == parent.getFirstChild().getNext().getNext()))) {\n        } else {\n            return;\n        }\n    }\n    boolean isResultUsed = com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());\n    if ((!isResultUsed) && (isSimpleOp || (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, t.getCompiler())))) {\n        if (n.isQualifiedName() && (n.getJSDocInfo() != null)) {\n            return;\n        } else if (n.isExprResult()) {\n            return;\n        }\n        java.lang.String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = (\"The result of the '\" + com.google.javascript.rhino.Token.name(n.getType()).toLowerCase()) + \"' operator is not being used.\";\n        }\n        t.getCompiler().report(t.makeError(n, level, com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR, msg));\n        if (!com.google.javascript.jscomp.NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "{\n    if (n.isExprResult()) {\n        return;\n    }\n}",
            "src_parent": "if (n.isQualifiedName() && (n.getJSDocInfo() != null)) {\n    return;\n} else if (n.isExprResult()) {\n    return;\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (n.isQualifiedName() && (n.getJSDocInfo() != null)) {\n    return;\n} else if (n.isExprResult()) {\n    return;\n}",
            "dst_parent": "{\n    if (n.isQualifiedName() && (n.getJSDocInfo() != null)) {\n        return;\n    } else if (n.isExprResult()) {\n        return;\n    }\n    java.lang.String msg = \"This code lacks side-effects. Is there a bug?\";\n    if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n    } else if (isSimpleOp) {\n        msg = (\"The result of the '\" + com.google.javascript.rhino.Token.name(n.getType()).toLowerCase()) + \"' operator is not being used.\";\n    }\n    t.getCompiler().report(t.makeError(n, level, com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR, msg));\n    if (!com.google.javascript.jscomp.NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (n.isQualifiedName() && (n.getJSDocInfo() != null)) {\n    return;\n}",
            "src_parent": "{\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n    if (parent == null) {\n        return;\n    }\n    if (n.isExprResult() || n.isBlock()) {\n        return;\n    }\n    if (n.isQualifiedName() && (n.getJSDocInfo() != null)) {\n        return;\n    }\n    boolean isResultUsed = com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());\n    if ((!isResultUsed) && (isSimpleOp || (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, t.getCompiler())))) {\n        java.lang.String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = (\"The result of the '\" + com.google.javascript.rhino.Token.name(n.getType()).toLowerCase()) + \"' operator is not being used.\";\n        }\n        t.getCompiler().report(t.makeError(n, level, com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR, msg));\n        if (!com.google.javascript.jscomp.NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (n.isExprResult()) {\n    return;\n}",
            "dst_parent": "{\n    if (n.isExprResult()) {\n        return;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (n.isExprResult() || n.isBlock()) {\n    return;\n}",
            "src_parent": "{\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n    if (parent == null) {\n        return;\n    }\n    if (n.isExprResult() || n.isBlock()) {\n        return;\n    }\n    if (n.isQualifiedName() && (n.getJSDocInfo() != null)) {\n        return;\n    }\n    boolean isResultUsed = com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());\n    if ((!isResultUsed) && (isSimpleOp || (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, t.getCompiler())))) {\n        java.lang.String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = (\"The result of the '\" + com.google.javascript.rhino.Token.name(n.getType()).toLowerCase()) + \"' operator is not being used.\";\n        }\n        t.getCompiler().report(t.makeError(n, level, com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR, msg));\n        if (!com.google.javascript.jscomp.NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "CheckSideEffects"
    }
  ],
  "id": "Closure_22"
}