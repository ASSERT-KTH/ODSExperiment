{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected static final int MAX_BIG_DECIMAL_SCALE = 9999;",
            "src_parent": "@com.fasterxml.jackson.databind.annotation.JacksonStdImpl\n@java.lang.SuppressWarnings(\"serial\")\npublic class NumberSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Number> implements com.fasterxml.jackson.databind.ser.ContextualSerializer {\n    public static final com.fasterxml.jackson.databind.ser.std.NumberSerializer instance = new com.fasterxml.jackson.databind.ser.std.NumberSerializer(java.lang.Number.class);\n\n    protected static final int MAX_BIG_DECIMAL_SCALE = 9999;\n\n    protected final boolean _isInt;\n\n    public NumberSerializer(java.lang.Class<? extends java.lang.Number> rawType) {\n        super(rawType, false);\n        _isInt = rawType == java.math.BigInteger.class;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(com.fasterxml.jackson.databind.SerializerProvider prov, com.fasterxml.jackson.databind.BeanProperty property) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n        if (format != null) {\n            switch (format.getShape()) {\n                case STRING :\n                    if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n                        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.bigDecimalAsStringSerializer();\n                    }\n                    return com.fasterxml.jackson.databind.ser.std.ToStringSerializer.instance;\n                default :\n            }\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public void serialize(java.lang.Number value, com.fasterxml.jackson.core.JsonGenerator g, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n        if (value instanceof java.math.BigDecimal) {\n            g.writeNumber(((java.math.BigDecimal) (value)));\n        } else if (value instanceof java.math.BigInteger) {\n            g.writeNumber(((java.math.BigInteger) (value)));\n        } else if (value instanceof java.lang.Long) {\n            g.writeNumber(value.longValue());\n        } else if (value instanceof java.lang.Double) {\n            g.writeNumber(value.doubleValue());\n        } else if (value instanceof java.lang.Float) {\n            g.writeNumber(value.floatValue());\n        } else if (((value instanceof java.lang.Integer) || (value instanceof java.lang.Byte)) || (value instanceof java.lang.Short)) {\n            g.writeNumber(value.intValue());\n        } else {\n            g.writeNumber(value.toString());\n        }\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.reflect.Type typeHint) {\n        return createSchemaNode(_isInt ? \"integer\" : \"number\", true);\n    }\n\n    @java.lang.Override\n    public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper visitor, com.fasterxml.jackson.databind.JavaType typeHint) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (_isInt) {\n            visitIntFormat(visitor, typeHint, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER);\n        } else if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n            visitFloatFormat(visitor, typeHint, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL);\n        } else {\n            visitor.expectNumberFormat(typeHint);\n        }\n    }\n\n    public static com.fasterxml.jackson.databind.JsonSerializer<?> bigDecimalAsStringSerializer() {\n        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer.BD_INSTANCE;\n    }\n\n    static final class BigDecimalAsStringSerializer extends com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase {\n        static final com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer BD_INSTANCE = new com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer();\n\n        public BigDecimalAsStringSerializer() {\n            super(java.math.BigDecimal.class);\n        }\n\n        @java.lang.Override\n        public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider prov, java.lang.Object value) {\n            return valueToString(value).isEmpty();\n        }\n\n        @java.lang.Override\n        public void serialize(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n            final java.lang.String text;\n            if (gen.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n                final java.math.BigDecimal bd = ((java.math.BigDecimal) (value));\n                if (!_verifyBigDecimalRange(gen, bd)) {\n                    final java.lang.String errorMsg = java.lang.String.format(\"Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]\", bd.scale(), com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE, com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n                    provider.reportMappingProblem(errorMsg);\n                }\n                text = bd.toPlainString();\n            } else {\n                text = value.toString();\n            }\n            gen.writeString(text);\n        }\n\n        @java.lang.Override\n        public java.lang.String valueToString(java.lang.Object value) {\n            throw new java.lang.IllegalStateException();\n        }\n\n        protected boolean _verifyBigDecimalRange(com.fasterxml.jackson.core.JsonGenerator gen, java.math.BigDecimal value) throws java.io.IOException {\n            int scale = value.scale();\n            return (scale >= (-com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE)) && (scale <= com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n    return com.fasterxml.jackson.databind.ser.std.NumberSerializer.bigDecimalAsStringSerializer();\n}",
            "src_parent": "case STRING :\n    if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.bigDecimalAsStringSerializer();\n    }\n    return com.fasterxml.jackson.databind.ser.std.ToStringSerializer.instance;",
            "src_parent_type": "Case",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static com.fasterxml.jackson.databind.JsonSerializer<?> bigDecimalAsStringSerializer() {\n    return com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer.BD_INSTANCE;\n}",
            "src_parent": "@com.fasterxml.jackson.databind.annotation.JacksonStdImpl\n@java.lang.SuppressWarnings(\"serial\")\npublic class NumberSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Number> implements com.fasterxml.jackson.databind.ser.ContextualSerializer {\n    public static final com.fasterxml.jackson.databind.ser.std.NumberSerializer instance = new com.fasterxml.jackson.databind.ser.std.NumberSerializer(java.lang.Number.class);\n\n    protected static final int MAX_BIG_DECIMAL_SCALE = 9999;\n\n    protected final boolean _isInt;\n\n    public NumberSerializer(java.lang.Class<? extends java.lang.Number> rawType) {\n        super(rawType, false);\n        _isInt = rawType == java.math.BigInteger.class;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(com.fasterxml.jackson.databind.SerializerProvider prov, com.fasterxml.jackson.databind.BeanProperty property) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n        if (format != null) {\n            switch (format.getShape()) {\n                case STRING :\n                    if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n                        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.bigDecimalAsStringSerializer();\n                    }\n                    return com.fasterxml.jackson.databind.ser.std.ToStringSerializer.instance;\n                default :\n            }\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public void serialize(java.lang.Number value, com.fasterxml.jackson.core.JsonGenerator g, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n        if (value instanceof java.math.BigDecimal) {\n            g.writeNumber(((java.math.BigDecimal) (value)));\n        } else if (value instanceof java.math.BigInteger) {\n            g.writeNumber(((java.math.BigInteger) (value)));\n        } else if (value instanceof java.lang.Long) {\n            g.writeNumber(value.longValue());\n        } else if (value instanceof java.lang.Double) {\n            g.writeNumber(value.doubleValue());\n        } else if (value instanceof java.lang.Float) {\n            g.writeNumber(value.floatValue());\n        } else if (((value instanceof java.lang.Integer) || (value instanceof java.lang.Byte)) || (value instanceof java.lang.Short)) {\n            g.writeNumber(value.intValue());\n        } else {\n            g.writeNumber(value.toString());\n        }\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.reflect.Type typeHint) {\n        return createSchemaNode(_isInt ? \"integer\" : \"number\", true);\n    }\n\n    @java.lang.Override\n    public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper visitor, com.fasterxml.jackson.databind.JavaType typeHint) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (_isInt) {\n            visitIntFormat(visitor, typeHint, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER);\n        } else if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n            visitFloatFormat(visitor, typeHint, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL);\n        } else {\n            visitor.expectNumberFormat(typeHint);\n        }\n    }\n\n    public static com.fasterxml.jackson.databind.JsonSerializer<?> bigDecimalAsStringSerializer() {\n        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer.BD_INSTANCE;\n    }\n\n    static final class BigDecimalAsStringSerializer extends com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase {\n        static final com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer BD_INSTANCE = new com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer();\n\n        public BigDecimalAsStringSerializer() {\n            super(java.math.BigDecimal.class);\n        }\n\n        @java.lang.Override\n        public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider prov, java.lang.Object value) {\n            return valueToString(value).isEmpty();\n        }\n\n        @java.lang.Override\n        public void serialize(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n            final java.lang.String text;\n            if (gen.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n                final java.math.BigDecimal bd = ((java.math.BigDecimal) (value));\n                if (!_verifyBigDecimalRange(gen, bd)) {\n                    final java.lang.String errorMsg = java.lang.String.format(\"Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]\", bd.scale(), com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE, com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n                    provider.reportMappingProblem(errorMsg);\n                }\n                text = bd.toPlainString();\n            } else {\n                text = value.toString();\n            }\n            gen.writeString(text);\n        }\n\n        @java.lang.Override\n        public java.lang.String valueToString(java.lang.Object value) {\n            throw new java.lang.IllegalStateException();\n        }\n\n        protected boolean _verifyBigDecimalRange(com.fasterxml.jackson.core.JsonGenerator gen, java.math.BigDecimal value) throws java.io.IOException {\n            int scale = value.scale();\n            return (scale >= (-com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE)) && (scale <= com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static final class BigDecimalAsStringSerializer extends com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase {\n    static final com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer BD_INSTANCE = new com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer();\n\n    public BigDecimalAsStringSerializer() {\n        super(java.math.BigDecimal.class);\n    }\n\n    @java.lang.Override\n    public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider prov, java.lang.Object value) {\n        return valueToString(value).isEmpty();\n    }\n\n    @java.lang.Override\n    public void serialize(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n        final java.lang.String text;\n        if (gen.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n            final java.math.BigDecimal bd = ((java.math.BigDecimal) (value));\n            if (!_verifyBigDecimalRange(gen, bd)) {\n                final java.lang.String errorMsg = java.lang.String.format(\"Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]\", bd.scale(), com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE, com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n                provider.reportMappingProblem(errorMsg);\n            }\n            text = bd.toPlainString();\n        } else {\n            text = value.toString();\n        }\n        gen.writeString(text);\n    }\n\n    @java.lang.Override\n    public java.lang.String valueToString(java.lang.Object value) {\n        throw new java.lang.IllegalStateException();\n    }\n\n    protected boolean _verifyBigDecimalRange(com.fasterxml.jackson.core.JsonGenerator gen, java.math.BigDecimal value) throws java.io.IOException {\n        int scale = value.scale();\n        return (scale >= (-com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE)) && (scale <= com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n    }\n}",
            "src_parent": "@com.fasterxml.jackson.databind.annotation.JacksonStdImpl\n@java.lang.SuppressWarnings(\"serial\")\npublic class NumberSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.lang.Number> implements com.fasterxml.jackson.databind.ser.ContextualSerializer {\n    public static final com.fasterxml.jackson.databind.ser.std.NumberSerializer instance = new com.fasterxml.jackson.databind.ser.std.NumberSerializer(java.lang.Number.class);\n\n    protected static final int MAX_BIG_DECIMAL_SCALE = 9999;\n\n    protected final boolean _isInt;\n\n    public NumberSerializer(java.lang.Class<? extends java.lang.Number> rawType) {\n        super(rawType, false);\n        _isInt = rawType == java.math.BigInteger.class;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(com.fasterxml.jackson.databind.SerializerProvider prov, com.fasterxml.jackson.databind.BeanProperty property) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = findFormatOverrides(prov, property, handledType());\n        if (format != null) {\n            switch (format.getShape()) {\n                case STRING :\n                    if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n                        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.bigDecimalAsStringSerializer();\n                    }\n                    return com.fasterxml.jackson.databind.ser.std.ToStringSerializer.instance;\n                default :\n            }\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public void serialize(java.lang.Number value, com.fasterxml.jackson.core.JsonGenerator g, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n        if (value instanceof java.math.BigDecimal) {\n            g.writeNumber(((java.math.BigDecimal) (value)));\n        } else if (value instanceof java.math.BigInteger) {\n            g.writeNumber(((java.math.BigInteger) (value)));\n        } else if (value instanceof java.lang.Long) {\n            g.writeNumber(value.longValue());\n        } else if (value instanceof java.lang.Double) {\n            g.writeNumber(value.doubleValue());\n        } else if (value instanceof java.lang.Float) {\n            g.writeNumber(value.floatValue());\n        } else if (((value instanceof java.lang.Integer) || (value instanceof java.lang.Byte)) || (value instanceof java.lang.Short)) {\n            g.writeNumber(value.intValue());\n        } else {\n            g.writeNumber(value.toString());\n        }\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.reflect.Type typeHint) {\n        return createSchemaNode(_isInt ? \"integer\" : \"number\", true);\n    }\n\n    @java.lang.Override\n    public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper visitor, com.fasterxml.jackson.databind.JavaType typeHint) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (_isInt) {\n            visitIntFormat(visitor, typeHint, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER);\n        } else if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n            visitFloatFormat(visitor, typeHint, com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL);\n        } else {\n            visitor.expectNumberFormat(typeHint);\n        }\n    }\n\n    public static com.fasterxml.jackson.databind.JsonSerializer<?> bigDecimalAsStringSerializer() {\n        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer.BD_INSTANCE;\n    }\n\n    static final class BigDecimalAsStringSerializer extends com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase {\n        static final com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer BD_INSTANCE = new com.fasterxml.jackson.databind.ser.std.NumberSerializer.BigDecimalAsStringSerializer();\n\n        public BigDecimalAsStringSerializer() {\n            super(java.math.BigDecimal.class);\n        }\n\n        @java.lang.Override\n        public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider prov, java.lang.Object value) {\n            return valueToString(value).isEmpty();\n        }\n\n        @java.lang.Override\n        public void serialize(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {\n            final java.lang.String text;\n            if (gen.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n                final java.math.BigDecimal bd = ((java.math.BigDecimal) (value));\n                if (!_verifyBigDecimalRange(gen, bd)) {\n                    final java.lang.String errorMsg = java.lang.String.format(\"Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]\", bd.scale(), com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE, com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n                    provider.reportMappingProblem(errorMsg);\n                }\n                text = bd.toPlainString();\n            } else {\n                text = value.toString();\n            }\n            gen.writeString(text);\n        }\n\n        @java.lang.Override\n        public java.lang.String valueToString(java.lang.Object value) {\n            throw new java.lang.IllegalStateException();\n        }\n\n        protected boolean _verifyBigDecimalRange(com.fasterxml.jackson.core.JsonGenerator gen, java.math.BigDecimal value) throws java.io.IOException {\n            int scale = value.scale();\n            return (scale >= (-com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE)) && (scale <= com.fasterxml.jackson.databind.ser.std.NumberSerializer.MAX_BIG_DECIMAL_SCALE);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        }
      ],
      "file_name": "NumberSerializer"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n    return com.fasterxml.jackson.databind.ser.std.NumberSerializer.bigDecimalAsStringSerializer();\n}",
            "src_parent": "case STRING :\n    if (((java.lang.Class<?>) (handledType())) == java.math.BigDecimal.class) {\n        return com.fasterxml.jackson.databind.ser.std.NumberSerializer.bigDecimalAsStringSerializer();\n    }\n    return com.fasterxml.jackson.databind.ser.std.ToStringSerializer.instance;",
            "src_parent_type": "Case",
            "src_type": "If"
          }
        }
      ],
      "file_name": "NumberSerializers"
    }
  ],
  "id": "JacksonDatabind_109"
}