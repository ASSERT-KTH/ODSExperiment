{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iZone.convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iZone.convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iZone.convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iZone.convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iZone.convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iZone.convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iZone.convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "ZonedChronology"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n    int offsetOriginal = getOffset(originalInstantUTC);\n    long instantUTC = instantLocal - offsetOriginal;\n    int offsetLocalFromOriginal = getOffset(instantUTC);\n    if (offsetLocalFromOriginal == offsetOriginal) {\n        return instantUTC;\n    }\n    return convertLocalToUTC(instantLocal, strict);\n}",
            "src_parent": "public abstract class DateTimeZone implements java.io.Serializable {\n    private static final long serialVersionUID = 5546345482340108586L;\n\n    public static final org.joda.time.DateTimeZone UTC = new org.joda.time.tz.FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n\n    private static org.joda.time.tz.Provider cProvider;\n\n    private static org.joda.time.tz.NameProvider cNameProvider;\n\n    private static java.util.Set<java.lang.String> cAvailableIDs;\n\n    private static volatile org.joda.time.DateTimeZone cDefault;\n\n    private static org.joda.time.format.DateTimeFormatter cOffsetFormatter;\n\n    private static java.util.Map<java.lang.String, java.lang.ref.SoftReference<org.joda.time.DateTimeZone>> iFixedOffsetCache;\n\n    private static java.util.Map<java.lang.String, java.lang.String> cZoneIdConversion;\n\n    static {\n        setProvider0(null);\n        setNameProvider0(null);\n    }\n\n    public static org.joda.time.DateTimeZone getDefault() {\n        org.joda.time.DateTimeZone zone = org.joda.time.DateTimeZone.cDefault;\n        if (zone == null) {\n            synchronized(org.joda.time.DateTimeZone.class) {\n                zone = org.joda.time.DateTimeZone.cDefault;\n                if (zone == null) {\n                    org.joda.time.DateTimeZone temp = null;\n                    try {\n                        try {\n                            java.lang.String id = java.lang.System.getProperty(\"user.timezone\");\n                            if (id != null) {\n                                temp = org.joda.time.DateTimeZone.forID(id);\n                            }\n                        } catch (java.lang.RuntimeException ex) {\n                        }\n                        if (temp == null) {\n                            temp = org.joda.time.DateTimeZone.forTimeZone(java.util.TimeZone.getDefault());\n                        }\n                    } catch (java.lang.IllegalArgumentException ex) {\n                    }\n                    if (temp == null) {\n                        temp = org.joda.time.DateTimeZone.UTC;\n                    }\n                    org.joda.time.DateTimeZone.cDefault = zone = temp;\n                }\n            }\n        }\n        return zone;\n    }\n\n    public static void setDefault(org.joda.time.DateTimeZone zone) throws java.lang.SecurityException {\n        java.lang.SecurityManager sm = java.lang.System.getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new org.joda.time.JodaTimePermission(\"DateTimeZone.setDefault\"));\n        }\n        if (zone == null) {\n            throw new java.lang.IllegalArgumentException(\"The datetime zone must not be null\");\n        }\n        synchronized(org.joda.time.DateTimeZone.class) {\n            org.joda.time.DateTimeZone.cDefault = zone;\n        }\n    }\n\n    @org.joda.convert.FromString\n    public static org.joda.time.DateTimeZone forID(java.lang.String id) {\n        if (id == null) {\n            return org.joda.time.DateTimeZone.getDefault();\n        }\n        if (id.equals(\"UTC\")) {\n            return org.joda.time.DateTimeZone.UTC;\n        }\n        org.joda.time.DateTimeZone zone = org.joda.time.DateTimeZone.cProvider.getZone(id);\n        if (zone != null) {\n            return zone;\n        }\n        if (id.startsWith(\"+\") || id.startsWith(\"-\")) {\n            int offset = org.joda.time.DateTimeZone.parseOffset(id);\n            if (offset == 0L) {\n                return org.joda.time.DateTimeZone.UTC;\n            } else {\n                id = org.joda.time.DateTimeZone.printOffset(offset);\n                return org.joda.time.DateTimeZone.fixedOffsetZone(id, offset);\n            }\n        }\n        throw new java.lang.IllegalArgumentException((\"The datetime zone id '\" + id) + \"' is not recognised\");\n    }\n\n    public static org.joda.time.DateTimeZone forOffsetHours(int hoursOffset) throws java.lang.IllegalArgumentException {\n        return org.joda.time.DateTimeZone.forOffsetHoursMinutes(hoursOffset, 0);\n    }\n\n    public static org.joda.time.DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws java.lang.IllegalArgumentException {\n        if ((hoursOffset == 0) && (minutesOffset == 0)) {\n            return org.joda.time.DateTimeZone.UTC;\n        }\n        if ((minutesOffset < 0) || (minutesOffset > 59)) {\n            throw new java.lang.IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        int offset = 0;\n        try {\n            int hoursInMinutes = org.joda.time.field.FieldUtils.safeMultiply(hoursOffset, 60);\n            if (hoursInMinutes < 0) {\n                minutesOffset = org.joda.time.field.FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n            } else {\n                minutesOffset = org.joda.time.field.FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n            }\n            offset = org.joda.time.field.FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n        } catch (java.lang.ArithmeticException ex) {\n            throw new java.lang.IllegalArgumentException(\"Offset is too large\");\n        }\n        return org.joda.time.DateTimeZone.forOffsetMillis(offset);\n    }\n\n    public static org.joda.time.DateTimeZone forOffsetMillis(int millisOffset) {\n        java.lang.String id = org.joda.time.DateTimeZone.printOffset(millisOffset);\n        return org.joda.time.DateTimeZone.fixedOffsetZone(id, millisOffset);\n    }\n\n    public static org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone zone) {\n        if (zone == null) {\n            return org.joda.time.DateTimeZone.getDefault();\n        }\n        final java.lang.String id = zone.getID();\n        if (id.equals(\"UTC\")) {\n            return org.joda.time.DateTimeZone.UTC;\n        }\n        org.joda.time.DateTimeZone dtz = null;\n        java.lang.String convId = org.joda.time.DateTimeZone.getConvertedId(id);\n        if (convId != null) {\n            dtz = org.joda.time.DateTimeZone.cProvider.getZone(convId);\n        }\n        if (dtz == null) {\n            dtz = org.joda.time.DateTimeZone.cProvider.getZone(id);\n        }\n        if (dtz != null) {\n            return dtz;\n        }\n        if (convId == null) {\n            convId = zone.getDisplayName();\n            if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\")) {\n                convId = convId.substring(3);\n                int offset = org.joda.time.DateTimeZone.parseOffset(convId);\n                if (offset == 0L) {\n                    return org.joda.time.DateTimeZone.UTC;\n                } else {\n                    convId = org.joda.time.DateTimeZone.printOffset(offset);\n                    return org.joda.time.DateTimeZone.fixedOffsetZone(convId, offset);\n                }\n            }\n        }\n        throw new java.lang.IllegalArgumentException((\"The datetime zone id '\" + id) + \"' is not recognised\");\n    }\n\n    private static synchronized org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String id, int offset) {\n        if (offset == 0) {\n            return org.joda.time.DateTimeZone.UTC;\n        }\n        if (org.joda.time.DateTimeZone.iFixedOffsetCache == null) {\n            org.joda.time.DateTimeZone.iFixedOffsetCache = new java.util.HashMap<java.lang.String, java.lang.ref.SoftReference<org.joda.time.DateTimeZone>>();\n        }\n        org.joda.time.DateTimeZone zone;\n        java.lang.ref.Reference<org.joda.time.DateTimeZone> ref = org.joda.time.DateTimeZone.iFixedOffsetCache.get(id);\n        if (ref != null) {\n            zone = ref.get();\n            if (zone != null) {\n                return zone;\n            }\n        }\n        zone = new org.joda.time.tz.FixedDateTimeZone(id, null, offset, offset);\n        org.joda.time.DateTimeZone.iFixedOffsetCache.put(id, new java.lang.ref.SoftReference<org.joda.time.DateTimeZone>(zone));\n        return zone;\n    }\n\n    public static java.util.Set<java.lang.String> getAvailableIDs() {\n        return org.joda.time.DateTimeZone.cAvailableIDs;\n    }\n\n    public static org.joda.time.tz.Provider getProvider() {\n        return org.joda.time.DateTimeZone.cProvider;\n    }\n\n    public static void setProvider(org.joda.time.tz.Provider provider) throws java.lang.SecurityException {\n        java.lang.SecurityManager sm = java.lang.System.getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new org.joda.time.JodaTimePermission(\"DateTimeZone.setProvider\"));\n        }\n        org.joda.time.DateTimeZone.setProvider0(provider);\n    }\n\n    private static void setProvider0(org.joda.time.tz.Provider provider) {\n        if (provider == null) {\n            provider = org.joda.time.DateTimeZone.getDefaultProvider();\n        }\n        java.util.Set<java.lang.String> ids = provider.getAvailableIDs();\n        if ((ids == null) || (ids.size() == 0)) {\n            throw new java.lang.IllegalArgumentException(\"The provider doesn't have any available ids\");\n        }\n        if (!ids.contains(\"UTC\")) {\n            throw new java.lang.IllegalArgumentException(\"The provider doesn't support UTC\");\n        }\n        if (!org.joda.time.DateTimeZone.UTC.equals(provider.getZone(\"UTC\"))) {\n            throw new java.lang.IllegalArgumentException(\"Invalid UTC zone provided\");\n        }\n        org.joda.time.DateTimeZone.cProvider = provider;\n        org.joda.time.DateTimeZone.cAvailableIDs = ids;\n    }\n\n    private static org.joda.time.tz.Provider getDefaultProvider() {\n        org.joda.time.tz.Provider provider = null;\n        try {\n            java.lang.String providerClass = java.lang.System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n            if (providerClass != null) {\n                try {\n                    provider = ((org.joda.time.tz.Provider) (java.lang.Class.forName(providerClass).newInstance()));\n                } catch (java.lang.Exception ex) {\n                    java.lang.Thread thread = java.lang.Thread.currentThread();\n                    thread.getThreadGroup().uncaughtException(thread, ex);\n                }\n            }\n        } catch (java.lang.SecurityException ex) {\n        }\n        if (provider == null) {\n            try {\n                provider = new org.joda.time.tz.ZoneInfoProvider(\"org/joda/time/tz/data\");\n            } catch (java.lang.Exception ex) {\n                java.lang.Thread thread = java.lang.Thread.currentThread();\n                thread.getThreadGroup().uncaughtException(thread, ex);\n            }\n        }\n        if (provider == null) {\n            provider = new org.joda.time.tz.UTCProvider();\n        }\n        return provider;\n    }\n\n    public static org.joda.time.tz.NameProvider getNameProvider() {\n        return org.joda.time.DateTimeZone.cNameProvider;\n    }\n\n    public static void setNameProvider(org.joda.time.tz.NameProvider nameProvider) throws java.lang.SecurityException {\n        java.lang.SecurityManager sm = java.lang.System.getSecurityManager();\n        if (sm != null) {\n            sm.checkPermission(new org.joda.time.JodaTimePermission(\"DateTimeZone.setNameProvider\"));\n        }\n        org.joda.time.DateTimeZone.setNameProvider0(nameProvider);\n    }\n\n    private static void setNameProvider0(org.joda.time.tz.NameProvider nameProvider) {\n        if (nameProvider == null) {\n            nameProvider = org.joda.time.DateTimeZone.getDefaultNameProvider();\n        }\n        org.joda.time.DateTimeZone.cNameProvider = nameProvider;\n    }\n\n    private static org.joda.time.tz.NameProvider getDefaultNameProvider() {\n        org.joda.time.tz.NameProvider nameProvider = null;\n        try {\n            java.lang.String providerClass = java.lang.System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");\n            if (providerClass != null) {\n                try {\n                    nameProvider = ((org.joda.time.tz.NameProvider) (java.lang.Class.forName(providerClass).newInstance()));\n                } catch (java.lang.Exception ex) {\n                    java.lang.Thread thread = java.lang.Thread.currentThread();\n                    thread.getThreadGroup().uncaughtException(thread, ex);\n                }\n            }\n        } catch (java.lang.SecurityException ex) {\n        }\n        if (nameProvider == null) {\n            nameProvider = new org.joda.time.tz.DefaultNameProvider();\n        }\n        return nameProvider;\n    }\n\n    private static synchronized java.lang.String getConvertedId(java.lang.String id) {\n        java.util.Map<java.lang.String, java.lang.String> map = org.joda.time.DateTimeZone.cZoneIdConversion;\n        if (map == null) {\n            map = new java.util.HashMap<java.lang.String, java.lang.String>();\n            map.put(\"GMT\", \"UTC\");\n            map.put(\"MIT\", \"Pacific/Apia\");\n            map.put(\"HST\", \"Pacific/Honolulu\");\n            map.put(\"AST\", \"America/Anchorage\");\n            map.put(\"PST\", \"America/Los_Angeles\");\n            map.put(\"MST\", \"America/Denver\");\n            map.put(\"PNT\", \"America/Phoenix\");\n            map.put(\"CST\", \"America/Chicago\");\n            map.put(\"EST\", \"America/New_York\");\n            map.put(\"IET\", \"America/Indianapolis\");\n            map.put(\"PRT\", \"America/Puerto_Rico\");\n            map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Buenos_Aires\");\n            map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"WET\", \"Europe/London\");\n            map.put(\"ECT\", \"Europe/Paris\");\n            map.put(\"ART\", \"Africa/Cairo\");\n            map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EET\", \"Europe/Bucharest\");\n            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"MET\", \"Asia/Tehran\");\n            map.put(\"NET\", \"Asia/Yerevan\");\n            map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Calcutta\");\n            map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Saigon\");\n            map.put(\"CTT\", \"Asia/Shanghai\");\n            map.put(\"JST\", \"Asia/Tokyo\");\n            map.put(\"ACT\", \"Australia/Darwin\");\n            map.put(\"AET\", \"Australia/Sydney\");\n            map.put(\"SST\", \"Pacific/Guadalcanal\");\n            map.put(\"NST\", \"Pacific/Auckland\");\n            org.joda.time.DateTimeZone.cZoneIdConversion = map;\n        }\n        return map.get(id);\n    }\n\n    private static int parseOffset(java.lang.String str) {\n        org.joda.time.Chronology chrono = new org.joda.time.chrono.BaseChronology() {\n            public org.joda.time.DateTimeZone getZone() {\n                return null;\n            }\n\n            public org.joda.time.Chronology withUTC() {\n                return this;\n            }\n\n            public org.joda.time.Chronology withZone(org.joda.time.DateTimeZone zone) {\n                return this;\n            }\n\n            public java.lang.String toString() {\n                return getClass().getName();\n            }\n        };\n        return -((int) (org.joda.time.DateTimeZone.offsetFormatter().withChronology(chrono).parseMillis(str)));\n    }\n\n    private static java.lang.String printOffset(int offset) {\n        java.lang.StringBuffer buf = new java.lang.StringBuffer();\n        if (offset >= 0) {\n            buf.append('+');\n        } else {\n            buf.append('-');\n            offset = -offset;\n        }\n        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;\n        org.joda.time.format.FormatUtils.appendPaddedInteger(buf, hours, 2);\n        offset -= hours * ((int) (DateTimeConstants.MILLIS_PER_HOUR));\n        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;\n        buf.append(':');\n        org.joda.time.format.FormatUtils.appendPaddedInteger(buf, minutes, 2);\n        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        if (offset == 0) {\n            return buf.toString();\n        }\n        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;\n        buf.append(':');\n        org.joda.time.format.FormatUtils.appendPaddedInteger(buf, seconds, 2);\n        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;\n        if (offset == 0) {\n            return buf.toString();\n        }\n        buf.append('.');\n        org.joda.time.format.FormatUtils.appendPaddedInteger(buf, offset, 3);\n        return buf.toString();\n    }\n\n    private static synchronized org.joda.time.format.DateTimeFormatter offsetFormatter() {\n        if (org.joda.time.DateTimeZone.cOffsetFormatter == null) {\n            org.joda.time.DateTimeZone.cOffsetFormatter = new org.joda.time.format.DateTimeFormatterBuilder().appendTimeZoneOffset(null, true, 2, 4).toFormatter();\n        }\n        return org.joda.time.DateTimeZone.cOffsetFormatter;\n    }\n\n    private final java.lang.String iID;\n\n    protected DateTimeZone(java.lang.String id) {\n        if (id == null) {\n            throw new java.lang.IllegalArgumentException(\"Id must not be null\");\n        }\n        iID = id;\n    }\n\n    @org.joda.convert.ToString\n    public final java.lang.String getID() {\n        return iID;\n    }\n\n    public abstract java.lang.String getNameKey(long instant);\n\n    public final java.lang.String getShortName(long instant) {\n        return getShortName(instant, null);\n    }\n\n    public java.lang.String getShortName(long instant, java.util.Locale locale) {\n        if (locale == null) {\n            locale = java.util.Locale.getDefault();\n        }\n        java.lang.String nameKey = getNameKey(instant);\n        if (nameKey == null) {\n            return iID;\n        }\n        java.lang.String name = org.joda.time.DateTimeZone.cNameProvider.getShortName(locale, iID, nameKey);\n        if (name != null) {\n            return name;\n        }\n        return org.joda.time.DateTimeZone.printOffset(getOffset(instant));\n    }\n\n    public final java.lang.String getName(long instant) {\n        return getName(instant, null);\n    }\n\n    public java.lang.String getName(long instant, java.util.Locale locale) {\n        if (locale == null) {\n            locale = java.util.Locale.getDefault();\n        }\n        java.lang.String nameKey = getNameKey(instant);\n        if (nameKey == null) {\n            return iID;\n        }\n        java.lang.String name = org.joda.time.DateTimeZone.cNameProvider.getName(locale, iID, nameKey);\n        if (name != null) {\n            return name;\n        }\n        return org.joda.time.DateTimeZone.printOffset(getOffset(instant));\n    }\n\n    public abstract int getOffset(long instant);\n\n    public final int getOffset(org.joda.time.ReadableInstant instant) {\n        if (instant == null) {\n            return getOffset(org.joda.time.DateTimeUtils.currentTimeMillis());\n        }\n        return getOffset(instant.getMillis());\n    }\n\n    public abstract int getStandardOffset(long instant);\n\n    public boolean isStandardOffset(long instant) {\n        return getOffset(instant) == getStandardOffset(instant);\n    }\n\n    public int getOffsetFromLocal(long instantLocal) {\n        int offsetLocal = getOffset(instantLocal);\n        int offsetAdjusted = getOffset(instantLocal - offsetLocal);\n        if (offsetLocal != offsetAdjusted) {\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantLocal - offsetLocal);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }\n\n    public long convertUTCToLocal(long instantUTC) {\n        int offset = getOffset(instantUTC);\n        long instantLocal = instantUTC + offset;\n        if (((instantUTC ^ instantLocal) < 0) && ((instantUTC ^ offset) >= 0)) {\n            throw new java.lang.ArithmeticException(\"Adding time zone offset caused overflow\");\n        }\n        return instantLocal;\n    }\n\n    public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n        int offsetOriginal = getOffset(originalInstantUTC);\n        long instantUTC = instantLocal - offsetOriginal;\n        int offsetLocalFromOriginal = getOffset(instantUTC);\n        if (offsetLocalFromOriginal == offsetOriginal) {\n            return instantUTC;\n        }\n        return convertLocalToUTC(instantLocal, strict);\n    }\n\n    public long convertLocalToUTC(long instantLocal, boolean strict) {\n        int offsetLocal = getOffset(instantLocal);\n        int offset = getOffset(instantLocal - offsetLocal);\n        if (offsetLocal != offset) {\n            if (strict || (offsetLocal < 0)) {\n                long nextLocal = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal == (instantLocal - offsetLocal)) {\n                    nextLocal = java.lang.Long.MAX_VALUE;\n                }\n                long nextAdjusted = nextTransition(instantLocal - offset);\n                if (nextAdjusted == (instantLocal - offset)) {\n                    nextAdjusted = java.lang.Long.MAX_VALUE;\n                }\n                if (nextLocal != nextAdjusted) {\n                    if (strict) {\n                        throw new java.lang.IllegalArgumentException((((\"Illegal instant due to time zone offset transition: \" + org.joda.time.format.DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new org.joda.time.Instant(instantLocal))) + \" (\") + getID()) + \")\");\n                    } else {\n                        offset = offsetLocal;\n                    }\n                }\n            }\n        }\n        long instantUTC = instantLocal - offset;\n        if (((instantLocal ^ instantUTC) < 0) && ((instantLocal ^ offset) < 0)) {\n            throw new java.lang.ArithmeticException(\"Subtracting time zone offset caused overflow\");\n        }\n        return instantUTC;\n    }\n\n    public long getMillisKeepLocal(org.joda.time.DateTimeZone newZone, long oldInstant) {\n        if (newZone == null) {\n            newZone = org.joda.time.DateTimeZone.getDefault();\n        }\n        if (newZone == this) {\n            return oldInstant;\n        }\n        long instantLocal = oldInstant + getOffset(oldInstant);\n        return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n    }\n\n    public boolean isLocalDateTimeGap(org.joda.time.LocalDateTime localDateTime) {\n        if (isFixed()) {\n            return false;\n        }\n        try {\n            localDateTime.toDateTime(this);\n            return false;\n        } catch (java.lang.IllegalArgumentException ex) {\n            return true;\n        }\n    }\n\n    public abstract boolean isFixed();\n\n    public abstract long nextTransition(long instant);\n\n    public abstract long previousTransition(long instant);\n\n    public java.util.TimeZone toTimeZone() {\n        return java.util.TimeZone.getTimeZone(iID);\n    }\n\n    public abstract boolean equals(java.lang.Object object);\n\n    public int hashCode() {\n        return 57 + getID().hashCode();\n    }\n\n    public java.lang.String toString() {\n        return getID();\n    }\n\n    protected java.lang.Object writeReplace() throws java.io.ObjectStreamException {\n        return new org.joda.time.DateTimeZone.Stub(iID);\n    }\n\n    private static final class Stub implements java.io.Serializable {\n        private static final long serialVersionUID = -6471952376487863581L;\n\n        private transient java.lang.String iID;\n\n        Stub(java.lang.String id) {\n            iID = id;\n        }\n\n        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n            out.writeUTF(iID);\n        }\n\n        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException {\n            iID = in.readUTF();\n        }\n\n        private java.lang.Object readResolve() throws java.io.ObjectStreamException {\n            return org.joda.time.DateTimeZone.forID(iID);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "DateTimeZone"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "instant",
            "src_parent": "iBase.getZone().convertLocalToUTC(localInstant, false, instant)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "LenientDateTimeField"
    }
  ],
  "id": "Time_26"
}