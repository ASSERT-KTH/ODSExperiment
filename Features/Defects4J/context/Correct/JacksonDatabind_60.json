{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "typeSer0",
            "dst_parent": "ser.serializeWithType(value, gen, provider, typeSer0)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "rr",
            "src_parent": "ser.serializeWithType(value, gen, provider, rr)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter rr = new com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter(typeSer0, bean)",
            "src_parent": "{\n    value = _accessorMethod.getValue(bean);\n    if (value == null) {\n        provider.defaultSerializeNull(gen);\n        return;\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser = _valueSerializer;\n    if (ser == null) {\n        ser = provider.findValueSerializer(value.getClass(), _property);\n    } else if (_forceTypeInformation) {\n        typeSer0.writeTypePrefixForScalar(bean, gen);\n        ser.serialize(value, gen, provider);\n        typeSer0.writeTypeSuffixForScalar(bean, gen);\n        return;\n    }\n    com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter rr = new com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter(typeSer0, bean);\n    ser.serializeWithType(value, gen, provider, rr);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static class TypeSerializerRerouter extends com.fasterxml.jackson.databind.jsontype.TypeSerializer {\n    protected final com.fasterxml.jackson.databind.jsontype.TypeSerializer _typeSerializer;\n\n    protected final java.lang.Object _forObject;\n\n    public TypeSerializerRerouter(com.fasterxml.jackson.databind.jsontype.TypeSerializer ts, java.lang.Object ob) {\n        _typeSerializer = ts;\n        _forObject = ob;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty prop) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonTypeInfo.As getTypeInclusion() {\n        return _typeSerializer.getTypeInclusion();\n    }\n\n    @java.lang.Override\n    public java.lang.String getPropertyName() {\n        return _typeSerializer.getPropertyName();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeIdResolver getTypeIdResolver() {\n        return _typeSerializer.getTypeIdResolver();\n    }\n\n    @java.lang.Override\n    public void writeTypePrefixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        _typeSerializer.writeTypePrefixForScalar(_forObject, gen);\n    }\n\n    @java.lang.Override\n    public void writeTypePrefixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        _typeSerializer.writeTypePrefixForObject(_forObject, gen);\n    }\n\n    @java.lang.Override\n    public void writeTypePrefixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        _typeSerializer.writeTypePrefixForArray(_forObject, gen);\n    }\n\n    @java.lang.Override\n    public void writeTypeSuffixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        _typeSerializer.writeTypeSuffixForScalar(_forObject, gen);\n    }\n\n    @java.lang.Override\n    public void writeTypeSuffixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        _typeSerializer.writeTypeSuffixForObject(_forObject, gen);\n    }\n\n    @java.lang.Override\n    public void writeTypeSuffixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n        _typeSerializer.writeTypeSuffixForArray(_forObject, gen);\n    }\n\n    public void writeTypePrefixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.Class<?> type) throws java.io.IOException {\n        _typeSerializer.writeTypePrefixForScalar(_forObject, gen, type);\n    }\n\n    public void writeTypePrefixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.Class<?> type) throws java.io.IOException {\n        _typeSerializer.writeTypePrefixForObject(_forObject, gen, type);\n    }\n\n    public void writeTypePrefixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.Class<?> type) throws java.io.IOException {\n        _typeSerializer.writeTypePrefixForArray(_forObject, gen, type);\n    }\n\n    @java.lang.Override\n    public void writeCustomTypePrefixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n        _typeSerializer.writeCustomTypePrefixForScalar(_forObject, gen, typeId);\n    }\n\n    @java.lang.Override\n    public void writeCustomTypePrefixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n        _typeSerializer.writeCustomTypePrefixForObject(_forObject, gen, typeId);\n    }\n\n    @java.lang.Override\n    public void writeCustomTypePrefixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n        _typeSerializer.writeCustomTypePrefixForArray(_forObject, gen, typeId);\n    }\n\n    @java.lang.Override\n    public void writeCustomTypeSuffixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n        _typeSerializer.writeCustomTypeSuffixForScalar(_forObject, gen, typeId);\n    }\n\n    @java.lang.Override\n    public void writeCustomTypeSuffixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n        _typeSerializer.writeCustomTypeSuffixForObject(_forObject, gen, typeId);\n    }\n\n    @java.lang.Override\n    public void writeCustomTypeSuffixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n        _typeSerializer.writeCustomTypeSuffixForArray(_forObject, gen, typeId);\n    }\n}",
            "src_parent": "@java.lang.SuppressWarnings(\"serial\")\n@com.fasterxml.jackson.databind.annotation.JacksonStdImpl\npublic class JsonValueSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<java.lang.Object> implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable , com.fasterxml.jackson.databind.jsonschema.SchemaAware , com.fasterxml.jackson.databind.ser.ContextualSerializer {\n    protected final com.fasterxml.jackson.databind.introspect.AnnotatedMethod _accessorMethod;\n\n    protected final com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> _valueSerializer;\n\n    protected final com.fasterxml.jackson.databind.BeanProperty _property;\n\n    protected final boolean _forceTypeInformation;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public JsonValueSerializer(com.fasterxml.jackson.databind.introspect.AnnotatedMethod valueMethod, com.fasterxml.jackson.databind.JsonSerializer<?> ser) {\n        super(valueMethod.getType());\n        _accessorMethod = valueMethod;\n        _valueSerializer = ((com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) (ser));\n        _property = null;\n        _forceTypeInformation = true;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public JsonValueSerializer(com.fasterxml.jackson.databind.ser.std.JsonValueSerializer src, com.fasterxml.jackson.databind.BeanProperty property, com.fasterxml.jackson.databind.JsonSerializer<?> ser, boolean forceTypeInfo) {\n        super(com.fasterxml.jackson.databind.ser.std.JsonValueSerializer._notNullClass(src.handledType()));\n        _accessorMethod = src._accessorMethod;\n        _valueSerializer = ((com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) (ser));\n        _property = property;\n        _forceTypeInformation = forceTypeInfo;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static final java.lang.Class<java.lang.Object> _notNullClass(java.lang.Class<?> cls) {\n        return cls == null ? java.lang.Object.class : ((java.lang.Class<java.lang.Object>) (cls));\n    }\n\n    public com.fasterxml.jackson.databind.ser.std.JsonValueSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty property, com.fasterxml.jackson.databind.JsonSerializer<?> ser, boolean forceTypeInfo) {\n        if (((_property == property) && (_valueSerializer == ser)) && (forceTypeInfo == _forceTypeInformation)) {\n            return this;\n        }\n        return new com.fasterxml.jackson.databind.ser.std.JsonValueSerializer(this, property, ser, forceTypeInfo);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonSerializer<?> createContextual(com.fasterxml.jackson.databind.SerializerProvider provider, com.fasterxml.jackson.databind.BeanProperty property) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonSerializer<?> ser = _valueSerializer;\n        if (ser == null) {\n            com.fasterxml.jackson.databind.JavaType t = _accessorMethod.getType();\n            if (provider.isEnabled(com.fasterxml.jackson.databind.MapperFeature.USE_STATIC_TYPING) || t.isFinal()) {\n                ser = provider.findPrimaryPropertySerializer(t, property);\n                boolean forceTypeInformation = isNaturalTypeWithStdHandling(t.getRawClass(), ser);\n                return withResolved(property, ser, forceTypeInformation);\n            }\n        } else {\n            ser = provider.handlePrimaryContextualization(ser, property);\n            return withResolved(property, ser, _forceTypeInformation);\n        }\n        return this;\n    }\n\n    @java.lang.Override\n    public void serialize(java.lang.Object bean, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider prov) throws java.io.IOException {\n        try {\n            java.lang.Object value = _accessorMethod.getValue(bean);\n            if (value == null) {\n                prov.defaultSerializeNull(gen);\n                return;\n            }\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser = _valueSerializer;\n            if (ser == null) {\n                java.lang.Class<?> c = value.getClass();\n                ser = prov.findTypedValueSerializer(c, true, _property);\n            }\n            ser.serialize(value, gen, prov);\n        } catch (java.io.IOException ioe) {\n            throw ioe;\n        } catch (java.lang.Exception e) {\n            java.lang.Throwable t = e;\n            while ((t instanceof java.lang.reflect.InvocationTargetException) && (t.getCause() != null)) {\n                t = t.getCause();\n            } \n            if (t instanceof java.lang.Error) {\n                throw ((java.lang.Error) (t));\n            }\n            throw com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(t, bean, _accessorMethod.getName() + \"()\");\n        }\n    }\n\n    @java.lang.Override\n    public void serializeWithType(java.lang.Object bean, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider, com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSer0) throws java.io.IOException {\n        java.lang.Object value = null;\n        try {\n            value = _accessorMethod.getValue(bean);\n            if (value == null) {\n                provider.defaultSerializeNull(gen);\n                return;\n            }\n            com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser = _valueSerializer;\n            if (ser == null) {\n                ser = provider.findValueSerializer(value.getClass(), _property);\n            } else if (_forceTypeInformation) {\n                typeSer0.writeTypePrefixForScalar(bean, gen);\n                ser.serialize(value, gen, provider);\n                typeSer0.writeTypeSuffixForScalar(bean, gen);\n                return;\n            }\n            com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter rr = new com.fasterxml.jackson.databind.ser.std.JsonValueSerializer.TypeSerializerRerouter(typeSer0, bean);\n            ser.serializeWithType(value, gen, provider, rr);\n        } catch (java.io.IOException ioe) {\n            throw ioe;\n        } catch (java.lang.Exception e) {\n            java.lang.Throwable t = e;\n            while ((t instanceof java.lang.reflect.InvocationTargetException) && (t.getCause() != null)) {\n                t = t.getCause();\n            } \n            if (t instanceof java.lang.Error) {\n                throw ((java.lang.Error) (t));\n            }\n            throw com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(t, bean, _accessorMethod.getName() + \"()\");\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider provider, java.lang.reflect.Type typeHint) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (_valueSerializer instanceof com.fasterxml.jackson.databind.jsonschema.SchemaAware) {\n            return ((com.fasterxml.jackson.databind.jsonschema.SchemaAware) (_valueSerializer)).getSchema(provider, null);\n        }\n        return com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\n    }\n\n    @java.lang.Override\n    public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper visitor, com.fasterxml.jackson.databind.JavaType typeHint) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.JavaType type = _accessorMethod.getType();\n        java.lang.Class<?> declaring = _accessorMethod.getDeclaringClass();\n        if ((declaring != null) && declaring.isEnum()) {\n            if (_acceptJsonFormatVisitorForEnum(visitor, typeHint, declaring)) {\n                return;\n            }\n        }\n        com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> ser = _valueSerializer;\n        if (ser == null) {\n            ser = visitor.getProvider().findTypedValueSerializer(type, false, _property);\n            if (ser == null) {\n                visitor.expectAnyFormat(typeHint);\n                return;\n            }\n        }\n        ser.acceptJsonFormatVisitor(visitor, null);\n    }\n\n    protected boolean _acceptJsonFormatVisitorForEnum(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper visitor, com.fasterxml.jackson.databind.JavaType typeHint, java.lang.Class<?> enumType) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor stringVisitor = visitor.expectStringFormat(typeHint);\n        if (stringVisitor != null) {\n            java.util.Set<java.lang.String> enums = new java.util.LinkedHashSet<java.lang.String>();\n            for (java.lang.Object en : enumType.getEnumConstants()) {\n                try {\n                    enums.add(java.lang.String.valueOf(_accessorMethod.callOn(en)));\n                } catch (java.lang.Exception e) {\n                    java.lang.Throwable t = e;\n                    while ((t instanceof java.lang.reflect.InvocationTargetException) && (t.getCause() != null)) {\n                        t = t.getCause();\n                    } \n                    if (t instanceof java.lang.Error) {\n                        throw ((java.lang.Error) (t));\n                    }\n                    throw com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(t, en, _accessorMethod.getName() + \"()\");\n                }\n            }\n            stringVisitor.enumTypes(enums);\n        }\n        return true;\n    }\n\n    protected boolean isNaturalTypeWithStdHandling(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.JsonSerializer<?> ser) {\n        if (rawType.isPrimitive()) {\n            if (((rawType != java.lang.Integer.TYPE) && (rawType != java.lang.Boolean.TYPE)) && (rawType != java.lang.Double.TYPE)) {\n                return false;\n            }\n        } else if ((((rawType != java.lang.String.class) && (rawType != java.lang.Integer.class)) && (rawType != java.lang.Boolean.class)) && (rawType != java.lang.Double.class)) {\n            return false;\n        }\n        return isDefaultSerializer(ser);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (((\"(@JsonValue serializer for method \" + _accessorMethod.getDeclaringClass()) + \"#\") + _accessorMethod.getName()) + \")\";\n    }\n\n    static class TypeSerializerRerouter extends com.fasterxml.jackson.databind.jsontype.TypeSerializer {\n        protected final com.fasterxml.jackson.databind.jsontype.TypeSerializer _typeSerializer;\n\n        protected final java.lang.Object _forObject;\n\n        public TypeSerializerRerouter(com.fasterxml.jackson.databind.jsontype.TypeSerializer ts, java.lang.Object ob) {\n            _typeSerializer = ts;\n            _forObject = ob;\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty prop) {\n            throw new java.lang.UnsupportedOperationException();\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.annotation.JsonTypeInfo.As getTypeInclusion() {\n            return _typeSerializer.getTypeInclusion();\n        }\n\n        @java.lang.Override\n        public java.lang.String getPropertyName() {\n            return _typeSerializer.getPropertyName();\n        }\n\n        @java.lang.Override\n        public com.fasterxml.jackson.databind.jsontype.TypeIdResolver getTypeIdResolver() {\n            return _typeSerializer.getTypeIdResolver();\n        }\n\n        @java.lang.Override\n        public void writeTypePrefixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n            _typeSerializer.writeTypePrefixForScalar(_forObject, gen);\n        }\n\n        @java.lang.Override\n        public void writeTypePrefixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n            _typeSerializer.writeTypePrefixForObject(_forObject, gen);\n        }\n\n        @java.lang.Override\n        public void writeTypePrefixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n            _typeSerializer.writeTypePrefixForArray(_forObject, gen);\n        }\n\n        @java.lang.Override\n        public void writeTypeSuffixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n            _typeSerializer.writeTypeSuffixForScalar(_forObject, gen);\n        }\n\n        @java.lang.Override\n        public void writeTypeSuffixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n            _typeSerializer.writeTypeSuffixForObject(_forObject, gen);\n        }\n\n        @java.lang.Override\n        public void writeTypeSuffixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen) throws java.io.IOException {\n            _typeSerializer.writeTypeSuffixForArray(_forObject, gen);\n        }\n\n        public void writeTypePrefixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.Class<?> type) throws java.io.IOException {\n            _typeSerializer.writeTypePrefixForScalar(_forObject, gen, type);\n        }\n\n        public void writeTypePrefixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.Class<?> type) throws java.io.IOException {\n            _typeSerializer.writeTypePrefixForObject(_forObject, gen, type);\n        }\n\n        public void writeTypePrefixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.Class<?> type) throws java.io.IOException {\n            _typeSerializer.writeTypePrefixForArray(_forObject, gen, type);\n        }\n\n        @java.lang.Override\n        public void writeCustomTypePrefixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n            _typeSerializer.writeCustomTypePrefixForScalar(_forObject, gen, typeId);\n        }\n\n        @java.lang.Override\n        public void writeCustomTypePrefixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n            _typeSerializer.writeCustomTypePrefixForObject(_forObject, gen, typeId);\n        }\n\n        @java.lang.Override\n        public void writeCustomTypePrefixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n            _typeSerializer.writeCustomTypePrefixForArray(_forObject, gen, typeId);\n        }\n\n        @java.lang.Override\n        public void writeCustomTypeSuffixForScalar(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n            _typeSerializer.writeCustomTypeSuffixForScalar(_forObject, gen, typeId);\n        }\n\n        @java.lang.Override\n        public void writeCustomTypeSuffixForObject(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n            _typeSerializer.writeCustomTypeSuffixForObject(_forObject, gen, typeId);\n        }\n\n        @java.lang.Override\n        public void writeCustomTypeSuffixForArray(java.lang.Object value, com.fasterxml.jackson.core.JsonGenerator gen, java.lang.String typeId) throws java.io.IOException {\n            _typeSerializer.writeCustomTypeSuffixForArray(_forObject, gen, typeId);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        }
      ],
      "file_name": "JsonValueSerializer"
    }
  ],
  "id": "JacksonDatabind_60"
}