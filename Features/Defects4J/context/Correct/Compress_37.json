{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ch == '\\n') {\n    break;\n} else if (ch == ' ') {\n    final java.io.ByteArrayOutputStream coll = new java.io.ByteArrayOutputStream();\n    while ((ch = i.read()) != (-1)) {\n        read++;\n        if (ch == '=') {\n            final java.lang.String keyword = coll.toString(org.apache.commons.compress.utils.CharsetNames.UTF_8);\n            final int restLen = len - read;\n            if (restLen == 1) {\n                headers.remove(keyword);\n            } else {\n                final byte[] rest = new byte[restLen];\n                final int got = org.apache.commons.compress.utils.IOUtils.readFully(i, rest);\n                if (got != restLen) {\n                    throw new java.io.IOException((((\"Failed to read \" + \"Paxheader. Expected \") + restLen) + \" bytes, read \") + got);\n                }\n                final java.lang.String value = new java.lang.String(rest, 0, restLen - 1, org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                headers.put(keyword, value);\n            }\n            break;\n        }\n        coll.write(((byte) (ch)));\n    } \n    break;\n}",
            "src_parent": "{\n    read++;\n    if (ch == '\\n') {\n        break;\n    } else if (ch == ' ') {\n        final java.io.ByteArrayOutputStream coll = new java.io.ByteArrayOutputStream();\n        while ((ch = i.read()) != (-1)) {\n            read++;\n            if (ch == '=') {\n                final java.lang.String keyword = coll.toString(org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                final int restLen = len - read;\n                if (restLen == 1) {\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen];\n                    final int got = org.apache.commons.compress.utils.IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new java.io.IOException((((\"Failed to read \" + \"Paxheader. Expected \") + restLen) + \" bytes, read \") + got);\n                    }\n                    final java.lang.String value = new java.lang.String(rest, 0, restLen - 1, org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write(((byte) (ch)));\n        } \n        break;\n    }\n    len *= 10;\n    len += ch - '0';\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "OperatorAssignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (ch == ' ') {\n    final java.io.ByteArrayOutputStream coll = new java.io.ByteArrayOutputStream();\n    while ((ch = i.read()) != (-1)) {\n        read++;\n        if (ch == '=') {\n            final java.lang.String keyword = coll.toString(org.apache.commons.compress.utils.CharsetNames.UTF_8);\n            final int restLen = len - read;\n            if (restLen == 1) {\n                headers.remove(keyword);\n            } else {\n                final byte[] rest = new byte[restLen];\n                final int got = org.apache.commons.compress.utils.IOUtils.readFully(i, rest);\n                if (got != restLen) {\n                    throw new java.io.IOException((((\"Failed to read \" + \"Paxheader. Expected \") + restLen) + \" bytes, read \") + got);\n                }\n                final java.lang.String value = new java.lang.String(rest, 0, restLen - 1, org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                headers.put(keyword, value);\n            }\n            break;\n        }\n        coll.write(((byte) (ch)));\n    } \n    break;\n}",
            "dst_parent": "{\n    read++;\n    if (ch == ' ') {\n        final java.io.ByteArrayOutputStream coll = new java.io.ByteArrayOutputStream();\n        while ((ch = i.read()) != (-1)) {\n            read++;\n            if (ch == '=') {\n                final java.lang.String keyword = coll.toString(org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                final int restLen = len - read;\n                if (restLen == 1) {\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen];\n                    final int got = org.apache.commons.compress.utils.IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new java.io.IOException((((\"Failed to read \" + \"Paxheader. Expected \") + restLen) + \" bytes, read \") + got);\n                    }\n                    final java.lang.String value = new java.lang.String(rest, 0, restLen - 1, org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write(((byte) (ch)));\n        } \n        break;\n    }\n    len *= 10;\n    len += ch - '0';\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (ch == ' ') {\n    final java.io.ByteArrayOutputStream coll = new java.io.ByteArrayOutputStream();\n    while ((ch = i.read()) != (-1)) {\n        read++;\n        if (ch == '=') {\n            final java.lang.String keyword = coll.toString(org.apache.commons.compress.utils.CharsetNames.UTF_8);\n            final int restLen = len - read;\n            if (restLen == 1) {\n                headers.remove(keyword);\n            } else {\n                final byte[] rest = new byte[restLen];\n                final int got = org.apache.commons.compress.utils.IOUtils.readFully(i, rest);\n                if (got != restLen) {\n                    throw new java.io.IOException((((\"Failed to read \" + \"Paxheader. Expected \") + restLen) + \" bytes, read \") + got);\n                }\n                final java.lang.String value = new java.lang.String(rest, 0, restLen - 1, org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                headers.put(keyword, value);\n            }\n            break;\n        }\n        coll.write(((byte) (ch)));\n    } \n    break;\n}",
            "src_parent": "{\n    if (ch == ' ') {\n        final java.io.ByteArrayOutputStream coll = new java.io.ByteArrayOutputStream();\n        while ((ch = i.read()) != (-1)) {\n            read++;\n            if (ch == '=') {\n                final java.lang.String keyword = coll.toString(org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                final int restLen = len - read;\n                if (restLen == 1) {\n                    headers.remove(keyword);\n                } else {\n                    final byte[] rest = new byte[restLen];\n                    final int got = org.apache.commons.compress.utils.IOUtils.readFully(i, rest);\n                    if (got != restLen) {\n                        throw new java.io.IOException((((\"Failed to read \" + \"Paxheader. Expected \") + restLen) + \" bytes, read \") + got);\n                    }\n                    final java.lang.String value = new java.lang.String(rest, 0, restLen - 1, org.apache.commons.compress.utils.CharsetNames.UTF_8);\n                    headers.put(keyword, value);\n                }\n                break;\n            }\n            coll.write(((byte) (ch)));\n        } \n        break;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "TarArchiveInputStream"
    }
  ],
  "id": "Compress_37"
}