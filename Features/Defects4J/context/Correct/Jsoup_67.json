{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static final int MaxScopeSearchDepth = 100;",
            "src_parent": "public class HtmlTreeBuilder extends org.jsoup.parser.TreeBuilder {\n    private static final java.lang.String[] TagsSearchInScope = sort(new java.lang.String[]{ \"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\" });\n\n    private static final java.lang.String[] TagSearchList = sort(new java.lang.String[]{ \"ol\", \"ul\" });\n\n    private static final java.lang.String[] TagSearchButton = sort(new java.lang.String[]{ \"button\" });\n\n    private static final java.lang.String[] TagSearchTableScope = sort(new java.lang.String[]{ \"html\", \"table\" });\n\n    private static final java.lang.String[] TagSearchSelectScope = sort(new java.lang.String[]{ \"optgroup\", \"option\" });\n\n    private static final java.lang.String[] TagSearchEndTags = sort(new java.lang.String[]{ \"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\" });\n\n    private static final java.lang.String[] TagSearchSpecial = sort(new java.lang.String[]{ \"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\" });\n\n    public static final int MaxScopeSearchDepth = 100;\n\n    private org.jsoup.parser.HtmlTreeBuilderState state;\n\n    private org.jsoup.parser.HtmlTreeBuilderState originalState;\n\n    private boolean baseUriSetFromDoc;\n\n    private org.jsoup.nodes.Element headElement;\n\n    private org.jsoup.nodes.FormElement formElement;\n\n    private org.jsoup.nodes.Element contextElement;\n\n    private java.util.ArrayList<org.jsoup.nodes.Element> formattingElements;\n\n    private java.util.List<java.lang.String> pendingTableCharacters;\n\n    private Token.EndTag emptyEnd;\n\n    private boolean framesetOk;\n\n    private boolean fosterInserts;\n\n    private boolean fragmentParsing;\n\n    HtmlTreeBuilder() {\n    }\n\n    org.jsoup.parser.ParseSettings defaultSettings() {\n        return ParseSettings.htmlDefault;\n    }\n\n    @java.lang.Override\n    protected void initialiseParse(java.io.Reader input, java.lang.String baseUri, org.jsoup.parser.ParseErrorList errors, org.jsoup.parser.ParseSettings settings) {\n        super.initialiseParse(input, baseUri, errors, settings);\n        state = HtmlTreeBuilderState.Initial;\n        originalState = null;\n        baseUriSetFromDoc = false;\n        headElement = null;\n        formElement = null;\n        contextElement = null;\n        formattingElements = new java.util.ArrayList();\n        pendingTableCharacters = new java.util.ArrayList<>();\n        emptyEnd = new org.jsoup.parser.Token.EndTag();\n        framesetOk = true;\n        fosterInserts = false;\n        fragmentParsing = false;\n    }\n\n    java.util.List<org.jsoup.nodes.Node> parseFragment(java.lang.String inputFragment, org.jsoup.nodes.Element context, java.lang.String baseUri, org.jsoup.parser.ParseErrorList errors, org.jsoup.parser.ParseSettings settings) {\n        state = HtmlTreeBuilderState.Initial;\n        initialiseParse(new java.io.StringReader(inputFragment), baseUri, errors, settings);\n        contextElement = context;\n        fragmentParsing = true;\n        org.jsoup.nodes.Element root = null;\n        if (context != null) {\n            if (context.ownerDocument() != null) {\n                doc.quirksMode(context.ownerDocument().quirksMode());\n            }\n            java.lang.String contextTag = context.tagName();\n            if (org.jsoup.helper.StringUtil.in(contextTag, \"title\", \"textarea\")) {\n                tokeniser.transition(TokeniserState.Rcdata);\n            } else if (org.jsoup.helper.StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) {\n                tokeniser.transition(TokeniserState.Rawtext);\n            } else if (contextTag.equals(\"script\")) {\n                tokeniser.transition(TokeniserState.ScriptData);\n            } else if (contextTag.equals(\"noscript\")) {\n                tokeniser.transition(TokeniserState.Data);\n            } else if (contextTag.equals(\"plaintext\")) {\n                tokeniser.transition(TokeniserState.Data);\n            } else {\n                tokeniser.transition(TokeniserState.Data);\n            }\n            root = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(\"html\", settings), baseUri);\n            doc.appendChild(root);\n            stack.add(root);\n            resetInsertionMode();\n            org.jsoup.select.Elements contextChain = context.parents();\n            contextChain.add(0, context);\n            for (org.jsoup.nodes.Element parent : contextChain) {\n                if (parent instanceof org.jsoup.nodes.FormElement) {\n                    formElement = ((org.jsoup.nodes.FormElement) (parent));\n                    break;\n                }\n            }\n        }\n        runParser();\n        if (context != null) {\n            return root.childNodes();\n        } else {\n            return doc.childNodes();\n        }\n    }\n\n    @java.lang.Override\n    protected boolean process(org.jsoup.parser.Token token) {\n        currentToken = token;\n        return this.state.process(token, this);\n    }\n\n    boolean process(org.jsoup.parser.Token token, org.jsoup.parser.HtmlTreeBuilderState state) {\n        currentToken = token;\n        return state.process(token, this);\n    }\n\n    void transition(org.jsoup.parser.HtmlTreeBuilderState state) {\n        this.state = state;\n    }\n\n    org.jsoup.parser.HtmlTreeBuilderState state() {\n        return state;\n    }\n\n    void markInsertionMode() {\n        originalState = state;\n    }\n\n    org.jsoup.parser.HtmlTreeBuilderState originalState() {\n        return originalState;\n    }\n\n    void framesetOk(boolean framesetOk) {\n        this.framesetOk = framesetOk;\n    }\n\n    boolean framesetOk() {\n        return framesetOk;\n    }\n\n    org.jsoup.nodes.Document getDocument() {\n        return doc;\n    }\n\n    java.lang.String getBaseUri() {\n        return baseUri;\n    }\n\n    void maybeSetBaseUri(org.jsoup.nodes.Element base) {\n        if (baseUriSetFromDoc) {\n            return;\n        }\n        java.lang.String href = base.absUrl(\"href\");\n        if (href.length() != 0) {\n            baseUri = href;\n            baseUriSetFromDoc = true;\n            doc.setBaseUri(href);\n        }\n    }\n\n    boolean isFragmentParsing() {\n        return fragmentParsing;\n    }\n\n    void error(org.jsoup.parser.HtmlTreeBuilderState state) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));\n        }\n    }\n\n    org.jsoup.nodes.Element insert(org.jsoup.parser.Token.StartTag startTag) {\n        if (startTag.isSelfClosing()) {\n            org.jsoup.nodes.Element el = insertEmpty(startTag);\n            stack.add(el);\n            tokeniser.transition(TokeniserState.Data);\n            tokeniser.emit(emptyEnd.reset().name(el.tagName()));\n            return el;\n        }\n        org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));\n        insert(el);\n        return el;\n    }\n\n    org.jsoup.nodes.Element insertStartTag(java.lang.String startTagName) {\n        org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(org.jsoup.parser.Tag.valueOf(startTagName, settings), baseUri);\n        insert(el);\n        return el;\n    }\n\n    void insert(org.jsoup.nodes.Element el) {\n        insertNode(el);\n        stack.add(el);\n    }\n\n    org.jsoup.nodes.Element insertEmpty(org.jsoup.parser.Token.StartTag startTag) {\n        org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf(startTag.name(), settings);\n        org.jsoup.nodes.Element el = new org.jsoup.nodes.Element(tag, baseUri, startTag.attributes);\n        insertNode(el);\n        if (startTag.isSelfClosing()) {\n            if (tag.isKnownTag()) {\n                if (!tag.isEmpty()) {\n                    tokeniser.error(\"Tag cannot be self closing; not a void tag\");\n                }\n            } else {\n                tag.setSelfClosing();\n            }\n        }\n        return el;\n    }\n\n    org.jsoup.nodes.FormElement insertForm(org.jsoup.parser.Token.StartTag startTag, boolean onStack) {\n        org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf(startTag.name(), settings);\n        org.jsoup.nodes.FormElement el = new org.jsoup.nodes.FormElement(tag, baseUri, startTag.attributes);\n        setFormElement(el);\n        insertNode(el);\n        if (onStack) {\n            stack.add(el);\n        }\n        return el;\n    }\n\n    void insert(org.jsoup.parser.Token.Comment commentToken) {\n        org.jsoup.nodes.Comment comment = new org.jsoup.nodes.Comment(commentToken.getData());\n        insertNode(comment);\n    }\n\n    void insert(org.jsoup.parser.Token.Character characterToken) {\n        org.jsoup.nodes.Node node;\n        java.lang.String tagName = currentElement().tagName();\n        if (tagName.equals(\"script\") || tagName.equals(\"style\")) {\n            node = new org.jsoup.nodes.DataNode(characterToken.getData());\n        } else {\n            node = new org.jsoup.nodes.TextNode(characterToken.getData());\n        }\n        currentElement().appendChild(node);\n    }\n\n    private void insertNode(org.jsoup.nodes.Node node) {\n        if (stack.size() == 0) {\n            doc.appendChild(node);\n        } else if (isFosterInserts()) {\n            insertInFosterParent(node);\n        } else {\n            currentElement().appendChild(node);\n        }\n        if ((node instanceof org.jsoup.nodes.Element) && ((org.jsoup.nodes.Element) (node)).tag().isFormListed()) {\n            if (formElement != null) {\n                formElement.addElement(((org.jsoup.nodes.Element) (node)));\n            }\n        }\n    }\n\n    org.jsoup.nodes.Element pop() {\n        int size = stack.size();\n        return stack.remove(size - 1);\n    }\n\n    void push(org.jsoup.nodes.Element element) {\n        stack.add(element);\n    }\n\n    java.util.ArrayList<org.jsoup.nodes.Element> getStack() {\n        return stack;\n    }\n\n    boolean onStack(org.jsoup.nodes.Element el) {\n        return isElementInQueue(stack, el);\n    }\n\n    private boolean isElementInQueue(java.util.ArrayList<org.jsoup.nodes.Element> queue, org.jsoup.nodes.Element element) {\n        for (int pos = queue.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = queue.get(pos);\n            if (next == element) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    org.jsoup.nodes.Element getFromStack(java.lang.String elName) {\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                return next;\n            }\n        }\n        return null;\n    }\n\n    boolean removeFromStack(org.jsoup.nodes.Element el) {\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = stack.get(pos);\n            if (next == el) {\n                stack.remove(pos);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    void popStackToClose(java.lang.String elName) {\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = stack.get(pos);\n            stack.remove(pos);\n            if (next.nodeName().equals(elName)) {\n                break;\n            }\n        }\n    }\n\n    void popStackToClose(java.lang.String... elNames) {\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = stack.get(pos);\n            stack.remove(pos);\n            if (inSorted(next.nodeName(), elNames)) {\n                break;\n            }\n        }\n    }\n\n    void popStackToBefore(java.lang.String elName) {\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = stack.get(pos);\n            if (next.nodeName().equals(elName)) {\n                break;\n            } else {\n                stack.remove(pos);\n            }\n        }\n    }\n\n    void clearStackToTableContext() {\n        clearStackToContext(\"table\");\n    }\n\n    void clearStackToTableBodyContext() {\n        clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");\n    }\n\n    void clearStackToTableRowContext() {\n        clearStackToContext(\"tr\", \"template\");\n    }\n\n    private void clearStackToContext(java.lang.String... nodeNames) {\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = stack.get(pos);\n            if (org.jsoup.helper.StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) {\n                break;\n            } else {\n                stack.remove(pos);\n            }\n        }\n    }\n\n    org.jsoup.nodes.Element aboveOnStack(org.jsoup.nodes.Element el) {\n        assert onStack(el);\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = stack.get(pos);\n            if (next == el) {\n                return stack.get(pos - 1);\n            }\n        }\n        return null;\n    }\n\n    void insertOnStackAfter(org.jsoup.nodes.Element after, org.jsoup.nodes.Element in) {\n        int i = stack.lastIndexOf(after);\n        org.jsoup.helper.Validate.isTrue(i != (-1));\n        stack.add(i + 1, in);\n    }\n\n    void replaceOnStack(org.jsoup.nodes.Element out, org.jsoup.nodes.Element in) {\n        replaceInQueue(stack, out, in);\n    }\n\n    private void replaceInQueue(java.util.ArrayList<org.jsoup.nodes.Element> queue, org.jsoup.nodes.Element out, org.jsoup.nodes.Element in) {\n        int i = queue.lastIndexOf(out);\n        org.jsoup.helper.Validate.isTrue(i != (-1));\n        queue.set(i, in);\n    }\n\n    void resetInsertionMode() {\n        boolean last = false;\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element node = stack.get(pos);\n            if (pos == 0) {\n                last = true;\n                node = contextElement;\n            }\n            java.lang.String name = node.nodeName();\n            if (\"select\".equals(name)) {\n                transition(HtmlTreeBuilderState.InSelect);\n                break;\n            } else if (\"td\".equals(name) || (\"th\".equals(name) && (!last))) {\n                transition(HtmlTreeBuilderState.InCell);\n                break;\n            } else if (\"tr\".equals(name)) {\n                transition(HtmlTreeBuilderState.InRow);\n                break;\n            } else if ((\"tbody\".equals(name) || \"thead\".equals(name)) || \"tfoot\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTableBody);\n                break;\n            } else if (\"caption\".equals(name)) {\n                transition(HtmlTreeBuilderState.InCaption);\n                break;\n            } else if (\"colgroup\".equals(name)) {\n                transition(HtmlTreeBuilderState.InColumnGroup);\n                break;\n            } else if (\"table\".equals(name)) {\n                transition(HtmlTreeBuilderState.InTable);\n                break;\n            } else if (\"head\".equals(name)) {\n                transition(HtmlTreeBuilderState.InBody);\n                break;\n            } else if (\"body\".equals(name)) {\n                transition(HtmlTreeBuilderState.InBody);\n                break;\n            } else if (\"frameset\".equals(name)) {\n                transition(HtmlTreeBuilderState.InFrameset);\n                break;\n            } else if (\"html\".equals(name)) {\n                transition(HtmlTreeBuilderState.BeforeHead);\n                break;\n            } else if (last) {\n                transition(HtmlTreeBuilderState.InBody);\n                break;\n            }\n        }\n    }\n\n    private java.lang.String[] specificScopeTarget = new java.lang.String[]{ null };\n\n    private boolean inSpecificScope(java.lang.String targetName, java.lang.String[] baseTypes, java.lang.String[] extraTypes) {\n        specificScopeTarget[0] = targetName;\n        return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);\n    }\n\n    private boolean inSpecificScope(java.lang.String[] targetNames, java.lang.String[] baseTypes, java.lang.String[] extraTypes) {\n        int depth = stack.size() - 1;\n        if (depth > org.jsoup.parser.HtmlTreeBuilder.MaxScopeSearchDepth) {\n            depth = org.jsoup.parser.HtmlTreeBuilder.MaxScopeSearchDepth;\n        }\n        for (int pos = depth; pos >= 0; pos--) {\n            org.jsoup.nodes.Element el = stack.get(pos);\n            java.lang.String elName = el.nodeName();\n            if (inSorted(elName, targetNames)) {\n                return true;\n            }\n            if (inSorted(elName, baseTypes)) {\n                return false;\n            }\n            if ((extraTypes != null) && inSorted(elName, extraTypes)) {\n                return false;\n            }\n        }\n        org.jsoup.helper.Validate.fail(\"Should not be reachable\");\n        return false;\n    }\n\n    boolean inScope(java.lang.String[] targetNames) {\n        return inSpecificScope(targetNames, org.jsoup.parser.HtmlTreeBuilder.TagsSearchInScope, null);\n    }\n\n    boolean inScope(java.lang.String targetName) {\n        return inScope(targetName, null);\n    }\n\n    boolean inScope(java.lang.String targetName, java.lang.String[] extras) {\n        return inSpecificScope(targetName, org.jsoup.parser.HtmlTreeBuilder.TagsSearchInScope, extras);\n    }\n\n    boolean inListItemScope(java.lang.String targetName) {\n        return inScope(targetName, org.jsoup.parser.HtmlTreeBuilder.TagSearchList);\n    }\n\n    boolean inButtonScope(java.lang.String targetName) {\n        return inScope(targetName, org.jsoup.parser.HtmlTreeBuilder.TagSearchButton);\n    }\n\n    boolean inTableScope(java.lang.String targetName) {\n        return inSpecificScope(targetName, org.jsoup.parser.HtmlTreeBuilder.TagSearchTableScope, null);\n    }\n\n    boolean inSelectScope(java.lang.String targetName) {\n        for (int pos = stack.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element el = stack.get(pos);\n            java.lang.String elName = el.nodeName();\n            if (elName.equals(targetName)) {\n                return true;\n            }\n            if (!inSorted(elName, org.jsoup.parser.HtmlTreeBuilder.TagSearchSelectScope)) {\n                return false;\n            }\n        }\n        org.jsoup.helper.Validate.fail(\"Should not be reachable\");\n        return false;\n    }\n\n    void setHeadElement(org.jsoup.nodes.Element headElement) {\n        this.headElement = headElement;\n    }\n\n    org.jsoup.nodes.Element getHeadElement() {\n        return headElement;\n    }\n\n    boolean isFosterInserts() {\n        return fosterInserts;\n    }\n\n    void setFosterInserts(boolean fosterInserts) {\n        this.fosterInserts = fosterInserts;\n    }\n\n    org.jsoup.nodes.FormElement getFormElement() {\n        return formElement;\n    }\n\n    void setFormElement(org.jsoup.nodes.FormElement formElement) {\n        this.formElement = formElement;\n    }\n\n    void newPendingTableCharacters() {\n        pendingTableCharacters = new java.util.ArrayList<>();\n    }\n\n    java.util.List<java.lang.String> getPendingTableCharacters() {\n        return pendingTableCharacters;\n    }\n\n    void setPendingTableCharacters(java.util.List<java.lang.String> pendingTableCharacters) {\n        this.pendingTableCharacters = pendingTableCharacters;\n    }\n\n    void generateImpliedEndTags(java.lang.String excludeTag) {\n        while (((excludeTag != null) && (!currentElement().nodeName().equals(excludeTag))) && inSorted(currentElement().nodeName(), org.jsoup.parser.HtmlTreeBuilder.TagSearchEndTags)) {\n            pop();\n        } \n    }\n\n    void generateImpliedEndTags() {\n        generateImpliedEndTags(null);\n    }\n\n    boolean isSpecial(org.jsoup.nodes.Element el) {\n        java.lang.String name = el.nodeName();\n        return inSorted(name, org.jsoup.parser.HtmlTreeBuilder.TagSearchSpecial);\n    }\n\n    org.jsoup.nodes.Element lastFormattingElement() {\n        return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size() - 1) : null;\n    }\n\n    org.jsoup.nodes.Element removeLastFormattingElement() {\n        int size = formattingElements.size();\n        if (size > 0) {\n            return formattingElements.remove(size - 1);\n        } else {\n            return null;\n        }\n    }\n\n    void pushActiveFormattingElements(org.jsoup.nodes.Element in) {\n        int numSeen = 0;\n        for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element el = formattingElements.get(pos);\n            if (el == null) {\n                break;\n            }\n            if (isSameFormattingElement(in, el)) {\n                numSeen++;\n            }\n            if (numSeen == 3) {\n                formattingElements.remove(pos);\n                break;\n            }\n        }\n        formattingElements.add(in);\n    }\n\n    private boolean isSameFormattingElement(org.jsoup.nodes.Element a, org.jsoup.nodes.Element b) {\n        return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes());\n    }\n\n    void reconstructFormattingElements() {\n        org.jsoup.nodes.Element last = lastFormattingElement();\n        if ((last == null) || onStack(last)) {\n            return;\n        }\n        org.jsoup.nodes.Element entry = last;\n        int size = formattingElements.size();\n        int pos = size - 1;\n        boolean skip = false;\n        while (true) {\n            if (pos == 0) {\n                skip = true;\n                break;\n            }\n            entry = formattingElements.get(--pos);\n            if ((entry == null) || onStack(entry)) {\n                break;\n            }\n        } \n        while (true) {\n            if (!skip) {\n                entry = formattingElements.get(++pos);\n            }\n            org.jsoup.helper.Validate.notNull(entry);\n            skip = false;\n            org.jsoup.nodes.Element newEl = insertStartTag(entry.nodeName());\n            newEl.attributes().addAll(entry.attributes());\n            formattingElements.set(pos, newEl);\n            if (pos == (size - 1)) {\n                break;\n            }\n        } \n    }\n\n    void clearFormattingElementsToLastMarker() {\n        while (!formattingElements.isEmpty()) {\n            org.jsoup.nodes.Element el = removeLastFormattingElement();\n            if (el == null) {\n                break;\n            }\n        } \n    }\n\n    void removeFromActiveFormattingElements(org.jsoup.nodes.Element el) {\n        for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = formattingElements.get(pos);\n            if (next == el) {\n                formattingElements.remove(pos);\n                break;\n            }\n        }\n    }\n\n    boolean isInActiveFormattingElements(org.jsoup.nodes.Element el) {\n        return isElementInQueue(formattingElements, el);\n    }\n\n    org.jsoup.nodes.Element getActiveFormattingElement(java.lang.String nodeName) {\n        for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {\n            org.jsoup.nodes.Element next = formattingElements.get(pos);\n            if (next == null) {\n                break;\n            } else if (next.nodeName().equals(nodeName)) {\n                return next;\n            }\n        }\n        return null;\n    }\n\n    void replaceActiveFormattingElement(org.jsoup.nodes.Element out, org.jsoup.nodes.Element in) {\n        replaceInQueue(formattingElements, out, in);\n    }\n\n    void insertMarkerToFormattingElements() {\n        formattingElements.add(null);\n    }\n\n    void insertInFosterParent(org.jsoup.nodes.Node in) {\n        org.jsoup.nodes.Element fosterParent;\n        org.jsoup.nodes.Element lastTable = getFromStack(\"table\");\n        boolean isLastTableParent = false;\n        if (lastTable != null) {\n            if (lastTable.parent() != null) {\n                fosterParent = lastTable.parent();\n                isLastTableParent = true;\n            } else {\n                fosterParent = aboveOnStack(lastTable);\n            }\n        } else {\n            fosterParent = stack.get(0);\n        }\n        if (isLastTableParent) {\n            org.jsoup.helper.Validate.notNull(lastTable);\n            lastTable.before(in);\n        } else {\n            fosterParent.appendChild(in);\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return ((((((\"TreeBuilder{\" + \"currentToken=\") + currentToken) + \", state=\") + state) + \", currentElement=\") + currentElement()) + '}';\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (depth > org.jsoup.parser.HtmlTreeBuilder.MaxScopeSearchDepth) {\n    depth = org.jsoup.parser.HtmlTreeBuilder.MaxScopeSearchDepth;\n}",
            "src_parent": "{\n    int depth = stack.size() - 1;\n    if (depth > org.jsoup.parser.HtmlTreeBuilder.MaxScopeSearchDepth) {\n        depth = org.jsoup.parser.HtmlTreeBuilder.MaxScopeSearchDepth;\n    }\n    for (int pos = depth; pos >= 0; pos--) {\n        org.jsoup.nodes.Element el = stack.get(pos);\n        java.lang.String elName = el.nodeName();\n        if (inSorted(elName, targetNames)) {\n            return true;\n        }\n        if (inSorted(elName, baseTypes)) {\n            return false;\n        }\n        if ((extraTypes != null) && inSorted(elName, extraTypes)) {\n            return false;\n        }\n    }\n    org.jsoup.helper.Validate.fail(\"Should not be reachable\");\n    return false;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "HtmlTreeBuilder"
    }
  ],
  "id": "Jsoup_67"
}