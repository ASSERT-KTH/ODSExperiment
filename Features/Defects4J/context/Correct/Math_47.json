{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private transient final boolean isZero;",
            "src_parent": "public class Complex implements java.io.Serializable , org.apache.commons.math.FieldElement<org.apache.commons.math.complex.Complex> {\n    public static final org.apache.commons.math.complex.Complex I = new org.apache.commons.math.complex.Complex(0.0, 1.0);\n\n    public static final org.apache.commons.math.complex.Complex NaN = new org.apache.commons.math.complex.Complex(java.lang.Double.NaN, java.lang.Double.NaN);\n\n    public static final org.apache.commons.math.complex.Complex INF = new org.apache.commons.math.complex.Complex(java.lang.Double.POSITIVE_INFINITY, java.lang.Double.POSITIVE_INFINITY);\n\n    public static final org.apache.commons.math.complex.Complex ONE = new org.apache.commons.math.complex.Complex(1.0, 0.0);\n\n    public static final org.apache.commons.math.complex.Complex ZERO = new org.apache.commons.math.complex.Complex(0.0, 0.0);\n\n    private static final long serialVersionUID = -6195664516687396620L;\n\n    private final double imaginary;\n\n    private final double real;\n\n    private transient final boolean isNaN;\n\n    private transient final boolean isInfinite;\n\n    private transient final boolean isZero;\n\n    public Complex(double real) {\n        this(real, 0.0);\n    }\n\n    public Complex(double real, double imaginary) {\n        this.real = real;\n        this.imaginary = imaginary;\n        isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);\n        isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));\n        isZero = (real == 0) && (imaginary == 0);\n    }\n\n    public double abs() {\n        if (isNaN) {\n            return java.lang.Double.NaN;\n        }\n        if (isInfinite()) {\n            return java.lang.Double.POSITIVE_INFINITY;\n        }\n        if (org.apache.commons.math.util.FastMath.abs(real) < org.apache.commons.math.util.FastMath.abs(imaginary)) {\n            if (imaginary == 0.0) {\n                return org.apache.commons.math.util.FastMath.abs(real);\n            }\n            double q = real / imaginary;\n            return org.apache.commons.math.util.FastMath.abs(imaginary) * org.apache.commons.math.util.FastMath.sqrt(1 + (q * q));\n        } else {\n            if (real == 0.0) {\n                return org.apache.commons.math.util.FastMath.abs(imaginary);\n            }\n            double q = imaginary / real;\n            return org.apache.commons.math.util.FastMath.abs(real) * org.apache.commons.math.util.FastMath.sqrt(1 + (q * q));\n        }\n    }\n\n    public org.apache.commons.math.complex.Complex add(org.apache.commons.math.complex.Complex addend) throws org.apache.commons.math.exception.NullArgumentException {\n        org.apache.commons.math.util.MathUtils.checkNotNull(addend);\n        if (isNaN || addend.isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(real + addend.getReal(), imaginary + addend.getImaginary());\n    }\n\n    public org.apache.commons.math.complex.Complex add(double addend) {\n        if (isNaN || java.lang.Double.isNaN(addend)) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(real + addend, imaginary);\n    }\n\n    public org.apache.commons.math.complex.Complex conjugate() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(real, -imaginary);\n    }\n\n    public org.apache.commons.math.complex.Complex divide(org.apache.commons.math.complex.Complex divisor) throws org.apache.commons.math.exception.NullArgumentException {\n        org.apache.commons.math.util.MathUtils.checkNotNull(divisor);\n        if (isNaN || divisor.isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        if (divisor.isZero) {\n            return isZero ? org.apache.commons.math.complex.Complex.NaN : org.apache.commons.math.complex.Complex.INF;\n        }\n        if (divisor.isInfinite() && (!isInfinite())) {\n            return org.apache.commons.math.complex.Complex.ZERO;\n        }\n        final double c = divisor.getReal();\n        final double d = divisor.getImaginary();\n        if (org.apache.commons.math.util.FastMath.abs(c) < org.apache.commons.math.util.FastMath.abs(d)) {\n            double q = c / d;\n            double denominator = (c * q) + d;\n            return createComplex(((real * q) + imaginary) / denominator, ((imaginary * q) - real) / denominator);\n        } else {\n            double q = d / c;\n            double denominator = (d * q) + c;\n            return createComplex(((imaginary * q) + real) / denominator, (imaginary - (real * q)) / denominator);\n        }\n    }\n\n    public org.apache.commons.math.complex.Complex divide(double divisor) {\n        if (isNaN || java.lang.Double.isNaN(divisor)) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        if (divisor == 0.0) {\n            return isZero ? org.apache.commons.math.complex.Complex.NaN : org.apache.commons.math.complex.Complex.INF;\n        }\n        if (java.lang.Double.isInfinite(divisor)) {\n            return !isInfinite() ? org.apache.commons.math.complex.Complex.ZERO : org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(real / divisor, imaginary / divisor);\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (other instanceof org.apache.commons.math.complex.Complex) {\n            org.apache.commons.math.complex.Complex c = ((org.apache.commons.math.complex.Complex) (other));\n            if (c.isNaN) {\n                return isNaN;\n            } else {\n                return (real == c.real) && (imaginary == c.imaginary);\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        if (isNaN) {\n            return 7;\n        }\n        return 37 * ((17 * org.apache.commons.math.util.MathUtils.hash(imaginary)) + org.apache.commons.math.util.MathUtils.hash(real));\n    }\n\n    public double getImaginary() {\n        return imaginary;\n    }\n\n    public double getReal() {\n        return real;\n    }\n\n    public boolean isNaN() {\n        return isNaN;\n    }\n\n    public boolean isInfinite() {\n        return isInfinite;\n    }\n\n    public org.apache.commons.math.complex.Complex multiply(org.apache.commons.math.complex.Complex factor) throws org.apache.commons.math.exception.NullArgumentException {\n        org.apache.commons.math.util.MathUtils.checkNotNull(factor);\n        if (isNaN || factor.isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        if (((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor.real)) || java.lang.Double.isInfinite(factor.imaginary)) {\n            return org.apache.commons.math.complex.Complex.INF;\n        }\n        return createComplex((real * factor.real) - (imaginary * factor.imaginary), (real * factor.imaginary) + (imaginary * factor.real));\n    }\n\n    public org.apache.commons.math.complex.Complex multiply(double factor) {\n        if (isNaN || java.lang.Double.isNaN(factor)) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        if ((java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary)) || java.lang.Double.isInfinite(factor)) {\n            return org.apache.commons.math.complex.Complex.INF;\n        }\n        return createComplex(real * factor, imaginary * factor);\n    }\n\n    public org.apache.commons.math.complex.Complex negate() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(-real, -imaginary);\n    }\n\n    public org.apache.commons.math.complex.Complex subtract(org.apache.commons.math.complex.Complex subtrahend) throws org.apache.commons.math.exception.NullArgumentException {\n        org.apache.commons.math.util.MathUtils.checkNotNull(subtrahend);\n        if (isNaN || subtrahend.isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(real - subtrahend.getReal(), imaginary - subtrahend.getImaginary());\n    }\n\n    public org.apache.commons.math.complex.Complex subtract(double subtrahend) {\n        if (isNaN || java.lang.Double.isNaN(subtrahend)) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(real - subtrahend, imaginary);\n    }\n\n    public org.apache.commons.math.complex.Complex acos() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return this.add(this.sqrt1z().multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());\n    }\n\n    public org.apache.commons.math.complex.Complex asin() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return sqrt1z().add(this.multiply(org.apache.commons.math.complex.Complex.I)).log().multiply(org.apache.commons.math.complex.Complex.I.negate());\n    }\n\n    public org.apache.commons.math.complex.Complex atan() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return this.add(org.apache.commons.math.complex.Complex.I).divide(org.apache.commons.math.complex.Complex.I.subtract(this)).log().multiply(org.apache.commons.math.complex.Complex.I.divide(createComplex(2.0, 0.0)));\n    }\n\n    public org.apache.commons.math.complex.Complex cos() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(org.apache.commons.math.util.FastMath.cos(real) * org.apache.commons.math.util.MathUtils.cosh(imaginary), (-org.apache.commons.math.util.FastMath.sin(real)) * org.apache.commons.math.util.MathUtils.sinh(imaginary));\n    }\n\n    public org.apache.commons.math.complex.Complex cosh() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(org.apache.commons.math.util.MathUtils.cosh(real) * org.apache.commons.math.util.FastMath.cos(imaginary), org.apache.commons.math.util.MathUtils.sinh(real) * org.apache.commons.math.util.FastMath.sin(imaginary));\n    }\n\n    public org.apache.commons.math.complex.Complex exp() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        double expReal = org.apache.commons.math.util.FastMath.exp(real);\n        return createComplex(expReal * org.apache.commons.math.util.FastMath.cos(imaginary), expReal * org.apache.commons.math.util.FastMath.sin(imaginary));\n    }\n\n    public org.apache.commons.math.complex.Complex log() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(org.apache.commons.math.util.FastMath.log(abs()), org.apache.commons.math.util.FastMath.atan2(imaginary, real));\n    }\n\n    public org.apache.commons.math.complex.Complex pow(org.apache.commons.math.complex.Complex x) throws org.apache.commons.math.exception.NullArgumentException {\n        org.apache.commons.math.util.MathUtils.checkNotNull(x);\n        return this.log().multiply(x).exp();\n    }\n\n    public org.apache.commons.math.complex.Complex pow(double x) {\n        return this.log().multiply(x).exp();\n    }\n\n    public org.apache.commons.math.complex.Complex sin() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(org.apache.commons.math.util.FastMath.sin(real) * org.apache.commons.math.util.MathUtils.cosh(imaginary), org.apache.commons.math.util.FastMath.cos(real) * org.apache.commons.math.util.MathUtils.sinh(imaginary));\n    }\n\n    public org.apache.commons.math.complex.Complex sinh() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return createComplex(org.apache.commons.math.util.MathUtils.sinh(real) * org.apache.commons.math.util.FastMath.cos(imaginary), org.apache.commons.math.util.MathUtils.cosh(real) * org.apache.commons.math.util.FastMath.sin(imaginary));\n    }\n\n    public org.apache.commons.math.complex.Complex sqrt() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        if ((real == 0.0) && (imaginary == 0.0)) {\n            return createComplex(0.0, 0.0);\n        }\n        double t = org.apache.commons.math.util.FastMath.sqrt((org.apache.commons.math.util.FastMath.abs(real) + abs()) / 2.0);\n        if (real >= 0.0) {\n            return createComplex(t, imaginary / (2.0 * t));\n        } else {\n            return createComplex(org.apache.commons.math.util.FastMath.abs(imaginary) / (2.0 * t), org.apache.commons.math.util.MathUtils.indicator(imaginary) * t);\n        }\n    }\n\n    public org.apache.commons.math.complex.Complex sqrt1z() {\n        return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();\n    }\n\n    public org.apache.commons.math.complex.Complex tan() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = org.apache.commons.math.util.FastMath.cos(real2) + org.apache.commons.math.util.MathUtils.cosh(imaginary2);\n        return createComplex(org.apache.commons.math.util.FastMath.sin(real2) / d, org.apache.commons.math.util.MathUtils.sinh(imaginary2) / d);\n    }\n\n    public org.apache.commons.math.complex.Complex tanh() {\n        if (isNaN) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        double real2 = 2.0 * real;\n        double imaginary2 = 2.0 * imaginary;\n        double d = org.apache.commons.math.util.MathUtils.cosh(real2) + org.apache.commons.math.util.FastMath.cos(imaginary2);\n        return createComplex(org.apache.commons.math.util.MathUtils.sinh(real2) / d, org.apache.commons.math.util.FastMath.sin(imaginary2) / d);\n    }\n\n    public double getArgument() {\n        return org.apache.commons.math.util.FastMath.atan2(getImaginary(), getReal());\n    }\n\n    public java.util.List<org.apache.commons.math.complex.Complex> nthRoot(int n) {\n        if (n <= 0) {\n            throw new org.apache.commons.math.exception.NotPositiveException(org.apache.commons.math.exception.util.LocalizedFormats.CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N, n);\n        }\n        final java.util.List<org.apache.commons.math.complex.Complex> result = new java.util.ArrayList<org.apache.commons.math.complex.Complex>();\n        if (isNaN) {\n            result.add(org.apache.commons.math.complex.Complex.NaN);\n            return result;\n        }\n        if (isInfinite()) {\n            result.add(org.apache.commons.math.complex.Complex.INF);\n            return result;\n        }\n        final double nthRootOfAbs = org.apache.commons.math.util.FastMath.pow(abs(), 1.0 / n);\n        final double nthPhi = getArgument() / n;\n        final double slice = (2 * org.apache.commons.math.util.FastMath.PI) / n;\n        double innerPart = nthPhi;\n        for (int k = 0; k < n; k++) {\n            final double realPart = nthRootOfAbs * org.apache.commons.math.util.FastMath.cos(innerPart);\n            final double imaginaryPart = nthRootOfAbs * org.apache.commons.math.util.FastMath.sin(innerPart);\n            result.add(createComplex(realPart, imaginaryPart));\n            innerPart += slice;\n        }\n        return result;\n    }\n\n    protected org.apache.commons.math.complex.Complex createComplex(double realPart, double imaginaryPart) {\n        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);\n    }\n\n    public static org.apache.commons.math.complex.Complex valueOf(double realPart, double imaginaryPart) {\n        if (java.lang.Double.isNaN(realPart) || java.lang.Double.isNaN(imaginaryPart)) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return new org.apache.commons.math.complex.Complex(realPart, imaginaryPart);\n    }\n\n    public static org.apache.commons.math.complex.Complex valueOf(double realPart) {\n        if (java.lang.Double.isNaN(realPart)) {\n            return org.apache.commons.math.complex.Complex.NaN;\n        }\n        return new org.apache.commons.math.complex.Complex(realPart);\n    }\n\n    protected final java.lang.Object readResolve() {\n        return createComplex(real, imaginary);\n    }\n\n    public org.apache.commons.math.complex.ComplexField getField() {\n        return org.apache.commons.math.complex.ComplexField.getInstance();\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return (((\"(\" + real) + \", \") + imaginary) + \")\";\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Constructor",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "isZero = (real == 0) && (imaginary == 0)",
            "src_parent": "{\n    this.real = real;\n    this.imaginary = imaginary;\n    isNaN = java.lang.Double.isNaN(real) || java.lang.Double.isNaN(imaginary);\n    isInfinite = (!isNaN) && (java.lang.Double.isInfinite(real) || java.lang.Double.isInfinite(imaginary));\n    isZero = (real == 0) && (imaginary == 0);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "divisor.isZero",
            "src_parent": "if (divisor.isZero) {\n    return isZero ? org.apache.commons.math.complex.Complex.NaN : org.apache.commons.math.complex.Complex.INF;\n}",
            "src_parent_type": "If",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "isZero ? org.apache.commons.math.complex.Complex.NaN : org.apache.commons.math.complex.Complex.INF",
            "src_parent": "return isZero ? org.apache.commons.math.complex.Complex.NaN : org.apache.commons.math.complex.Complex.INF",
            "src_parent_type": "Return",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "isZero ? org.apache.commons.math.complex.Complex.NaN : org.apache.commons.math.complex.Complex.INF",
            "src_parent": "return isZero ? org.apache.commons.math.complex.Complex.NaN : org.apache.commons.math.complex.Complex.INF",
            "src_parent_type": "Return",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "(divisor.getReal() == 0.0) && (divisor.getImaginary() == 0.0)",
            "src_parent": "if ((divisor.getReal() == 0.0) && (divisor.getImaginary() == 0.0)) {\n    return org.apache.commons.math.complex.Complex.NaN;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.complex.Complex.NaN",
            "src_parent": "return org.apache.commons.math.complex.Complex.NaN",
            "src_parent_type": "Return",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "org.apache.commons.math.complex.Complex.NaN",
            "src_parent": "return org.apache.commons.math.complex.Complex.NaN",
            "src_parent_type": "Return",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "Complex"
    }
  ],
  "id": "Math_47"
}