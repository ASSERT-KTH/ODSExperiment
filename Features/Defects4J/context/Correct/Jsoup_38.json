{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (tb.getFromStack(\"svg\") == null) {\n        return tb.process(startTag.name(\"img\"));\n    } else {\n        tb.insert(startTag);\n    }\n}",
            "src_parent": "if (name.equals(\"image\")) {\n    if (tb.getFromStack(\"svg\") == null) {\n        return tb.process(startTag.name(\"img\"));\n    } else {\n        tb.insert(startTag);\n    }\n} else if (name.equals(\"isindex\")) {\n    tb.error(this);\n    if (tb.getFormElement() != null) {\n        return false;\n    }\n    tb.tokeniser.acknowledgeSelfClosingFlag();\n    tb.process(new org.jsoup.parser.Token.StartTag(\"form\"));\n    if (startTag.attributes.hasKey(\"action\")) {\n        org.jsoup.parser.Element form = tb.getFormElement();\n        form.attr(\"action\", startTag.attributes.get(\"action\"));\n    }\n    tb.process(new org.jsoup.parser.Token.StartTag(\"hr\"));\n    tb.process(new org.jsoup.parser.Token.StartTag(\"label\"));\n    java.lang.String prompt = (startTag.attributes.hasKey(\"prompt\")) ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \";\n    tb.process(new org.jsoup.parser.Token.Character(prompt));\n    org.jsoup.parser.Attributes inputAttribs = new org.jsoup.parser.Attributes();\n    for (org.jsoup.parser.Attribute attr : startTag.attributes) {\n        if (!org.jsoup.helper.StringUtil.in(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)) {\n            inputAttribs.put(attr);\n        }\n    }\n    inputAttribs.put(\"name\", \"isindex\");\n    tb.process(new org.jsoup.parser.Token.StartTag(\"input\", inputAttribs));\n    tb.process(new org.jsoup.parser.Token.EndTag(\"label\"));\n    tb.process(new org.jsoup.parser.Token.StartTag(\"hr\"));\n    tb.process(new org.jsoup.parser.Token.EndTag(\"form\"));\n} else if (name.equals(\"textarea\")) {\n    tb.insert(startTag);\n    tb.tokeniser.transition(TokeniserState.Rcdata);\n    tb.markInsertionMode();\n    tb.framesetOk(false);\n    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);\n} else if (name.equals(\"xmp\")) {\n    if (tb.inButtonScope(\"p\")) {\n        tb.process(new org.jsoup.parser.Token.EndTag(\"p\"));\n    }\n    tb.reconstructFormattingElements();\n    tb.framesetOk(false);\n    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);\n} else if (name.equals(\"iframe\")) {\n    tb.framesetOk(false);\n    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);\n} else if (name.equals(\"noembed\")) {\n    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);\n} else if (name.equals(\"select\")) {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n    tb.framesetOk(false);\n    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();\n    if ((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption)) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody)) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow)) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)) {\n        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);\n    } else {\n        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);\n    }\n} else if (org.jsoup.helper.StringUtil.in(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {\n    if (tb.currentElement().nodeName().equals(\"option\")) {\n        tb.process(new org.jsoup.parser.Token.EndTag(\"option\"));\n    }\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n} else if (org.jsoup.helper.StringUtil.in(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {\n    if (tb.inScope(\"ruby\")) {\n        tb.generateImpliedEndTags();\n        if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n            tb.error(this);\n            tb.popStackToBefore(\"ruby\");\n        }\n        tb.insert(startTag);\n    }\n} else if (name.equals(\"math\")) {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n    tb.tokeniser.acknowledgeSelfClosingFlag();\n} else if (name.equals(\"svg\")) {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n    tb.tokeniser.acknowledgeSelfClosingFlag();\n} else if (org.jsoup.helper.StringUtil.in(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {\n    tb.error(this);\n    return false;\n} else {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    return tb.process(startTag.name(\"img\"));\n}",
            "dst_parent": "if (name.equals(\"image\")) {\n    return tb.process(startTag.name(\"img\"));\n} else if (name.equals(\"isindex\")) {\n    tb.error(this);\n    if (tb.getFormElement() != null) {\n        return false;\n    }\n    tb.tokeniser.acknowledgeSelfClosingFlag();\n    tb.process(new org.jsoup.parser.Token.StartTag(\"form\"));\n    if (startTag.attributes.hasKey(\"action\")) {\n        org.jsoup.parser.Element form = tb.getFormElement();\n        form.attr(\"action\", startTag.attributes.get(\"action\"));\n    }\n    tb.process(new org.jsoup.parser.Token.StartTag(\"hr\"));\n    tb.process(new org.jsoup.parser.Token.StartTag(\"label\"));\n    java.lang.String prompt = (startTag.attributes.hasKey(\"prompt\")) ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \";\n    tb.process(new org.jsoup.parser.Token.Character(prompt));\n    org.jsoup.parser.Attributes inputAttribs = new org.jsoup.parser.Attributes();\n    for (org.jsoup.parser.Attribute attr : startTag.attributes) {\n        if (!org.jsoup.helper.StringUtil.in(attr.getKey(), org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs)) {\n            inputAttribs.put(attr);\n        }\n    }\n    inputAttribs.put(\"name\", \"isindex\");\n    tb.process(new org.jsoup.parser.Token.StartTag(\"input\", inputAttribs));\n    tb.process(new org.jsoup.parser.Token.EndTag(\"label\"));\n    tb.process(new org.jsoup.parser.Token.StartTag(\"hr\"));\n    tb.process(new org.jsoup.parser.Token.EndTag(\"form\"));\n} else if (name.equals(\"textarea\")) {\n    tb.insert(startTag);\n    tb.tokeniser.transition(TokeniserState.Rcdata);\n    tb.markInsertionMode();\n    tb.framesetOk(false);\n    tb.transition(org.jsoup.parser.HtmlTreeBuilderState.Text);\n} else if (name.equals(\"xmp\")) {\n    if (tb.inButtonScope(\"p\")) {\n        tb.process(new org.jsoup.parser.Token.EndTag(\"p\"));\n    }\n    tb.reconstructFormattingElements();\n    tb.framesetOk(false);\n    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);\n} else if (name.equals(\"iframe\")) {\n    tb.framesetOk(false);\n    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);\n} else if (name.equals(\"noembed\")) {\n    org.jsoup.parser.HtmlTreeBuilderState.handleRawtext(startTag, tb);\n} else if (name.equals(\"select\")) {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n    tb.framesetOk(false);\n    org.jsoup.parser.HtmlTreeBuilderState state = tb.state();\n    if ((((state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTable) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCaption)) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InTableBody)) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InRow)) || state.equals(org.jsoup.parser.HtmlTreeBuilderState.InCell)) {\n        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelectInTable);\n    } else {\n        tb.transition(org.jsoup.parser.HtmlTreeBuilderState.InSelect);\n    }\n} else if (org.jsoup.helper.StringUtil.in(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartOptions)) {\n    if (tb.currentElement().nodeName().equals(\"option\")) {\n        tb.process(new org.jsoup.parser.Token.EndTag(\"option\"));\n    }\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n} else if (org.jsoup.helper.StringUtil.in(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartRuby)) {\n    if (tb.inScope(\"ruby\")) {\n        tb.generateImpliedEndTags();\n        if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n            tb.error(this);\n            tb.popStackToBefore(\"ruby\");\n        }\n        tb.insert(startTag);\n    }\n} else if (name.equals(\"math\")) {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n    tb.tokeniser.acknowledgeSelfClosingFlag();\n} else if (name.equals(\"svg\")) {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n    tb.tokeniser.acknowledgeSelfClosingFlag();\n} else if (org.jsoup.helper.StringUtil.in(name, org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartDrop)) {\n    tb.error(this);\n    return false;\n} else {\n    tb.reconstructFormattingElements();\n    tb.insert(startTag);\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    return tb.process(startTag.name(\"img\"));\n}",
            "src_parent": "if (tb.getFromStack(\"svg\") == null) {\n    return tb.process(startTag.name(\"img\"));\n} else {\n    tb.insert(startTag);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "HtmlTreeBuilderState"
    }
  ],
  "id": "Jsoup_38"
}