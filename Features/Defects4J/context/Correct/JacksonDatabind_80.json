{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (property != null) {\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolve(ac, nt, config, ai, collected);\n        }\n    }\n}",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    java.lang.Class<?> rawBase = (baseType == null) ? property.getRawType() : baseType.getRawClass();\n    java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.jsontype.NamedType> collected = new java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.jsontype.NamedType>();\n    if (_registeredSubtypes != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType subtype : _registeredSubtypes) {\n            if (rawBase.isAssignableFrom(subtype.getType())) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedClass curr = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\n                _collectAndResolve(curr, subtype, config, ai, collected);\n            }\n        }\n    }\n    if (property != null) {\n        java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n        if (st != null) {\n            for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n                _collectAndResolve(ac, nt, config, ai, collected);\n            }\n        }\n    }\n    com.fasterxml.jackson.databind.jsontype.NamedType rootType = new com.fasterxml.jackson.databind.jsontype.NamedType(rawBase, null);\n    com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n    _collectAndResolve(ac, rootType, config, ai, collected);\n    return new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(collected.values());\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (property != null) {\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n        }\n    }\n}",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    java.lang.Class<?> rawBase = baseType.getRawClass();\n    java.util.Set<java.lang.Class<?>> typesHandled = new java.util.HashSet<java.lang.Class<?>>();\n    java.util.Map<java.lang.String, com.fasterxml.jackson.databind.jsontype.NamedType> byName = new java.util.LinkedHashMap<java.lang.String, com.fasterxml.jackson.databind.jsontype.NamedType>();\n    com.fasterxml.jackson.databind.jsontype.NamedType rootType = new com.fasterxml.jackson.databind.jsontype.NamedType(rawBase, null);\n    com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n    _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\n    if (property != null) {\n        java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n        if (st != null) {\n            for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n                ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n                _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n            }\n        }\n    }\n    if (_registeredSubtypes != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType subtype : _registeredSubtypes) {\n            if (rawBase.isAssignableFrom(subtype.getType())) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedClass curr = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\n                _collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);\n            }\n        }\n    }\n    return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property)",
            "dst_parent": "{\n    final com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    java.lang.Class<?> rawBase = (baseType == null) ? property.getRawType() : baseType.getRawClass();\n    java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.jsontype.NamedType> collected = new java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.jsontype.NamedType>();\n    if (_registeredSubtypes != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType subtype : _registeredSubtypes) {\n            if (rawBase.isAssignableFrom(subtype.getType())) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedClass curr = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\n                _collectAndResolve(curr, subtype, config, ai, collected);\n            }\n        }\n    }\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolve(ac, nt, config, ai, collected);\n        }\n    }\n    com.fasterxml.jackson.databind.jsontype.NamedType rootType = new com.fasterxml.jackson.databind.jsontype.NamedType(rawBase, null);\n    com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n    _collectAndResolve(ac, rootType, config, ai, collected);\n    return new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(collected.values());\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property)",
            "src_parent": "{\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolve(ac, nt, config, ai, collected);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (st != null) {\n    for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n        com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n        _collectAndResolve(ac, nt, config, ai, collected);\n    }\n}",
            "dst_parent": "{\n    final com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    java.lang.Class<?> rawBase = (baseType == null) ? property.getRawType() : baseType.getRawClass();\n    java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.jsontype.NamedType> collected = new java.util.HashMap<com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.jsontype.NamedType>();\n    if (_registeredSubtypes != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType subtype : _registeredSubtypes) {\n            if (rawBase.isAssignableFrom(subtype.getType())) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedClass curr = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\n                _collectAndResolve(curr, subtype, config, ai, collected);\n            }\n        }\n    }\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolve(ac, nt, config, ai, collected);\n        }\n    }\n    com.fasterxml.jackson.databind.jsontype.NamedType rootType = new com.fasterxml.jackson.databind.jsontype.NamedType(rawBase, null);\n    com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n    _collectAndResolve(ac, rootType, config, ai, collected);\n    return new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(collected.values());\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (st != null) {\n    for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n        com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n        _collectAndResolve(ac, nt, config, ai, collected);\n    }\n}",
            "src_parent": "{\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolve(ac, nt, config, ai, collected);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property)",
            "dst_parent": "{\n    final com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    java.lang.Class<?> rawBase = baseType.getRawClass();\n    java.util.Set<java.lang.Class<?>> typesHandled = new java.util.HashSet<java.lang.Class<?>>();\n    java.util.Map<java.lang.String, com.fasterxml.jackson.databind.jsontype.NamedType> byName = new java.util.LinkedHashMap<java.lang.String, com.fasterxml.jackson.databind.jsontype.NamedType>();\n    com.fasterxml.jackson.databind.jsontype.NamedType rootType = new com.fasterxml.jackson.databind.jsontype.NamedType(rawBase, null);\n    com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n    _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n        }\n    }\n    if (_registeredSubtypes != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType subtype : _registeredSubtypes) {\n            if (rawBase.isAssignableFrom(subtype.getType())) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedClass curr = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\n                _collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);\n            }\n        }\n    }\n    return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property)",
            "src_parent": "{\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (st != null) {\n    for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n        ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n        _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n    }\n}",
            "dst_parent": "{\n    final com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    java.lang.Class<?> rawBase = baseType.getRawClass();\n    java.util.Set<java.lang.Class<?>> typesHandled = new java.util.HashSet<java.lang.Class<?>>();\n    java.util.Map<java.lang.String, com.fasterxml.jackson.databind.jsontype.NamedType> byName = new java.util.LinkedHashMap<java.lang.String, com.fasterxml.jackson.databind.jsontype.NamedType>();\n    com.fasterxml.jackson.databind.jsontype.NamedType rootType = new com.fasterxml.jackson.databind.jsontype.NamedType(rawBase, null);\n    com.fasterxml.jackson.databind.introspect.AnnotatedClass ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n    _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n        }\n    }\n    if (_registeredSubtypes != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType subtype : _registeredSubtypes) {\n            if (rawBase.isAssignableFrom(subtype.getType())) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedClass curr = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, subtype.getType());\n                _collectAndResolveByTypeId(curr, subtype, config, typesHandled, byName);\n            }\n        }\n    }\n    return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (st != null) {\n    for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n        ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n        _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n    }\n}",
            "src_parent": "{\n    java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType> st = ai.findSubtypes(property);\n    if (st != null) {\n        for (com.fasterxml.jackson.databind.jsontype.NamedType nt : st) {\n            ac = com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n            _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "StdSubtypeResolver"
    }
  ],
  "id": "JacksonDatabind_80"
}