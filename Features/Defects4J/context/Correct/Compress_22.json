{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return setupBlock()",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n    return setupBlock();",
            "src_parent_type": "Case",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return setupRandPartB()",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n    return setupRandPartB();",
            "src_parent_type": "Case",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return setupRandPartC()",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n    return setupRandPartC();",
            "src_parent_type": "Case",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "return setupNoRandPartB()",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n    return setupNoRandPartB();",
            "src_parent_type": "Case",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent": "{\n    switch (currentState) {\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n            return -1;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n            return setupBlock();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n            return setupRandPartB();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n            return setupRandPartC();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n            return setupNoRandPartB();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n            return setupNoRandPartC();\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Switch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private int currentChar = -1;",
            "src_parent": "public class BZip2CompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.compressors.bzip2.BZip2Constants {\n    private int last;\n\n    private int origPtr;\n\n    private int blockSize100k;\n\n    private boolean blockRandomised;\n\n    private int bsBuff;\n\n    private int bsLive;\n\n    private final org.apache.commons.compress.compressors.bzip2.CRC crc = new org.apache.commons.compress.compressors.bzip2.CRC();\n\n    private int nInUse;\n\n    private java.io.InputStream in;\n\n    private final boolean decompressConcatenated;\n\n    private int currentChar = -1;\n\n    private static final int EOF = 0;\n\n    private static final int START_BLOCK_STATE = 1;\n\n    private static final int RAND_PART_A_STATE = 2;\n\n    private static final int RAND_PART_B_STATE = 3;\n\n    private static final int RAND_PART_C_STATE = 4;\n\n    private static final int NO_RAND_PART_A_STATE = 5;\n\n    private static final int NO_RAND_PART_B_STATE = 6;\n\n    private static final int NO_RAND_PART_C_STATE = 7;\n\n    private int currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE;\n\n    private int storedBlockCRC;\n\n    private int storedCombinedCRC;\n\n    private int computedBlockCRC;\n\n    private int computedCombinedCRC;\n\n    private int su_count;\n\n    private int su_ch2;\n\n    private int su_chPrev;\n\n    private int su_i2;\n\n    private int su_j2;\n\n    private int su_rNToGo;\n\n    private int su_rTPos;\n\n    private int su_tPos;\n\n    private char su_z;\n\n    private org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data data;\n\n    public BZip2CompressorInputStream(final java.io.InputStream in) throws java.io.IOException {\n        this(in, false);\n    }\n\n    public BZip2CompressorInputStream(final java.io.InputStream in, final boolean decompressConcatenated) throws java.io.IOException {\n        this.in = in;\n        this.decompressConcatenated = decompressConcatenated;\n        init(true);\n        initBlock();\n        setupBlock();\n    }\n\n    @java.lang.Override\n    public int read() throws java.io.IOException {\n        if (this.in != null) {\n            int r = read0();\n            count(r < 0 ? -1 : 1);\n            return r;\n        } else {\n            throw new java.io.IOException(\"stream closed\");\n        }\n    }\n\n    @java.lang.Override\n    public int read(final byte[] dest, final int offs, final int len) throws java.io.IOException {\n        if (offs < 0) {\n            throw new java.lang.IndexOutOfBoundsException((\"offs(\" + offs) + \") < 0.\");\n        }\n        if (len < 0) {\n            throw new java.lang.IndexOutOfBoundsException((\"len(\" + len) + \") < 0.\");\n        }\n        if ((offs + len) > dest.length) {\n            throw new java.lang.IndexOutOfBoundsException((((((\"offs(\" + offs) + \") + len(\") + len) + \") > dest.length(\") + dest.length) + \").\");\n        }\n        if (this.in == null) {\n            throw new java.io.IOException(\"stream closed\");\n        }\n        final int hi = offs + len;\n        int destOffs = offs;\n        int b;\n        while ((destOffs < hi) && ((b = read0()) >= 0)) {\n            dest[destOffs++] = ((byte) (b));\n            count(1);\n        } \n        int c = (destOffs == offs) ? -1 : destOffs - offs;\n        return c;\n    }\n\n    private void makeMaps() {\n        final boolean[] inUse = this.data.inUse;\n        final byte[] seqToUnseq = this.data.seqToUnseq;\n        int nInUseShadow = 0;\n        for (int i = 0; i < 256; i++) {\n            if (inUse[i]) {\n                seqToUnseq[nInUseShadow++] = ((byte) (i));\n            }\n        }\n        this.nInUse = nInUseShadow;\n    }\n\n    private int read0() throws java.io.IOException {\n        final int retChar = this.currentChar;\n        switch (currentState) {\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n                return -1;\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n                throw new java.lang.IllegalStateException();\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n                throw new java.lang.IllegalStateException();\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n                setupRandPartB();\n                break;\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n                setupRandPartC();\n                break;\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n                throw new java.lang.IllegalStateException();\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n                setupNoRandPartB();\n                break;\n            case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n                setupNoRandPartC();\n                break;\n            default :\n                throw new java.lang.IllegalStateException();\n        }\n        return retChar;\n    }\n\n    private boolean init(boolean isFirstStream) throws java.io.IOException {\n        if (null == in) {\n            throw new java.io.IOException(\"No InputStream\");\n        }\n        int magic0 = this.in.read();\n        if ((magic0 == (-1)) && (!isFirstStream)) {\n            return false;\n        }\n        int magic1 = this.in.read();\n        int magic2 = this.in.read();\n        if (((magic0 != 'B') || (magic1 != 'Z')) || (magic2 != 'h')) {\n            throw new java.io.IOException(isFirstStream ? \"Stream is not in the BZip2 format\" : \"Garbage after a valid BZip2 stream\");\n        }\n        int blockSize = this.in.read();\n        if ((blockSize < '1') || (blockSize > '9')) {\n            throw new java.io.IOException(\"BZip2 block size is invalid\");\n        }\n        this.blockSize100k = blockSize - '0';\n        this.bsLive = 0;\n        this.computedCombinedCRC = 0;\n        return true;\n    }\n\n    private void initBlock() throws java.io.IOException {\n        char magic0;\n        char magic1;\n        char magic2;\n        char magic3;\n        char magic4;\n        char magic5;\n        while (true) {\n            magic0 = bsGetUByte();\n            magic1 = bsGetUByte();\n            magic2 = bsGetUByte();\n            magic3 = bsGetUByte();\n            magic4 = bsGetUByte();\n            magic5 = bsGetUByte();\n            if ((((((magic0 != 0x17) || (magic1 != 0x72)) || (magic2 != 0x45)) || (magic3 != 0x38)) || (magic4 != 0x50)) || (magic5 != 0x90)) {\n                break;\n            }\n            if (complete()) {\n                return;\n            }\n        } \n        if ((((((magic0 != 0x31) || (magic1 != 0x41)) || (magic2 != 0x59)) || (magic3 != 0x26)) || (magic4 != 0x53)) || (magic5 != 0x59)) {\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF;\n            throw new java.io.IOException(\"bad block header\");\n        } else {\n            this.storedBlockCRC = bsGetInt();\n            this.blockRandomised = bsR(1) == 1;\n            if (this.data == null) {\n                this.data = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data(this.blockSize100k);\n            }\n            getAndMoveToFrontDecode();\n            this.crc.initialiseCRC();\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE;\n        }\n    }\n\n    private void endBlock() throws java.io.IOException {\n        this.computedBlockCRC = this.crc.getFinalCRC();\n        if (this.storedBlockCRC != this.computedBlockCRC) {\n            this.computedCombinedCRC = (this.storedCombinedCRC << 1) | (this.storedCombinedCRC >>> 31);\n            this.computedCombinedCRC ^= this.storedBlockCRC;\n            throw new java.io.IOException(\"BZip2 CRC error\");\n        }\n        this.computedCombinedCRC = (this.computedCombinedCRC << 1) | (this.computedCombinedCRC >>> 31);\n        this.computedCombinedCRC ^= this.computedBlockCRC;\n    }\n\n    private boolean complete() throws java.io.IOException {\n        this.storedCombinedCRC = bsGetInt();\n        this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF;\n        this.data = null;\n        if (this.storedCombinedCRC != this.computedCombinedCRC) {\n            throw new java.io.IOException(\"BZip2 CRC error\");\n        }\n        return (!decompressConcatenated) || (!init(false));\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        java.io.InputStream inShadow = this.in;\n        if (inShadow != null) {\n            try {\n                if (inShadow != java.lang.System.in) {\n                    inShadow.close();\n                }\n            } finally {\n                this.data = null;\n                this.in = null;\n            }\n        }\n    }\n\n    private int bsR(final int n) throws java.io.IOException {\n        int bsLiveShadow = this.bsLive;\n        int bsBuffShadow = this.bsBuff;\n        if (bsLiveShadow < n) {\n            final java.io.InputStream inShadow = this.in;\n            do {\n                int thech = inShadow.read();\n                if (thech < 0) {\n                    throw new java.io.IOException(\"unexpected end of stream\");\n                }\n                bsBuffShadow = (bsBuffShadow << 8) | thech;\n                bsLiveShadow += 8;\n            } while (bsLiveShadow < n );\n            this.bsBuff = bsBuffShadow;\n        }\n        this.bsLive = bsLiveShadow - n;\n        return (bsBuffShadow >> (bsLiveShadow - n)) & ((1 << n) - 1);\n    }\n\n    private boolean bsGetBit() throws java.io.IOException {\n        int bsLiveShadow = this.bsLive;\n        int bsBuffShadow = this.bsBuff;\n        if (bsLiveShadow < 1) {\n            int thech = this.in.read();\n            if (thech < 0) {\n                throw new java.io.IOException(\"unexpected end of stream\");\n            }\n            bsBuffShadow = (bsBuffShadow << 8) | thech;\n            bsLiveShadow += 8;\n            this.bsBuff = bsBuffShadow;\n        }\n        this.bsLive = bsLiveShadow - 1;\n        return ((bsBuffShadow >> (bsLiveShadow - 1)) & 1) != 0;\n    }\n\n    private char bsGetUByte() throws java.io.IOException {\n        return ((char) (bsR(8)));\n    }\n\n    private int bsGetInt() throws java.io.IOException {\n        return (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);\n    }\n\n    private static void hbCreateDecodeTables(final int[] limit, final int[] base, final int[] perm, final char[] length, final int minLen, final int maxLen, final int alphaSize) {\n        for (int i = minLen, pp = 0; i <= maxLen; i++) {\n            for (int j = 0; j < alphaSize; j++) {\n                if (length[j] == i) {\n                    perm[pp++] = j;\n                }\n            }\n        }\n        for (int i = org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_CODE_LEN; (--i) > 0;) {\n            base[i] = 0;\n            limit[i] = 0;\n        }\n        for (int i = 0; i < alphaSize; i++) {\n            base[length[i] + 1]++;\n        }\n        for (int i = 1, b = base[0]; i < org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_CODE_LEN; i++) {\n            b += base[i];\n            base[i] = b;\n        }\n        for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++) {\n            final int nb = base[i + 1];\n            vec += nb - b;\n            b = nb;\n            limit[i] = vec - 1;\n            vec <<= 1;\n        }\n        for (int i = minLen + 1; i <= maxLen; i++) {\n            base[i] = ((limit[i - 1] + 1) << 1) - base[i];\n        }\n    }\n\n    private void recvDecodingTables() throws java.io.IOException {\n        final org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data dataShadow = this.data;\n        final boolean[] inUse = dataShadow.inUse;\n        final byte[] pos = dataShadow.recvDecodingTables_pos;\n        final byte[] selector = dataShadow.selector;\n        final byte[] selectorMtf = dataShadow.selectorMtf;\n        int inUse16 = 0;\n        for (int i = 0; i < 16; i++) {\n            if (bsGetBit()) {\n                inUse16 |= 1 << i;\n            }\n        }\n        for (int i = 256; (--i) >= 0;) {\n            inUse[i] = false;\n        }\n        for (int i = 0; i < 16; i++) {\n            if ((inUse16 & (1 << i)) != 0) {\n                final int i16 = i << 4;\n                for (int j = 0; j < 16; j++) {\n                    if (bsGetBit()) {\n                        inUse[i16 + j] = true;\n                    }\n                }\n            }\n        }\n        makeMaps();\n        final int alphaSize = this.nInUse + 2;\n        final int nGroups = bsR(3);\n        final int nSelectors = bsR(15);\n        for (int i = 0; i < nSelectors; i++) {\n            int j = 0;\n            while (bsGetBit()) {\n                j++;\n            } \n            selectorMtf[i] = ((byte) (j));\n        }\n        for (int v = nGroups; (--v) >= 0;) {\n            pos[v] = ((byte) (v));\n        }\n        for (int i = 0; i < nSelectors; i++) {\n            int v = selectorMtf[i] & 0xff;\n            final byte tmp = pos[v];\n            while (v > 0) {\n                pos[v] = pos[v - 1];\n                v--;\n            } \n            pos[0] = tmp;\n            selector[i] = tmp;\n        }\n        final char[][] len = dataShadow.temp_charArray2d;\n        for (int t = 0; t < nGroups; t++) {\n            int curr = bsR(5);\n            final char[] len_t = len[t];\n            for (int i = 0; i < alphaSize; i++) {\n                while (bsGetBit()) {\n                    curr += (bsGetBit()) ? -1 : 1;\n                } \n                len_t[i] = ((char) (curr));\n            }\n        }\n        createHuffmanDecodingTables(alphaSize, nGroups);\n    }\n\n    private void createHuffmanDecodingTables(final int alphaSize, final int nGroups) {\n        final org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data dataShadow = this.data;\n        final char[][] len = dataShadow.temp_charArray2d;\n        final int[] minLens = dataShadow.minLens;\n        final int[][] limit = dataShadow.limit;\n        final int[][] base = dataShadow.base;\n        final int[][] perm = dataShadow.perm;\n        for (int t = 0; t < nGroups; t++) {\n            int minLen = 32;\n            int maxLen = 0;\n            final char[] len_t = len[t];\n            for (int i = alphaSize; (--i) >= 0;) {\n                final char lent = len_t[i];\n                if (lent > maxLen) {\n                    maxLen = lent;\n                }\n                if (lent < minLen) {\n                    minLen = lent;\n                }\n            }\n            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen, maxLen, alphaSize);\n            minLens[t] = minLen;\n        }\n    }\n\n    private void getAndMoveToFrontDecode() throws java.io.IOException {\n        this.origPtr = bsR(24);\n        recvDecodingTables();\n        final java.io.InputStream inShadow = this.in;\n        final org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data dataShadow = this.data;\n        final byte[] ll8 = dataShadow.ll8;\n        final int[] unzftab = dataShadow.unzftab;\n        final byte[] selector = dataShadow.selector;\n        final byte[] seqToUnseq = dataShadow.seqToUnseq;\n        final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;\n        final int[] minLens = dataShadow.minLens;\n        final int[][] limit = dataShadow.limit;\n        final int[][] base = dataShadow.base;\n        final int[][] perm = dataShadow.perm;\n        final int limitLast = this.blockSize100k * 100000;\n        for (int i = 256; (--i) >= 0;) {\n            yy[i] = ((char) (i));\n            unzftab[i] = 0;\n        }\n        int groupNo = 0;\n        int groupPos = org.apache.commons.compress.compressors.bzip2.BZip2Constants.G_SIZE - 1;\n        final int eob = this.nInUse + 1;\n        int nextSym = getAndMoveToFrontDecode0(0);\n        int bsBuffShadow = this.bsBuff;\n        int bsLiveShadow = this.bsLive;\n        int lastShadow = -1;\n        int zt = selector[groupNo] & 0xff;\n        int[] base_zt = base[zt];\n        int[] limit_zt = limit[zt];\n        int[] perm_zt = perm[zt];\n        int minLens_zt = minLens[zt];\n        while (nextSym != eob) {\n            if ((nextSym == org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNA) || (nextSym == org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNB)) {\n                int s = -1;\n                for (int n = 1; true; n <<= 1) {\n                    if (nextSym == org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNA) {\n                        s += n;\n                    } else if (nextSym == org.apache.commons.compress.compressors.bzip2.BZip2Constants.RUNB) {\n                        s += n << 1;\n                    } else {\n                        break;\n                    }\n                    if (groupPos == 0) {\n                        groupPos = org.apache.commons.compress.compressors.bzip2.BZip2Constants.G_SIZE - 1;\n                        zt = selector[++groupNo] & 0xff;\n                        base_zt = base[zt];\n                        limit_zt = limit[zt];\n                        perm_zt = perm[zt];\n                        minLens_zt = minLens[zt];\n                    } else {\n                        groupPos--;\n                    }\n                    int zn = minLens_zt;\n                    while (bsLiveShadow < zn) {\n                        final int thech = inShadow.read();\n                        if (thech >= 0) {\n                            bsBuffShadow = (bsBuffShadow << 8) | thech;\n                            bsLiveShadow += 8;\n                            continue;\n                        } else {\n                            throw new java.io.IOException(\"unexpected end of stream\");\n                        }\n                    } \n                    int zvec = (bsBuffShadow >> (bsLiveShadow - zn)) & ((1 << zn) - 1);\n                    bsLiveShadow -= zn;\n                    while (zvec > limit_zt[zn]) {\n                        zn++;\n                        while (bsLiveShadow < 1) {\n                            final int thech = inShadow.read();\n                            if (thech >= 0) {\n                                bsBuffShadow = (bsBuffShadow << 8) | thech;\n                                bsLiveShadow += 8;\n                                continue;\n                            } else {\n                                throw new java.io.IOException(\"unexpected end of stream\");\n                            }\n                        } \n                        bsLiveShadow--;\n                        zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);\n                    } \n                    nextSym = perm_zt[zvec - base_zt[zn]];\n                }\n                final byte ch = seqToUnseq[yy[0]];\n                unzftab[ch & 0xff] += s + 1;\n                while ((s--) >= 0) {\n                    ll8[++lastShadow] = ch;\n                } \n                if (lastShadow >= limitLast) {\n                    throw new java.io.IOException(\"block overrun\");\n                }\n            } else {\n                if ((++lastShadow) >= limitLast) {\n                    throw new java.io.IOException(\"block overrun\");\n                }\n                final char tmp = yy[nextSym - 1];\n                unzftab[seqToUnseq[tmp] & 0xff]++;\n                ll8[lastShadow] = seqToUnseq[tmp];\n                if (nextSym <= 16) {\n                    for (int j = nextSym - 1; j > 0;) {\n                        yy[j] = yy[--j];\n                    }\n                } else {\n                    java.lang.System.arraycopy(yy, 0, yy, 1, nextSym - 1);\n                }\n                yy[0] = tmp;\n                if (groupPos == 0) {\n                    groupPos = org.apache.commons.compress.compressors.bzip2.BZip2Constants.G_SIZE - 1;\n                    zt = selector[++groupNo] & 0xff;\n                    base_zt = base[zt];\n                    limit_zt = limit[zt];\n                    perm_zt = perm[zt];\n                    minLens_zt = minLens[zt];\n                } else {\n                    groupPos--;\n                }\n                int zn = minLens_zt;\n                while (bsLiveShadow < zn) {\n                    final int thech = inShadow.read();\n                    if (thech >= 0) {\n                        bsBuffShadow = (bsBuffShadow << 8) | thech;\n                        bsLiveShadow += 8;\n                        continue;\n                    } else {\n                        throw new java.io.IOException(\"unexpected end of stream\");\n                    }\n                } \n                int zvec = (bsBuffShadow >> (bsLiveShadow - zn)) & ((1 << zn) - 1);\n                bsLiveShadow -= zn;\n                while (zvec > limit_zt[zn]) {\n                    zn++;\n                    while (bsLiveShadow < 1) {\n                        final int thech = inShadow.read();\n                        if (thech >= 0) {\n                            bsBuffShadow = (bsBuffShadow << 8) | thech;\n                            bsLiveShadow += 8;\n                            continue;\n                        } else {\n                            throw new java.io.IOException(\"unexpected end of stream\");\n                        }\n                    } \n                    bsLiveShadow--;\n                    zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);\n                } \n                nextSym = perm_zt[zvec - base_zt[zn]];\n            }\n        } \n        this.last = lastShadow;\n        this.bsLive = bsLiveShadow;\n        this.bsBuff = bsBuffShadow;\n    }\n\n    private int getAndMoveToFrontDecode0(final int groupNo) throws java.io.IOException {\n        final java.io.InputStream inShadow = this.in;\n        final org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data dataShadow = this.data;\n        final int zt = dataShadow.selector[groupNo] & 0xff;\n        final int[] limit_zt = dataShadow.limit[zt];\n        int zn = dataShadow.minLens[zt];\n        int zvec = bsR(zn);\n        int bsLiveShadow = this.bsLive;\n        int bsBuffShadow = this.bsBuff;\n        while (zvec > limit_zt[zn]) {\n            zn++;\n            while (bsLiveShadow < 1) {\n                final int thech = inShadow.read();\n                if (thech >= 0) {\n                    bsBuffShadow = (bsBuffShadow << 8) | thech;\n                    bsLiveShadow += 8;\n                    continue;\n                } else {\n                    throw new java.io.IOException(\"unexpected end of stream\");\n                }\n            } \n            bsLiveShadow--;\n            zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);\n        } \n        this.bsLive = bsLiveShadow;\n        this.bsBuff = bsBuffShadow;\n        return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];\n    }\n\n    private int setupBlock() throws java.io.IOException {\n        if ((currentState == org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF) || (this.data == null)) {\n            return -1;\n        }\n        final int[] cftab = this.data.cftab;\n        final int[] tt = this.data.initTT(this.last + 1);\n        final byte[] ll8 = this.data.ll8;\n        cftab[0] = 0;\n        java.lang.System.arraycopy(this.data.unzftab, 0, cftab, 1, 256);\n        for (int i = 1, c = cftab[0]; i <= 256; i++) {\n            c += cftab[i];\n            cftab[i] = c;\n        }\n        for (int i = 0, lastShadow = this.last; i <= lastShadow; i++) {\n            tt[cftab[ll8[i] & 0xff]++] = i;\n        }\n        if ((this.origPtr < 0) || (this.origPtr >= tt.length)) {\n            throw new java.io.IOException(\"stream corrupted\");\n        }\n        this.su_tPos = tt[this.origPtr];\n        this.su_count = 0;\n        this.su_i2 = 0;\n        this.su_ch2 = 256;\n        if (this.blockRandomised) {\n            this.su_rNToGo = 0;\n            this.su_rTPos = 0;\n            return setupRandPartA();\n        }\n        return setupNoRandPartA();\n    }\n\n    private int setupRandPartA() throws java.io.IOException {\n        if (this.su_i2 <= this.last) {\n            this.su_chPrev = this.su_ch2;\n            int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;\n            this.su_tPos = this.data.tt[this.su_tPos];\n            if (this.su_rNToGo == 0) {\n                this.su_rNToGo = org.apache.commons.compress.compressors.bzip2.Rand.rNums(this.su_rTPos) - 1;\n                if ((++this.su_rTPos) == 512) {\n                    this.su_rTPos = 0;\n                }\n            } else {\n                this.su_rNToGo--;\n            }\n            this.su_ch2 = su_ch2Shadow ^= (this.su_rNToGo == 1) ? 1 : 0;\n            this.su_i2++;\n            this.currentChar = su_ch2Shadow;\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE;\n            this.crc.updateCRC(su_ch2Shadow);\n            return su_ch2Shadow;\n        } else {\n            endBlock();\n            initBlock();\n            return setupBlock();\n        }\n    }\n\n    private int setupNoRandPartA() throws java.io.IOException {\n        if (this.su_i2 <= this.last) {\n            this.su_chPrev = this.su_ch2;\n            int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;\n            this.su_ch2 = su_ch2Shadow;\n            this.su_tPos = this.data.tt[this.su_tPos];\n            this.su_i2++;\n            this.currentChar = su_ch2Shadow;\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE;\n            this.crc.updateCRC(su_ch2Shadow);\n            return su_ch2Shadow;\n        } else {\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE;\n            endBlock();\n            initBlock();\n            return setupBlock();\n        }\n    }\n\n    private int setupRandPartB() throws java.io.IOException {\n        if (this.su_ch2 != this.su_chPrev) {\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE;\n            this.su_count = 1;\n            return setupRandPartA();\n        } else if ((++this.su_count) >= 4) {\n            this.su_z = ((char) (this.data.ll8[this.su_tPos] & 0xff));\n            this.su_tPos = this.data.tt[this.su_tPos];\n            if (this.su_rNToGo == 0) {\n                this.su_rNToGo = org.apache.commons.compress.compressors.bzip2.Rand.rNums(this.su_rTPos) - 1;\n                if ((++this.su_rTPos) == 512) {\n                    this.su_rTPos = 0;\n                }\n            } else {\n                this.su_rNToGo--;\n            }\n            this.su_j2 = 0;\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE;\n            if (this.su_rNToGo == 1) {\n                this.su_z ^= 1;\n            }\n            return setupRandPartC();\n        } else {\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE;\n            return setupRandPartA();\n        }\n    }\n\n    private int setupRandPartC() throws java.io.IOException {\n        if (this.su_j2 < this.su_z) {\n            this.currentChar = this.su_ch2;\n            this.crc.updateCRC(this.su_ch2);\n            this.su_j2++;\n            return this.su_ch2;\n        } else {\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE;\n            this.su_i2++;\n            this.su_count = 0;\n            return setupRandPartA();\n        }\n    }\n\n    private int setupNoRandPartB() throws java.io.IOException {\n        if (this.su_ch2 != this.su_chPrev) {\n            this.su_count = 1;\n            return setupNoRandPartA();\n        } else if ((++this.su_count) >= 4) {\n            this.su_z = ((char) (this.data.ll8[this.su_tPos] & 0xff));\n            this.su_tPos = this.data.tt[this.su_tPos];\n            this.su_j2 = 0;\n            return setupNoRandPartC();\n        } else {\n            return setupNoRandPartA();\n        }\n    }\n\n    private int setupNoRandPartC() throws java.io.IOException {\n        if (this.su_j2 < this.su_z) {\n            int su_ch2Shadow = this.su_ch2;\n            this.currentChar = su_ch2Shadow;\n            this.crc.updateCRC(su_ch2Shadow);\n            this.su_j2++;\n            this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE;\n            return su_ch2Shadow;\n        } else {\n            this.su_i2++;\n            this.su_count = 0;\n            return setupNoRandPartA();\n        }\n    }\n\n    private static final class Data extends java.lang.Object {\n        final boolean[] inUse = new boolean[256];\n\n        final byte[] seqToUnseq = new byte[256];\n\n        final byte[] selector = new byte[org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_SELECTORS];\n\n        final byte[] selectorMtf = new byte[org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_SELECTORS];\n\n        final int[] unzftab = new int[256];\n\n        final int[][] limit = new int[org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS][org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_ALPHA_SIZE];\n\n        final int[][] base = new int[org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS][org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_ALPHA_SIZE];\n\n        final int[][] perm = new int[org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS][org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_ALPHA_SIZE];\n\n        final int[] minLens = new int[org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS];\n\n        final int[] cftab = new int[257];\n\n        final char[] getAndMoveToFrontDecode_yy = new char[256];\n\n        final char[][] temp_charArray2d = new char[org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS][org.apache.commons.compress.compressors.bzip2.BZip2Constants.MAX_ALPHA_SIZE];\n\n        final byte[] recvDecodingTables_pos = new byte[org.apache.commons.compress.compressors.bzip2.BZip2Constants.N_GROUPS];\n\n        int[] tt;\n\n        byte[] ll8;\n\n        Data(int blockSize100k) {\n            this.ll8 = new byte[blockSize100k * org.apache.commons.compress.compressors.bzip2.BZip2Constants.BASEBLOCKSIZE];\n        }\n\n        int[] initTT(int length) {\n            int[] ttShadow = this.tt;\n            if ((ttShadow == null) || (ttShadow.length < length)) {\n                this.tt = ttShadow = new int[length];\n            }\n            return ttShadow;\n        }\n    }\n\n    public static boolean matches(byte[] signature, int length) {\n        if (length < 3) {\n            return false;\n        }\n        if (signature[0] != 'B') {\n            return false;\n        }\n        if (signature[1] != 'Z') {\n            return false;\n        }\n        if (signature[2] != 'h') {\n            return false;\n        }\n        return true;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "final int retChar = this.currentChar",
            "src_parent": "{\n    final int retChar = this.currentChar;\n    switch (currentState) {\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n            return -1;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n            setupRandPartB();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n            setupRandPartC();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n            setupNoRandPartB();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n            setupNoRandPartC();\n            break;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n    return retChar;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent": "{\n    final int retChar = this.currentChar;\n    switch (currentState) {\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n            return -1;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n            setupRandPartB();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n            setupRandPartC();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n            setupNoRandPartB();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n            setupNoRandPartC();\n            break;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n    return retChar;\n}",
            "src_parent_type": "Block",
            "src_type": "Switch"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return retChar",
            "src_parent": "{\n    final int retChar = this.currentChar;\n    switch (currentState) {\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n            return -1;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n            setupRandPartB();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n            setupRandPartC();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n            throw new java.lang.IllegalStateException();\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n            setupNoRandPartB();\n            break;\n        case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n            setupNoRandPartC();\n            break;\n        default :\n            throw new java.lang.IllegalStateException();\n    }\n    return retChar;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "throw new java.lang.IllegalStateException()",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n    throw new java.lang.IllegalStateException();",
            "src_parent_type": "Case",
            "src_type": "Throw"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "break",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n    setupRandPartB();\n    break;",
            "src_parent_type": "Case",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "break",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n    setupRandPartC();\n    break;",
            "src_parent_type": "Case",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "break",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n    setupNoRandPartB();\n    break;",
            "src_parent_type": "Case",
            "src_type": "Break"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.currentChar = su_ch2Shadow",
            "src_parent": "{\n    this.su_chPrev = this.su_ch2;\n    int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;\n    this.su_tPos = this.data.tt[this.su_tPos];\n    if (this.su_rNToGo == 0) {\n        this.su_rNToGo = org.apache.commons.compress.compressors.bzip2.Rand.rNums(this.su_rTPos) - 1;\n        if ((++this.su_rTPos) == 512) {\n            this.su_rTPos = 0;\n        }\n    } else {\n        this.su_rNToGo--;\n    }\n    this.su_ch2 = su_ch2Shadow ^= (this.su_rNToGo == 1) ? 1 : 0;\n    this.su_i2++;\n    this.currentChar = su_ch2Shadow;\n    this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE;\n    this.crc.updateCRC(su_ch2Shadow);\n    return su_ch2Shadow;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.currentChar = su_ch2Shadow",
            "src_parent": "{\n    this.su_chPrev = this.su_ch2;\n    int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;\n    this.su_ch2 = su_ch2Shadow;\n    this.su_tPos = this.data.tt[this.su_tPos];\n    this.su_i2++;\n    this.currentChar = su_ch2Shadow;\n    this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE;\n    this.crc.updateCRC(su_ch2Shadow);\n    return su_ch2Shadow;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.currentChar = this.su_ch2",
            "src_parent": "{\n    this.currentChar = this.su_ch2;\n    this.crc.updateCRC(this.su_ch2);\n    this.su_j2++;\n    return this.su_ch2;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "this.currentChar = su_ch2Shadow",
            "src_parent": "{\n    int su_ch2Shadow = this.su_ch2;\n    this.currentChar = su_ch2Shadow;\n    this.crc.updateCRC(su_ch2Shadow);\n    this.su_j2++;\n    this.currentState = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE;\n    return su_ch2Shadow;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "setupBlock()",
            "dst_parent": "{\n    this.in = in;\n    this.decompressConcatenated = decompressConcatenated;\n    init(true);\n    initBlock();\n    setupBlock();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "setupBlock()",
            "src_parent": "return setupBlock()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "currentState",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "currentState",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n    return -1;",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n    return -1;",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n    throw new java.lang.IllegalStateException();",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n    return setupBlock();",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n    throw new java.lang.IllegalStateException();",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n    throw new java.lang.IllegalStateException();",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n    setupRandPartB();\n    break;",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n    return setupRandPartB();",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n    setupRandPartC();\n    break;",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n    return setupRandPartC();",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n    throw new java.lang.IllegalStateException();",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n    throw new java.lang.IllegalStateException();",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n    setupNoRandPartB();\n    break;",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n    return setupNoRandPartB();",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "default :\n    throw new java.lang.IllegalStateException();",
            "dst_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        setupRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        setupRandPartC();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        setupNoRandPartB();\n        break;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        setupNoRandPartC();\n        break;\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "dst_parent_type": "Switch",
            "dst_type": "Case",
            "operator": "MOV",
            "src": "default :\n    throw new java.lang.IllegalStateException();",
            "src_parent": "switch (currentState) {\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.EOF :\n        return -1;\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.START_BLOCK_STATE :\n        return setupBlock();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_B_STATE :\n        return setupRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.RAND_PART_C_STATE :\n        return setupRandPartC();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_A_STATE :\n        throw new java.lang.IllegalStateException();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_B_STATE :\n        return setupNoRandPartB();\n    case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n        return setupNoRandPartC();\n    default :\n        throw new java.lang.IllegalStateException();\n}",
            "src_parent_type": "Switch",
            "src_type": "Case"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE",
            "dst_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n    setupNoRandPartC();\n    break;",
            "dst_parent_type": "Case",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE",
            "src_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n    return setupNoRandPartC();",
            "src_parent_type": "Case",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Case",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "setupNoRandPartC()",
            "dst_parent": "case org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.NO_RAND_PART_C_STATE :\n    setupNoRandPartC();\n    break;",
            "dst_parent_type": "Case",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "setupNoRandPartC()",
            "src_parent": "return setupNoRandPartC()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "BZip2CompressorInputStream"
    }
  ],
  "id": "Compress_22"
}