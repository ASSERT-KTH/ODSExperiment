{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.SerializationConfig config",
            "dst_parent": "protected com.fasterxml.jackson.databind.JsonSerializer<?> buildCollectionSerializer(com.fasterxml.jackson.databind.SerializationConfig config, com.fasterxml.jackson.databind.type.CollectionType type, com.fasterxml.jackson.databind.BeanDescription beanDesc, boolean staticTyping, com.fasterxml.jackson.databind.jsontype.TypeSerializer elementTypeSerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> elementValueSerializer) throws com.fasterxml.jackson.databind.JsonMappingException {\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionSerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n        if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n            return null;\n        }\n        java.lang.Class<?> raw = type.getRawClass();\n        if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n            com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n            if (!enumType.isEnumType()) {\n                enumType = null;\n            }\n            ser = buildEnumSetSerializer(enumType);\n        } else {\n            java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n            if (isIndexedList(raw)) {\n                if (elementRaw == java.lang.String.class) {\n                    if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                        ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                    }\n                } else {\n                    ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            } else if (elementRaw == java.lang.String.class) {\n                if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                    ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n                }\n            }\n            if (ser == null) {\n                ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n            }\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.SerializerProvider prov",
            "src_parent": "protected com.fasterxml.jackson.databind.JsonSerializer<?> buildCollectionSerializer(com.fasterxml.jackson.databind.SerializerProvider prov, com.fasterxml.jackson.databind.type.CollectionType type, com.fasterxml.jackson.databind.BeanDescription beanDesc, boolean staticTyping, com.fasterxml.jackson.databind.jsontype.TypeSerializer elementTypeSerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> elementValueSerializer) throws com.fasterxml.jackson.databind.JsonMappingException {\n    com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionSerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser == null) {\n            com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n            if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n                return null;\n            }\n            java.lang.Class<?> raw = type.getRawClass();\n            if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n                com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n                if (!enumType.isEnumType()) {\n                    enumType = null;\n                }\n                ser = buildEnumSetSerializer(enumType);\n            } else {\n                java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n                if (isIndexedList(raw)) {\n                    if (elementRaw == java.lang.String.class) {\n                        if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                            ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                        }\n                    } else {\n                        ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                    }\n                } else if (elementRaw == java.lang.String.class) {\n                    if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                        ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n                    }\n                }\n                if (ser == null) {\n                    ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            }\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.SerializationConfig config",
            "dst_parent": "protected com.fasterxml.jackson.databind.JsonSerializer<?> buildMapSerializer(com.fasterxml.jackson.databind.SerializationConfig config, com.fasterxml.jackson.databind.type.MapType type, com.fasterxml.jackson.databind.BeanDescription beanDesc, boolean staticTyping, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer, com.fasterxml.jackson.databind.jsontype.TypeSerializer elementTypeSerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> elementValueSerializer) throws com.fasterxml.jackson.databind.JsonMappingException {\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapSerializer(config, type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        java.lang.Object filterId = findFilterId(config, beanDesc);\n        com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n        java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n        if (suppressableValue != null) {\n            mapSer = mapSer.withContentInclusion(suppressableValue);\n        }\n        ser = mapSer;\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.SerializerProvider prov",
            "src_parent": "protected com.fasterxml.jackson.databind.JsonSerializer<?> buildMapSerializer(com.fasterxml.jackson.databind.SerializerProvider prov, com.fasterxml.jackson.databind.type.MapType type, com.fasterxml.jackson.databind.BeanDescription beanDesc, boolean staticTyping, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer, com.fasterxml.jackson.databind.jsontype.TypeSerializer elementTypeSerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> elementValueSerializer) throws com.fasterxml.jackson.databind.JsonMappingException {\n    final com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapSerializer(config, type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser == null) {\n            java.lang.Object filterId = findFilterId(config, beanDesc);\n            com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n            com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n            java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n            if (suppressableValue != null) {\n                mapSer = mapSer.withContentInclusion(suppressableValue);\n            }\n            ser = mapSer;\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.SerializationConfig config",
            "dst_parent": "protected com.fasterxml.jackson.databind.JsonSerializer<?> buildArraySerializer(com.fasterxml.jackson.databind.SerializationConfig config, com.fasterxml.jackson.databind.type.ArrayType type, com.fasterxml.jackson.databind.BeanDescription beanDesc, boolean staticTyping, com.fasterxml.jackson.databind.jsontype.TypeSerializer elementTypeSerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> elementValueSerializer) throws com.fasterxml.jackson.databind.JsonMappingException {\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findArraySerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        java.lang.Class<?> raw = type.getRawClass();\n        if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n            if (java.lang.String[].class == raw) {\n                ser = com.fasterxml.jackson.databind.ser.impl.StringArraySerializer.instance;\n            } else {\n                ser = com.fasterxml.jackson.databind.ser.std.StdArraySerializers.findStandardImpl(raw);\n            }\n        }\n        if (ser == null) {\n            ser = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyArraySerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.SerializerProvider prov",
            "src_parent": "protected com.fasterxml.jackson.databind.JsonSerializer<?> buildArraySerializer(com.fasterxml.jackson.databind.SerializerProvider prov, com.fasterxml.jackson.databind.type.ArrayType type, com.fasterxml.jackson.databind.BeanDescription beanDesc, boolean staticTyping, com.fasterxml.jackson.databind.jsontype.TypeSerializer elementTypeSerializer, com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> elementValueSerializer) throws com.fasterxml.jackson.databind.JsonMappingException {\n    com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findArraySerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        java.lang.Class<?> raw = type.getRawClass();\n        if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n            if (java.lang.String[].class == raw) {\n                ser = com.fasterxml.jackson.databind.ser.impl.StringArraySerializer.instance;\n            } else {\n                ser = com.fasterxml.jackson.databind.ser.std.StdArraySerializers.findStandardImpl(raw);\n            }\n        }\n        if (ser == null) {\n            ser = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyArraySerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Parameter",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.SerializationConfig",
            "dst_parent": "com.fasterxml.jackson.databind.SerializationConfig config",
            "dst_parent_type": "Parameter",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.SerializerProvider",
            "src_parent": "com.fasterxml.jackson.databind.SerializerProvider prov",
            "src_parent_type": "Parameter",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Parameter",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.SerializationConfig",
            "dst_parent": "com.fasterxml.jackson.databind.SerializationConfig config",
            "dst_parent_type": "Parameter",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.SerializerProvider",
            "src_parent": "com.fasterxml.jackson.databind.SerializerProvider prov",
            "src_parent_type": "Parameter",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Parameter",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.SerializationConfig",
            "dst_parent": "com.fasterxml.jackson.databind.SerializationConfig config",
            "dst_parent_type": "Parameter",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "com.fasterxml.jackson.databind.SerializerProvider",
            "src_parent": "com.fasterxml.jackson.databind.SerializerProvider prov",
            "src_parent_type": "Parameter",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "config",
            "dst_parent": "buildArraySerializer(config, ((com.fasterxml.jackson.databind.type.ArrayType) (type)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "prov",
            "src_parent": "buildArraySerializer(prov, ((com.fasterxml.jackson.databind.type.ArrayType) (type)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "config",
            "dst_parent": "buildMapSerializer(config, ((com.fasterxml.jackson.databind.type.MapType) (mlt)), beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "prov",
            "src_parent": "buildMapSerializer(prov, ((com.fasterxml.jackson.databind.type.MapType) (mlt)), beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "config",
            "dst_parent": "buildCollectionSerializer(config, ((com.fasterxml.jackson.databind.type.CollectionType) (clt)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "prov",
            "src_parent": "buildCollectionSerializer(prov, ((com.fasterxml.jackson.databind.type.CollectionType) (clt)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ser != null) {\n    break;\n}",
            "src_parent": "{\n    ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n    if (ser != null) {\n        break;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ser == null) {\n    ser = findSerializerByAnnotations(prov, type, beanDesc);\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.MapLikeType mlt = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo());\n    if (mlt.isTrueMapType()) {\n        return buildMapSerializer(prov, ((com.fasterxml.jackson.databind.type.MapType) (mlt)), beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ser != null) {\n    break;\n}",
            "src_parent": "{\n    ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n    if (ser != null) {\n        break;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ser == null) {\n    ser = findSerializerByAnnotations(prov, type, beanDesc);\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.CollectionLikeType clt = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    if (clt.isTrueCollectionType()) {\n        return buildCollectionSerializer(prov, ((com.fasterxml.jackson.databind.type.CollectionType) (clt)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.CollectionLikeType clType = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig()",
            "src_parent": "{\n    com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionSerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser == null) {\n            com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n            if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n                return null;\n            }\n            java.lang.Class<?> raw = type.getRawClass();\n            if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n                com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n                if (!enumType.isEnumType()) {\n                    enumType = null;\n                }\n                ser = buildEnumSetSerializer(enumType);\n            } else {\n                java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n                if (isIndexedList(raw)) {\n                    if (elementRaw == java.lang.String.class) {\n                        if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                            ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                        }\n                    } else {\n                        ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                    }\n                } else if (elementRaw == java.lang.String.class) {\n                    if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                        ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n                    }\n                }\n                if (ser == null) {\n                    ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            }\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ser == null) {\n    ser = findSerializerByAnnotations(prov, type, beanDesc);\n    if (ser == null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n        if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n            return null;\n        }\n        java.lang.Class<?> raw = type.getRawClass();\n        if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n            com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n            if (!enumType.isEnumType()) {\n                enumType = null;\n            }\n            ser = buildEnumSetSerializer(enumType);\n        } else {\n            java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n            if (isIndexedList(raw)) {\n                if (elementRaw == java.lang.String.class) {\n                    if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                        ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                    }\n                } else {\n                    ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            } else if (elementRaw == java.lang.String.class) {\n                if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                    ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n                }\n            }\n            if (ser == null) {\n                ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n            }\n        }\n    }\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionSerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser == null) {\n            com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n            if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n                return null;\n            }\n            java.lang.Class<?> raw = type.getRawClass();\n            if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n                com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n                if (!enumType.isEnumType()) {\n                    enumType = null;\n                }\n                ser = buildEnumSetSerializer(enumType);\n            } else {\n                java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n                if (isIndexedList(raw)) {\n                    if (elementRaw == java.lang.String.class) {\n                        if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                            ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                        }\n                    } else {\n                        ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                    }\n                } else if (elementRaw == java.lang.String.class) {\n                    if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                        ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n                    }\n                }\n                if (ser == null) {\n                    ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            }\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "final com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig()",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapSerializer(config, type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser == null) {\n            java.lang.Object filterId = findFilterId(config, beanDesc);\n            com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n            com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n            java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n            if (suppressableValue != null) {\n                mapSer = mapSer.withContentInclusion(suppressableValue);\n            }\n            ser = mapSer;\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ser == null) {\n    ser = findSerializerByAnnotations(prov, type, beanDesc);\n    if (ser == null) {\n        java.lang.Object filterId = findFilterId(config, beanDesc);\n        com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n        java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n        if (suppressableValue != null) {\n            mapSer = mapSer.withContentInclusion(suppressableValue);\n        }\n        ser = mapSer;\n    }\n}",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapSerializer(config, type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n        if (ser == null) {\n            java.lang.Object filterId = findFilterId(config, beanDesc);\n            com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n            com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n            java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n            if (suppressableValue != null) {\n                mapSer = mapSer.withContentInclusion(suppressableValue);\n            }\n            ser = mapSer;\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig()",
            "src_parent": "{\n    com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findArraySerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        java.lang.Class<?> raw = type.getRawClass();\n        if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n            if (java.lang.String[].class == raw) {\n                ser = com.fasterxml.jackson.databind.ser.impl.StringArraySerializer.instance;\n            } else {\n                ser = com.fasterxml.jackson.databind.ser.std.StdArraySerializers.findStandardImpl(raw);\n            }\n        }\n        if (ser == null) {\n            ser = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyArraySerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return null",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.MapLikeType mlt = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo());\n    if (mlt.isTrueMapType()) {\n        return buildMapSerializer(config, ((com.fasterxml.jackson.databind.type.MapType) (mlt)), beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n        ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            if (_factoryConfig.hasSerializerModifiers()) {\n                for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                    ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n                }\n            }\n            return ser;\n        }\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return null",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.CollectionLikeType clt = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    if (clt.isTrueCollectionType()) {\n        return buildCollectionSerializer(config, ((com.fasterxml.jackson.databind.type.CollectionType) (clt)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.CollectionLikeType clType = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            if (_factoryConfig.hasSerializerModifiers()) {\n                for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                    ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n                }\n            }\n            return ser;\n        }\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (ser == null) {\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n    if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n        return null;\n    }\n    java.lang.Class<?> raw = type.getRawClass();\n    if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n        com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n        if (!enumType.isEnumType()) {\n            enumType = null;\n        }\n        ser = buildEnumSetSerializer(enumType);\n    } else {\n        java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n        if (isIndexedList(raw)) {\n            if (elementRaw == java.lang.String.class) {\n                if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                    ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                }\n            } else {\n                ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n            }\n        } else if (elementRaw == java.lang.String.class) {\n            if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n            }\n        }\n        if (ser == null) {\n            ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n        }\n    }\n}",
            "dst_parent": "{\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionSerializer(config, type, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n        if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n            return null;\n        }\n        java.lang.Class<?> raw = type.getRawClass();\n        if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n            com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n            if (!enumType.isEnumType()) {\n                enumType = null;\n            }\n            ser = buildEnumSetSerializer(enumType);\n        } else {\n            java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n            if (isIndexedList(raw)) {\n                if (elementRaw == java.lang.String.class) {\n                    if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                        ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                    }\n                } else {\n                    ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            } else if (elementRaw == java.lang.String.class) {\n                if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                    ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n                }\n            }\n            if (ser == null) {\n                ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n            }\n        }\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (ser == null) {\n    com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n    if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n        return null;\n    }\n    java.lang.Class<?> raw = type.getRawClass();\n    if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n        com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n        if (!enumType.isEnumType()) {\n            enumType = null;\n        }\n        ser = buildEnumSetSerializer(enumType);\n    } else {\n        java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n        if (isIndexedList(raw)) {\n            if (elementRaw == java.lang.String.class) {\n                if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                    ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                }\n            } else {\n                ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n            }\n        } else if (elementRaw == java.lang.String.class) {\n            if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n            }\n        }\n        if (ser == null) {\n            ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n        }\n    }\n}",
            "src_parent": "{\n    ser = findSerializerByAnnotations(prov, type, beanDesc);\n    if (ser == null) {\n        com.fasterxml.jackson.annotation.JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n        if ((format != null) && (format.getShape() == com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT)) {\n            return null;\n        }\n        java.lang.Class<?> raw = type.getRawClass();\n        if (java.util.EnumSet.class.isAssignableFrom(raw)) {\n            com.fasterxml.jackson.databind.JavaType enumType = type.getContentType();\n            if (!enumType.isEnumType()) {\n                enumType = null;\n            }\n            ser = buildEnumSetSerializer(enumType);\n        } else {\n            java.lang.Class<?> elementRaw = type.getContentType().getRawClass();\n            if (isIndexedList(raw)) {\n                if (elementRaw == java.lang.String.class) {\n                    if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                        ser = com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer.instance;\n                    }\n                } else {\n                    ser = buildIndexedListSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n                }\n            } else if (elementRaw == java.lang.String.class) {\n                if ((elementValueSerializer == null) || com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n                    ser = com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer.instance;\n                }\n            }\n            if (ser == null) {\n                ser = buildCollectionSerializer(type.getContentType(), staticTyping, elementTypeSerializer, elementValueSerializer);\n            }\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (ser == null) {\n    java.lang.Object filterId = findFilterId(config, beanDesc);\n    com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n    java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n    if (suppressableValue != null) {\n        mapSer = mapSer.withContentInclusion(suppressableValue);\n    }\n    ser = mapSer;\n}",
            "dst_parent": "{\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapSerializer(config, type, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        java.lang.Object filterId = findFilterId(config, beanDesc);\n        com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n        java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n        if (suppressableValue != null) {\n            mapSer = mapSer.withContentInclusion(suppressableValue);\n        }\n        ser = mapSer;\n    }\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapSerializer(config, type, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (ser == null) {\n    java.lang.Object filterId = findFilterId(config, beanDesc);\n    com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n    com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n    java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n    if (suppressableValue != null) {\n        mapSer = mapSer.withContentInclusion(suppressableValue);\n    }\n    ser = mapSer;\n}",
            "src_parent": "{\n    ser = findSerializerByAnnotations(prov, type, beanDesc);\n    if (ser == null) {\n        java.lang.Object filterId = findFilterId(config, beanDesc);\n        com.fasterxml.jackson.databind.AnnotationIntrospector ai = config.getAnnotationIntrospector();\n        com.fasterxml.jackson.databind.ser.std.MapSerializer mapSer = com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), true), type, staticTyping, elementTypeSerializer, keySerializer, elementValueSerializer, filterId);\n        java.lang.Object suppressableValue = findSuppressableContentValue(config, type.getContentType(), beanDesc);\n        if (suppressableValue != null) {\n            mapSer = mapSer.withContentInclusion(suppressableValue);\n        }\n        ser = mapSer;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type))",
            "dst_parent": "{\n    com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n            }\n        }\n        return ser;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type))",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.MapLikeType mlt = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo());\n    if (mlt.isTrueMapType()) {\n        return buildMapSerializer(prov, ((com.fasterxml.jackson.databind.type.MapType) (mlt)), beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (ser != null) {\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent": "{\n    com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n            }\n        }\n        return ser;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (ser != null) {\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n        }\n    }\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.MapLikeType mlt = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo());\n    if (mlt.isTrueMapType()) {\n        return buildMapSerializer(prov, ((com.fasterxml.jackson.databind.type.MapType) (mlt)), beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (ser != null) {\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent": "{\n    ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n            }\n        }\n        return ser;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (ser != null) {\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n        }\n    }\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.CollectionLikeType clt = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    if (clt.isTrueCollectionType()) {\n        return buildCollectionSerializer(prov, ((com.fasterxml.jackson.databind.type.CollectionType) (clt)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.CollectionLikeType clType = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return ser",
            "dst_parent": "{\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return ser",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.MapLikeType mlt = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo());\n    if (mlt.isTrueMapType()) {\n        return buildMapSerializer(prov, ((com.fasterxml.jackson.databind.type.MapType) (mlt)), beanDesc, staticTyping, keySerializer, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.MapLikeType mlType = ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findMapLikeSerializer(config, mlType, beanDesc, keySerializer, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyMapLikeSerializer(config, mlType, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return ser",
            "dst_parent": "{\n    if (_factoryConfig.hasSerializerModifiers()) {\n        for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n            ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n        }\n    }\n    return ser;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return ser",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.CollectionLikeType clt = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    if (clt.isTrueCollectionType()) {\n        return buildCollectionSerializer(prov, ((com.fasterxml.jackson.databind.type.CollectionType) (clt)), beanDesc, staticTyping, elementTypeSerializer, elementValueSerializer);\n    }\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    com.fasterxml.jackson.databind.type.CollectionLikeType clType = ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findCollectionLikeSerializer(config, clType, beanDesc, elementTypeSerializer, elementValueSerializer);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifyCollectionLikeSerializer(config, clType, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        }
      ],
      "file_name": "BasicSerializerFactory"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.fasterxml.jackson.databind.JsonSerializer<?> ser = null",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = null;\n    final com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    if (type.isContainerType()) {\n        if (!staticTyping) {\n            staticTyping = usesStaticTyping(config, beanDesc, null);\n        }\n        ser = buildContainerSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n    } else {\n        for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n            ser = serializers.findSerializer(config, type, beanDesc);\n            if (ser != null) {\n                break;\n            }\n        }\n        if (ser == null) {\n            ser = findSerializerByAnnotations(prov, type, beanDesc);\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByLookup(type, config, beanDesc, staticTyping);\n        if (ser == null) {\n            ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n            if (ser == null) {\n                ser = findBeanSerializer(prov, type, beanDesc);\n                if (ser == null) {\n                    ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n                    if (ser == null) {\n                        ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n                    }\n                }\n            }\n        }\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifySerializer(config, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (ser == null) {\n    ser = findSerializerByAnnotations(prov, type, beanDesc);\n}",
            "src_parent": "{\n    for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n        ser = serializers.findSerializer(config, type, beanDesc);\n        if (ser != null) {\n            break;\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByAnnotations(prov, type, beanDesc);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.fasterxml.jackson.databind.JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc)",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc);\n    if (ser != null) {\n        return ser;\n    }\n    final com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    if (type.isContainerType()) {\n        if (!staticTyping) {\n            staticTyping = usesStaticTyping(config, beanDesc, null);\n        }\n        ser = buildContainerSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n    } else {\n        for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n            ser = serializers.findSerializer(config, type, beanDesc);\n            if (ser != null) {\n                break;\n            }\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByLookup(type, config, beanDesc, staticTyping);\n        if (ser == null) {\n            ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n            if (ser == null) {\n                ser = findBeanSerializer(prov, type, beanDesc);\n                if (ser == null) {\n                    ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n                    if (ser == null) {\n                        ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n                    }\n                }\n            }\n        }\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifySerializer(config, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (ser != null) {\n    return ser;\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc);\n    if (ser != null) {\n        return ser;\n    }\n    final com.fasterxml.jackson.databind.SerializationConfig config = prov.getConfig();\n    if (type.isContainerType()) {\n        if (!staticTyping) {\n            staticTyping = usesStaticTyping(config, beanDesc, null);\n        }\n        ser = buildContainerSerializer(prov, type, beanDesc, staticTyping);\n        if (ser != null) {\n            return ser;\n        }\n    } else {\n        for (com.fasterxml.jackson.databind.ser.Serializers serializers : customSerializers()) {\n            ser = serializers.findSerializer(config, type, beanDesc);\n            if (ser != null) {\n                break;\n            }\n        }\n    }\n    if (ser == null) {\n        ser = findSerializerByLookup(type, config, beanDesc, staticTyping);\n        if (ser == null) {\n            ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);\n            if (ser == null) {\n                ser = findBeanSerializer(prov, type, beanDesc);\n                if (ser == null) {\n                    ser = findSerializerByAddonType(config, type, beanDesc, staticTyping);\n                    if (ser == null) {\n                        ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n                    }\n                }\n            }\n        }\n    }\n    if (ser != null) {\n        if (_factoryConfig.hasSerializerModifiers()) {\n            for (com.fasterxml.jackson.databind.ser.BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n                ser = mod.modifySerializer(config, beanDesc, ser);\n            }\n        }\n    }\n    return ser;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.JsonSerializer<?>",
            "dst_parent": "com.fasterxml.jackson.databind.JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.databind.JsonSerializer<?>",
            "src_parent": "com.fasterxml.jackson.databind.JsonSerializer<?> ser = null",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "findSerializerByAnnotations(prov, type, beanDesc)",
            "dst_parent": "com.fasterxml.jackson.databind.JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "findSerializerByAnnotations(prov, type, beanDesc)",
            "src_parent": "ser = findSerializerByAnnotations(prov, type, beanDesc)",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "BeanSerializerFactory"
    }
  ],
  "id": "JacksonDatabind_22"
}