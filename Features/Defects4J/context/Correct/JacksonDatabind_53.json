{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean cachable = (bindings == null) || bindings.isEmpty()",
            "dst_parent": "{\n    com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(rawType);\n    if (result != null) {\n        return result;\n    }\n    boolean cachable = (bindings == null) || bindings.isEmpty();\n    if (cachable) {\n        result = _typeCache.get(rawType);\n        if (result != null) {\n            return result;\n        }\n    }\n    if (context == null) {\n        context = new com.fasterxml.jackson.databind.type.ClassStack(rawType);\n    } else {\n        com.fasterxml.jackson.databind.type.ClassStack prev = context.find(rawType);\n        if (prev != null) {\n            com.fasterxml.jackson.databind.type.ResolvedRecursiveType selfRef = new com.fasterxml.jackson.databind.type.ResolvedRecursiveType(rawType, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n            prev.addSelfReference(selfRef);\n            return selfRef;\n        }\n        context = context.child(rawType);\n    }\n    if (rawType.isArray()) {\n        result = com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n    } else {\n        com.fasterxml.jackson.databind.JavaType superClass;\n        com.fasterxml.jackson.databind.JavaType[] superInterfaces;\n        if (rawType.isInterface()) {\n            superClass = null;\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        } else {\n            superClass = _resolveSuperClass(context, rawType, bindings);\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        }\n        if (rawType == java.util.Properties.class) {\n            result = com.fasterxml.jackson.databind.type.MapType.construct(rawType, bindings, superClass, superInterfaces, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING);\n        } else if (superClass != null) {\n            result = superClass.refine(rawType, bindings, superClass, superInterfaces);\n        }\n        if (result == null) {\n            result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n            if (result == null) {\n                result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                }\n            }\n        }\n    }\n    context.resolveSelfReferences(result);\n    if (cachable) {\n        _typeCache.putIfAbsent(rawType, result);\n    }\n    return result;\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final java.lang.Object key",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(rawType);\n    if (result != null) {\n        return result;\n    }\n    final java.lang.Object key;\n    if ((bindings == null) || bindings.isEmpty()) {\n        key = rawType;\n        result = _typeCache.get(key);\n    } else {\n        key = bindings.asKey(rawType);\n    }\n    result = _typeCache.get(key);\n    if (result != null) {\n        return result;\n    }\n    if (context == null) {\n        context = new com.fasterxml.jackson.databind.type.ClassStack(rawType);\n    } else {\n        com.fasterxml.jackson.databind.type.ClassStack prev = context.find(rawType);\n        if (prev != null) {\n            com.fasterxml.jackson.databind.type.ResolvedRecursiveType selfRef = new com.fasterxml.jackson.databind.type.ResolvedRecursiveType(rawType, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n            prev.addSelfReference(selfRef);\n            return selfRef;\n        }\n        context = context.child(rawType);\n    }\n    if (rawType.isArray()) {\n        result = com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n    } else {\n        com.fasterxml.jackson.databind.JavaType superClass;\n        com.fasterxml.jackson.databind.JavaType[] superInterfaces;\n        if (rawType.isInterface()) {\n            superClass = null;\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        } else {\n            superClass = _resolveSuperClass(context, rawType, bindings);\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        }\n        if (rawType == java.util.Properties.class) {\n            result = com.fasterxml.jackson.databind.type.MapType.construct(rawType, bindings, superClass, superInterfaces, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING);\n        } else if (superClass != null) {\n            result = superClass.refine(rawType, bindings, superClass, superInterfaces);\n        }\n        if (result == null) {\n            result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n            if (result == null) {\n                result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                }\n            }\n        }\n    }\n    context.resolveSelfReferences(result);\n    _typeCache.putIfAbsent(key, result);\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean",
            "dst_parent": "boolean cachable = (bindings == null) || bindings.isEmpty()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.Object",
            "src_parent": "final java.lang.Object key",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "rawType",
            "dst_parent": "_typeCache.putIfAbsent(rawType, result)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "key",
            "src_parent": "_typeCache.putIfAbsent(key, result)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "rawType",
            "dst_parent": "_typeCache.get(rawType)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "UPD",
            "src": "key",
            "src_parent": "_typeCache.get(key)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Do",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.fasterxml.jackson.databind.type.TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass)",
            "src_parent": "{\n    if (rawBase == java.lang.Object.class) {\n        newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n        break;\n    }\n    if (!rawBase.isAssignableFrom(subclass)) {\n        throw new java.lang.IllegalArgumentException(java.lang.String.format(\"Class %s not subtype of %s\", subclass.getName(), baseType));\n    }\n    if (baseType.getBindings().isEmpty()) {\n        newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n        break;\n    }\n    if (baseType.isContainerType()) {\n        if (baseType.isMapLikeType()) {\n            if ((((subclass == java.util.HashMap.class) || (subclass == java.util.LinkedHashMap.class)) || (subclass == java.util.EnumMap.class)) || (subclass == java.util.TreeMap.class)) {\n                newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));\n                break;\n            }\n        } else if (baseType.isCollectionLikeType()) {\n            if ((((subclass == java.util.ArrayList.class) || (subclass == java.util.LinkedList.class)) || (subclass == java.util.HashSet.class)) || (subclass == java.util.TreeSet.class)) {\n                newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.getContentType()));\n                break;\n            }\n            if (rawBase == java.util.EnumSet.class) {\n                return baseType;\n            }\n        }\n    }\n    int typeParamCount = subclass.getTypeParameters().length;\n    if (typeParamCount == 0) {\n        newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n        break;\n    }\n    com.fasterxml.jackson.databind.type.TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);\n    if (baseType.isInterface()) {\n        newType = baseType.refine(subclass, tb, null, new com.fasterxml.jackson.databind.JavaType[]{ baseType });\n    } else {\n        newType = baseType.refine(subclass, tb, baseType, com.fasterxml.jackson.databind.type.TypeFactory.NO_TYPES);\n    }\n    if (newType == null) {\n        newType = _fromClass(null, subclass, tb);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "tb",
            "src_parent": "baseType.refine(subclass, tb, null, new com.fasterxml.jackson.databind.JavaType[]{ baseType })",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "tb",
            "src_parent": "baseType.refine(subclass, tb, baseType, com.fasterxml.jackson.databind.type.TypeFactory.NO_TYPES)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "tb",
            "src_parent": "_fromClass(null, subclass, tb)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private com.fasterxml.jackson.databind.type.TypeBindings _bindingsForSubtype(com.fasterxml.jackson.databind.JavaType baseType, int typeParamCount, java.lang.Class<?> subclass) {\n    int baseCount = baseType.containedTypeCount();\n    if (baseCount == typeParamCount) {\n        if (typeParamCount == 1) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0));\n        }\n        if (typeParamCount == 2) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n        }\n        java.util.List<com.fasterxml.jackson.databind.JavaType> types = new java.util.ArrayList<com.fasterxml.jackson.databind.JavaType>(baseCount);\n        for (int i = 0; i < baseCount; ++i) {\n            types.add(baseType.containedType(i));\n        }\n        return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, types);\n    }\n    return com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings();\n}",
            "src_parent": "@java.lang.SuppressWarnings({ \"rawtypes\" })\npublic final class TypeFactory implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final com.fasterxml.jackson.databind.JavaType[] NO_TYPES = new com.fasterxml.jackson.databind.JavaType[0];\n\n    protected static final com.fasterxml.jackson.databind.type.TypeFactory instance = new com.fasterxml.jackson.databind.type.TypeFactory();\n\n    protected static final com.fasterxml.jackson.databind.type.TypeBindings EMPTY_BINDINGS = com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings();\n\n    private static final java.lang.Class<?> CLS_STRING = java.lang.String.class;\n\n    private static final java.lang.Class<?> CLS_OBJECT = java.lang.Object.class;\n\n    private static final java.lang.Class<?> CLS_COMPARABLE = java.lang.Comparable.class;\n\n    private static final java.lang.Class<?> CLS_CLASS = java.lang.Class.class;\n\n    private static final java.lang.Class<?> CLS_ENUM = java.lang.Enum.class;\n\n    private static final java.lang.Class<?> CLS_BOOL = java.lang.Boolean.TYPE;\n\n    private static final java.lang.Class<?> CLS_INT = java.lang.Integer.TYPE;\n\n    private static final java.lang.Class<?> CLS_LONG = java.lang.Long.TYPE;\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_BOOL = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_BOOL);\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_INT = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_INT);\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_LONG = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_LONG);\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_STRING = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_STRING);\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_OBJECT = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_OBJECT);\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_COMPARABLE = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_COMPARABLE);\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_ENUM = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_ENUM);\n\n    protected static final com.fasterxml.jackson.databind.type.SimpleType CORE_TYPE_CLASS = new com.fasterxml.jackson.databind.type.SimpleType(com.fasterxml.jackson.databind.type.TypeFactory.CLS_CLASS);\n\n    protected final com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object, com.fasterxml.jackson.databind.JavaType> _typeCache = new com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object, com.fasterxml.jackson.databind.JavaType>(16, 100);\n\n    protected final com.fasterxml.jackson.databind.type.TypeModifier[] _modifiers;\n\n    protected final com.fasterxml.jackson.databind.type.TypeParser _parser;\n\n    protected final java.lang.ClassLoader _classLoader;\n\n    private TypeFactory() {\n        _parser = new com.fasterxml.jackson.databind.type.TypeParser(this);\n        _modifiers = null;\n        _classLoader = null;\n    }\n\n    protected TypeFactory(com.fasterxml.jackson.databind.type.TypeParser p, com.fasterxml.jackson.databind.type.TypeModifier[] mods) {\n        this(p, mods, null);\n    }\n\n    protected TypeFactory(com.fasterxml.jackson.databind.type.TypeParser p, com.fasterxml.jackson.databind.type.TypeModifier[] mods, java.lang.ClassLoader classLoader) {\n        _parser = p.withFactory(this);\n        _modifiers = mods;\n        _classLoader = classLoader;\n    }\n\n    public com.fasterxml.jackson.databind.type.TypeFactory withModifier(com.fasterxml.jackson.databind.type.TypeModifier mod) {\n        if (mod == null) {\n            return new com.fasterxml.jackson.databind.type.TypeFactory(_parser, _modifiers, _classLoader);\n        }\n        if (_modifiers == null) {\n            return new com.fasterxml.jackson.databind.type.TypeFactory(_parser, new com.fasterxml.jackson.databind.type.TypeModifier[]{ mod }, _classLoader);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeFactory(_parser, com.fasterxml.jackson.databind.util.ArrayBuilders.insertInListNoDup(_modifiers, mod), _classLoader);\n    }\n\n    public com.fasterxml.jackson.databind.type.TypeFactory withClassLoader(java.lang.ClassLoader classLoader) {\n        return new com.fasterxml.jackson.databind.type.TypeFactory(_parser, _modifiers, classLoader);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeFactory defaultInstance() {\n        return com.fasterxml.jackson.databind.type.TypeFactory.instance;\n    }\n\n    public void clearCache() {\n        _typeCache.clear();\n    }\n\n    public java.lang.ClassLoader getClassLoader() {\n        return _classLoader;\n    }\n\n    public static com.fasterxml.jackson.databind.JavaType unknownType() {\n        return com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()._unknownType();\n    }\n\n    public static java.lang.Class<?> rawClass(java.lang.reflect.Type t) {\n        if (t instanceof java.lang.Class<?>) {\n            return ((java.lang.Class<?>) (t));\n        }\n        return com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance().constructType(t).getRawClass();\n    }\n\n    public java.lang.Class<?> findClass(java.lang.String className) throws java.lang.ClassNotFoundException {\n        if (className.indexOf('.') < 0) {\n            java.lang.Class<?> prim = _findPrimitive(className);\n            if (prim != null) {\n                return prim;\n            }\n        }\n        java.lang.Throwable prob = null;\n        java.lang.ClassLoader loader = this.getClassLoader();\n        if (loader == null) {\n            loader = java.lang.Thread.currentThread().getContextClassLoader();\n        }\n        if (loader != null) {\n            try {\n                return classForName(className, true, loader);\n            } catch (java.lang.Exception e) {\n                prob = com.fasterxml.jackson.databind.util.ClassUtil.getRootCause(e);\n            }\n        }\n        try {\n            return classForName(className);\n        } catch (java.lang.Exception e) {\n            if (prob == null) {\n                prob = com.fasterxml.jackson.databind.util.ClassUtil.getRootCause(e);\n            }\n        }\n        if (prob instanceof java.lang.RuntimeException) {\n            throw ((java.lang.RuntimeException) (prob));\n        }\n        throw new java.lang.ClassNotFoundException(prob.getMessage(), prob);\n    }\n\n    protected java.lang.Class<?> classForName(java.lang.String name, boolean initialize, java.lang.ClassLoader loader) throws java.lang.ClassNotFoundException {\n        return java.lang.Class.forName(name, true, loader);\n    }\n\n    protected java.lang.Class<?> classForName(java.lang.String name) throws java.lang.ClassNotFoundException {\n        return java.lang.Class.forName(name);\n    }\n\n    protected java.lang.Class<?> _findPrimitive(java.lang.String className) {\n        if (\"int\".equals(className)) {\n            return java.lang.Integer.TYPE;\n        }\n        if (\"long\".equals(className)) {\n            return java.lang.Long.TYPE;\n        }\n        if (\"float\".equals(className)) {\n            return java.lang.Float.TYPE;\n        }\n        if (\"double\".equals(className)) {\n            return java.lang.Double.TYPE;\n        }\n        if (\"boolean\".equals(className)) {\n            return java.lang.Boolean.TYPE;\n        }\n        if (\"byte\".equals(className)) {\n            return java.lang.Byte.TYPE;\n        }\n        if (\"char\".equals(className)) {\n            return java.lang.Character.TYPE;\n        }\n        if (\"short\".equals(className)) {\n            return java.lang.Short.TYPE;\n        }\n        if (\"void\".equals(className)) {\n            return java.lang.Void.TYPE;\n        }\n        return null;\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType baseType, java.lang.Class<?> subclass) {\n        final java.lang.Class<?> rawBase = baseType.getRawClass();\n        if (rawBase == subclass) {\n            return baseType;\n        }\n        com.fasterxml.jackson.databind.JavaType newType;\n        do {\n            if (rawBase == java.lang.Object.class) {\n                newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n                break;\n            }\n            if (!rawBase.isAssignableFrom(subclass)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"Class %s not subtype of %s\", subclass.getName(), baseType));\n            }\n            if (baseType.getBindings().isEmpty()) {\n                newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n                break;\n            }\n            if (baseType.isContainerType()) {\n                if (baseType.isMapLikeType()) {\n                    if ((((subclass == java.util.HashMap.class) || (subclass == java.util.LinkedHashMap.class)) || (subclass == java.util.EnumMap.class)) || (subclass == java.util.TreeMap.class)) {\n                        newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));\n                        break;\n                    }\n                } else if (baseType.isCollectionLikeType()) {\n                    if ((((subclass == java.util.ArrayList.class) || (subclass == java.util.LinkedList.class)) || (subclass == java.util.HashSet.class)) || (subclass == java.util.TreeSet.class)) {\n                        newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.getContentType()));\n                        break;\n                    }\n                    if (rawBase == java.util.EnumSet.class) {\n                        return baseType;\n                    }\n                }\n            }\n            int typeParamCount = subclass.getTypeParameters().length;\n            if (typeParamCount == 0) {\n                newType = _fromClass(null, subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings());\n                break;\n            }\n            com.fasterxml.jackson.databind.type.TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);\n            if (baseType.isInterface()) {\n                newType = baseType.refine(subclass, tb, null, new com.fasterxml.jackson.databind.JavaType[]{ baseType });\n            } else {\n                newType = baseType.refine(subclass, tb, baseType, com.fasterxml.jackson.databind.type.TypeFactory.NO_TYPES);\n            }\n            if (newType == null) {\n                newType = _fromClass(null, subclass, tb);\n            }\n        } while (false );\n        return newType;\n    }\n\n    private com.fasterxml.jackson.databind.type.TypeBindings _bindingsForSubtype(com.fasterxml.jackson.databind.JavaType baseType, int typeParamCount, java.lang.Class<?> subclass) {\n        int baseCount = baseType.containedTypeCount();\n        if (baseCount == typeParamCount) {\n            if (typeParamCount == 1) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0));\n            }\n            if (typeParamCount == 2) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n            }\n            java.util.List<com.fasterxml.jackson.databind.JavaType> types = new java.util.ArrayList<com.fasterxml.jackson.databind.JavaType>(baseCount);\n            for (int i = 0; i < baseCount; ++i) {\n                types.add(baseType.containedType(i));\n            }\n            return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, types);\n        }\n        return com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings();\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructGeneralizedType(com.fasterxml.jackson.databind.JavaType baseType, java.lang.Class<?> superClass) {\n        final java.lang.Class<?> rawBase = baseType.getRawClass();\n        if (rawBase == superClass) {\n            return baseType;\n        }\n        com.fasterxml.jackson.databind.JavaType superType = baseType.findSuperType(superClass);\n        if (superType == null) {\n            if (!superClass.isAssignableFrom(rawBase)) {\n                throw new java.lang.IllegalArgumentException(java.lang.String.format(\"Class %s not a super-type of %s\", superClass.getName(), baseType));\n            }\n            throw new java.lang.IllegalArgumentException(java.lang.String.format(\"Internal error: class %s not included as super-type for %s\", superClass.getName(), baseType));\n        }\n        return superType;\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructFromCanonical(java.lang.String canonical) throws java.lang.IllegalArgumentException {\n        return _parser.parse(canonical);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType[] findTypeParameters(com.fasterxml.jackson.databind.JavaType type, java.lang.Class<?> expType) {\n        com.fasterxml.jackson.databind.JavaType match = type.findSuperType(expType);\n        if (match == null) {\n            return com.fasterxml.jackson.databind.type.TypeFactory.NO_TYPES;\n        }\n        return match.getBindings().typeParameterArray();\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.JavaType[] findTypeParameters(java.lang.Class<?> clz, java.lang.Class<?> expType, com.fasterxml.jackson.databind.type.TypeBindings bindings) {\n        return findTypeParameters(constructType(clz, bindings), expType);\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.JavaType[] findTypeParameters(java.lang.Class<?> clz, java.lang.Class<?> expType) {\n        return findTypeParameters(constructType(clz), expType);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType moreSpecificType(com.fasterxml.jackson.databind.JavaType type1, com.fasterxml.jackson.databind.JavaType type2) {\n        if (type1 == null) {\n            return type2;\n        }\n        if (type2 == null) {\n            return type1;\n        }\n        java.lang.Class<?> raw1 = type1.getRawClass();\n        java.lang.Class<?> raw2 = type2.getRawClass();\n        if (raw1 == raw2) {\n            return type1;\n        }\n        if (raw1.isAssignableFrom(raw2)) {\n            return type2;\n        }\n        return type1;\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type type) {\n        return _fromAny(null, type, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type type, com.fasterxml.jackson.databind.type.TypeBindings bindings) {\n        return _fromAny(null, type, bindings);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructType(com.fasterxml.jackson.core.type.TypeReference<?> typeRef) {\n        return _fromAny(null, typeRef.getType(), com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type type, java.lang.Class<?> contextClass) {\n        com.fasterxml.jackson.databind.type.TypeBindings bindings = (contextClass == null) ? com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings() : constructType(contextClass).getBindings();\n        return _fromAny(null, type, bindings);\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type type, com.fasterxml.jackson.databind.JavaType contextType) {\n        com.fasterxml.jackson.databind.type.TypeBindings bindings = (contextType == null) ? com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings() : contextType.getBindings();\n        return _fromAny(null, type, bindings);\n    }\n\n    public com.fasterxml.jackson.databind.type.ArrayType constructArrayType(java.lang.Class<?> elementType) {\n        return com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(null, elementType, null), null);\n    }\n\n    public com.fasterxml.jackson.databind.type.ArrayType constructArrayType(com.fasterxml.jackson.databind.JavaType elementType) {\n        return com.fasterxml.jackson.databind.type.ArrayType.construct(elementType, null);\n    }\n\n    public com.fasterxml.jackson.databind.type.CollectionType constructCollectionType(java.lang.Class<? extends java.util.Collection> collectionClass, java.lang.Class<?> elementClass) {\n        return constructCollectionType(collectionClass, _fromClass(null, elementClass, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS));\n    }\n\n    public com.fasterxml.jackson.databind.type.CollectionType constructCollectionType(java.lang.Class<? extends java.util.Collection> collectionClass, com.fasterxml.jackson.databind.JavaType elementType) {\n        return ((com.fasterxml.jackson.databind.type.CollectionType) (_fromClass(null, collectionClass, com.fasterxml.jackson.databind.type.TypeBindings.create(collectionClass, elementType))));\n    }\n\n    public com.fasterxml.jackson.databind.type.CollectionLikeType constructCollectionLikeType(java.lang.Class<?> collectionClass, java.lang.Class<?> elementClass) {\n        return constructCollectionLikeType(collectionClass, _fromClass(null, elementClass, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS));\n    }\n\n    public com.fasterxml.jackson.databind.type.CollectionLikeType constructCollectionLikeType(java.lang.Class<?> collectionClass, com.fasterxml.jackson.databind.JavaType elementType) {\n        com.fasterxml.jackson.databind.JavaType type = _fromClass(null, collectionClass, com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(collectionClass, elementType));\n        if (type instanceof com.fasterxml.jackson.databind.type.CollectionLikeType) {\n            return ((com.fasterxml.jackson.databind.type.CollectionLikeType) (type));\n        }\n        return com.fasterxml.jackson.databind.type.CollectionLikeType.upgradeFrom(type, elementType);\n    }\n\n    public com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class<? extends java.util.Map> mapClass, java.lang.Class<?> keyClass, java.lang.Class<?> valueClass) {\n        com.fasterxml.jackson.databind.JavaType kt;\n        com.fasterxml.jackson.databind.JavaType vt;\n        if (mapClass == java.util.Properties.class) {\n            kt = vt = com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING;\n        } else {\n            kt = _fromClass(null, keyClass, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n            vt = _fromClass(null, valueClass, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n        }\n        return constructMapType(mapClass, kt, vt);\n    }\n\n    public com.fasterxml.jackson.databind.type.MapType constructMapType(java.lang.Class<? extends java.util.Map> mapClass, com.fasterxml.jackson.databind.JavaType keyType, com.fasterxml.jackson.databind.JavaType valueType) {\n        return ((com.fasterxml.jackson.databind.type.MapType) (_fromClass(null, mapClass, com.fasterxml.jackson.databind.type.TypeBindings.create(mapClass, new com.fasterxml.jackson.databind.JavaType[]{ keyType, valueType }))));\n    }\n\n    public com.fasterxml.jackson.databind.type.MapLikeType constructMapLikeType(java.lang.Class<?> mapClass, java.lang.Class<?> keyClass, java.lang.Class<?> valueClass) {\n        return constructMapLikeType(mapClass, _fromClass(null, keyClass, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS), _fromClass(null, valueClass, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS));\n    }\n\n    public com.fasterxml.jackson.databind.type.MapLikeType constructMapLikeType(java.lang.Class<?> mapClass, com.fasterxml.jackson.databind.JavaType keyType, com.fasterxml.jackson.databind.JavaType valueType) {\n        com.fasterxml.jackson.databind.JavaType type = _fromClass(null, mapClass, com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(mapClass, new com.fasterxml.jackson.databind.JavaType[]{ keyType, valueType }));\n        if (type instanceof com.fasterxml.jackson.databind.type.MapLikeType) {\n            return ((com.fasterxml.jackson.databind.type.MapLikeType) (type));\n        }\n        return com.fasterxml.jackson.databind.type.MapLikeType.upgradeFrom(type, keyType, valueType);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructSimpleType(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.JavaType[] parameterTypes) {\n        return _fromClass(null, rawType, com.fasterxml.jackson.databind.type.TypeBindings.create(rawType, parameterTypes));\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.JavaType constructSimpleType(java.lang.Class<?> rawType, java.lang.Class<?> parameterTarget, com.fasterxml.jackson.databind.JavaType[] parameterTypes) {\n        return constructSimpleType(rawType, parameterTypes);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructReferenceType(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.JavaType referredType) {\n        return com.fasterxml.jackson.databind.type.ReferenceType.construct(rawType, null, null, null, referredType);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType uncheckedSimpleType(java.lang.Class<?> cls) {\n        return _constructSimple(cls, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS, null, null);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructParametricType(java.lang.Class<?> parametrized, java.lang.Class<?>... parameterClasses) {\n        int len = parameterClasses.length;\n        com.fasterxml.jackson.databind.JavaType[] pt = new com.fasterxml.jackson.databind.JavaType[len];\n        for (int i = 0; i < len; ++i) {\n            pt[i] = _fromClass(null, parameterClasses[i], null);\n        }\n        return constructParametricType(parametrized, pt);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructParametricType(java.lang.Class<?> rawType, com.fasterxml.jackson.databind.JavaType... parameterTypes) {\n        return _fromClass(null, rawType, com.fasterxml.jackson.databind.type.TypeBindings.create(rawType, parameterTypes));\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructParametrizedType(java.lang.Class<?> parametrized, java.lang.Class<?> parametersFor, com.fasterxml.jackson.databind.JavaType... parameterTypes) {\n        return constructParametricType(parametrized, parameterTypes);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType constructParametrizedType(java.lang.Class<?> parametrized, java.lang.Class<?> parametersFor, java.lang.Class<?>... parameterClasses) {\n        return constructParametricType(parametrized, parameterClasses);\n    }\n\n    public com.fasterxml.jackson.databind.type.CollectionType constructRawCollectionType(java.lang.Class<? extends java.util.Collection> collectionClass) {\n        return constructCollectionType(collectionClass, com.fasterxml.jackson.databind.type.TypeFactory.unknownType());\n    }\n\n    public com.fasterxml.jackson.databind.type.CollectionLikeType constructRawCollectionLikeType(java.lang.Class<?> collectionClass) {\n        return constructCollectionLikeType(collectionClass, com.fasterxml.jackson.databind.type.TypeFactory.unknownType());\n    }\n\n    public com.fasterxml.jackson.databind.type.MapType constructRawMapType(java.lang.Class<? extends java.util.Map> mapClass) {\n        return constructMapType(mapClass, com.fasterxml.jackson.databind.type.TypeFactory.unknownType(), com.fasterxml.jackson.databind.type.TypeFactory.unknownType());\n    }\n\n    public com.fasterxml.jackson.databind.type.MapLikeType constructRawMapLikeType(java.lang.Class<?> mapClass) {\n        return constructMapLikeType(mapClass, com.fasterxml.jackson.databind.type.TypeFactory.unknownType(), com.fasterxml.jackson.databind.type.TypeFactory.unknownType());\n    }\n\n    private com.fasterxml.jackson.databind.JavaType _mapType(java.lang.Class<?> rawClass, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        com.fasterxml.jackson.databind.JavaType kt;\n        com.fasterxml.jackson.databind.JavaType vt;\n        if (rawClass == java.util.Properties.class) {\n            kt = vt = com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING;\n        } else {\n            java.util.List<com.fasterxml.jackson.databind.JavaType> typeParams = bindings.getTypeParameters();\n            switch (typeParams.size()) {\n                case 0 :\n                    kt = vt = _unknownType();\n                    break;\n                case 2 :\n                    kt = typeParams.get(0);\n                    vt = typeParams.get(1);\n                    break;\n                default :\n                    throw new java.lang.IllegalArgumentException((\"Strange Map type \" + rawClass.getName()) + \": can not determine type parameters\");\n            }\n        }\n        return com.fasterxml.jackson.databind.type.MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);\n    }\n\n    private com.fasterxml.jackson.databind.JavaType _collectionType(java.lang.Class<?> rawClass, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        java.util.List<com.fasterxml.jackson.databind.JavaType> typeParams = bindings.getTypeParameters();\n        com.fasterxml.jackson.databind.JavaType ct;\n        if (typeParams.isEmpty()) {\n            ct = _unknownType();\n        } else if (typeParams.size() == 1) {\n            ct = typeParams.get(0);\n        } else {\n            throw new java.lang.IllegalArgumentException((\"Strange Collection type \" + rawClass.getName()) + \": can not determine type parameters\");\n        }\n        return com.fasterxml.jackson.databind.type.CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);\n    }\n\n    private com.fasterxml.jackson.databind.JavaType _referenceType(java.lang.Class<?> rawClass, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        java.util.List<com.fasterxml.jackson.databind.JavaType> typeParams = bindings.getTypeParameters();\n        com.fasterxml.jackson.databind.JavaType ct;\n        if (typeParams.isEmpty()) {\n            ct = _unknownType();\n        } else if (typeParams.size() == 1) {\n            ct = typeParams.get(0);\n        } else {\n            throw new java.lang.IllegalArgumentException((\"Strange Reference type \" + rawClass.getName()) + \": can not determine type parameters\");\n        }\n        return com.fasterxml.jackson.databind.type.ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _constructSimple(java.lang.Class<?> raw, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        if (bindings.isEmpty()) {\n            com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(raw);\n            if (result != null) {\n                return result;\n            }\n        }\n        return _newSimpleType(raw, bindings, superClass, superInterfaces);\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _newSimpleType(java.lang.Class<?> raw, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        return new com.fasterxml.jackson.databind.type.SimpleType(raw, bindings, superClass, superInterfaces);\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _unknownType() {\n        return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_OBJECT;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _findWellKnownSimple(java.lang.Class<?> clz) {\n        if (clz.isPrimitive()) {\n            if (clz == com.fasterxml.jackson.databind.type.TypeFactory.CLS_BOOL) {\n                return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_BOOL;\n            }\n            if (clz == com.fasterxml.jackson.databind.type.TypeFactory.CLS_INT) {\n                return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_INT;\n            }\n            if (clz == com.fasterxml.jackson.databind.type.TypeFactory.CLS_LONG) {\n                return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_LONG;\n            }\n        } else {\n            if (clz == com.fasterxml.jackson.databind.type.TypeFactory.CLS_STRING) {\n                return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING;\n            }\n            if (clz == com.fasterxml.jackson.databind.type.TypeFactory.CLS_OBJECT) {\n                return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_OBJECT;\n            }\n        }\n        return null;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromAny(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.reflect.Type type, com.fasterxml.jackson.databind.type.TypeBindings bindings) {\n        com.fasterxml.jackson.databind.JavaType resultType;\n        if (type instanceof java.lang.Class<?>) {\n            resultType = _fromClass(context, ((java.lang.Class<?>) (type)), com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n        } else if (type instanceof java.lang.reflect.ParameterizedType) {\n            resultType = _fromParamType(context, ((java.lang.reflect.ParameterizedType) (type)), bindings);\n        } else if (type instanceof com.fasterxml.jackson.databind.JavaType) {\n            return ((com.fasterxml.jackson.databind.JavaType) (type));\n        } else if (type instanceof java.lang.reflect.GenericArrayType) {\n            resultType = _fromArrayType(context, ((java.lang.reflect.GenericArrayType) (type)), bindings);\n        } else if (type instanceof java.lang.reflect.TypeVariable<?>) {\n            resultType = _fromVariable(context, ((java.lang.reflect.TypeVariable<?>) (type)), bindings);\n        } else if (type instanceof java.lang.reflect.WildcardType) {\n            resultType = _fromWildcard(context, ((java.lang.reflect.WildcardType) (type)), bindings);\n        } else {\n            throw new java.lang.IllegalArgumentException(\"Unrecognized Type: \" + (type == null ? \"[null]\" : type.toString()));\n        }\n        if (_modifiers != null) {\n            com.fasterxml.jackson.databind.type.TypeBindings b = resultType.getBindings();\n            if (b == null) {\n                b = com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS;\n            }\n            for (com.fasterxml.jackson.databind.type.TypeModifier mod : _modifiers) {\n                com.fasterxml.jackson.databind.JavaType t = mod.modifyType(resultType, type, b, this);\n                if (t == null) {\n                    throw new java.lang.IllegalStateException(java.lang.String.format(\"TypeModifier %s (of type %s) return null for type %s\", mod, mod.getClass().getName(), resultType));\n                }\n                resultType = t;\n            }\n        }\n        return resultType;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromClass(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings bindings) {\n        com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(rawType);\n        if (result != null) {\n            return result;\n        }\n        final java.lang.Object key;\n        if ((bindings == null) || bindings.isEmpty()) {\n            key = rawType;\n            result = _typeCache.get(key);\n        } else {\n            key = bindings.asKey(rawType);\n        }\n        result = _typeCache.get(key);\n        if (result != null) {\n            return result;\n        }\n        if (context == null) {\n            context = new com.fasterxml.jackson.databind.type.ClassStack(rawType);\n        } else {\n            com.fasterxml.jackson.databind.type.ClassStack prev = context.find(rawType);\n            if (prev != null) {\n                com.fasterxml.jackson.databind.type.ResolvedRecursiveType selfRef = new com.fasterxml.jackson.databind.type.ResolvedRecursiveType(rawType, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n                prev.addSelfReference(selfRef);\n                return selfRef;\n            }\n            context = context.child(rawType);\n        }\n        if (rawType.isArray()) {\n            result = com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n        } else {\n            com.fasterxml.jackson.databind.JavaType superClass;\n            com.fasterxml.jackson.databind.JavaType[] superInterfaces;\n            if (rawType.isInterface()) {\n                superClass = null;\n                superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n            } else {\n                superClass = _resolveSuperClass(context, rawType, bindings);\n                superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n            }\n            if (rawType == java.util.Properties.class) {\n                result = com.fasterxml.jackson.databind.type.MapType.construct(rawType, bindings, superClass, superInterfaces, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING);\n            } else if (superClass != null) {\n                result = superClass.refine(rawType, bindings, superClass, superInterfaces);\n            }\n            if (result == null) {\n                result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                    if (result == null) {\n                        result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                    }\n                }\n            }\n        }\n        context.resolveSelfReferences(result);\n        _typeCache.putIfAbsent(key, result);\n        return result;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings parentBindings) {\n        java.lang.reflect.Type parent = com.fasterxml.jackson.databind.util.ClassUtil.getGenericSuperclass(rawType);\n        if (parent == null) {\n            return null;\n        }\n        return _fromAny(context, parent, parentBindings);\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType[] _resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings parentBindings) {\n        java.lang.reflect.Type[] types = com.fasterxml.jackson.databind.util.ClassUtil.getGenericInterfaces(rawType);\n        if ((types == null) || (types.length == 0)) {\n            return com.fasterxml.jackson.databind.type.TypeFactory.NO_TYPES;\n        }\n        int len = types.length;\n        com.fasterxml.jackson.databind.JavaType[] resolved = new com.fasterxml.jackson.databind.JavaType[len];\n        for (int i = 0; i < len; ++i) {\n            java.lang.reflect.Type type = types[i];\n            resolved[i] = _fromAny(context, type, parentBindings);\n        }\n        return resolved;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        if (rawType == java.util.Map.class) {\n            return _mapType(rawType, bindings, superClass, superInterfaces);\n        }\n        if (rawType == java.util.Collection.class) {\n            return _collectionType(rawType, bindings, superClass, superInterfaces);\n        }\n        if (rawType == java.util.concurrent.atomic.AtomicReference.class) {\n            return _referenceType(rawType, bindings, superClass, superInterfaces);\n        }\n        return null;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.Class<?> rawType, com.fasterxml.jackson.databind.type.TypeBindings bindings, com.fasterxml.jackson.databind.JavaType superClass, com.fasterxml.jackson.databind.JavaType[] superInterfaces) {\n        final int intCount = superInterfaces.length;\n        for (int i = 0; i < intCount; ++i) {\n            com.fasterxml.jackson.databind.JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);\n            if (result != null) {\n                return result;\n            }\n        }\n        return null;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromParamType(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.reflect.ParameterizedType ptype, com.fasterxml.jackson.databind.type.TypeBindings parentBindings) {\n        java.lang.Class<?> rawType = ((java.lang.Class<?>) (ptype.getRawType()));\n        if (rawType == com.fasterxml.jackson.databind.type.TypeFactory.CLS_ENUM) {\n            return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_ENUM;\n        }\n        if (rawType == com.fasterxml.jackson.databind.type.TypeFactory.CLS_COMPARABLE) {\n            return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_COMPARABLE;\n        }\n        if (rawType == com.fasterxml.jackson.databind.type.TypeFactory.CLS_CLASS) {\n            return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_CLASS;\n        }\n        java.lang.reflect.Type[] args = ptype.getActualTypeArguments();\n        int paramCount = (args == null) ? 0 : args.length;\n        com.fasterxml.jackson.databind.JavaType[] pt;\n        com.fasterxml.jackson.databind.type.TypeBindings newBindings;\n        if (paramCount == 0) {\n            newBindings = com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS;\n        } else {\n            pt = new com.fasterxml.jackson.databind.JavaType[paramCount];\n            for (int i = 0; i < paramCount; ++i) {\n                pt[i] = _fromAny(context, args[i], parentBindings);\n            }\n            newBindings = com.fasterxml.jackson.databind.type.TypeBindings.create(rawType, pt);\n        }\n        return _fromClass(context, rawType, newBindings);\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromArrayType(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.reflect.GenericArrayType type, com.fasterxml.jackson.databind.type.TypeBindings bindings) {\n        com.fasterxml.jackson.databind.JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);\n        return com.fasterxml.jackson.databind.type.ArrayType.construct(elementType, bindings);\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromVariable(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.reflect.TypeVariable<?> var, com.fasterxml.jackson.databind.type.TypeBindings bindings) {\n        final java.lang.String name = var.getName();\n        com.fasterxml.jackson.databind.JavaType type = bindings.findBoundType(name);\n        if (type != null) {\n            return type;\n        }\n        if (bindings.hasUnbound(name)) {\n            return com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_OBJECT;\n        }\n        bindings = bindings.withUnboundVariable(name);\n        java.lang.reflect.Type[] bounds = var.getBounds();\n        return _fromAny(context, bounds[0], bindings);\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType _fromWildcard(com.fasterxml.jackson.databind.type.ClassStack context, java.lang.reflect.WildcardType type, com.fasterxml.jackson.databind.type.TypeBindings bindings) {\n        return _fromAny(context, type.getUpperBounds()[0], bindings);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "key = rawType",
            "src_parent": "{\n    key = rawType;\n    result = _typeCache.get(key);\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    key = bindings.asKey(rawType);\n}",
            "src_parent": "if ((bindings == null) || bindings.isEmpty()) {\n    key = rawType;\n    result = _typeCache.get(key);\n} else {\n    key = bindings.asKey(rawType);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "result = _typeCache.get(key)",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(rawType);\n    if (result != null) {\n        return result;\n    }\n    final java.lang.Object key;\n    if ((bindings == null) || bindings.isEmpty()) {\n        key = rawType;\n        result = _typeCache.get(key);\n    } else {\n        key = bindings.asKey(rawType);\n    }\n    result = _typeCache.get(key);\n    if (result != null) {\n        return result;\n    }\n    if (context == null) {\n        context = new com.fasterxml.jackson.databind.type.ClassStack(rawType);\n    } else {\n        com.fasterxml.jackson.databind.type.ClassStack prev = context.find(rawType);\n        if (prev != null) {\n            com.fasterxml.jackson.databind.type.ResolvedRecursiveType selfRef = new com.fasterxml.jackson.databind.type.ResolvedRecursiveType(rawType, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n            prev.addSelfReference(selfRef);\n            return selfRef;\n        }\n        context = context.child(rawType);\n    }\n    if (rawType.isArray()) {\n        result = com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n    } else {\n        com.fasterxml.jackson.databind.JavaType superClass;\n        com.fasterxml.jackson.databind.JavaType[] superInterfaces;\n        if (rawType.isInterface()) {\n            superClass = null;\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        } else {\n            superClass = _resolveSuperClass(context, rawType, bindings);\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        }\n        if (rawType == java.util.Properties.class) {\n            result = com.fasterxml.jackson.databind.type.MapType.construct(rawType, bindings, superClass, superInterfaces, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING);\n        } else if (superClass != null) {\n            result = superClass.refine(rawType, bindings, superClass, superInterfaces);\n        }\n        if (result == null) {\n            result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n            if (result == null) {\n                result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                }\n            }\n        }\n    }\n    context.resolveSelfReferences(result);\n    _typeCache.putIfAbsent(key, result);\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "_typeCache.putIfAbsent(key, result)",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(rawType);\n    if (result != null) {\n        return result;\n    }\n    final java.lang.Object key;\n    if ((bindings == null) || bindings.isEmpty()) {\n        key = rawType;\n        result = _typeCache.get(key);\n    } else {\n        key = bindings.asKey(rawType);\n    }\n    result = _typeCache.get(key);\n    if (result != null) {\n        return result;\n    }\n    if (context == null) {\n        context = new com.fasterxml.jackson.databind.type.ClassStack(rawType);\n    } else {\n        com.fasterxml.jackson.databind.type.ClassStack prev = context.find(rawType);\n        if (prev != null) {\n            com.fasterxml.jackson.databind.type.ResolvedRecursiveType selfRef = new com.fasterxml.jackson.databind.type.ResolvedRecursiveType(rawType, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n            prev.addSelfReference(selfRef);\n            return selfRef;\n        }\n        context = context.child(rawType);\n    }\n    if (rawType.isArray()) {\n        result = com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n    } else {\n        com.fasterxml.jackson.databind.JavaType superClass;\n        com.fasterxml.jackson.databind.JavaType[] superInterfaces;\n        if (rawType.isInterface()) {\n            superClass = null;\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        } else {\n            superClass = _resolveSuperClass(context, rawType, bindings);\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        }\n        if (rawType == java.util.Properties.class) {\n            result = com.fasterxml.jackson.databind.type.MapType.construct(rawType, bindings, superClass, superInterfaces, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING);\n        } else if (superClass != null) {\n            result = superClass.refine(rawType, bindings, superClass, superInterfaces);\n        }\n        if (result == null) {\n            result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n            if (result == null) {\n                result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                }\n            }\n        }\n    }\n    context.resolveSelfReferences(result);\n    _typeCache.putIfAbsent(key, result);\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (cachable) {\n    _typeCache.putIfAbsent(rawType, result);\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(rawType);\n    if (result != null) {\n        return result;\n    }\n    boolean cachable = (bindings == null) || bindings.isEmpty();\n    if (cachable) {\n        result = _typeCache.get(rawType);\n        if (result != null) {\n            return result;\n        }\n    }\n    if (context == null) {\n        context = new com.fasterxml.jackson.databind.type.ClassStack(rawType);\n    } else {\n        com.fasterxml.jackson.databind.type.ClassStack prev = context.find(rawType);\n        if (prev != null) {\n            com.fasterxml.jackson.databind.type.ResolvedRecursiveType selfRef = new com.fasterxml.jackson.databind.type.ResolvedRecursiveType(rawType, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n            prev.addSelfReference(selfRef);\n            return selfRef;\n        }\n        context = context.child(rawType);\n    }\n    if (rawType.isArray()) {\n        result = com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n    } else {\n        com.fasterxml.jackson.databind.JavaType superClass;\n        com.fasterxml.jackson.databind.JavaType[] superInterfaces;\n        if (rawType.isInterface()) {\n            superClass = null;\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        } else {\n            superClass = _resolveSuperClass(context, rawType, bindings);\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        }\n        if (rawType == java.util.Properties.class) {\n            result = com.fasterxml.jackson.databind.type.MapType.construct(rawType, bindings, superClass, superInterfaces, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING);\n        } else if (superClass != null) {\n            result = superClass.refine(rawType, bindings, superClass, superInterfaces);\n        }\n        if (result == null) {\n            result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n            if (result == null) {\n                result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                }\n            }\n        }\n    }\n    context.resolveSelfReferences(result);\n    if (cachable) {\n        _typeCache.putIfAbsent(rawType, result);\n    }\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "cachable",
            "src_parent": "if (cachable) {\n    result = _typeCache.get(rawType);\n    if (result != null) {\n        return result;\n    }\n}",
            "src_parent_type": "If",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Do",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.fasterxml.jackson.databind.type.TypeBindings tb = null",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.TypeBindings tb = null;\n    if (baseType.containedTypeCount() == typeParamCount) {\n        if (typeParamCount == 1) {\n            tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0));\n        } else if (typeParamCount == 2) {\n            tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n        }\n    }\n    newType = _fromClass(null, subclass, tb == null ? com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings() : tb);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Do",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (baseType.containedTypeCount() == typeParamCount) {\n    if (typeParamCount == 1) {\n        tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0));\n    } else if (typeParamCount == 2) {\n        tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n    }\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.type.TypeBindings tb = null;\n    if (baseType.containedTypeCount() == typeParamCount) {\n        if (typeParamCount == 1) {\n            tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0));\n        } else if (typeParamCount == 2) {\n            tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n        }\n    }\n    newType = _fromClass(null, subclass, tb == null ? com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings() : tb);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
            "src_parent": "baseType.refine(subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings(), null, new com.fasterxml.jackson.databind.JavaType[]{ baseType })",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
            "src_parent": "baseType.refine(subclass, com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings(), baseType, com.fasterxml.jackson.databind.type.TypeFactory.NO_TYPES)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "tb == null ? com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings() : tb",
            "src_parent": "_fromClass(null, subclass, tb == null ? com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings() : tb)",
            "src_parent_type": "Invocation",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(bindings == null) || bindings.isEmpty()",
            "dst_parent": "boolean cachable = (bindings == null) || bindings.isEmpty()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(bindings == null) || bindings.isEmpty()",
            "src_parent": "if ((bindings == null) || bindings.isEmpty()) {\n    key = rawType;\n    result = _typeCache.get(key);\n} else {\n    key = bindings.asKey(rawType);\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (result != null) {\n    return result;\n}",
            "dst_parent": "{\n    result = _typeCache.get(rawType);\n    if (result != null) {\n        return result;\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (result != null) {\n    return result;\n}",
            "src_parent": "{\n    com.fasterxml.jackson.databind.JavaType result = _findWellKnownSimple(rawType);\n    if (result != null) {\n        return result;\n    }\n    final java.lang.Object key;\n    if ((bindings == null) || bindings.isEmpty()) {\n        key = rawType;\n        result = _typeCache.get(key);\n    } else {\n        key = bindings.asKey(rawType);\n    }\n    result = _typeCache.get(key);\n    if (result != null) {\n        return result;\n    }\n    if (context == null) {\n        context = new com.fasterxml.jackson.databind.type.ClassStack(rawType);\n    } else {\n        com.fasterxml.jackson.databind.type.ClassStack prev = context.find(rawType);\n        if (prev != null) {\n            com.fasterxml.jackson.databind.type.ResolvedRecursiveType selfRef = new com.fasterxml.jackson.databind.type.ResolvedRecursiveType(rawType, com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS);\n            prev.addSelfReference(selfRef);\n            return selfRef;\n        }\n        context = context.child(rawType);\n    }\n    if (rawType.isArray()) {\n        result = com.fasterxml.jackson.databind.type.ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings), bindings);\n    } else {\n        com.fasterxml.jackson.databind.JavaType superClass;\n        com.fasterxml.jackson.databind.JavaType[] superInterfaces;\n        if (rawType.isInterface()) {\n            superClass = null;\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        } else {\n            superClass = _resolveSuperClass(context, rawType, bindings);\n            superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);\n        }\n        if (rawType == java.util.Properties.class) {\n            result = com.fasterxml.jackson.databind.type.MapType.construct(rawType, bindings, superClass, superInterfaces, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING, com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING);\n        } else if (superClass != null) {\n            result = superClass.refine(rawType, bindings, superClass, superInterfaces);\n        }\n        if (result == null) {\n            result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces);\n            if (result == null) {\n                result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);\n                if (result == null) {\n                    result = _newSimpleType(rawType, bindings, superClass, superInterfaces);\n                }\n            }\n        }\n    }\n    context.resolveSelfReferences(result);\n    _typeCache.putIfAbsent(key, result);\n    return result;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "_typeCache",
            "dst_parent": "_typeCache.putIfAbsent(rawType, result)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "_typeCache",
            "src_parent": "_typeCache.putIfAbsent(key, result)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "rawType",
            "dst_parent": "_typeCache.putIfAbsent(rawType, result)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "key",
            "src_parent": "_typeCache.putIfAbsent(key, result)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "result",
            "dst_parent": "_typeCache.putIfAbsent(rawType, result)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "result",
            "src_parent": "_typeCache.putIfAbsent(key, result)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "baseType.containedTypeCount()",
            "dst_parent": "baseType.containedTypeCount() == typeParamCount",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "baseType.containedTypeCount()",
            "src_parent": "int baseCount = baseType.containedTypeCount()",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "typeParamCount == 1",
            "dst_parent": "if (typeParamCount == 1) {\n    tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0));\n} else if (typeParamCount == 2) {\n    tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "typeParamCount == 1",
            "src_parent": "if (typeParamCount == 1) {\n    return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0));\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
            "dst_parent": "tb == null ? com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings() : tb",
            "dst_parent_type": "Conditional",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
            "src_parent": "return com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0))",
            "dst_parent": "tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0))",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0))",
            "src_parent": "return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "typeParamCount == 2",
            "dst_parent": "if (typeParamCount == 2) {\n    tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "typeParamCount == 2",
            "src_parent": "if (typeParamCount == 2) {\n    return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1));\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1))",
            "dst_parent": "tb = com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1))",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1))",
            "src_parent": "return com.fasterxml.jackson.databind.type.TypeBindings.create(subclass, baseType.containedType(0), baseType.containedType(1))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "TypeFactory"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public java.lang.Object asKey(java.lang.Class<?> rawBase) {\n    return new com.fasterxml.jackson.databind.type.TypeBindings.AsKey(rawBase, _types, _hashCode);\n}",
            "src_parent": "public class TypeBindings implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final java.lang.String[] NO_STRINGS = new java.lang.String[0];\n\n    private static final com.fasterxml.jackson.databind.JavaType[] NO_TYPES = new com.fasterxml.jackson.databind.JavaType[0];\n\n    private static final com.fasterxml.jackson.databind.type.TypeBindings EMPTY = new com.fasterxml.jackson.databind.type.TypeBindings(com.fasterxml.jackson.databind.type.TypeBindings.NO_STRINGS, com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES, null);\n\n    private final java.lang.String[] _names;\n\n    private final com.fasterxml.jackson.databind.JavaType[] _types;\n\n    private final java.lang.String[] _unboundVariables;\n\n    private final int _hashCode;\n\n    private TypeBindings(java.lang.String[] names, com.fasterxml.jackson.databind.JavaType[] types, java.lang.String[] uvars) {\n        _names = (names == null) ? com.fasterxml.jackson.databind.type.TypeBindings.NO_STRINGS : names;\n        _types = (types == null) ? com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES : types;\n        if (_names.length != _types.length) {\n            throw new java.lang.IllegalArgumentException((((\"Mismatching names (\" + _names.length) + \"), types (\") + _types.length) + \")\");\n        }\n        int h = 1;\n        for (int i = 0, len = _types.length; i < len; ++i) {\n            h += _types[i].hashCode();\n        }\n        _unboundVariables = uvars;\n        _hashCode = h;\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings emptyBindings() {\n        return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n    }\n\n    protected java.lang.Object readResolve() {\n        if ((_names == null) || (_names.length == 0)) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n        }\n        return this;\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, java.util.List<com.fasterxml.jackson.databind.JavaType> typeList) {\n        com.fasterxml.jackson.databind.JavaType[] types = ((typeList == null) || typeList.isEmpty()) ? com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES : typeList.toArray(new com.fasterxml.jackson.databind.JavaType[typeList.size()]);\n        return com.fasterxml.jackson.databind.type.TypeBindings.create(erasedType, types);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType[] types) {\n        if (types == null) {\n            types = com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES;\n        } else {\n            switch (types.length) {\n                case 1 :\n                    return com.fasterxml.jackson.databind.type.TypeBindings.create(erasedType, types[0]);\n                case 2 :\n                    return com.fasterxml.jackson.databind.type.TypeBindings.create(erasedType, types[0], types[1]);\n            }\n        }\n        java.lang.reflect.TypeVariable<?>[] vars = erasedType.getTypeParameters();\n        java.lang.String[] names;\n        if ((vars == null) || (vars.length == 0)) {\n            names = com.fasterxml.jackson.databind.type.TypeBindings.NO_STRINGS;\n        } else {\n            int len = vars.length;\n            names = new java.lang.String[len];\n            for (int i = 0; i < len; ++i) {\n                names[i] = vars[i].getName();\n            }\n        }\n        if (names.length != types.length) {\n            throw new java.lang.IllegalArgumentException(((((((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with \") + types.length) + \" type parameter\") + (types.length == 1 ? \"\" : \"s\")) + \": class expects \") + names.length);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(names, types, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType typeArg1) {\n        java.lang.reflect.TypeVariable<?>[] vars = com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.paramsFor1(erasedType);\n        int varLen = (vars == null) ? 0 : vars.length;\n        if (varLen != 1) {\n            throw new java.lang.IllegalArgumentException(((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with 1 type parameter: class expects \") + varLen);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(new java.lang.String[]{ vars[0].getName() }, new com.fasterxml.jackson.databind.JavaType[]{ typeArg1 }, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType typeArg1, com.fasterxml.jackson.databind.JavaType typeArg2) {\n        java.lang.reflect.TypeVariable<?>[] vars = com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.paramsFor2(erasedType);\n        int varLen = (vars == null) ? 0 : vars.length;\n        if (varLen != 2) {\n            throw new java.lang.IllegalArgumentException(((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with 2 type parameters: class expects \") + varLen);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(new java.lang.String[]{ vars[0].getName(), vars[1].getName() }, new com.fasterxml.jackson.databind.JavaType[]{ typeArg1, typeArg2 }, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType typeArg1) {\n        java.lang.reflect.TypeVariable<?>[] vars = erasedType.getTypeParameters();\n        int varLen = (vars == null) ? 0 : vars.length;\n        if (varLen == 0) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n        }\n        if (varLen != 1) {\n            throw new java.lang.IllegalArgumentException(((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with 1 type parameter: class expects \") + varLen);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(new java.lang.String[]{ vars[0].getName() }, new com.fasterxml.jackson.databind.JavaType[]{ typeArg1 }, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType[] types) {\n        java.lang.reflect.TypeVariable<?>[] vars = erasedType.getTypeParameters();\n        if ((vars == null) || (vars.length == 0)) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n        }\n        if (types == null) {\n            types = com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES;\n        }\n        int len = vars.length;\n        java.lang.String[] names = new java.lang.String[len];\n        for (int i = 0; i < len; ++i) {\n            names[i] = vars[i].getName();\n        }\n        if (names.length != types.length) {\n            throw new java.lang.IllegalArgumentException(((((((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with \") + types.length) + \" type parameter\") + (types.length == 1 ? \"\" : \"s\")) + \": class expects \") + names.length);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(names, types, null);\n    }\n\n    public com.fasterxml.jackson.databind.type.TypeBindings withUnboundVariable(java.lang.String name) {\n        int len = (_unboundVariables == null) ? 0 : _unboundVariables.length;\n        java.lang.String[] names = (len == 0) ? new java.lang.String[1] : java.util.Arrays.copyOf(_unboundVariables, len + 1);\n        names[len] = name;\n        return new com.fasterxml.jackson.databind.type.TypeBindings(_names, _types, names);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType findBoundType(java.lang.String name) {\n        for (int i = 0, len = _names.length; i < len; ++i) {\n            if (name.equals(_names[i])) {\n                com.fasterxml.jackson.databind.JavaType t = _types[i];\n                if (t instanceof com.fasterxml.jackson.databind.type.ResolvedRecursiveType) {\n                    com.fasterxml.jackson.databind.type.ResolvedRecursiveType rrt = ((com.fasterxml.jackson.databind.type.ResolvedRecursiveType) (t));\n                    com.fasterxml.jackson.databind.JavaType t2 = rrt.getSelfReferencedType();\n                    if (t2 != null) {\n                        t = t2;\n                    } else {\n                    }\n                }\n                return t;\n            }\n        }\n        return null;\n    }\n\n    public boolean isEmpty() {\n        return _types.length == 0;\n    }\n\n    public int size() {\n        return _types.length;\n    }\n\n    public java.lang.String getBoundName(int index) {\n        if ((index < 0) || (index >= _names.length)) {\n            return null;\n        }\n        return _names[index];\n    }\n\n    public com.fasterxml.jackson.databind.JavaType getBoundType(int index) {\n        if ((index < 0) || (index >= _types.length)) {\n            return null;\n        }\n        return _types[index];\n    }\n\n    public java.util.List<com.fasterxml.jackson.databind.JavaType> getTypeParameters() {\n        if (_types.length == 0) {\n            return java.util.Collections.emptyList();\n        }\n        return java.util.Arrays.asList(_types);\n    }\n\n    public boolean hasUnbound(java.lang.String name) {\n        if (_unboundVariables != null) {\n            for (int i = _unboundVariables.length; (--i) >= 0;) {\n                if (name.equals(_unboundVariables[i])) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public java.lang.Object asKey(java.lang.Class<?> rawBase) {\n        return new com.fasterxml.jackson.databind.type.TypeBindings.AsKey(rawBase, _types, _hashCode);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        if (_types.length == 0) {\n            return \"<>\";\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append('<');\n        for (int i = 0, len = _types.length; i < len; ++i) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            java.lang.String sig = _types[i].getGenericSignature();\n            sb.append(sig);\n        }\n        sb.append('>');\n        return sb.toString();\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return _hashCode;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o == this) {\n            return true;\n        }\n        if ((o == null) || (o.getClass() != getClass())) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.type.TypeBindings other = ((com.fasterxml.jackson.databind.type.TypeBindings) (o));\n        int len = _types.length;\n        if (len != other.size()) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.JavaType[] otherTypes = other._types;\n        for (int i = 0; i < len; ++i) {\n            if (!otherTypes[i].equals(_types[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType[] typeParameterArray() {\n        return _types;\n    }\n\n    static class TypeParamStash {\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_ABSTRACT_LIST = java.util.AbstractList.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_COLLECTION = java.util.Collection.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_ITERABLE = java.lang.Iterable.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_LIST = java.util.List.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_ARRAY_LIST = java.util.ArrayList.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_MAP = java.util.Map.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_HASH_MAP = java.util.HashMap.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_LINKED_HASH_MAP = java.util.LinkedHashMap.class.getTypeParameters();\n\n        public static java.lang.reflect.TypeVariable<?>[] paramsFor1(java.lang.Class<?> erasedType) {\n            if (erasedType == java.util.Collection.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_COLLECTION;\n            }\n            if (erasedType == java.util.List.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_LIST;\n            }\n            if (erasedType == java.util.ArrayList.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_ARRAY_LIST;\n            }\n            if (erasedType == java.util.AbstractList.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_ABSTRACT_LIST;\n            }\n            if (erasedType == java.lang.Iterable.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_ITERABLE;\n            }\n            return erasedType.getTypeParameters();\n        }\n\n        public static java.lang.reflect.TypeVariable<?>[] paramsFor2(java.lang.Class<?> erasedType) {\n            if (erasedType == java.util.Map.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_MAP;\n            }\n            if (erasedType == java.util.HashMap.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_HASH_MAP;\n            }\n            if (erasedType == java.util.LinkedHashMap.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_LINKED_HASH_MAP;\n            }\n            return erasedType.getTypeParameters();\n        }\n    }\n\n    static final class AsKey {\n        private final java.lang.Class<?> _raw;\n\n        private final com.fasterxml.jackson.databind.JavaType[] _params;\n\n        private final int _hash;\n\n        public AsKey(java.lang.Class<?> raw, com.fasterxml.jackson.databind.JavaType[] params, int hash) {\n            _raw = raw;\n            _params = params;\n            _hash = hash;\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return _hash;\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o == null) {\n                return false;\n            }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n            com.fasterxml.jackson.databind.type.TypeBindings.AsKey other = ((com.fasterxml.jackson.databind.type.TypeBindings.AsKey) (o));\n            if ((_hash == other._hash) && (_raw == other._raw)) {\n                final com.fasterxml.jackson.databind.JavaType[] otherParams = other._params;\n                final int len = _params.length;\n                if (len == otherParams.length) {\n                    for (int i = 0; i < len; ++i) {\n                        if (!_params[i].equals(otherParams[i])) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return _raw.getName() + \"<>\";\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static final class AsKey {\n    private final java.lang.Class<?> _raw;\n\n    private final com.fasterxml.jackson.databind.JavaType[] _params;\n\n    private final int _hash;\n\n    public AsKey(java.lang.Class<?> raw, com.fasterxml.jackson.databind.JavaType[] params, int hash) {\n        _raw = raw;\n        _params = params;\n        _hash = hash;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return _hash;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o == this) {\n            return true;\n        }\n        if (o == null) {\n            return false;\n        }\n        if (o.getClass() != getClass()) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.type.TypeBindings.AsKey other = ((com.fasterxml.jackson.databind.type.TypeBindings.AsKey) (o));\n        if ((_hash == other._hash) && (_raw == other._raw)) {\n            final com.fasterxml.jackson.databind.JavaType[] otherParams = other._params;\n            final int len = _params.length;\n            if (len == otherParams.length) {\n                for (int i = 0; i < len; ++i) {\n                    if (!_params[i].equals(otherParams[i])) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        return _raw.getName() + \"<>\";\n    }\n}",
            "src_parent": "public class TypeBindings implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private static final java.lang.String[] NO_STRINGS = new java.lang.String[0];\n\n    private static final com.fasterxml.jackson.databind.JavaType[] NO_TYPES = new com.fasterxml.jackson.databind.JavaType[0];\n\n    private static final com.fasterxml.jackson.databind.type.TypeBindings EMPTY = new com.fasterxml.jackson.databind.type.TypeBindings(com.fasterxml.jackson.databind.type.TypeBindings.NO_STRINGS, com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES, null);\n\n    private final java.lang.String[] _names;\n\n    private final com.fasterxml.jackson.databind.JavaType[] _types;\n\n    private final java.lang.String[] _unboundVariables;\n\n    private final int _hashCode;\n\n    private TypeBindings(java.lang.String[] names, com.fasterxml.jackson.databind.JavaType[] types, java.lang.String[] uvars) {\n        _names = (names == null) ? com.fasterxml.jackson.databind.type.TypeBindings.NO_STRINGS : names;\n        _types = (types == null) ? com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES : types;\n        if (_names.length != _types.length) {\n            throw new java.lang.IllegalArgumentException((((\"Mismatching names (\" + _names.length) + \"), types (\") + _types.length) + \")\");\n        }\n        int h = 1;\n        for (int i = 0, len = _types.length; i < len; ++i) {\n            h += _types[i].hashCode();\n        }\n        _unboundVariables = uvars;\n        _hashCode = h;\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings emptyBindings() {\n        return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n    }\n\n    protected java.lang.Object readResolve() {\n        if ((_names == null) || (_names.length == 0)) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n        }\n        return this;\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, java.util.List<com.fasterxml.jackson.databind.JavaType> typeList) {\n        com.fasterxml.jackson.databind.JavaType[] types = ((typeList == null) || typeList.isEmpty()) ? com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES : typeList.toArray(new com.fasterxml.jackson.databind.JavaType[typeList.size()]);\n        return com.fasterxml.jackson.databind.type.TypeBindings.create(erasedType, types);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType[] types) {\n        if (types == null) {\n            types = com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES;\n        } else {\n            switch (types.length) {\n                case 1 :\n                    return com.fasterxml.jackson.databind.type.TypeBindings.create(erasedType, types[0]);\n                case 2 :\n                    return com.fasterxml.jackson.databind.type.TypeBindings.create(erasedType, types[0], types[1]);\n            }\n        }\n        java.lang.reflect.TypeVariable<?>[] vars = erasedType.getTypeParameters();\n        java.lang.String[] names;\n        if ((vars == null) || (vars.length == 0)) {\n            names = com.fasterxml.jackson.databind.type.TypeBindings.NO_STRINGS;\n        } else {\n            int len = vars.length;\n            names = new java.lang.String[len];\n            for (int i = 0; i < len; ++i) {\n                names[i] = vars[i].getName();\n            }\n        }\n        if (names.length != types.length) {\n            throw new java.lang.IllegalArgumentException(((((((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with \") + types.length) + \" type parameter\") + (types.length == 1 ? \"\" : \"s\")) + \": class expects \") + names.length);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(names, types, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType typeArg1) {\n        java.lang.reflect.TypeVariable<?>[] vars = com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.paramsFor1(erasedType);\n        int varLen = (vars == null) ? 0 : vars.length;\n        if (varLen != 1) {\n            throw new java.lang.IllegalArgumentException(((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with 1 type parameter: class expects \") + varLen);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(new java.lang.String[]{ vars[0].getName() }, new com.fasterxml.jackson.databind.JavaType[]{ typeArg1 }, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings create(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType typeArg1, com.fasterxml.jackson.databind.JavaType typeArg2) {\n        java.lang.reflect.TypeVariable<?>[] vars = com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.paramsFor2(erasedType);\n        int varLen = (vars == null) ? 0 : vars.length;\n        if (varLen != 2) {\n            throw new java.lang.IllegalArgumentException(((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with 2 type parameters: class expects \") + varLen);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(new java.lang.String[]{ vars[0].getName(), vars[1].getName() }, new com.fasterxml.jackson.databind.JavaType[]{ typeArg1, typeArg2 }, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType typeArg1) {\n        java.lang.reflect.TypeVariable<?>[] vars = erasedType.getTypeParameters();\n        int varLen = (vars == null) ? 0 : vars.length;\n        if (varLen == 0) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n        }\n        if (varLen != 1) {\n            throw new java.lang.IllegalArgumentException(((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with 1 type parameter: class expects \") + varLen);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(new java.lang.String[]{ vars[0].getName() }, new com.fasterxml.jackson.databind.JavaType[]{ typeArg1 }, null);\n    }\n\n    public static com.fasterxml.jackson.databind.type.TypeBindings createIfNeeded(java.lang.Class<?> erasedType, com.fasterxml.jackson.databind.JavaType[] types) {\n        java.lang.reflect.TypeVariable<?>[] vars = erasedType.getTypeParameters();\n        if ((vars == null) || (vars.length == 0)) {\n            return com.fasterxml.jackson.databind.type.TypeBindings.EMPTY;\n        }\n        if (types == null) {\n            types = com.fasterxml.jackson.databind.type.TypeBindings.NO_TYPES;\n        }\n        int len = vars.length;\n        java.lang.String[] names = new java.lang.String[len];\n        for (int i = 0; i < len; ++i) {\n            names[i] = vars[i].getName();\n        }\n        if (names.length != types.length) {\n            throw new java.lang.IllegalArgumentException(((((((\"Can not create TypeBindings for class \" + erasedType.getName()) + \" with \") + types.length) + \" type parameter\") + (types.length == 1 ? \"\" : \"s\")) + \": class expects \") + names.length);\n        }\n        return new com.fasterxml.jackson.databind.type.TypeBindings(names, types, null);\n    }\n\n    public com.fasterxml.jackson.databind.type.TypeBindings withUnboundVariable(java.lang.String name) {\n        int len = (_unboundVariables == null) ? 0 : _unboundVariables.length;\n        java.lang.String[] names = (len == 0) ? new java.lang.String[1] : java.util.Arrays.copyOf(_unboundVariables, len + 1);\n        names[len] = name;\n        return new com.fasterxml.jackson.databind.type.TypeBindings(_names, _types, names);\n    }\n\n    public com.fasterxml.jackson.databind.JavaType findBoundType(java.lang.String name) {\n        for (int i = 0, len = _names.length; i < len; ++i) {\n            if (name.equals(_names[i])) {\n                com.fasterxml.jackson.databind.JavaType t = _types[i];\n                if (t instanceof com.fasterxml.jackson.databind.type.ResolvedRecursiveType) {\n                    com.fasterxml.jackson.databind.type.ResolvedRecursiveType rrt = ((com.fasterxml.jackson.databind.type.ResolvedRecursiveType) (t));\n                    com.fasterxml.jackson.databind.JavaType t2 = rrt.getSelfReferencedType();\n                    if (t2 != null) {\n                        t = t2;\n                    } else {\n                    }\n                }\n                return t;\n            }\n        }\n        return null;\n    }\n\n    public boolean isEmpty() {\n        return _types.length == 0;\n    }\n\n    public int size() {\n        return _types.length;\n    }\n\n    public java.lang.String getBoundName(int index) {\n        if ((index < 0) || (index >= _names.length)) {\n            return null;\n        }\n        return _names[index];\n    }\n\n    public com.fasterxml.jackson.databind.JavaType getBoundType(int index) {\n        if ((index < 0) || (index >= _types.length)) {\n            return null;\n        }\n        return _types[index];\n    }\n\n    public java.util.List<com.fasterxml.jackson.databind.JavaType> getTypeParameters() {\n        if (_types.length == 0) {\n            return java.util.Collections.emptyList();\n        }\n        return java.util.Arrays.asList(_types);\n    }\n\n    public boolean hasUnbound(java.lang.String name) {\n        if (_unboundVariables != null) {\n            for (int i = _unboundVariables.length; (--i) >= 0;) {\n                if (name.equals(_unboundVariables[i])) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public java.lang.Object asKey(java.lang.Class<?> rawBase) {\n        return new com.fasterxml.jackson.databind.type.TypeBindings.AsKey(rawBase, _types, _hashCode);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        if (_types.length == 0) {\n            return \"<>\";\n        }\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append('<');\n        for (int i = 0, len = _types.length; i < len; ++i) {\n            if (i > 0) {\n                sb.append(',');\n            }\n            java.lang.String sig = _types[i].getGenericSignature();\n            sb.append(sig);\n        }\n        sb.append('>');\n        return sb.toString();\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return _hashCode;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (o == this) {\n            return true;\n        }\n        if ((o == null) || (o.getClass() != getClass())) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.type.TypeBindings other = ((com.fasterxml.jackson.databind.type.TypeBindings) (o));\n        int len = _types.length;\n        if (len != other.size()) {\n            return false;\n        }\n        com.fasterxml.jackson.databind.JavaType[] otherTypes = other._types;\n        for (int i = 0; i < len; ++i) {\n            if (!otherTypes[i].equals(_types[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType[] typeParameterArray() {\n        return _types;\n    }\n\n    static class TypeParamStash {\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_ABSTRACT_LIST = java.util.AbstractList.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_COLLECTION = java.util.Collection.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_ITERABLE = java.lang.Iterable.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_LIST = java.util.List.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_ARRAY_LIST = java.util.ArrayList.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_MAP = java.util.Map.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_HASH_MAP = java.util.HashMap.class.getTypeParameters();\n\n        private static final java.lang.reflect.TypeVariable<?>[] VARS_LINKED_HASH_MAP = java.util.LinkedHashMap.class.getTypeParameters();\n\n        public static java.lang.reflect.TypeVariable<?>[] paramsFor1(java.lang.Class<?> erasedType) {\n            if (erasedType == java.util.Collection.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_COLLECTION;\n            }\n            if (erasedType == java.util.List.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_LIST;\n            }\n            if (erasedType == java.util.ArrayList.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_ARRAY_LIST;\n            }\n            if (erasedType == java.util.AbstractList.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_ABSTRACT_LIST;\n            }\n            if (erasedType == java.lang.Iterable.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_ITERABLE;\n            }\n            return erasedType.getTypeParameters();\n        }\n\n        public static java.lang.reflect.TypeVariable<?>[] paramsFor2(java.lang.Class<?> erasedType) {\n            if (erasedType == java.util.Map.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_MAP;\n            }\n            if (erasedType == java.util.HashMap.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_HASH_MAP;\n            }\n            if (erasedType == java.util.LinkedHashMap.class) {\n                return com.fasterxml.jackson.databind.type.TypeBindings.TypeParamStash.VARS_LINKED_HASH_MAP;\n            }\n            return erasedType.getTypeParameters();\n        }\n    }\n\n    static final class AsKey {\n        private final java.lang.Class<?> _raw;\n\n        private final com.fasterxml.jackson.databind.JavaType[] _params;\n\n        private final int _hash;\n\n        public AsKey(java.lang.Class<?> raw, com.fasterxml.jackson.databind.JavaType[] params, int hash) {\n            _raw = raw;\n            _params = params;\n            _hash = hash;\n        }\n\n        @java.lang.Override\n        public int hashCode() {\n            return _hash;\n        }\n\n        @java.lang.Override\n        public boolean equals(java.lang.Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o == null) {\n                return false;\n            }\n            if (o.getClass() != getClass()) {\n                return false;\n            }\n            com.fasterxml.jackson.databind.type.TypeBindings.AsKey other = ((com.fasterxml.jackson.databind.type.TypeBindings.AsKey) (o));\n            if ((_hash == other._hash) && (_raw == other._raw)) {\n                final com.fasterxml.jackson.databind.JavaType[] otherParams = other._params;\n                final int len = _params.length;\n                if (len == otherParams.length) {\n                    for (int i = 0; i < len; ++i) {\n                        if (!_params[i].equals(otherParams[i])) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        @java.lang.Override\n        public java.lang.String toString() {\n            return _raw.getName() + \"<>\";\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        }
      ],
      "file_name": "TypeBindings"
    }
  ],
  "id": "JacksonDatabind_53"
}