{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Throw",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Try",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (signatureLength >= 512) {\n    try {\n        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tais = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(new java.io.ByteArrayInputStream(tarheader));\n        tais.getNextEntry();\n        return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n    } catch (java.lang.Exception e) {\n    }\n}",
            "src_parent": "{\n    int signatureLength = in.read(signature);\n    in.reset();\n    if (org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(in);\n    } else if (org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(in);\n    } else if (org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.ar.ArArchiveInputStream(in);\n    } else if (org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(in);\n    }\n    final byte[] dumpsig = new byte[32];\n    in.mark(dumpsig.length);\n    signatureLength = in.read(dumpsig);\n    in.reset();\n    if (org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n        return new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream(in);\n    }\n    final byte[] tarheader = new byte[512];\n    in.mark(tarheader.length);\n    signatureLength = in.read(tarheader);\n    in.reset();\n    if (org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(tarheader, signatureLength)) {\n        return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n    }\n    if (signatureLength >= 512) {\n        try {\n            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tais = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(new java.io.ByteArrayInputStream(tarheader));\n            tais.getNextEntry();\n            return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n        } catch (java.lang.Exception e) {\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Try",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "try {\n    org.apache.commons.compress.archivers.tar.TarArchiveInputStream tais = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(new java.io.ByteArrayInputStream(tarheader));\n    tais.getNextEntry();\n    return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n} catch (java.lang.Exception e) {\n}",
            "dst_parent": "{\n    int signatureLength = in.read(signature);\n    in.reset();\n    if (org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(in);\n    } else if (org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(in);\n    } else if (org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.ar.ArArchiveInputStream(in);\n    } else if (org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(signature, signatureLength)) {\n        return new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(in);\n    }\n    final byte[] dumpsig = new byte[32];\n    in.mark(dumpsig.length);\n    signatureLength = in.read(dumpsig);\n    in.reset();\n    if (org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n        return new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream(in);\n    }\n    final byte[] tarheader = new byte[512];\n    in.mark(tarheader.length);\n    signatureLength = in.read(tarheader);\n    in.reset();\n    if (org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(tarheader, signatureLength)) {\n        return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n    }\n    try {\n        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tais = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(new java.io.ByteArrayInputStream(tarheader));\n        tais.getNextEntry();\n        return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n    } catch (java.lang.Exception e) {\n    }\n}",
            "dst_parent_type": "Block",
            "dst_type": "Try",
            "operator": "MOV",
            "src": "try {\n    org.apache.commons.compress.archivers.tar.TarArchiveInputStream tais = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(new java.io.ByteArrayInputStream(tarheader));\n    tais.getNextEntry();\n    return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n} catch (java.lang.Exception e) {\n}",
            "src_parent": "{\n    try {\n        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tais = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(new java.io.ByteArrayInputStream(tarheader));\n        tais.getNextEntry();\n        return new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(in);\n    } catch (java.lang.Exception e) {\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Try"
          }
        }
      ],
      "file_name": "ArchiveStreamFactory"
    }
  ],
  "id": "Compress_11"
}