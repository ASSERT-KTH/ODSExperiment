{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "max = java.lang.Math.max(max, java.lang.Math.abs(a))",
            "src_parent": "{\n    max = java.lang.Math.max(max, java.lang.Math.abs(a));\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "max += java.lang.Math.max(max, java.lang.Math.abs(a))",
            "src_parent": "{\n    max += java.lang.Math.max(max, java.lang.Math.abs(a));\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Math.max(max, java.lang.Math.abs(a))",
            "dst_parent": "max += java.lang.Math.max(max, java.lang.Math.abs(a))",
            "dst_parent_type": "OperatorAssignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "java.lang.Math.max(max, java.lang.Math.abs(a))",
            "src_parent": "max = java.lang.Math.max(max, java.lang.Math.abs(a))",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "ArrayRealVector"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "public double getLInfNorm() {\n    double max = 0;\n    org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n    while (iter.hasNext()) {\n        iter.advance();\n        max += iter.value();\n    } \n    return max;\n}",
            "src_parent": "public class OpenMapRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable , org.apache.commons.math.linear.SparseRealVector {\n    public static final double DEFAULT_ZERO_TOLERANCE = 1.0E-12;\n\n    private static final long serialVersionUID = 8772222695580707260L;\n\n    private final org.apache.commons.math.util.OpenIntToDoubleHashMap entries;\n\n    private final int virtualSize;\n\n    private double epsilon;\n\n    public OpenMapRealVector() {\n        this(0, org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE);\n    }\n\n    public OpenMapRealVector(int dimension) {\n        this(dimension, org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE);\n    }\n\n    public OpenMapRealVector(int dimension, double epsilon) {\n        virtualSize = dimension;\n        entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);\n        this.epsilon = epsilon;\n    }\n\n    protected OpenMapRealVector(org.apache.commons.math.linear.OpenMapRealVector v, int resize) {\n        virtualSize = v.getDimension() + resize;\n        entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(v.entries);\n        epsilon = v.epsilon;\n    }\n\n    public OpenMapRealVector(int dimension, int expectedSize) {\n        this(dimension, expectedSize, org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE);\n    }\n\n    public OpenMapRealVector(int dimension, int expectedSize, double epsilon) {\n        virtualSize = dimension;\n        entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(expectedSize, 0.0);\n        this.epsilon = epsilon;\n    }\n\n    public OpenMapRealVector(double[] values) {\n        this(values, org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE);\n    }\n\n    public OpenMapRealVector(double[] values, double epsilon) {\n        virtualSize = values.length;\n        entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);\n        this.epsilon = epsilon;\n        for (int key = 0; key < values.length; key++) {\n            double value = values[key];\n            if (!isDefaultValue(value)) {\n                entries.put(key, value);\n            }\n        }\n    }\n\n    public OpenMapRealVector(java.lang.Double[] values) {\n        this(values, org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE);\n    }\n\n    public OpenMapRealVector(java.lang.Double[] values, double epsilon) {\n        virtualSize = values.length;\n        entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);\n        this.epsilon = epsilon;\n        for (int key = 0; key < values.length; key++) {\n            double value = values[key].doubleValue();\n            if (!isDefaultValue(value)) {\n                entries.put(key, value);\n            }\n        }\n    }\n\n    public OpenMapRealVector(org.apache.commons.math.linear.OpenMapRealVector v) {\n        virtualSize = v.getDimension();\n        entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(v.getEntries());\n        epsilon = v.epsilon;\n    }\n\n    public OpenMapRealVector(org.apache.commons.math.linear.RealVector v) {\n        virtualSize = v.getDimension();\n        entries = new org.apache.commons.math.util.OpenIntToDoubleHashMap(0.0);\n        epsilon = org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE;\n        for (int key = 0; key < virtualSize; key++) {\n            double value = v.getEntry(key);\n            if (!isDefaultValue(value)) {\n                entries.put(key, value);\n            }\n        }\n    }\n\n    private org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries() {\n        return entries;\n    }\n\n    protected boolean isDefaultValue(double value) {\n        return java.lang.Math.abs(value) < epsilon;\n    }\n\n    public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        if (v instanceof org.apache.commons.math.linear.OpenMapRealVector) {\n            return add(((org.apache.commons.math.linear.OpenMapRealVector) (v)));\n        } else {\n            return super.add(v);\n        }\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector add(org.apache.commons.math.linear.OpenMapRealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        boolean copyThis = entries.size() > v.entries.size();\n        org.apache.commons.math.linear.OpenMapRealVector res = (copyThis) ? this.copy() : v.copy();\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = (copyThis) ? v.entries.iterator() : entries.iterator();\n        org.apache.commons.math.util.OpenIntToDoubleHashMap randomAccess = (copyThis) ? entries : v.entries;\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (randomAccess.containsKey(key)) {\n                res.setEntry(key, randomAccess.get(key) + iter.value());\n            } else {\n                res.setEntry(key, iter.value());\n            }\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector append(org.apache.commons.math.linear.OpenMapRealVector v) {\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this, v.getDimension());\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = v.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key() + virtualSize, iter.value());\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector append(org.apache.commons.math.linear.RealVector v) {\n        if (v instanceof org.apache.commons.math.linear.OpenMapRealVector) {\n            return append(((org.apache.commons.math.linear.OpenMapRealVector) (v)));\n        }\n        return append(v.getData());\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector append(double d) {\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this, 1);\n        res.setEntry(virtualSize, d);\n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector append(double[] a) {\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this, a.length);\n        for (int i = 0; i < a.length; i++) {\n            res.setEntry(i + virtualSize, a[i]);\n        }\n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector copy() {\n        return new org.apache.commons.math.linear.OpenMapRealVector(this);\n    }\n\n    public double dotProduct(org.apache.commons.math.linear.OpenMapRealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        boolean thisIsSmaller = entries.size() < v.entries.size();\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = (thisIsSmaller) ? entries.iterator() : v.entries.iterator();\n        org.apache.commons.math.util.OpenIntToDoubleHashMap larger = (thisIsSmaller) ? v.entries : entries;\n        double d = 0;\n        while (iter.hasNext()) {\n            iter.advance();\n            d += iter.value() * larger.get(iter.key());\n        } \n        return d;\n    }\n\n    public double dotProduct(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        if (v instanceof org.apache.commons.math.linear.OpenMapRealVector) {\n            return dotProduct(((org.apache.commons.math.linear.OpenMapRealVector) (v)));\n        } else {\n            return super.dotProduct(v);\n        }\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector ebeDivide(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this);\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector ebeDivide(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this);\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector ebeMultiply(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this);\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector ebeMultiply(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this);\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = res.entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector getSubVector(int index, int n) throws org.apache.commons.math.linear.MatrixIndexException {\n        checkIndex(index);\n        checkIndex((index + n) - 1);\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(n);\n        int end = index + n;\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if ((key >= index) && (key < end)) {\n                res.setEntry(key - index, iter.value());\n            }\n        } \n        return res;\n    }\n\n    public double[] getData() {\n        double[] res = new double[virtualSize];\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            res[iter.key()] = iter.value();\n        } \n        return res;\n    }\n\n    public int getDimension() {\n        return virtualSize;\n    }\n\n    public double getDistance(org.apache.commons.math.linear.OpenMapRealVector v) throws java.lang.IllegalArgumentException {\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        double res = 0;\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            double delta;\n            delta = iter.value() - v.getEntry(key);\n            res += delta * delta;\n        } \n        iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (!entries.containsKey(key)) {\n                final double value = iter.value();\n                res += value * value;\n            }\n        } \n        return java.lang.Math.sqrt(res);\n    }\n\n    public double getDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        if (v instanceof org.apache.commons.math.linear.OpenMapRealVector) {\n            return getDistance(((org.apache.commons.math.linear.OpenMapRealVector) (v)));\n        }\n        return getDistance(v.getData());\n    }\n\n    public double getDistance(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        double res = 0;\n        for (int i = 0; i < v.length; i++) {\n            double delta = entries.get(i) - v[i];\n            res += delta * delta;\n        }\n        return java.lang.Math.sqrt(res);\n    }\n\n    public double getEntry(int index) throws org.apache.commons.math.linear.MatrixIndexException {\n        checkIndex(index);\n        return entries.get(index);\n    }\n\n    public double getL1Distance(org.apache.commons.math.linear.OpenMapRealVector v) {\n        double max = 0;\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            double delta = java.lang.Math.abs(iter.value() - v.getEntry(iter.key()));\n            max += delta;\n        } \n        iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (!entries.containsKey(key)) {\n                double delta = java.lang.Math.abs(iter.value());\n                max += java.lang.Math.abs(delta);\n            }\n        } \n        return max;\n    }\n\n    public double getL1Distance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        if (v instanceof org.apache.commons.math.linear.OpenMapRealVector) {\n            return getL1Distance(((org.apache.commons.math.linear.OpenMapRealVector) (v)));\n        }\n        return getL1Distance(v.getData());\n    }\n\n    public double getL1Distance(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        double max = 0;\n        for (int i = 0; i < v.length; i++) {\n            double delta = java.lang.Math.abs(getEntry(i) - v[i]);\n            max += delta;\n        }\n        return max;\n    }\n\n    public double getLInfNorm() {\n        double max = 0;\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            max += iter.value();\n        } \n        return max;\n    }\n\n    private double getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector v) {\n        double max = 0;\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            double delta = java.lang.Math.abs(iter.value() - v.getEntry(iter.key()));\n            if (delta > max) {\n                max = delta;\n            }\n        } \n        iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (!entries.containsKey(key)) {\n                if (iter.value() > max) {\n                    max = iter.value();\n                }\n            }\n        } \n        return max;\n    }\n\n    public double getLInfDistance(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        if (v instanceof org.apache.commons.math.linear.OpenMapRealVector) {\n            return getLInfDistance(((org.apache.commons.math.linear.OpenMapRealVector) (v)));\n        }\n        return getLInfDistance(v.getData());\n    }\n\n    public double getLInfDistance(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        double max = 0;\n        for (int i = 0; i < v.length; i++) {\n            double delta = java.lang.Math.abs(getEntry(i) - v[i]);\n            if (delta > max) {\n                max = delta;\n            }\n        }\n        return max;\n    }\n\n    public boolean isInfinite() {\n        boolean infiniteFound = false;\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            final double value = iter.value();\n            if (java.lang.Double.isNaN(value)) {\n                return false;\n            }\n            if (java.lang.Double.isInfinite(value)) {\n                infiniteFound = true;\n            }\n        } \n        return infiniteFound;\n    }\n\n    public boolean isNaN() {\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            if (java.lang.Double.isNaN(iter.value())) {\n                return true;\n            }\n        } \n        return false;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector mapAdd(double d) {\n        return copy().mapAddToSelf(d);\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector mapAddToSelf(double d) {\n        for (int i = 0; i < virtualSize; i++) {\n            setEntry(i, getEntry(i) + d);\n        }\n        return this;\n    }\n\n    public org.apache.commons.math.linear.RealMatrix outerProduct(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        org.apache.commons.math.linear.RealMatrix res = new org.apache.commons.math.linear.OpenMapRealMatrix(virtualSize, virtualSize);\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int row = iter.key();\n            double value = iter.value();\n            for (int col = 0; col < virtualSize; col++) {\n                res.setEntry(row, col, value * v[col]);\n            }\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector projection(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        return ((org.apache.commons.math.linear.OpenMapRealVector) (projection(new org.apache.commons.math.linear.OpenMapRealVector(v))));\n    }\n\n    public void setEntry(int index, double value) throws org.apache.commons.math.linear.MatrixIndexException {\n        checkIndex(index);\n        if (!isDefaultValue(value)) {\n            entries.put(index, value);\n        } else if (entries.containsKey(index)) {\n            entries.remove(index);\n        }\n    }\n\n    public void setSubVector(int index, org.apache.commons.math.linear.RealVector v) throws org.apache.commons.math.linear.MatrixIndexException {\n        checkIndex(index);\n        checkIndex((index + v.getDimension()) - 1);\n        setSubVector(index, v.getData());\n    }\n\n    public void setSubVector(int index, double[] v) throws org.apache.commons.math.linear.MatrixIndexException {\n        checkIndex(index);\n        checkIndex((index + v.length) - 1);\n        for (int i = 0; i < v.length; i++) {\n            setEntry(i + index, v[i]);\n        }\n    }\n\n    public void set(double value) {\n        for (int i = 0; i < virtualSize; i++) {\n            setEntry(i, value);\n        }\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector subtract(org.apache.commons.math.linear.OpenMapRealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        org.apache.commons.math.linear.OpenMapRealVector res = copy();\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = v.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            int key = iter.key();\n            if (entries.containsKey(key)) {\n                res.setEntry(key, entries.get(key) - iter.value());\n            } else {\n                res.setEntry(key, -iter.value());\n            }\n        } \n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector subtract(org.apache.commons.math.linear.RealVector v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.getDimension());\n        if (v instanceof org.apache.commons.math.linear.OpenMapRealVector) {\n            return subtract(((org.apache.commons.math.linear.OpenMapRealVector) (v)));\n        }\n        return subtract(v.getData());\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector subtract(double[] v) throws java.lang.IllegalArgumentException {\n        checkVectorDimensions(v.length);\n        org.apache.commons.math.linear.OpenMapRealVector res = new org.apache.commons.math.linear.OpenMapRealVector(this);\n        for (int i = 0; i < v.length; i++) {\n            if (entries.containsKey(i)) {\n                res.setEntry(i, entries.get(i) - v[i]);\n            } else {\n                res.setEntry(i, -v[i]);\n            }\n        }\n        return res;\n    }\n\n    public org.apache.commons.math.linear.OpenMapRealVector unitVector() {\n        org.apache.commons.math.linear.OpenMapRealVector res = copy();\n        res.unitize();\n        return res;\n    }\n\n    public void unitize() {\n        double norm = getNorm();\n        if (isDefaultValue(norm)) {\n            throw org.apache.commons.math.MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\");\n        }\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            entries.put(iter.key(), iter.value() / norm);\n        } \n    }\n\n    public double[] toArray() {\n        return getData();\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        long temp;\n        temp = java.lang.Double.doubleToLongBits(epsilon);\n        result = (prime * result) + ((int) (temp ^ (temp >>> 32)));\n        result = (prime * result) + virtualSize;\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            temp = java.lang.Double.doubleToLongBits(iter.value());\n            result = (prime * result) + ((int) (temp ^ (temp >> 32)));\n        } \n        return result;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (!(obj instanceof org.apache.commons.math.linear.OpenMapRealVector)) {\n            return false;\n        }\n        org.apache.commons.math.linear.OpenMapRealVector other = ((org.apache.commons.math.linear.OpenMapRealVector) (obj));\n        if (virtualSize != other.virtualSize) {\n            return false;\n        }\n        if (java.lang.Double.doubleToLongBits(epsilon) != java.lang.Double.doubleToLongBits(other.epsilon)) {\n            return false;\n        }\n        org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            double test = other.getEntry(iter.key());\n            if (java.lang.Double.doubleToLongBits(test) != java.lang.Double.doubleToLongBits(iter.value())) {\n                return false;\n            }\n        } \n        iter = other.getEntries().iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            double test = iter.value();\n            if (java.lang.Double.doubleToLongBits(test) != java.lang.Double.doubleToLongBits(getEntry(iter.key()))) {\n                return false;\n            }\n        } \n        return true;\n    }\n\n    public double getSparcity() {\n        return ((double) (entries.size())) / ((double) (getDimension()));\n    }\n\n    public java.util.Iterator<org.apache.commons.math.linear.Entry> sparseIterator() {\n        return new org.apache.commons.math.linear.OpenMapRealVector.OpenMapSparseIterator();\n    }\n\n    protected class OpenMapEntry extends org.apache.commons.math.linear.Entry {\n        private final org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter;\n\n        protected OpenMapEntry(org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter) {\n            this.iter = iter;\n        }\n\n        @java.lang.Override\n        public double getValue() {\n            return iter.value();\n        }\n\n        @java.lang.Override\n        public void setValue(double value) {\n            entries.put(iter.key(), value);\n        }\n\n        @java.lang.Override\n        public int getIndex() {\n            return iter.key();\n        }\n    }\n\n    protected class OpenMapSparseIterator implements java.util.Iterator<org.apache.commons.math.linear.Entry> {\n        private final org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator iter;\n\n        private final org.apache.commons.math.linear.Entry current;\n\n        protected OpenMapSparseIterator() {\n            iter = entries.iterator();\n            current = new org.apache.commons.math.linear.OpenMapRealVector.OpenMapEntry(iter);\n        }\n\n        public boolean hasNext() {\n            return iter.hasNext();\n        }\n\n        public org.apache.commons.math.linear.Entry next() {\n            iter.advance();\n            return current;\n        }\n\n        public void remove() {\n            throw new java.lang.UnsupportedOperationException(\"Not supported\");\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "OpenMapRealVector"
    }
  ],
  "id": "Math_77"
}