{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int",
            "dst_parent": "int position = indexOfVararg",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.Object",
            "src_parent": "java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg]",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "matchers.size()",
            "dst_parent": "position < matchers.size()",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "java.lang.reflect.Array.getLength(rawArgument)",
            "src_parent": "i < java.lang.reflect.Array.getLength(rawArgument)",
            "src_parent_type": "BinaryOperator",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "position",
            "dst_parent": "position++",
            "dst_parent_type": "UnaryOperator",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "i",
            "src_parent": "i++",
            "src_parent_type": "UnaryOperator",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg]",
            "src_parent": "{\n    java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n    for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n    ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n}",
            "src_parent": "{\n    java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n    for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (org.hamcrest.Matcher m : uniqueMatcherSet(indexOfVararg)) {\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n            for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n                ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n            }\n        }\n    }\n}",
            "src_parent": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (org.hamcrest.Matcher m : uniqueMatcherSet(indexOfVararg)) {\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n            for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n                ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n            }\n        }\n    }\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private java.util.Set<org.hamcrest.Matcher> uniqueMatcherSet(int indexOfVararg) {\n    java.util.HashSet<org.hamcrest.Matcher> set = new java.util.HashSet<org.hamcrest.Matcher>();\n    for (int position = indexOfVararg; position < matchers.size(); position++) {\n        org.hamcrest.Matcher matcher = matchers.get(position);\n        if (matcher instanceof org.mockito.internal.matchers.MatcherDecorator) {\n            set.add(((org.mockito.internal.matchers.MatcherDecorator) (matcher)).getActualMatcher());\n        } else {\n            set.add(matcher);\n        }\n    }\n    return set;\n}",
            "src_parent": "@java.lang.SuppressWarnings(\"unchecked\")\npublic class InvocationMatcher implements java.io.Serializable , org.mockito.internal.invocation.CapturesArgumensFromInvocation , org.mockito.invocation.DescribedInvocation {\n    private static final long serialVersionUID = -3047126096857467610L;\n\n    private final org.mockito.invocation.Invocation invocation;\n\n    private final java.util.List<org.hamcrest.Matcher> matchers;\n\n    public InvocationMatcher(org.mockito.invocation.Invocation invocation, java.util.List<org.hamcrest.Matcher> matchers) {\n        this.invocation = invocation;\n        if (matchers.isEmpty()) {\n            this.matchers = org.mockito.internal.invocation.ArgumentsProcessor.argumentsToMatchers(invocation.getArguments());\n        } else {\n            this.matchers = matchers;\n        }\n    }\n\n    public InvocationMatcher(org.mockito.invocation.Invocation invocation) {\n        this(invocation, java.util.Collections.<org.hamcrest.Matcher>emptyList());\n    }\n\n    public java.lang.reflect.Method getMethod() {\n        return invocation.getMethod();\n    }\n\n    public org.mockito.invocation.Invocation getInvocation() {\n        return this.invocation;\n    }\n\n    public java.util.List<org.hamcrest.Matcher> getMatchers() {\n        return this.matchers;\n    }\n\n    public java.lang.String toString() {\n        return new org.mockito.internal.reporting.PrintSettings().print(matchers, invocation);\n    }\n\n    public boolean matches(org.mockito.invocation.Invocation actual) {\n        return (invocation.getMock().equals(actual.getMock()) && hasSameMethod(actual)) && new org.mockito.internal.invocation.ArgumentsComparator().argumentsMatch(this, actual);\n    }\n\n    private boolean safelyArgumentsMatch(java.lang.Object[] actualArgs) {\n        try {\n            return new org.mockito.internal.invocation.ArgumentsComparator().argumentsMatch(this, actualArgs);\n        } catch (java.lang.Throwable t) {\n            return false;\n        }\n    }\n\n    public boolean hasSimilarMethod(org.mockito.invocation.Invocation candidate) {\n        java.lang.String wantedMethodName = getMethod().getName();\n        java.lang.String currentMethodName = candidate.getMethod().getName();\n        final boolean methodNameEquals = wantedMethodName.equals(currentMethodName);\n        final boolean isUnverified = !candidate.isVerified();\n        final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock();\n        final boolean methodEquals = hasSameMethod(candidate);\n        if (((!methodNameEquals) || (!isUnverified)) || (!mockIsTheSame)) {\n            return false;\n        }\n        final boolean overloadedButSameArgs = (!methodEquals) && safelyArgumentsMatch(candidate.getArguments());\n        return !overloadedButSameArgs;\n    }\n\n    public boolean hasSameMethod(org.mockito.invocation.Invocation candidate) {\n        java.lang.reflect.Method m1 = invocation.getMethod();\n        java.lang.reflect.Method m2 = candidate.getMethod();\n        if ((m1.getName() != null) && m1.getName().equals(m2.getName())) {\n            java.lang.Class[] params1 = m1.getParameterTypes();\n            java.lang.Class[] params2 = m2.getParameterTypes();\n            if (params1.length == params2.length) {\n                for (int i = 0; i < params1.length; i++) {\n                    if (params1[i] != params2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public org.mockito.invocation.Location getLocation() {\n        return invocation.getLocation();\n    }\n\n    public void captureArgumentsFrom(org.mockito.invocation.Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            for (int position = 0; position < indexOfVararg; position++) {\n                org.hamcrest.Matcher m = matchers.get(position);\n                if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                    ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n                }\n            }\n            for (org.hamcrest.Matcher m : uniqueMatcherSet(indexOfVararg)) {\n                if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                    java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n                    for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n                        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n                    }\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                org.hamcrest.Matcher m = matchers.get(position);\n                if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n                    ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n                }\n            }\n        }\n    }\n\n    private java.util.Set<org.hamcrest.Matcher> uniqueMatcherSet(int indexOfVararg) {\n        java.util.HashSet<org.hamcrest.Matcher> set = new java.util.HashSet<org.hamcrest.Matcher>();\n        for (int position = indexOfVararg; position < matchers.size(); position++) {\n            org.hamcrest.Matcher matcher = matchers.get(position);\n            if (matcher instanceof org.mockito.internal.matchers.MatcherDecorator) {\n                set.add(((org.mockito.internal.matchers.MatcherDecorator) (matcher)).getActualMatcher());\n            } else {\n                set.add(matcher);\n            }\n        }\n        return set;\n    }\n\n    public static java.util.List<org.mockito.internal.invocation.InvocationMatcher> createFrom(java.util.List<org.mockito.invocation.Invocation> invocations) {\n        java.util.LinkedList<org.mockito.internal.invocation.InvocationMatcher> out = new java.util.LinkedList<org.mockito.internal.invocation.InvocationMatcher>();\n        for (org.mockito.invocation.Invocation i : invocations) {\n            out.add(new org.mockito.internal.invocation.InvocationMatcher(i));\n        }\n        return out;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "for (int position = indexOfVararg; position < matchers.size(); position++) {\n    org.hamcrest.Matcher m = matchers.get(position);\n    if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n    }\n}",
            "src_parent": "{\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (int position = indexOfVararg; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n        }\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (int position = indexOfVararg; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n        }\n    }\n}",
            "dst_parent": "if (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = invocation.getRawArguments().length - 1;\n    for (int position = 0; position < indexOfVararg; position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n    for (int position = indexOfVararg; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n        }\n    }\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        org.hamcrest.Matcher m = matchers.get(position);\n        if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n            ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getArgumentAt(position, java.lang.Object.class));\n        }\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n    for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n    }\n}",
            "src_parent": "if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n    java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n    for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int position = indexOfVararg",
            "dst_parent": "for (int position = indexOfVararg; position < matchers.size(); position++) {\n    org.hamcrest.Matcher m = matchers.get(position);\n    if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int position = indexOfVararg",
            "src_parent": "for (int position = indexOfVararg; position < matchers.size(); position++) {\n    org.hamcrest.Matcher matcher = matchers.get(position);\n    if (matcher instanceof org.mockito.internal.matchers.MatcherDecorator) {\n        set.add(((org.mockito.internal.matchers.MatcherDecorator) (matcher)).getActualMatcher());\n    } else {\n        set.add(matcher);\n    }\n}",
            "src_parent_type": "For",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "position < matchers.size()",
            "dst_parent": "for (int position = indexOfVararg; position < matchers.size(); position++) {\n    org.hamcrest.Matcher m = matchers.get(position);\n    if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "position < matchers.size()",
            "src_parent": "for (int position = indexOfVararg; position < matchers.size(); position++) {\n    org.hamcrest.Matcher matcher = matchers.get(position);\n    if (matcher instanceof org.mockito.internal.matchers.MatcherDecorator) {\n        set.add(((org.mockito.internal.matchers.MatcherDecorator) (matcher)).getActualMatcher());\n    } else {\n        set.add(matcher);\n    }\n}",
            "src_parent_type": "For",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "position++",
            "dst_parent": "for (int position = indexOfVararg; position < matchers.size(); position++) {\n    org.hamcrest.Matcher m = matchers.get(position);\n    if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n    }\n}",
            "dst_parent_type": "For",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "position++",
            "src_parent": "for (int position = indexOfVararg; position < matchers.size(); position++) {\n    org.hamcrest.Matcher matcher = matchers.get(position);\n    if (matcher instanceof org.mockito.internal.matchers.MatcherDecorator) {\n        set.add(((org.mockito.internal.matchers.MatcherDecorator) (matcher)).getActualMatcher());\n    } else {\n        set.add(matcher);\n    }\n}",
            "src_parent_type": "For",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "matchers.get(position)",
            "dst_parent": "org.hamcrest.Matcher m = matchers.get(position)",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "matchers.get(position)",
            "src_parent": "org.hamcrest.Matcher matcher = matchers.get(position)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "m instanceof org.mockito.internal.matchers.CapturesArguments",
            "dst_parent": "if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n    ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg]);\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "m instanceof org.mockito.internal.matchers.CapturesArguments",
            "src_parent": "if (m instanceof org.mockito.internal.matchers.CapturesArguments) {\n    java.lang.Object rawArgument = invocation.getRawArguments()[indexOfVararg];\n    for (int i = 0; i < java.lang.reflect.Array.getLength(rawArgument); i++) {\n        ((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i));\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.mockito.internal.matchers.CapturesArguments) (m))",
            "dst_parent": "((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(invocation.getRawArguments()[position - indexOfVararg])",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "((org.mockito.internal.matchers.CapturesArguments) (m))",
            "src_parent": "((org.mockito.internal.matchers.CapturesArguments) (m)).captureFrom(java.lang.reflect.Array.get(rawArgument, i))",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "invocation.getRawArguments()",
            "dst_parent": "invocation.getRawArguments()[position - indexOfVararg]",
            "dst_parent_type": "ArrayRead",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "invocation.getRawArguments()",
            "src_parent": "invocation.getRawArguments()[indexOfVararg]",
            "src_parent_type": "ArrayRead",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "InvocationMatcher"
    }
  ],
  "id": "Mockito_3"
}