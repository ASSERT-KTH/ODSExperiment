{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(((var != null) && (var.getScope() == s)) && (!isNamedParameter(var)))",
            "src_parent": "(((var != null) && (var.getScope() == s)) && (!isNamedParameter(var))) && (!blacklistedVars.contains(var))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean isNamedParameter(com.google.javascript.jscomp.Scope.Var v) {\n    return v.getParentNode().isParamList();\n}",
            "src_parent": "class CollapseVariableDeclarations implements com.google.javascript.jscomp.CompilerPass {\n    private final com.google.javascript.jscomp.AbstractCompiler compiler;\n\n    private static class Collapse {\n        final com.google.javascript.rhino.Node startNode;\n\n        final com.google.javascript.rhino.Node endNode;\n\n        final com.google.javascript.rhino.Node parent;\n\n        Collapse(com.google.javascript.rhino.Node startNode, com.google.javascript.rhino.Node endNode, com.google.javascript.rhino.Node parent) {\n            this.startNode = startNode;\n            this.endNode = endNode;\n            this.parent = parent;\n        }\n    }\n\n    private final java.util.List<com.google.javascript.jscomp.CollapseVariableDeclarations.Collapse> collapses = com.google.common.collect.Lists.newArrayList();\n\n    private final java.util.Set<com.google.javascript.rhino.Node> nodesToCollapse = com.google.common.collect.Sets.newHashSet();\n\n    CollapseVariableDeclarations(com.google.javascript.jscomp.AbstractCompiler compiler) {\n        com.google.common.base.Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());\n        this.compiler = compiler;\n    }\n\n    @java.lang.Override\n    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {\n        collapses.clear();\n        nodesToCollapse.clear();\n        com.google.javascript.jscomp.NodeTraversal.traverse(compiler, root, new com.google.javascript.jscomp.CollapseVariableDeclarations.GatherCollapses());\n        if (!collapses.isEmpty()) {\n            applyCollapses();\n            compiler.reportCodeChange();\n        }\n    }\n\n    private class GatherCollapses extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {\n        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> blacklistedVars = com.google.common.collect.Sets.newHashSet();\n\n        @java.lang.Override\n        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n            if (n.isVar()) {\n                blacklistStubVars(t, n);\n            }\n            if ((!n.isVar()) && (!canBeRedeclared(n, t.getScope()))) {\n                return;\n            }\n            if (nodesToCollapse.contains(n)) {\n                return;\n            }\n            if (parent.isIf()) {\n                return;\n            }\n            com.google.javascript.rhino.Node varNode = n;\n            boolean hasVar = n.isVar();\n            n = n.getNext();\n            boolean hasNodesToCollapse = false;\n            while ((n != null) && (n.isVar() || canBeRedeclared(n, t.getScope()))) {\n                if (n.isVar()) {\n                    blacklistStubVars(t, n);\n                    hasVar = true;\n                }\n                nodesToCollapse.add(n);\n                hasNodesToCollapse = true;\n                n = n.getNext();\n            } \n            if (hasNodesToCollapse && hasVar) {\n                nodesToCollapse.add(varNode);\n                collapses.add(new com.google.javascript.jscomp.CollapseVariableDeclarations.Collapse(varNode, n, parent));\n            }\n        }\n\n        private void blacklistStubVars(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node varNode) {\n            for (com.google.javascript.rhino.Node child = varNode.getFirstChild(); child != null; child = child.getNext()) {\n                if (child.getFirstChild() == null) {\n                    blacklistedVars.add(t.getScope().getVar(child.getString()));\n                }\n            }\n        }\n\n        private boolean canBeRedeclared(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.Scope s) {\n            if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {\n                return false;\n            }\n            com.google.javascript.rhino.Node assign = n.getFirstChild();\n            com.google.javascript.rhino.Node lhs = assign.getFirstChild();\n            if (!lhs.isName()) {\n                return false;\n            }\n            com.google.javascript.jscomp.Scope.Var var = s.getVar(lhs.getString());\n            return (((var != null) && (var.getScope() == s)) && (!isNamedParameter(var))) && (!blacklistedVars.contains(var));\n        }\n    }\n\n    private boolean isNamedParameter(com.google.javascript.jscomp.Scope.Var v) {\n        return v.getParentNode().isParamList();\n    }\n\n    private void applyCollapses() {\n        for (com.google.javascript.jscomp.CollapseVariableDeclarations.Collapse collapse : collapses) {\n            com.google.javascript.rhino.Node var = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.VAR);\n            var.copyInformationFrom(collapse.startNode);\n            collapse.parent.addChildBefore(var, collapse.startNode);\n            boolean redeclaration = false;\n            for (com.google.javascript.rhino.Node n = collapse.startNode; n != collapse.endNode;) {\n                com.google.javascript.rhino.Node next = n.getNext();\n                com.google.common.base.Preconditions.checkState(var.getNext() == n);\n                collapse.parent.removeChildAfter(var);\n                if (n.isVar()) {\n                    while (n.hasChildren()) {\n                        var.addChildToBack(n.removeFirstChild());\n                    } \n                } else {\n                    com.google.javascript.rhino.Node assign = n.getFirstChild();\n                    com.google.javascript.rhino.Node lhs = assign.getFirstChild();\n                    com.google.common.base.Preconditions.checkState(lhs.isName());\n                    com.google.javascript.rhino.Node rhs = assign.getLastChild();\n                    lhs.addChildToBack(rhs.detachFromParent());\n                    var.addChildToBack(lhs.detachFromParent());\n                    redeclaration = true;\n                }\n                n = next;\n            }\n            if (redeclaration) {\n                com.google.javascript.rhino.JSDocInfo info = new com.google.javascript.rhino.JSDocInfo();\n                info.addSuppression(\"duplicate\");\n                var.setJSDocInfo(info);\n            }\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((var != null) && (var.getScope() == s))",
            "dst_parent": "((var != null) && (var.getScope() == s)) && (!blacklistedVars.contains(var))",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((var != null) && (var.getScope() == s))",
            "src_parent": "(((var != null) && (var.getScope() == s)) && (!isNamedParameter(var)))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "CollapseVariableDeclarations"
    }
  ],
  "id": "Closure_8"
}