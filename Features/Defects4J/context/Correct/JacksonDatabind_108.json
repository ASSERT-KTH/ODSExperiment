{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((T) (_bindAsTree(p)))",
            "dst_parent": "return ((T) (_bindAsTree(p)))",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "((T) (_bindAsTreeOrNull(p)))",
            "src_parent": "return ((T) (_bindAsTreeOrNull(p)))",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected final com.fasterxml.jackson.databind.JsonNode _bindAsTreeOrNull(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n    _config.initialize(p);\n    if (_schema != null) {\n        p.setSchema(_schema);\n    }\n    com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n    if (t == null) {\n        t = p.nextToken();\n        if (t == null) {\n            return null;\n        }\n    }\n    final com.fasterxml.jackson.databind.JsonNode resultNode;\n    if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n        resultNode = _config.getNodeFactory().nullNode();\n    } else {\n        final com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n        final com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findTreeDeserializer(ctxt);\n        if (_unwrapRoot) {\n            resultNode = ((com.fasterxml.jackson.databind.JsonNode) (_unwrapAndDeserialize(p, ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, deser)));\n        } else {\n            resultNode = ((com.fasterxml.jackson.databind.JsonNode) (deser.deserialize(p, ctxt)));\n            if (_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n                _verifyNoTrailingTokens(p, ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n            }\n        }\n    }\n    return resultNode;\n}",
            "src_parent": "public class ObjectReader extends com.fasterxml.jackson.core.ObjectCodec implements com.fasterxml.jackson.core.Versioned , java.io.Serializable {\n    private static final long serialVersionUID = 2L;\n\n    private static final com.fasterxml.jackson.databind.JavaType JSON_NODE_TYPE = com.fasterxml.jackson.databind.type.SimpleType.constructUnsafe(com.fasterxml.jackson.databind.JsonNode.class);\n\n    protected final com.fasterxml.jackson.databind.DeserializationConfig _config;\n\n    protected final com.fasterxml.jackson.databind.deser.DefaultDeserializationContext _context;\n\n    protected final com.fasterxml.jackson.core.JsonFactory _parserFactory;\n\n    protected final boolean _unwrapRoot;\n\n    private final com.fasterxml.jackson.core.filter.TokenFilter _filter;\n\n    protected final com.fasterxml.jackson.databind.JavaType _valueType;\n\n    protected final com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _rootDeserializer;\n\n    protected final java.lang.Object _valueToUpdate;\n\n    protected final com.fasterxml.jackson.core.FormatSchema _schema;\n\n    protected final com.fasterxml.jackson.databind.InjectableValues _injectableValues;\n\n    protected final com.fasterxml.jackson.databind.deser.DataFormatReaders _dataFormatReaders;\n\n    protected final java.util.concurrent.ConcurrentHashMap<com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>> _rootDeserializers;\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectMapper mapper, com.fasterxml.jackson.databind.DeserializationConfig config) {\n        this(mapper, config, null, null, null, null);\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectMapper mapper, com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.JavaType valueType, java.lang.Object valueToUpdate, com.fasterxml.jackson.core.FormatSchema schema, com.fasterxml.jackson.databind.InjectableValues injectableValues) {\n        _config = config;\n        _context = mapper._deserializationContext;\n        _rootDeserializers = mapper._rootDeserializers;\n        _parserFactory = mapper._jsonFactory;\n        _valueType = valueType;\n        _valueToUpdate = valueToUpdate;\n        _schema = schema;\n        _injectableValues = injectableValues;\n        _unwrapRoot = config.useRootWrapping();\n        _rootDeserializer = _prefetchRootDeserializer(valueType);\n        _dataFormatReaders = null;\n        _filter = null;\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> rootDeser, java.lang.Object valueToUpdate, com.fasterxml.jackson.core.FormatSchema schema, com.fasterxml.jackson.databind.InjectableValues injectableValues, com.fasterxml.jackson.databind.deser.DataFormatReaders dataFormatReaders) {\n        _config = config;\n        _context = base._context;\n        _rootDeserializers = base._rootDeserializers;\n        _parserFactory = base._parserFactory;\n        _valueType = valueType;\n        _rootDeserializer = rootDeser;\n        _valueToUpdate = valueToUpdate;\n        _schema = schema;\n        _injectableValues = injectableValues;\n        _unwrapRoot = config.useRootWrapping();\n        _dataFormatReaders = dataFormatReaders;\n        _filter = base._filter;\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config) {\n        _config = config;\n        _context = base._context;\n        _rootDeserializers = base._rootDeserializers;\n        _parserFactory = base._parserFactory;\n        _valueType = base._valueType;\n        _rootDeserializer = base._rootDeserializer;\n        _valueToUpdate = base._valueToUpdate;\n        _schema = base._schema;\n        _injectableValues = base._injectableValues;\n        _unwrapRoot = config.useRootWrapping();\n        _dataFormatReaders = base._dataFormatReaders;\n        _filter = base._filter;\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.core.JsonFactory f) {\n        _config = base._config.with(com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering());\n        _context = base._context;\n        _rootDeserializers = base._rootDeserializers;\n        _parserFactory = f;\n        _valueType = base._valueType;\n        _rootDeserializer = base._rootDeserializer;\n        _valueToUpdate = base._valueToUpdate;\n        _schema = base._schema;\n        _injectableValues = base._injectableValues;\n        _unwrapRoot = base._unwrapRoot;\n        _dataFormatReaders = base._dataFormatReaders;\n        _filter = base._filter;\n    }\n\n    protected ObjectReader(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.core.filter.TokenFilter filter) {\n        _config = base._config;\n        _context = base._context;\n        _rootDeserializers = base._rootDeserializers;\n        _parserFactory = base._parserFactory;\n        _valueType = base._valueType;\n        _rootDeserializer = base._rootDeserializer;\n        _valueToUpdate = base._valueToUpdate;\n        _schema = base._schema;\n        _injectableValues = base._injectableValues;\n        _unwrapRoot = base._unwrapRoot;\n        _dataFormatReaders = base._dataFormatReaders;\n        _filter = filter;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _new(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.core.JsonFactory f) {\n        return new com.fasterxml.jackson.databind.ObjectReader(base, f);\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _new(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config) {\n        return new com.fasterxml.jackson.databind.ObjectReader(base, config);\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _new(com.fasterxml.jackson.databind.ObjectReader base, com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> rootDeser, java.lang.Object valueToUpdate, com.fasterxml.jackson.core.FormatSchema schema, com.fasterxml.jackson.databind.InjectableValues injectableValues, com.fasterxml.jackson.databind.deser.DataFormatReaders dataFormatReaders) {\n        return new com.fasterxml.jackson.databind.ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders);\n    }\n\n    protected <T> com.fasterxml.jackson.databind.MappingIterator<T> _newIterator(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JsonDeserializer<?> deser, boolean parserManaged) {\n        return new com.fasterxml.jackson.databind.MappingIterator<T>(_valueType, p, ctxt, deser, parserManaged, _valueToUpdate);\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _initForReading(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        if (_schema != null) {\n            p.setSchema(_schema);\n        }\n        _config.initialize(p);\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        if (t == null) {\n            t = p.nextToken();\n            if (t == null) {\n                ctxt.reportInputMismatch(_valueType, \"No content to map due to end-of-input\");\n            }\n        }\n        return t;\n    }\n\n    protected void _initForMultiRead(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        if (_schema != null) {\n            p.setSchema(_schema);\n        }\n        _config.initialize(p);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.DeserializationFeature feature) {\n        return _with(_config.with(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.DeserializationFeature first, com.fasterxml.jackson.databind.DeserializationFeature... other) {\n        return _with(_config.with(first, other));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFeatures(com.fasterxml.jackson.databind.DeserializationFeature... features) {\n        return _with(_config.withFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader without(com.fasterxml.jackson.databind.DeserializationFeature feature) {\n        return _with(_config.without(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader without(com.fasterxml.jackson.databind.DeserializationFeature first, com.fasterxml.jackson.databind.DeserializationFeature... other) {\n        return _with(_config.without(first, other));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutFeatures(com.fasterxml.jackson.databind.DeserializationFeature... features) {\n        return _with(_config.withoutFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.JsonParser.Feature feature) {\n        return _with(_config.with(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFeatures(com.fasterxml.jackson.core.JsonParser.Feature... features) {\n        return _with(_config.withFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader without(com.fasterxml.jackson.core.JsonParser.Feature feature) {\n        return _with(_config.without(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutFeatures(com.fasterxml.jackson.core.JsonParser.Feature... features) {\n        return _with(_config.withoutFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.FormatFeature feature) {\n        return _with(_config.with(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFeatures(com.fasterxml.jackson.core.FormatFeature... features) {\n        return _with(_config.withFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader without(com.fasterxml.jackson.core.FormatFeature feature) {\n        return _with(_config.without(feature));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutFeatures(com.fasterxml.jackson.core.FormatFeature... features) {\n        return _with(_config.withoutFeatures(features));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader at(final java.lang.String value) {\n        return new com.fasterxml.jackson.databind.ObjectReader(this, new com.fasterxml.jackson.core.filter.JsonPointerBasedFilter(value));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader at(final com.fasterxml.jackson.core.JsonPointer pointer) {\n        return new com.fasterxml.jackson.databind.ObjectReader(this, new com.fasterxml.jackson.core.filter.JsonPointerBasedFilter(pointer));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.DeserializationConfig config) {\n        return _with(config);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.InjectableValues injectableValues) {\n        if (_injectableValues == injectableValues) {\n            return this;\n        }\n        return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, injectableValues, _dataFormatReaders);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.node.JsonNodeFactory f) {\n        return _with(_config.with(f));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.JsonFactory f) {\n        if (f == _parserFactory) {\n            return this;\n        }\n        com.fasterxml.jackson.databind.ObjectReader r = _new(this, f);\n        if (f.getCodec() == null) {\n            f.setCodec(r);\n        }\n        return r;\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withRootName(java.lang.String rootName) {\n        return _with(_config.withRootName(rootName));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withRootName(com.fasterxml.jackson.databind.PropertyName rootName) {\n        return _with(_config.withRootName(rootName));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutRootName() {\n        return _with(_config.withRootName(com.fasterxml.jackson.databind.PropertyName.NO_NAME));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.FormatSchema schema) {\n        if (_schema == schema) {\n            return this;\n        }\n        _verifySchemaType(schema);\n        return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader forType(com.fasterxml.jackson.databind.JavaType valueType) {\n        if ((valueType != null) && valueType.equals(_valueType)) {\n            return this;\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> rootDeser = _prefetchRootDeserializer(valueType);\n        com.fasterxml.jackson.databind.deser.DataFormatReaders det = _dataFormatReaders;\n        if (det != null) {\n            det = det.withType(valueType);\n        }\n        return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader forType(java.lang.Class<?> valueType) {\n        return forType(_config.constructType(valueType));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader forType(com.fasterxml.jackson.core.type.TypeReference<?> valueTypeRef) {\n        return forType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(com.fasterxml.jackson.databind.JavaType valueType) {\n        return forType(valueType);\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(java.lang.Class<?> valueType) {\n        return forType(_config.constructType(valueType));\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(java.lang.reflect.Type valueType) {\n        return forType(_config.getTypeFactory().constructType(valueType));\n    }\n\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.databind.ObjectReader withType(com.fasterxml.jackson.core.type.TypeReference<?> valueTypeRef) {\n        return forType(_config.getTypeFactory().constructType(valueTypeRef.getType()));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withValueToUpdate(java.lang.Object value) {\n        if (value == _valueToUpdate) {\n            return this;\n        }\n        if (value == null) {\n            return _new(this, _config, _valueType, _rootDeserializer, null, _schema, _injectableValues, _dataFormatReaders);\n        }\n        com.fasterxml.jackson.databind.JavaType t;\n        if (_valueType == null) {\n            t = _config.constructType(value.getClass());\n        } else {\n            t = _valueType;\n        }\n        return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withView(java.lang.Class<?> activeView) {\n        return _with(_config.withView(activeView));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(java.util.Locale l) {\n        return _with(_config.with(l));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(java.util.TimeZone tz) {\n        return _with(_config.with(tz));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler h) {\n        return _with(_config.withHandler(h));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.core.Base64Variant defaultBase64) {\n        return _with(_config.with(defaultBase64));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFormatDetection(com.fasterxml.jackson.databind.ObjectReader... readers) {\n        return withFormatDetection(new com.fasterxml.jackson.databind.deser.DataFormatReaders(readers));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withFormatDetection(com.fasterxml.jackson.databind.deser.DataFormatReaders readers) {\n        return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, _injectableValues, readers);\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader with(com.fasterxml.jackson.databind.cfg.ContextAttributes attrs) {\n        return _with(_config.with(attrs));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withAttributes(java.util.Map<?, ?> attrs) {\n        return _with(_config.withAttributes(attrs));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withAttribute(java.lang.Object key, java.lang.Object value) {\n        return _with(_config.withAttribute(key, value));\n    }\n\n    public com.fasterxml.jackson.databind.ObjectReader withoutAttribute(java.lang.Object key) {\n        return _with(_config.withoutAttribute(key));\n    }\n\n    protected com.fasterxml.jackson.databind.ObjectReader _with(com.fasterxml.jackson.databind.DeserializationConfig newConfig) {\n        if (newConfig == _config) {\n            return this;\n        }\n        com.fasterxml.jackson.databind.ObjectReader r = _new(this, newConfig);\n        if (_dataFormatReaders != null) {\n            r = r.withFormatDetection(_dataFormatReaders.with(newConfig));\n        }\n        return r;\n    }\n\n    public boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature f) {\n        return _config.isEnabled(f);\n    }\n\n    public boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature f) {\n        return _config.isEnabled(f);\n    }\n\n    public boolean isEnabled(com.fasterxml.jackson.core.JsonParser.Feature f) {\n        return _parserFactory.isEnabled(f);\n    }\n\n    public com.fasterxml.jackson.databind.DeserializationConfig getConfig() {\n        return _config;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonFactory getFactory() {\n        return _parserFactory;\n    }\n\n    public com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory() {\n        return _config.getTypeFactory();\n    }\n\n    public com.fasterxml.jackson.databind.cfg.ContextAttributes getAttributes() {\n        return _config.getAttributes();\n    }\n\n    public com.fasterxml.jackson.databind.InjectableValues getInjectableValues() {\n        return _injectableValues;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        return ((T) (_bind(p, _valueToUpdate)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser p, java.lang.Class<T> valueType) throws java.io.IOException {\n        return ((T) (forType(valueType).readValue(p)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.core.type.TypeReference<T> valueTypeRef) throws java.io.IOException {\n        return ((T) (forType(valueTypeRef).readValue(p)));\n    }\n\n    @java.lang.Override\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.core.type.ResolvedType valueType) throws java.io.IOException {\n        return ((T) (forType(((com.fasterxml.jackson.databind.JavaType) (valueType))).readValue(p)));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.JavaType valueType) throws java.io.IOException {\n        return ((T) (forType(valueType).readValue(p)));\n    }\n\n    @java.lang.Override\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser p, java.lang.Class<T> valueType) throws java.io.IOException {\n        return forType(valueType).readValues(p);\n    }\n\n    @java.lang.Override\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.core.type.TypeReference<T> valueTypeRef) throws java.io.IOException {\n        return forType(valueTypeRef).readValues(p);\n    }\n\n    @java.lang.Override\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.core.type.ResolvedType valueType) throws java.io.IOException {\n        return readValues(p, ((com.fasterxml.jackson.databind.JavaType) (valueType)));\n    }\n\n    public <T> java.util.Iterator<T> readValues(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.JavaType valueType) throws java.io.IOException {\n        return forType(valueType).readValues(p);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode createArrayNode() {\n        return _config.getNodeFactory().arrayNode();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonNode createObjectNode() {\n        return _config.getNodeFactory().objectNode();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonParser treeAsTokens(com.fasterxml.jackson.core.TreeNode n) {\n        com.fasterxml.jackson.databind.ObjectReader codec = withValueToUpdate(null);\n        return new com.fasterxml.jackson.databind.node.TreeTraversingParser(((com.fasterxml.jackson.databind.JsonNode) (n)), codec);\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    @java.lang.Override\n    public <T extends com.fasterxml.jackson.core.TreeNode> T readTree(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        return ((T) (_bindAsTreeOrNull(p)));\n    }\n\n    @java.lang.Override\n    public void writeTree(com.fasterxml.jackson.core.JsonGenerator g, com.fasterxml.jackson.core.TreeNode rootNode) {\n        throw new java.lang.UnsupportedOperationException();\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.io.InputStream src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(_dataFormatReaders.findFormat(src), false)));\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src), false))));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.io.Reader src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src), false))));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.lang.String src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src), false))));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(byte[] src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(src, 0, src.length)));\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src), false))));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(byte[] src, int offset, int length) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(src, offset, length)));\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src, offset, length), false))));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.io.File src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true)));\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src), false))));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.net.URL src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return ((T) (_detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true)));\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src), false))));\n    }\n\n    @java.lang.SuppressWarnings({ \"unchecked\", \"resource\" })\n    public <T> T readValue(com.fasterxml.jackson.databind.JsonNode src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return ((T) (_bindAndClose(_considerFilter(treeAsTokens(src), false))));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public <T> T readValue(java.io.DataInput src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return ((T) (_bindAndClose(_considerFilter(_parserFactory.createParser(src), false))));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(java.io.InputStream in) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndCloseAsTree(in);\n        }\n        return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(in), false));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(java.io.Reader r) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(r);\n        }\n        return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(r), false));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(java.lang.String json) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(json);\n        }\n        return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json), false));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(byte[] json) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(json);\n        }\n        return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json), false));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(byte[] json, int offset, int len) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(json);\n        }\n        return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json, offset, len), false));\n    }\n\n    public com.fasterxml.jackson.databind.JsonNode readTree(java.io.DataInput src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(src), false));\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n        return _newIterator(p, ctxt, _findRootDeserializer(ctxt), false);\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.io.InputStream src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n        }\n        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.io.Reader src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        com.fasterxml.jackson.core.JsonParser p = _considerFilter(_parserFactory.createParser(src), true);\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n        _initForMultiRead(ctxt, p);\n        p.nextToken();\n        return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.lang.String json) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(json);\n        }\n        com.fasterxml.jackson.core.JsonParser p = _considerFilter(_parserFactory.createParser(json), true);\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n        _initForMultiRead(ctxt, p);\n        p.nextToken();\n        return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(byte[] src, int offset, int length) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n        }\n        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), true));\n    }\n\n    public final <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(byte[] src) throws java.io.IOException {\n        return readValues(src, 0, src.length);\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.io.File src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(_inputStream(src)), false);\n        }\n        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.net.URL src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            return _detectBindAndReadValues(_dataFormatReaders.findFormat(_inputStream(src)), true);\n        }\n        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));\n    }\n\n    public <T> com.fasterxml.jackson.databind.MappingIterator<T> readValues(java.io.DataInput src) throws java.io.IOException {\n        if (_dataFormatReaders != null) {\n            _reportUndetectableSource(src);\n        }\n        return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));\n    }\n\n    @java.lang.Override\n    public <T> T treeToValue(com.fasterxml.jackson.core.TreeNode n, java.lang.Class<T> valueType) throws com.fasterxml.jackson.core.JsonProcessingException {\n        try {\n            return readValue(treeAsTokens(n), valueType);\n        } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n            throw e;\n        } catch (java.io.IOException e) {\n            throw com.fasterxml.jackson.databind.JsonMappingException.fromUnexpectedIOE(e);\n        }\n    }\n\n    @java.lang.Override\n    public void writeValue(com.fasterxml.jackson.core.JsonGenerator gen, java.lang.Object value) throws java.io.IOException {\n        throw new java.lang.UnsupportedOperationException(\"Not implemented for ObjectReader\");\n    }\n\n    protected java.lang.Object _bind(com.fasterxml.jackson.core.JsonParser p, java.lang.Object valueToUpdate) throws java.io.IOException {\n        java.lang.Object result;\n        final com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n        com.fasterxml.jackson.core.JsonToken t = _initForReading(ctxt, p);\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n            if (valueToUpdate == null) {\n                result = _findRootDeserializer(ctxt).getNullValue(ctxt);\n            } else {\n                result = valueToUpdate;\n            }\n        } else if ((t == com.fasterxml.jackson.core.JsonToken.END_ARRAY) || (t == com.fasterxml.jackson.core.JsonToken.END_OBJECT)) {\n            result = valueToUpdate;\n        } else {\n            com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findRootDeserializer(ctxt);\n            if (_unwrapRoot) {\n                result = _unwrapAndDeserialize(p, ctxt, _valueType, deser);\n            } else if (valueToUpdate == null) {\n                result = deser.deserialize(p, ctxt);\n            } else {\n                result = deser.deserialize(p, ctxt, valueToUpdate);\n            }\n        }\n        p.clearCurrentToken();\n        if (_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\n        }\n        return result;\n    }\n\n    protected java.lang.Object _bindAndClose(com.fasterxml.jackson.core.JsonParser p0) throws java.io.IOException {\n        try (final com.fasterxml.jackson.core.JsonParser p = p0) {\n            java.lang.Object result;\n            com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n            com.fasterxml.jackson.core.JsonToken t = _initForReading(ctxt, p);\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n                if (_valueToUpdate == null) {\n                    result = _findRootDeserializer(ctxt).getNullValue(ctxt);\n                } else {\n                    result = _valueToUpdate;\n                }\n            } else if ((t == com.fasterxml.jackson.core.JsonToken.END_ARRAY) || (t == com.fasterxml.jackson.core.JsonToken.END_OBJECT)) {\n                result = _valueToUpdate;\n            } else {\n                com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findRootDeserializer(ctxt);\n                if (_unwrapRoot) {\n                    result = _unwrapAndDeserialize(p, ctxt, _valueType, deser);\n                } else if (_valueToUpdate == null) {\n                    result = deser.deserialize(p, ctxt);\n                } else {\n                    deser.deserialize(p, ctxt, _valueToUpdate);\n                    result = _valueToUpdate;\n                }\n            }\n            if (_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n                _verifyNoTrailingTokens(p, ctxt, _valueType);\n            }\n            return result;\n        }\n    }\n\n    protected final com.fasterxml.jackson.databind.JsonNode _bindAndCloseAsTree(com.fasterxml.jackson.core.JsonParser p0) throws java.io.IOException {\n        try (final com.fasterxml.jackson.core.JsonParser p = p0) {\n            return _bindAsTree(p);\n        }\n    }\n\n    protected final com.fasterxml.jackson.databind.JsonNode _bindAsTree(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        _config.initialize(p);\n        if (_schema != null) {\n            p.setSchema(_schema);\n        }\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        if (t == null) {\n            t = p.nextToken();\n            if (t == null) {\n                return _config.getNodeFactory().missingNode();\n            }\n        }\n        final com.fasterxml.jackson.databind.JsonNode resultNode;\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n            resultNode = _config.getNodeFactory().nullNode();\n        } else {\n            final com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n            final com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findTreeDeserializer(ctxt);\n            if (_unwrapRoot) {\n                resultNode = ((com.fasterxml.jackson.databind.JsonNode) (_unwrapAndDeserialize(p, ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, deser)));\n            } else {\n                resultNode = ((com.fasterxml.jackson.databind.JsonNode) (deser.deserialize(p, ctxt)));\n                if (_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n                    _verifyNoTrailingTokens(p, ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n                }\n            }\n        }\n        return resultNode;\n    }\n\n    protected final com.fasterxml.jackson.databind.JsonNode _bindAsTreeOrNull(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        _config.initialize(p);\n        if (_schema != null) {\n            p.setSchema(_schema);\n        }\n        com.fasterxml.jackson.core.JsonToken t = p.getCurrentToken();\n        if (t == null) {\n            t = p.nextToken();\n            if (t == null) {\n                return null;\n            }\n        }\n        final com.fasterxml.jackson.databind.JsonNode resultNode;\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NULL) {\n            resultNode = _config.getNodeFactory().nullNode();\n        } else {\n            final com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n            final com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _findTreeDeserializer(ctxt);\n            if (_unwrapRoot) {\n                resultNode = ((com.fasterxml.jackson.databind.JsonNode) (_unwrapAndDeserialize(p, ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, deser)));\n            } else {\n                resultNode = ((com.fasterxml.jackson.databind.JsonNode) (deser.deserialize(p, ctxt)));\n                if (_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n                    _verifyNoTrailingTokens(p, ctxt, com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n                }\n            }\n        }\n        return resultNode;\n    }\n\n    protected <T> com.fasterxml.jackson.databind.MappingIterator<T> _bindAndReadValues(com.fasterxml.jackson.core.JsonParser p) throws java.io.IOException {\n        com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(p);\n        _initForMultiRead(ctxt, p);\n        p.nextToken();\n        return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);\n    }\n\n    protected java.lang.Object _unwrapAndDeserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType rootType, com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser) throws java.io.IOException {\n        com.fasterxml.jackson.databind.PropertyName expRootName = _config.findRootName(rootType);\n        java.lang.String expSimpleName = expRootName.getSimpleName();\n        if (p.getCurrentToken() != com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n            ctxt.reportWrongTokenException(rootType, com.fasterxml.jackson.core.JsonToken.START_OBJECT, \"Current token not START_OBJECT (needed to unwrap root name '%s'), but %s\", expSimpleName, p.getCurrentToken());\n        }\n        if (p.nextToken() != com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            ctxt.reportWrongTokenException(rootType, com.fasterxml.jackson.core.JsonToken.FIELD_NAME, \"Current token not FIELD_NAME (to contain expected root name '%s'), but %s\", expSimpleName, p.getCurrentToken());\n        }\n        java.lang.String actualName = p.getCurrentName();\n        if (!expSimpleName.equals(actualName)) {\n            ctxt.reportInputMismatch(rootType, \"Root name '%s' does not match expected ('%s') for type %s\", actualName, expSimpleName, rootType);\n        }\n        p.nextToken();\n        java.lang.Object result;\n        if (_valueToUpdate == null) {\n            result = deser.deserialize(p, ctxt);\n        } else {\n            deser.deserialize(p, ctxt, _valueToUpdate);\n            result = _valueToUpdate;\n        }\n        if (p.nextToken() != com.fasterxml.jackson.core.JsonToken.END_OBJECT) {\n            ctxt.reportWrongTokenException(rootType, com.fasterxml.jackson.core.JsonToken.END_OBJECT, \"Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s\", expSimpleName, p.getCurrentToken());\n        }\n        if (_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n            _verifyNoTrailingTokens(p, ctxt, _valueType);\n        }\n        return result;\n    }\n\n    protected com.fasterxml.jackson.core.JsonParser _considerFilter(final com.fasterxml.jackson.core.JsonParser p, boolean multiValue) {\n        return (_filter == null) || com.fasterxml.jackson.core.filter.FilteringParserDelegate.class.isInstance(p) ? p : new com.fasterxml.jackson.core.filter.FilteringParserDelegate(p, _filter, false, multiValue);\n    }\n\n    protected final void _verifyNoTrailingTokens(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType bindType) throws java.io.IOException {\n        com.fasterxml.jackson.core.JsonToken t = p.nextToken();\n        if (t != null) {\n            java.lang.Class<?> bt = com.fasterxml.jackson.databind.util.ClassUtil.rawClass(bindType);\n            if (bt == null) {\n                if (_valueToUpdate != null) {\n                    bt = _valueToUpdate.getClass();\n                }\n            }\n            ctxt.reportTrailingTokens(bt, p, t);\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected java.lang.Object _detectBindAndClose(byte[] src, int offset, int length) throws java.io.IOException {\n        com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length);\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser p = match.createParserWithMatch();\n        return match.getReader()._bindAndClose(p);\n    }\n\n    @java.lang.SuppressWarnings({ \"resource\" })\n    protected java.lang.Object _detectBindAndClose(com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match, boolean forceClosing) throws java.io.IOException {\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser p = match.createParserWithMatch();\n        if (forceClosing) {\n            p.enable(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE);\n        }\n        return match.getReader()._bindAndClose(p);\n    }\n\n    @java.lang.SuppressWarnings({ \"resource\" })\n    protected <T> com.fasterxml.jackson.databind.MappingIterator<T> _detectBindAndReadValues(com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match, boolean forceClosing) throws java.io.IOException {\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser p = match.createParserWithMatch();\n        if (forceClosing) {\n            p.enable(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE);\n        }\n        return match.getReader()._bindAndReadValues(p);\n    }\n\n    @java.lang.SuppressWarnings({ \"resource\" })\n    protected com.fasterxml.jackson.databind.JsonNode _detectBindAndCloseAsTree(java.io.InputStream in) throws java.io.IOException {\n        com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match = _dataFormatReaders.findFormat(in);\n        if (!match.hasMatch()) {\n            _reportUnkownFormat(_dataFormatReaders, match);\n        }\n        com.fasterxml.jackson.core.JsonParser p = match.createParserWithMatch();\n        p.enable(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE);\n        return match.getReader()._bindAndCloseAsTree(p);\n    }\n\n    protected void _reportUnkownFormat(com.fasterxml.jackson.databind.deser.DataFormatReaders detector, com.fasterxml.jackson.databind.deser.DataFormatReaders.Match match) throws com.fasterxml.jackson.core.JsonProcessingException {\n        throw new com.fasterxml.jackson.core.JsonParseException(null, \"Cannot detect format from input, does not look like any of detectable formats \" + detector.toString());\n    }\n\n    protected void _verifySchemaType(com.fasterxml.jackson.core.FormatSchema schema) {\n        if (schema != null) {\n            if (!_parserFactory.canUseSchema(schema)) {\n                throw new java.lang.IllegalArgumentException(((\"Cannot use FormatSchema of type \" + schema.getClass().getName()) + \" for format \") + _parserFactory.getFormatName());\n            }\n        }\n    }\n\n    protected com.fasterxml.jackson.databind.deser.DefaultDeserializationContext createDeserializationContext(com.fasterxml.jackson.core.JsonParser p) {\n        return _context.createInstance(_config, p, _injectableValues);\n    }\n\n    protected java.io.InputStream _inputStream(java.net.URL src) throws java.io.IOException {\n        return src.openStream();\n    }\n\n    protected java.io.InputStream _inputStream(java.io.File f) throws java.io.IOException {\n        return new java.io.FileInputStream(f);\n    }\n\n    protected void _reportUndetectableSource(java.lang.Object src) throws com.fasterxml.jackson.core.JsonProcessingException {\n        throw new com.fasterxml.jackson.core.JsonParseException(null, (\"Cannot use source of type \" + src.getClass().getName()) + \" with format auto-detection: must be byte- not char-based\");\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt) throws com.fasterxml.jackson.databind.JsonMappingException {\n        if (_rootDeserializer != null) {\n            return _rootDeserializer;\n        }\n        com.fasterxml.jackson.databind.JavaType t = _valueType;\n        if (t == null) {\n            ctxt.reportBadDefinition(((com.fasterxml.jackson.databind.JavaType) (null)), \"No value type configured for ObjectReader\");\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _rootDeserializers.get(t);\n        if (deser != null) {\n            return deser;\n        }\n        deser = ctxt.findRootValueDeserializer(t);\n        if (deser == null) {\n            ctxt.reportBadDefinition(t, \"Cannot find a deserializer for type \" + t);\n        }\n        _rootDeserializers.put(t, deser);\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _findTreeDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _rootDeserializers.get(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n        if (deser == null) {\n            deser = ctxt.findRootValueDeserializer(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n            if (deser == null) {\n                ctxt.reportBadDefinition(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, \"Cannot find a deserializer for type \" + com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE);\n            }\n            _rootDeserializers.put(com.fasterxml.jackson.databind.ObjectReader.JSON_NODE_TYPE, deser);\n        }\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> _prefetchRootDeserializer(com.fasterxml.jackson.databind.JavaType valueType) {\n        if ((valueType == null) || (!_config.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH))) {\n            return null;\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = _rootDeserializers.get(valueType);\n        if (deser == null) {\n            try {\n                com.fasterxml.jackson.databind.DeserializationContext ctxt = createDeserializationContext(null);\n                deser = ctxt.findRootValueDeserializer(valueType);\n                if (deser != null) {\n                    _rootDeserializers.put(valueType, deser);\n                }\n                return deser;\n            } catch (com.fasterxml.jackson.core.JsonProcessingException e) {\n            }\n        }\n        return deser;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "ObjectReader"
    }
  ],
  "id": "JacksonDatabind_108"
}