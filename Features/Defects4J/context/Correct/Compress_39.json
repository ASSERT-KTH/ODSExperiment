{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "final char[] chars = s.toCharArray()",
            "dst_parent": "{\n    final char[] chars = s.toCharArray();\n    final int len = chars.length;\n    final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!java.lang.Character.isISOControl(c)) {\n            java.lang.Character.UnicodeBlock block = java.lang.Character.UnicodeBlock.of(c);\n            if ((block != null) && (block != java.lang.Character.UnicodeBlock.SPECIALS)) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "UPD",
            "src": "final char[] cs = s.toCharArray()",
            "src_parent": "{\n    final char[] cs = s.toCharArray();\n    final char[] chars = (cs.length <= org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) ? cs : java.util.Arrays.copyOf(cs, org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH);\n    if (cs.length > org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) {\n        for (int i = org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH - 3; i < org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH; i++) {\n            chars[i] = '.';\n        }\n    }\n    final int len = chars.length;\n    final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!java.lang.Character.isISOControl(c)) {\n            java.lang.Character.UnicodeBlock block = java.lang.Character.UnicodeBlock.of(c);\n            if ((block != null) && (block != java.lang.Character.UnicodeBlock.SPECIALS)) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final int MAX_SANITIZED_NAME_LENGTH = 255;",
            "src_parent": "public class ArchiveUtils {\n    private static final int MAX_SANITIZED_NAME_LENGTH = 255;\n\n    private ArchiveUtils() {\n    }\n\n    public static java.lang.String toString(final org.apache.commons.compress.archivers.ArchiveEntry entry) {\n        final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        sb.append(entry.isDirectory() ? 'd' : '-');\n        final java.lang.String size = java.lang.Long.toString(entry.getSize());\n        sb.append(' ');\n        for (int i = 7; i > size.length(); i--) {\n            sb.append(' ');\n        }\n        sb.append(size);\n        sb.append(' ').append(entry.getName());\n        return sb.toString();\n    }\n\n    public static boolean matchAsciiBuffer(final java.lang.String expected, final byte[] buffer, final int offset, final int length) {\n        byte[] buffer1;\n        try {\n            buffer1 = expected.getBytes(org.apache.commons.compress.utils.CharsetNames.US_ASCII);\n        } catch (final java.io.UnsupportedEncodingException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n        return org.apache.commons.compress.utils.ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false);\n    }\n\n    public static boolean matchAsciiBuffer(final java.lang.String expected, final byte[] buffer) {\n        return org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(expected, buffer, 0, buffer.length);\n    }\n\n    public static byte[] toAsciiBytes(final java.lang.String inputString) {\n        try {\n            return inputString.getBytes(org.apache.commons.compress.utils.CharsetNames.US_ASCII);\n        } catch (final java.io.UnsupportedEncodingException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n    }\n\n    public static java.lang.String toAsciiString(final byte[] inputBytes) {\n        try {\n            return new java.lang.String(inputBytes, org.apache.commons.compress.utils.CharsetNames.US_ASCII);\n        } catch (final java.io.UnsupportedEncodingException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n    }\n\n    public static java.lang.String toAsciiString(final byte[] inputBytes, final int offset, final int length) {\n        try {\n            return new java.lang.String(inputBytes, offset, length, org.apache.commons.compress.utils.CharsetNames.US_ASCII);\n        } catch (final java.io.UnsupportedEncodingException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n    }\n\n    public static boolean isEqual(final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2, final boolean ignoreTrailingNulls) {\n        final int minLen = (length1 < length2) ? length1 : length2;\n        for (int i = 0; i < minLen; i++) {\n            if (buffer1[offset1 + i] != buffer2[offset2 + i]) {\n                return false;\n            }\n        }\n        if (length1 == length2) {\n            return true;\n        }\n        if (ignoreTrailingNulls) {\n            if (length1 > length2) {\n                for (int i = length2; i < length1; i++) {\n                    if (buffer1[offset1 + i] != 0) {\n                        return false;\n                    }\n                }\n            } else {\n                for (int i = length1; i < length2; i++) {\n                    if (buffer2[offset2 + i] != 0) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    public static boolean isEqual(final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2) {\n        return org.apache.commons.compress.utils.ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, false);\n    }\n\n    public static boolean isEqual(final byte[] buffer1, final byte[] buffer2) {\n        return org.apache.commons.compress.utils.ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false);\n    }\n\n    public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, final boolean ignoreTrailingNulls) {\n        return org.apache.commons.compress.utils.ArchiveUtils.isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls);\n    }\n\n    public static boolean isEqualWithNull(final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2) {\n        return org.apache.commons.compress.utils.ArchiveUtils.isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true);\n    }\n\n    public static boolean isArrayZero(final byte[] a, final int size) {\n        for (int i = 0; i < size; i++) {\n            if (a[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static java.lang.String sanitize(java.lang.String s) {\n        final char[] cs = s.toCharArray();\n        final char[] chars = (cs.length <= org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) ? cs : java.util.Arrays.copyOf(cs, org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH);\n        if (cs.length > org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) {\n            for (int i = org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH - 3; i < org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH; i++) {\n                chars[i] = '.';\n            }\n        }\n        final int len = chars.length;\n        final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        for (int i = 0; i < len; i++) {\n            final char c = chars[i];\n            if (!java.lang.Character.isISOControl(c)) {\n                java.lang.Character.UnicodeBlock block = java.lang.Character.UnicodeBlock.of(c);\n                if ((block != null) && (block != java.lang.Character.UnicodeBlock.SPECIALS)) {\n                    sb.append(c);\n                    continue;\n                }\n            }\n            sb.append('?');\n        }\n        return sb.toString();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "final char[] chars = (cs.length <= org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) ? cs : java.util.Arrays.copyOf(cs, org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH)",
            "src_parent": "{\n    final char[] cs = s.toCharArray();\n    final char[] chars = (cs.length <= org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) ? cs : java.util.Arrays.copyOf(cs, org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH);\n    if (cs.length > org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) {\n        for (int i = org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH - 3; i < org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH; i++) {\n            chars[i] = '.';\n        }\n    }\n    final int len = chars.length;\n    final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!java.lang.Character.isISOControl(c)) {\n            java.lang.Character.UnicodeBlock block = java.lang.Character.UnicodeBlock.of(c);\n            if ((block != null) && (block != java.lang.Character.UnicodeBlock.SPECIALS)) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (cs.length > org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) {\n    for (int i = org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH - 3; i < org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH; i++) {\n        chars[i] = '.';\n    }\n}",
            "src_parent": "{\n    final char[] cs = s.toCharArray();\n    final char[] chars = (cs.length <= org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) ? cs : java.util.Arrays.copyOf(cs, org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH);\n    if (cs.length > org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH) {\n        for (int i = org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH - 3; i < org.apache.commons.compress.utils.ArchiveUtils.MAX_SANITIZED_NAME_LENGTH; i++) {\n            chars[i] = '.';\n        }\n    }\n    final int len = chars.length;\n    final java.lang.StringBuilder sb = new java.lang.StringBuilder();\n    for (int i = 0; i < len; i++) {\n        final char c = chars[i];\n        if (!java.lang.Character.isISOControl(c)) {\n            java.lang.Character.UnicodeBlock block = java.lang.Character.UnicodeBlock.of(c);\n            if ((block != null) && (block != java.lang.Character.UnicodeBlock.SPECIALS)) {\n                sb.append(c);\n                continue;\n            }\n        }\n        sb.append('?');\n    }\n    return sb.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "ArchiveUtils"
    }
  ],
  "id": "Compress_39"
}