{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected static final java.util.Set<java.lang.String> DEFAULT_NO_DESER_CLASS_NAMES;",
            "src_parent": "public class BeanDeserializerFactory extends com.fasterxml.jackson.databind.deser.BasicDeserializerFactory implements java.io.Serializable {\n    private static final long serialVersionUID = 1;\n\n    private static final java.lang.Class<?>[] INIT_CAUSE_PARAMS = new java.lang.Class<?>[]{ java.lang.Throwable.class };\n\n    private static final java.lang.Class<?>[] NO_VIEWS = new java.lang.Class<?>[0];\n\n    protected static final java.util.Set<java.lang.String> DEFAULT_NO_DESER_CLASS_NAMES;\n\n    static {\n        java.util.Set<java.lang.String> s = new java.util.HashSet<>();\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        DEFAULT_NO_DESER_CLASS_NAMES = java.util.Collections.unmodifiableSet(s);\n    }\n\n    protected java.util.Set<java.lang.String> _cfgIllegalClassNames = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.DEFAULT_NO_DESER_CLASS_NAMES;\n\n    public static final com.fasterxml.jackson.databind.deser.BeanDeserializerFactory instance = new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(new com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig());\n\n    public BeanDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        super(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.DeserializerFactory withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        if (_factoryConfig == config) {\n            return this;\n        }\n        if (getClass() != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.class) {\n            throw new java.lang.IllegalStateException(((\"Subtype of BeanDeserializerFactory (\" + getClass().getName()) + \") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \") + \"additional deserializer definitions\");\n        }\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        if ((type.isAbstract() && (!type.isPrimitive())) && (!type.isEnumType())) {\n            com.fasterxml.jackson.databind.JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        @java.lang.SuppressWarnings(\"unchecked\")\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (findStdDeserializer(ctxt, type, beanDesc)));\n        if (deser != null) {\n            return deser;\n        }\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        checkIllegalTypes(ctxt, type, beanDesc);\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> builderClass) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType builderType = ctxt.constructType(builderClass);\n        com.fasterxml.jackson.databind.BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);\n        return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<?> findStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType materializeAbstractType(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        for (com.fasterxml.jackson.databind.AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {\n            com.fasterxml.jackson.databind.JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc);\n            if (concrete != null) {\n                return concrete;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator;\n        try {\n            valueInstantiator = findValueInstantiator(ctxt, beanDesc);\n        } catch (java.lang.NoClassDefFoundError error) {\n            return new com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer(error);\n        }\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, beanDesc, builder);\n        addObjectIdReader(ctxt, beanDesc, builder);\n        addReferenceProperties(ctxt, beanDesc, builder);\n        addInjectables(ctxt, beanDesc, builder);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer;\n        if (type.isAbstract() && (!valueInstantiator.canInstantiate())) {\n            deserializer = builder.buildAbstract();\n        } else {\n            deserializer = builder.build();\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription builderDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, builderDesc);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, builderDesc, builder);\n        addObjectIdReader(ctxt, builderDesc, builder);\n        addReferenceProperties(ctxt, builderDesc, builder);\n        addInjectables(ctxt, builderDesc, builder);\n        com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig();\n        final java.lang.String buildMethodName = (builderConfig == null) ? \"build\" : builderConfig.buildMethodName;\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null);\n        if (buildMethod != null) {\n            if (config.canOverrideAccessModifiers()) {\n                com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n        }\n        builder.setPOJOBuilder(buildMethod, builderConfig);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, builderDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.buildBuilderBased(valueType, buildMethodName);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, builderDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected void addObjectIdReader(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();\n        if (objectIdInfo == null) {\n            return;\n        }\n        java.lang.Class<?> implClass = objectIdInfo.getGeneratorType();\n        com.fasterxml.jackson.databind.JavaType idType;\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty idProp;\n        com.fasterxml.jackson.annotation.ObjectIdGenerator<?> gen;\n        com.fasterxml.jackson.annotation.ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n        if (implClass == com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class) {\n            com.fasterxml.jackson.databind.PropertyName propName = objectIdInfo.getPropertyName();\n            idProp = builder.findProperty(propName);\n            if (idProp == null) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName()) + \": can not find property with name '\") + propName) + \"'\");\n            }\n            idType = idProp.getType();\n            gen = new com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n        } else {\n            com.fasterxml.jackson.databind.JavaType type = ctxt.constructType(implClass);\n            idType = ctxt.getTypeFactory().findTypeParameters(type, com.fasterxml.jackson.annotation.ObjectIdGenerator.class)[0];\n            idProp = null;\n            gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);\n        builder.setObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\n        addBeanProps(ctxt, beanDesc, builder);\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod am = beanDesc.findMethod(\"initCause\", com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.INIT_CAUSE_PARAMS);\n        if (am != null) {\n            com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new com.fasterxml.jackson.databind.PropertyName(\"cause\"));\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0));\n            if (prop != null) {\n                builder.addOrReplaceProperty(prop, true);\n            }\n        }\n        builder.addIgnorable(\"localizedMessage\");\n        builder.addIgnorable(\"suppressed\");\n        builder.addIgnorable(\"message\");\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.build();\n        if (deserializer instanceof com.fasterxml.jackson.databind.deser.BeanDeserializer) {\n            deserializer = new com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer(((com.fasterxml.jackson.databind.deser.BeanDeserializer) (deserializer)));\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder constructBeanDeserializerBuilder(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder(beanDesc, ctxt.getConfig());\n    }\n\n    protected void addBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final boolean isConcrete = !beanDesc.getType().isAbstract();\n        final com.fasterxml.jackson.databind.deser.SettableBeanProperty[] creatorProps = (isConcrete) ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null;\n        final boolean hasCreatorProps = creatorProps != null;\n        com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value ignorals = ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo());\n        java.util.Set<java.lang.String> ignored;\n        if (ignorals != null) {\n            boolean ignoreAny = ignorals.getIgnoreUnknown();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n            ignored = ignorals.getIgnored();\n            for (java.lang.String propName : ignored) {\n                builder.addIgnorable(propName);\n            }\n        } else {\n            ignored = java.util.Collections.emptySet();\n        }\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember anySetterField = null;\n        if (anySetterMethod != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n        } else {\n            anySetterField = beanDesc.findAnySetterField();\n            if (anySetterField != null) {\n                builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n            }\n        }\n        if ((anySetterMethod == null) && (anySetterField == null)) {\n            java.util.Collection<java.lang.String> ignored2 = beanDesc.getIgnoredPropertyNames();\n            if (ignored2 != null) {\n                for (java.lang.String propName : ignored2) {\n                    builder.addIgnorable(propName);\n                }\n            }\n        }\n        final boolean useGettersAsSetters = ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS);\n        java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n            }\n        }\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef : propDefs) {\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = null;\n            if (propDef.hasSetter()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n                java.lang.Class<?> rawPropertyType = getter.getRawType();\n                if (java.util.Collection.class.isAssignableFrom(rawPropertyType) || java.util.Map.class.isAssignableFrom(rawPropertyType)) {\n                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                }\n            }\n            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                final java.lang.String name = propDef.getName();\n                com.fasterxml.jackson.databind.deser.CreatorProperty cprop = null;\n                if (creatorProps != null) {\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        if (name.equals(cp.getName()) && (cp instanceof com.fasterxml.jackson.databind.deser.CreatorProperty)) {\n                            cprop = ((com.fasterxml.jackson.databind.deser.CreatorProperty) (cp));\n                            break;\n                        }\n                    }\n                }\n                if (cprop == null) {\n                    java.util.List<java.lang.String> n = new java.util.ArrayList<>();\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        n.add(cp.getName());\n                    }\n                    ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n);\n                    continue;\n                }\n                if (prop != null) {\n                    cprop.setFallbackSetter(prop);\n                }\n                prop = cprop;\n                builder.addCreatorProperty(cprop);\n                continue;\n            }\n            if (prop != null) {\n                java.lang.Class<?>[] views = propDef.findViews();\n                if (views == null) {\n                    if (!ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                        views = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.NO_VIEWS;\n                    }\n                }\n                prop.setViews(views);\n                builder.addProperty(prop);\n            }\n        }\n    }\n\n    protected java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> filterBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder, java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefsIn, java.util.Set<java.lang.String> ignored) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> result = new java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>(java.lang.Math.max(4, propDefsIn.size()));\n        java.util.HashMap<java.lang.Class<?>, java.lang.Boolean> ignoredTypes = new java.util.HashMap<java.lang.Class<?>, java.lang.Boolean>();\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition property : propDefsIn) {\n            java.lang.String name = property.getName();\n            if (ignored.contains(name)) {\n                continue;\n            }\n            if (!property.hasConstructorParameter()) {\n                java.lang.Class<?> rawPropertyType = null;\n                if (property.hasSetter()) {\n                    rawPropertyType = property.getSetter().getRawParameterType(0);\n                } else if (property.hasField()) {\n                    rawPropertyType = property.getField().getRawType();\n                }\n                if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n                    builder.addIgnorable(name);\n                    continue;\n                }\n            }\n            result.add(property);\n        }\n        return result;\n    }\n\n    protected void addReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> refs = beanDesc.findBackReferenceProperties();\n        if (refs != null) {\n            for (java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> en : refs.entrySet()) {\n                java.lang.String name = en.getKey();\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = en.getValue();\n                com.fasterxml.jackson.databind.JavaType type;\n                if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n                    type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (m)).getParameterType(0);\n                } else {\n                    type = m.getType();\n                    if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedParameter) {\n                        ctxt.reportBadTypeDefinition(beanDesc, \"Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)\", beanDesc.getBeanClass().getName(), name, ((com.fasterxml.jackson.databind.introspect.AnnotatedParameter) (m)).getIndex());\n                    }\n                }\n                com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), m, com.fasterxml.jackson.databind.PropertyName.construct(name));\n                builder.addBackReferenceProperty(name, constructSettableProperty(ctxt, beanDesc, propDef, type));\n            }\n        }\n    }\n\n    protected void addInjectables(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> raw = beanDesc.findInjectables();\n        if (raw != null) {\n            for (java.util.Map.Entry<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> entry : raw.entrySet()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = entry.getValue();\n                builder.addInjectable(com.fasterxml.jackson.databind.PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey());\n            }\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.deser.SettableAnyProperty constructAnySetter(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = null;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)).getParameterType(1);\n        } else if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedField) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)).getType().getContentType();\n        }\n        type = resolveMemberAndTypeAnnotations(ctxt, mutator, type);\n        com.fasterxml.jackson.databind.BeanProperty.Std prop = new com.fasterxml.jackson.databind.BeanProperty.Std(com.fasterxml.jackson.databind.PropertyName.construct(mutator.getName()), type, null, beanDesc.getClassAnnotations(), mutator, com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL);\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (ctxt.handlePrimaryContextualization(deser, prop, type)));\n        }\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        return new com.fasterxml.jackson.databind.deser.SettableAnyProperty(prop, mutator, type, deser, typeDeser);\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSettableProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef, com.fasterxml.jackson.databind.JavaType propType0) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator = propDef.getNonConstructorMutator();\n        if (mutator == null) {\n            ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");\n        }\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            prop = new com.fasterxml.jackson.databind.deser.impl.MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)));\n        } else {\n            prop = new com.fasterxml.jackson.databind.deser.impl.FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)));\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();\n        if ((ref != null) && ref.isManagedReference()) {\n            prop.setManagedReferenceName(ref.getName());\n        }\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();\n        if (objectIdInfo != null) {\n            prop.setObjectIdInfo(objectIdInfo);\n        }\n        return prop;\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSetterlessProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType());\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = new com.fasterxml.jackson.databind.deser.impl.SetterlessProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), getter);\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        return prop;\n    }\n\n    protected boolean isPotentialBeanType(java.lang.Class<?> type) {\n        java.lang.String typeStr = com.fasterxml.jackson.databind.util.ClassUtil.canBeABeanType(type);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        if (com.fasterxml.jackson.databind.util.ClassUtil.isProxyType(type)) {\n            throw new java.lang.IllegalArgumentException((\"Can not deserialize Proxy class \" + type.getName()) + \" as a Bean\");\n        }\n        typeStr = com.fasterxml.jackson.databind.util.ClassUtil.isLocalType(type, true);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        return true;\n    }\n\n    protected boolean isIgnorableType(com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> type, java.util.Map<java.lang.Class<?>, java.lang.Boolean> ignoredTypes) {\n        java.lang.Boolean status = ignoredTypes.get(type);\n        if (status != null) {\n            return status.booleanValue();\n        }\n        com.fasterxml.jackson.databind.cfg.ConfigOverride override = config.findConfigOverride(type);\n        if (override != null) {\n            status = override.getIsIgnoredType();\n        }\n        if (status == null) {\n            com.fasterxml.jackson.databind.BeanDescription desc = config.introspectClassAnnotations(type);\n            status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n            if (status == null) {\n                status = java.lang.Boolean.FALSE;\n            }\n        }\n        ignoredTypes.put(type, status);\n        return status.booleanValue();\n    }\n\n    protected void checkIllegalTypes(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.lang.String full = type.getRawClass().getName();\n        if (_cfgIllegalClassNames.contains(full)) {\n            ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "AnonymousExecutable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static {\n    java.util.Set<java.lang.String> s = new java.util.HashSet<>();\n    s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n    s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n    s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n    s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n    s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n    s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n    s.add(\"org.springframework.beans.factory.ObjectFactory\");\n    s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n    DEFAULT_NO_DESER_CLASS_NAMES = java.util.Collections.unmodifiableSet(s);\n}",
            "src_parent": "public class BeanDeserializerFactory extends com.fasterxml.jackson.databind.deser.BasicDeserializerFactory implements java.io.Serializable {\n    private static final long serialVersionUID = 1;\n\n    private static final java.lang.Class<?>[] INIT_CAUSE_PARAMS = new java.lang.Class<?>[]{ java.lang.Throwable.class };\n\n    private static final java.lang.Class<?>[] NO_VIEWS = new java.lang.Class<?>[0];\n\n    protected static final java.util.Set<java.lang.String> DEFAULT_NO_DESER_CLASS_NAMES;\n\n    static {\n        java.util.Set<java.lang.String> s = new java.util.HashSet<>();\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        DEFAULT_NO_DESER_CLASS_NAMES = java.util.Collections.unmodifiableSet(s);\n    }\n\n    protected java.util.Set<java.lang.String> _cfgIllegalClassNames = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.DEFAULT_NO_DESER_CLASS_NAMES;\n\n    public static final com.fasterxml.jackson.databind.deser.BeanDeserializerFactory instance = new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(new com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig());\n\n    public BeanDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        super(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.DeserializerFactory withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        if (_factoryConfig == config) {\n            return this;\n        }\n        if (getClass() != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.class) {\n            throw new java.lang.IllegalStateException(((\"Subtype of BeanDeserializerFactory (\" + getClass().getName()) + \") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \") + \"additional deserializer definitions\");\n        }\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        if ((type.isAbstract() && (!type.isPrimitive())) && (!type.isEnumType())) {\n            com.fasterxml.jackson.databind.JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        @java.lang.SuppressWarnings(\"unchecked\")\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (findStdDeserializer(ctxt, type, beanDesc)));\n        if (deser != null) {\n            return deser;\n        }\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        checkIllegalTypes(ctxt, type, beanDesc);\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> builderClass) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType builderType = ctxt.constructType(builderClass);\n        com.fasterxml.jackson.databind.BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);\n        return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<?> findStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType materializeAbstractType(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        for (com.fasterxml.jackson.databind.AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {\n            com.fasterxml.jackson.databind.JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc);\n            if (concrete != null) {\n                return concrete;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator;\n        try {\n            valueInstantiator = findValueInstantiator(ctxt, beanDesc);\n        } catch (java.lang.NoClassDefFoundError error) {\n            return new com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer(error);\n        }\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, beanDesc, builder);\n        addObjectIdReader(ctxt, beanDesc, builder);\n        addReferenceProperties(ctxt, beanDesc, builder);\n        addInjectables(ctxt, beanDesc, builder);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer;\n        if (type.isAbstract() && (!valueInstantiator.canInstantiate())) {\n            deserializer = builder.buildAbstract();\n        } else {\n            deserializer = builder.build();\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription builderDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, builderDesc);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, builderDesc, builder);\n        addObjectIdReader(ctxt, builderDesc, builder);\n        addReferenceProperties(ctxt, builderDesc, builder);\n        addInjectables(ctxt, builderDesc, builder);\n        com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig();\n        final java.lang.String buildMethodName = (builderConfig == null) ? \"build\" : builderConfig.buildMethodName;\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null);\n        if (buildMethod != null) {\n            if (config.canOverrideAccessModifiers()) {\n                com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n        }\n        builder.setPOJOBuilder(buildMethod, builderConfig);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, builderDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.buildBuilderBased(valueType, buildMethodName);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, builderDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected void addObjectIdReader(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();\n        if (objectIdInfo == null) {\n            return;\n        }\n        java.lang.Class<?> implClass = objectIdInfo.getGeneratorType();\n        com.fasterxml.jackson.databind.JavaType idType;\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty idProp;\n        com.fasterxml.jackson.annotation.ObjectIdGenerator<?> gen;\n        com.fasterxml.jackson.annotation.ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n        if (implClass == com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class) {\n            com.fasterxml.jackson.databind.PropertyName propName = objectIdInfo.getPropertyName();\n            idProp = builder.findProperty(propName);\n            if (idProp == null) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName()) + \": can not find property with name '\") + propName) + \"'\");\n            }\n            idType = idProp.getType();\n            gen = new com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n        } else {\n            com.fasterxml.jackson.databind.JavaType type = ctxt.constructType(implClass);\n            idType = ctxt.getTypeFactory().findTypeParameters(type, com.fasterxml.jackson.annotation.ObjectIdGenerator.class)[0];\n            idProp = null;\n            gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);\n        builder.setObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\n        addBeanProps(ctxt, beanDesc, builder);\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod am = beanDesc.findMethod(\"initCause\", com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.INIT_CAUSE_PARAMS);\n        if (am != null) {\n            com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new com.fasterxml.jackson.databind.PropertyName(\"cause\"));\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0));\n            if (prop != null) {\n                builder.addOrReplaceProperty(prop, true);\n            }\n        }\n        builder.addIgnorable(\"localizedMessage\");\n        builder.addIgnorable(\"suppressed\");\n        builder.addIgnorable(\"message\");\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.build();\n        if (deserializer instanceof com.fasterxml.jackson.databind.deser.BeanDeserializer) {\n            deserializer = new com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer(((com.fasterxml.jackson.databind.deser.BeanDeserializer) (deserializer)));\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder constructBeanDeserializerBuilder(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder(beanDesc, ctxt.getConfig());\n    }\n\n    protected void addBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final boolean isConcrete = !beanDesc.getType().isAbstract();\n        final com.fasterxml.jackson.databind.deser.SettableBeanProperty[] creatorProps = (isConcrete) ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null;\n        final boolean hasCreatorProps = creatorProps != null;\n        com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value ignorals = ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo());\n        java.util.Set<java.lang.String> ignored;\n        if (ignorals != null) {\n            boolean ignoreAny = ignorals.getIgnoreUnknown();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n            ignored = ignorals.getIgnored();\n            for (java.lang.String propName : ignored) {\n                builder.addIgnorable(propName);\n            }\n        } else {\n            ignored = java.util.Collections.emptySet();\n        }\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember anySetterField = null;\n        if (anySetterMethod != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n        } else {\n            anySetterField = beanDesc.findAnySetterField();\n            if (anySetterField != null) {\n                builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n            }\n        }\n        if ((anySetterMethod == null) && (anySetterField == null)) {\n            java.util.Collection<java.lang.String> ignored2 = beanDesc.getIgnoredPropertyNames();\n            if (ignored2 != null) {\n                for (java.lang.String propName : ignored2) {\n                    builder.addIgnorable(propName);\n                }\n            }\n        }\n        final boolean useGettersAsSetters = ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS);\n        java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n            }\n        }\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef : propDefs) {\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = null;\n            if (propDef.hasSetter()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n                java.lang.Class<?> rawPropertyType = getter.getRawType();\n                if (java.util.Collection.class.isAssignableFrom(rawPropertyType) || java.util.Map.class.isAssignableFrom(rawPropertyType)) {\n                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                }\n            }\n            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                final java.lang.String name = propDef.getName();\n                com.fasterxml.jackson.databind.deser.CreatorProperty cprop = null;\n                if (creatorProps != null) {\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        if (name.equals(cp.getName()) && (cp instanceof com.fasterxml.jackson.databind.deser.CreatorProperty)) {\n                            cprop = ((com.fasterxml.jackson.databind.deser.CreatorProperty) (cp));\n                            break;\n                        }\n                    }\n                }\n                if (cprop == null) {\n                    java.util.List<java.lang.String> n = new java.util.ArrayList<>();\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        n.add(cp.getName());\n                    }\n                    ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n);\n                    continue;\n                }\n                if (prop != null) {\n                    cprop.setFallbackSetter(prop);\n                }\n                prop = cprop;\n                builder.addCreatorProperty(cprop);\n                continue;\n            }\n            if (prop != null) {\n                java.lang.Class<?>[] views = propDef.findViews();\n                if (views == null) {\n                    if (!ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                        views = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.NO_VIEWS;\n                    }\n                }\n                prop.setViews(views);\n                builder.addProperty(prop);\n            }\n        }\n    }\n\n    protected java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> filterBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder, java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefsIn, java.util.Set<java.lang.String> ignored) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> result = new java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>(java.lang.Math.max(4, propDefsIn.size()));\n        java.util.HashMap<java.lang.Class<?>, java.lang.Boolean> ignoredTypes = new java.util.HashMap<java.lang.Class<?>, java.lang.Boolean>();\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition property : propDefsIn) {\n            java.lang.String name = property.getName();\n            if (ignored.contains(name)) {\n                continue;\n            }\n            if (!property.hasConstructorParameter()) {\n                java.lang.Class<?> rawPropertyType = null;\n                if (property.hasSetter()) {\n                    rawPropertyType = property.getSetter().getRawParameterType(0);\n                } else if (property.hasField()) {\n                    rawPropertyType = property.getField().getRawType();\n                }\n                if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n                    builder.addIgnorable(name);\n                    continue;\n                }\n            }\n            result.add(property);\n        }\n        return result;\n    }\n\n    protected void addReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> refs = beanDesc.findBackReferenceProperties();\n        if (refs != null) {\n            for (java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> en : refs.entrySet()) {\n                java.lang.String name = en.getKey();\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = en.getValue();\n                com.fasterxml.jackson.databind.JavaType type;\n                if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n                    type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (m)).getParameterType(0);\n                } else {\n                    type = m.getType();\n                    if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedParameter) {\n                        ctxt.reportBadTypeDefinition(beanDesc, \"Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)\", beanDesc.getBeanClass().getName(), name, ((com.fasterxml.jackson.databind.introspect.AnnotatedParameter) (m)).getIndex());\n                    }\n                }\n                com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), m, com.fasterxml.jackson.databind.PropertyName.construct(name));\n                builder.addBackReferenceProperty(name, constructSettableProperty(ctxt, beanDesc, propDef, type));\n            }\n        }\n    }\n\n    protected void addInjectables(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> raw = beanDesc.findInjectables();\n        if (raw != null) {\n            for (java.util.Map.Entry<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> entry : raw.entrySet()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = entry.getValue();\n                builder.addInjectable(com.fasterxml.jackson.databind.PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey());\n            }\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.deser.SettableAnyProperty constructAnySetter(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = null;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)).getParameterType(1);\n        } else if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedField) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)).getType().getContentType();\n        }\n        type = resolveMemberAndTypeAnnotations(ctxt, mutator, type);\n        com.fasterxml.jackson.databind.BeanProperty.Std prop = new com.fasterxml.jackson.databind.BeanProperty.Std(com.fasterxml.jackson.databind.PropertyName.construct(mutator.getName()), type, null, beanDesc.getClassAnnotations(), mutator, com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL);\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (ctxt.handlePrimaryContextualization(deser, prop, type)));\n        }\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        return new com.fasterxml.jackson.databind.deser.SettableAnyProperty(prop, mutator, type, deser, typeDeser);\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSettableProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef, com.fasterxml.jackson.databind.JavaType propType0) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator = propDef.getNonConstructorMutator();\n        if (mutator == null) {\n            ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");\n        }\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            prop = new com.fasterxml.jackson.databind.deser.impl.MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)));\n        } else {\n            prop = new com.fasterxml.jackson.databind.deser.impl.FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)));\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();\n        if ((ref != null) && ref.isManagedReference()) {\n            prop.setManagedReferenceName(ref.getName());\n        }\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();\n        if (objectIdInfo != null) {\n            prop.setObjectIdInfo(objectIdInfo);\n        }\n        return prop;\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSetterlessProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType());\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = new com.fasterxml.jackson.databind.deser.impl.SetterlessProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), getter);\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        return prop;\n    }\n\n    protected boolean isPotentialBeanType(java.lang.Class<?> type) {\n        java.lang.String typeStr = com.fasterxml.jackson.databind.util.ClassUtil.canBeABeanType(type);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        if (com.fasterxml.jackson.databind.util.ClassUtil.isProxyType(type)) {\n            throw new java.lang.IllegalArgumentException((\"Can not deserialize Proxy class \" + type.getName()) + \" as a Bean\");\n        }\n        typeStr = com.fasterxml.jackson.databind.util.ClassUtil.isLocalType(type, true);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        return true;\n    }\n\n    protected boolean isIgnorableType(com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> type, java.util.Map<java.lang.Class<?>, java.lang.Boolean> ignoredTypes) {\n        java.lang.Boolean status = ignoredTypes.get(type);\n        if (status != null) {\n            return status.booleanValue();\n        }\n        com.fasterxml.jackson.databind.cfg.ConfigOverride override = config.findConfigOverride(type);\n        if (override != null) {\n            status = override.getIsIgnoredType();\n        }\n        if (status == null) {\n            com.fasterxml.jackson.databind.BeanDescription desc = config.introspectClassAnnotations(type);\n            status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n            if (status == null) {\n                status = java.lang.Boolean.FALSE;\n            }\n        }\n        ignoredTypes.put(type, status);\n        return status.booleanValue();\n    }\n\n    protected void checkIllegalTypes(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.lang.String full = type.getRawClass().getName();\n        if (_cfgIllegalClassNames.contains(full)) {\n            ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "AnonymousExecutable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected java.util.Set<java.lang.String> _cfgIllegalClassNames = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.DEFAULT_NO_DESER_CLASS_NAMES;",
            "src_parent": "public class BeanDeserializerFactory extends com.fasterxml.jackson.databind.deser.BasicDeserializerFactory implements java.io.Serializable {\n    private static final long serialVersionUID = 1;\n\n    private static final java.lang.Class<?>[] INIT_CAUSE_PARAMS = new java.lang.Class<?>[]{ java.lang.Throwable.class };\n\n    private static final java.lang.Class<?>[] NO_VIEWS = new java.lang.Class<?>[0];\n\n    protected static final java.util.Set<java.lang.String> DEFAULT_NO_DESER_CLASS_NAMES;\n\n    static {\n        java.util.Set<java.lang.String> s = new java.util.HashSet<>();\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        DEFAULT_NO_DESER_CLASS_NAMES = java.util.Collections.unmodifiableSet(s);\n    }\n\n    protected java.util.Set<java.lang.String> _cfgIllegalClassNames = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.DEFAULT_NO_DESER_CLASS_NAMES;\n\n    public static final com.fasterxml.jackson.databind.deser.BeanDeserializerFactory instance = new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(new com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig());\n\n    public BeanDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        super(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.DeserializerFactory withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        if (_factoryConfig == config) {\n            return this;\n        }\n        if (getClass() != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.class) {\n            throw new java.lang.IllegalStateException(((\"Subtype of BeanDeserializerFactory (\" + getClass().getName()) + \") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \") + \"additional deserializer definitions\");\n        }\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        if ((type.isAbstract() && (!type.isPrimitive())) && (!type.isEnumType())) {\n            com.fasterxml.jackson.databind.JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        @java.lang.SuppressWarnings(\"unchecked\")\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (findStdDeserializer(ctxt, type, beanDesc)));\n        if (deser != null) {\n            return deser;\n        }\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        checkIllegalTypes(ctxt, type, beanDesc);\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> builderClass) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType builderType = ctxt.constructType(builderClass);\n        com.fasterxml.jackson.databind.BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);\n        return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<?> findStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType materializeAbstractType(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        for (com.fasterxml.jackson.databind.AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {\n            com.fasterxml.jackson.databind.JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc);\n            if (concrete != null) {\n                return concrete;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator;\n        try {\n            valueInstantiator = findValueInstantiator(ctxt, beanDesc);\n        } catch (java.lang.NoClassDefFoundError error) {\n            return new com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer(error);\n        }\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, beanDesc, builder);\n        addObjectIdReader(ctxt, beanDesc, builder);\n        addReferenceProperties(ctxt, beanDesc, builder);\n        addInjectables(ctxt, beanDesc, builder);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer;\n        if (type.isAbstract() && (!valueInstantiator.canInstantiate())) {\n            deserializer = builder.buildAbstract();\n        } else {\n            deserializer = builder.build();\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription builderDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, builderDesc);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, builderDesc, builder);\n        addObjectIdReader(ctxt, builderDesc, builder);\n        addReferenceProperties(ctxt, builderDesc, builder);\n        addInjectables(ctxt, builderDesc, builder);\n        com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig();\n        final java.lang.String buildMethodName = (builderConfig == null) ? \"build\" : builderConfig.buildMethodName;\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null);\n        if (buildMethod != null) {\n            if (config.canOverrideAccessModifiers()) {\n                com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n        }\n        builder.setPOJOBuilder(buildMethod, builderConfig);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, builderDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.buildBuilderBased(valueType, buildMethodName);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, builderDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected void addObjectIdReader(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();\n        if (objectIdInfo == null) {\n            return;\n        }\n        java.lang.Class<?> implClass = objectIdInfo.getGeneratorType();\n        com.fasterxml.jackson.databind.JavaType idType;\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty idProp;\n        com.fasterxml.jackson.annotation.ObjectIdGenerator<?> gen;\n        com.fasterxml.jackson.annotation.ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n        if (implClass == com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class) {\n            com.fasterxml.jackson.databind.PropertyName propName = objectIdInfo.getPropertyName();\n            idProp = builder.findProperty(propName);\n            if (idProp == null) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName()) + \": can not find property with name '\") + propName) + \"'\");\n            }\n            idType = idProp.getType();\n            gen = new com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n        } else {\n            com.fasterxml.jackson.databind.JavaType type = ctxt.constructType(implClass);\n            idType = ctxt.getTypeFactory().findTypeParameters(type, com.fasterxml.jackson.annotation.ObjectIdGenerator.class)[0];\n            idProp = null;\n            gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);\n        builder.setObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\n        addBeanProps(ctxt, beanDesc, builder);\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod am = beanDesc.findMethod(\"initCause\", com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.INIT_CAUSE_PARAMS);\n        if (am != null) {\n            com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new com.fasterxml.jackson.databind.PropertyName(\"cause\"));\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0));\n            if (prop != null) {\n                builder.addOrReplaceProperty(prop, true);\n            }\n        }\n        builder.addIgnorable(\"localizedMessage\");\n        builder.addIgnorable(\"suppressed\");\n        builder.addIgnorable(\"message\");\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.build();\n        if (deserializer instanceof com.fasterxml.jackson.databind.deser.BeanDeserializer) {\n            deserializer = new com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer(((com.fasterxml.jackson.databind.deser.BeanDeserializer) (deserializer)));\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder constructBeanDeserializerBuilder(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder(beanDesc, ctxt.getConfig());\n    }\n\n    protected void addBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final boolean isConcrete = !beanDesc.getType().isAbstract();\n        final com.fasterxml.jackson.databind.deser.SettableBeanProperty[] creatorProps = (isConcrete) ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null;\n        final boolean hasCreatorProps = creatorProps != null;\n        com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value ignorals = ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo());\n        java.util.Set<java.lang.String> ignored;\n        if (ignorals != null) {\n            boolean ignoreAny = ignorals.getIgnoreUnknown();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n            ignored = ignorals.getIgnored();\n            for (java.lang.String propName : ignored) {\n                builder.addIgnorable(propName);\n            }\n        } else {\n            ignored = java.util.Collections.emptySet();\n        }\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember anySetterField = null;\n        if (anySetterMethod != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n        } else {\n            anySetterField = beanDesc.findAnySetterField();\n            if (anySetterField != null) {\n                builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n            }\n        }\n        if ((anySetterMethod == null) && (anySetterField == null)) {\n            java.util.Collection<java.lang.String> ignored2 = beanDesc.getIgnoredPropertyNames();\n            if (ignored2 != null) {\n                for (java.lang.String propName : ignored2) {\n                    builder.addIgnorable(propName);\n                }\n            }\n        }\n        final boolean useGettersAsSetters = ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS);\n        java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n            }\n        }\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef : propDefs) {\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = null;\n            if (propDef.hasSetter()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n                java.lang.Class<?> rawPropertyType = getter.getRawType();\n                if (java.util.Collection.class.isAssignableFrom(rawPropertyType) || java.util.Map.class.isAssignableFrom(rawPropertyType)) {\n                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                }\n            }\n            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                final java.lang.String name = propDef.getName();\n                com.fasterxml.jackson.databind.deser.CreatorProperty cprop = null;\n                if (creatorProps != null) {\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        if (name.equals(cp.getName()) && (cp instanceof com.fasterxml.jackson.databind.deser.CreatorProperty)) {\n                            cprop = ((com.fasterxml.jackson.databind.deser.CreatorProperty) (cp));\n                            break;\n                        }\n                    }\n                }\n                if (cprop == null) {\n                    java.util.List<java.lang.String> n = new java.util.ArrayList<>();\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        n.add(cp.getName());\n                    }\n                    ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n);\n                    continue;\n                }\n                if (prop != null) {\n                    cprop.setFallbackSetter(prop);\n                }\n                prop = cprop;\n                builder.addCreatorProperty(cprop);\n                continue;\n            }\n            if (prop != null) {\n                java.lang.Class<?>[] views = propDef.findViews();\n                if (views == null) {\n                    if (!ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                        views = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.NO_VIEWS;\n                    }\n                }\n                prop.setViews(views);\n                builder.addProperty(prop);\n            }\n        }\n    }\n\n    protected java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> filterBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder, java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefsIn, java.util.Set<java.lang.String> ignored) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> result = new java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>(java.lang.Math.max(4, propDefsIn.size()));\n        java.util.HashMap<java.lang.Class<?>, java.lang.Boolean> ignoredTypes = new java.util.HashMap<java.lang.Class<?>, java.lang.Boolean>();\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition property : propDefsIn) {\n            java.lang.String name = property.getName();\n            if (ignored.contains(name)) {\n                continue;\n            }\n            if (!property.hasConstructorParameter()) {\n                java.lang.Class<?> rawPropertyType = null;\n                if (property.hasSetter()) {\n                    rawPropertyType = property.getSetter().getRawParameterType(0);\n                } else if (property.hasField()) {\n                    rawPropertyType = property.getField().getRawType();\n                }\n                if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n                    builder.addIgnorable(name);\n                    continue;\n                }\n            }\n            result.add(property);\n        }\n        return result;\n    }\n\n    protected void addReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> refs = beanDesc.findBackReferenceProperties();\n        if (refs != null) {\n            for (java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> en : refs.entrySet()) {\n                java.lang.String name = en.getKey();\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = en.getValue();\n                com.fasterxml.jackson.databind.JavaType type;\n                if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n                    type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (m)).getParameterType(0);\n                } else {\n                    type = m.getType();\n                    if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedParameter) {\n                        ctxt.reportBadTypeDefinition(beanDesc, \"Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)\", beanDesc.getBeanClass().getName(), name, ((com.fasterxml.jackson.databind.introspect.AnnotatedParameter) (m)).getIndex());\n                    }\n                }\n                com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), m, com.fasterxml.jackson.databind.PropertyName.construct(name));\n                builder.addBackReferenceProperty(name, constructSettableProperty(ctxt, beanDesc, propDef, type));\n            }\n        }\n    }\n\n    protected void addInjectables(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> raw = beanDesc.findInjectables();\n        if (raw != null) {\n            for (java.util.Map.Entry<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> entry : raw.entrySet()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = entry.getValue();\n                builder.addInjectable(com.fasterxml.jackson.databind.PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey());\n            }\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.deser.SettableAnyProperty constructAnySetter(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = null;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)).getParameterType(1);\n        } else if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedField) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)).getType().getContentType();\n        }\n        type = resolveMemberAndTypeAnnotations(ctxt, mutator, type);\n        com.fasterxml.jackson.databind.BeanProperty.Std prop = new com.fasterxml.jackson.databind.BeanProperty.Std(com.fasterxml.jackson.databind.PropertyName.construct(mutator.getName()), type, null, beanDesc.getClassAnnotations(), mutator, com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL);\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (ctxt.handlePrimaryContextualization(deser, prop, type)));\n        }\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        return new com.fasterxml.jackson.databind.deser.SettableAnyProperty(prop, mutator, type, deser, typeDeser);\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSettableProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef, com.fasterxml.jackson.databind.JavaType propType0) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator = propDef.getNonConstructorMutator();\n        if (mutator == null) {\n            ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");\n        }\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            prop = new com.fasterxml.jackson.databind.deser.impl.MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)));\n        } else {\n            prop = new com.fasterxml.jackson.databind.deser.impl.FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)));\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();\n        if ((ref != null) && ref.isManagedReference()) {\n            prop.setManagedReferenceName(ref.getName());\n        }\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();\n        if (objectIdInfo != null) {\n            prop.setObjectIdInfo(objectIdInfo);\n        }\n        return prop;\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSetterlessProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType());\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = new com.fasterxml.jackson.databind.deser.impl.SetterlessProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), getter);\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        return prop;\n    }\n\n    protected boolean isPotentialBeanType(java.lang.Class<?> type) {\n        java.lang.String typeStr = com.fasterxml.jackson.databind.util.ClassUtil.canBeABeanType(type);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        if (com.fasterxml.jackson.databind.util.ClassUtil.isProxyType(type)) {\n            throw new java.lang.IllegalArgumentException((\"Can not deserialize Proxy class \" + type.getName()) + \" as a Bean\");\n        }\n        typeStr = com.fasterxml.jackson.databind.util.ClassUtil.isLocalType(type, true);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        return true;\n    }\n\n    protected boolean isIgnorableType(com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> type, java.util.Map<java.lang.Class<?>, java.lang.Boolean> ignoredTypes) {\n        java.lang.Boolean status = ignoredTypes.get(type);\n        if (status != null) {\n            return status.booleanValue();\n        }\n        com.fasterxml.jackson.databind.cfg.ConfigOverride override = config.findConfigOverride(type);\n        if (override != null) {\n            status = override.getIsIgnoredType();\n        }\n        if (status == null) {\n            com.fasterxml.jackson.databind.BeanDescription desc = config.introspectClassAnnotations(type);\n            status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n            if (status == null) {\n                status = java.lang.Boolean.FALSE;\n            }\n        }\n        ignoredTypes.put(type, status);\n        return status.booleanValue();\n    }\n\n    protected void checkIllegalTypes(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.lang.String full = type.getRawClass().getName();\n        if (_cfgIllegalClassNames.contains(full)) {\n            ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "checkIllegalTypes(ctxt, type, beanDesc)",
            "src_parent": "{\n    final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n    com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n    if (custom != null) {\n        return custom;\n    }\n    if (type.isThrowable()) {\n        return buildThrowableDeserializer(ctxt, type, beanDesc);\n    }\n    if ((type.isAbstract() && (!type.isPrimitive())) && (!type.isEnumType())) {\n        com.fasterxml.jackson.databind.JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n        if (concreteType != null) {\n            beanDesc = config.introspect(concreteType);\n            return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n        }\n    }\n    @java.lang.SuppressWarnings(\"unchecked\")\n    com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (findStdDeserializer(ctxt, type, beanDesc)));\n    if (deser != null) {\n        return deser;\n    }\n    if (!isPotentialBeanType(type.getRawClass())) {\n        return null;\n    }\n    checkIllegalTypes(ctxt, type, beanDesc);\n    return buildBeanDeserializer(ctxt, type, beanDesc);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected void checkIllegalTypes(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n    java.lang.String full = type.getRawClass().getName();\n    if (_cfgIllegalClassNames.contains(full)) {\n        ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);\n    }\n}",
            "src_parent": "public class BeanDeserializerFactory extends com.fasterxml.jackson.databind.deser.BasicDeserializerFactory implements java.io.Serializable {\n    private static final long serialVersionUID = 1;\n\n    private static final java.lang.Class<?>[] INIT_CAUSE_PARAMS = new java.lang.Class<?>[]{ java.lang.Throwable.class };\n\n    private static final java.lang.Class<?>[] NO_VIEWS = new java.lang.Class<?>[0];\n\n    protected static final java.util.Set<java.lang.String> DEFAULT_NO_DESER_CLASS_NAMES;\n\n    static {\n        java.util.Set<java.lang.String> s = new java.util.HashSet<>();\n        s.add(\"org.apache.commons.collections.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");\n        s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\");\n        s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\");\n        s.add(\"org.codehaus.groovy.runtime.MethodClosure\");\n        s.add(\"org.springframework.beans.factory.ObjectFactory\");\n        s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n        DEFAULT_NO_DESER_CLASS_NAMES = java.util.Collections.unmodifiableSet(s);\n    }\n\n    protected java.util.Set<java.lang.String> _cfgIllegalClassNames = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.DEFAULT_NO_DESER_CLASS_NAMES;\n\n    public static final com.fasterxml.jackson.databind.deser.BeanDeserializerFactory instance = new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(new com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig());\n\n    public BeanDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        super(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.deser.DeserializerFactory withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig config) {\n        if (_factoryConfig == config) {\n            return this;\n        }\n        if (getClass() != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.class) {\n            throw new java.lang.IllegalStateException(((\"Subtype of BeanDeserializerFactory (\" + getClass().getName()) + \") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \") + \"additional deserializer definitions\");\n        }\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerFactory(config);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> custom = _findCustomBeanDeserializer(type, config, beanDesc);\n        if (custom != null) {\n            return custom;\n        }\n        if (type.isThrowable()) {\n            return buildThrowableDeserializer(ctxt, type, beanDesc);\n        }\n        if ((type.isAbstract() && (!type.isPrimitive())) && (!type.isEnumType())) {\n            com.fasterxml.jackson.databind.JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc);\n            if (concreteType != null) {\n                beanDesc = config.introspect(concreteType);\n                return buildBeanDeserializer(ctxt, concreteType, beanDesc);\n            }\n        }\n        @java.lang.SuppressWarnings(\"unchecked\")\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (findStdDeserializer(ctxt, type, beanDesc)));\n        if (deser != null) {\n            return deser;\n        }\n        if (!isPotentialBeanType(type.getRawClass())) {\n            return null;\n        }\n        checkIllegalTypes(ctxt, type, beanDesc);\n        return buildBeanDeserializer(ctxt, type, beanDesc);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> builderClass) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType builderType = ctxt.constructType(builderClass);\n        com.fasterxml.jackson.databind.BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType);\n        return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);\n    }\n\n    protected com.fasterxml.jackson.databind.JsonDeserializer<?> findStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc);\n        if (deser != null) {\n            if (_factoryConfig.hasDeserializerModifiers()) {\n                for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                    deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser);\n                }\n            }\n        }\n        return deser;\n    }\n\n    protected com.fasterxml.jackson.databind.JavaType materializeAbstractType(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        for (com.fasterxml.jackson.databind.AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {\n            com.fasterxml.jackson.databind.JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc);\n            if (concrete != null) {\n                return concrete;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator;\n        try {\n            valueInstantiator = findValueInstantiator(ctxt, beanDesc);\n        } catch (java.lang.NoClassDefFoundError error) {\n            return new com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer(error);\n        }\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, beanDesc, builder);\n        addObjectIdReader(ctxt, beanDesc, builder);\n        addReferenceProperties(ctxt, beanDesc, builder);\n        addInjectables(ctxt, beanDesc, builder);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer;\n        if (type.isAbstract() && (!valueInstantiator.canInstantiate())) {\n            deserializer = builder.buildAbstract();\n        } else {\n            deserializer = builder.build();\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType valueType, com.fasterxml.jackson.databind.BeanDescription builderDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.deser.ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, builderDesc);\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc);\n        builder.setValueInstantiator(valueInstantiator);\n        addBeanProps(ctxt, builderDesc, builder);\n        addObjectIdReader(ctxt, builderDesc, builder);\n        addReferenceProperties(ctxt, builderDesc, builder);\n        addInjectables(ctxt, builderDesc, builder);\n        com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig();\n        final java.lang.String buildMethodName = (builderConfig == null) ? \"build\" : builderConfig.buildMethodName;\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null);\n        if (buildMethod != null) {\n            if (config.canOverrideAccessModifiers()) {\n                com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n            }\n        }\n        builder.setPOJOBuilder(buildMethod, builderConfig);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, builderDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.buildBuilderBased(valueType, buildMethodName);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, builderDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected void addObjectIdReader(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();\n        if (objectIdInfo == null) {\n            return;\n        }\n        java.lang.Class<?> implClass = objectIdInfo.getGeneratorType();\n        com.fasterxml.jackson.databind.JavaType idType;\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty idProp;\n        com.fasterxml.jackson.annotation.ObjectIdGenerator<?> gen;\n        com.fasterxml.jackson.annotation.ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);\n        if (implClass == com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class) {\n            com.fasterxml.jackson.databind.PropertyName propName = objectIdInfo.getPropertyName();\n            idProp = builder.findProperty(propName);\n            if (idProp == null) {\n                throw new java.lang.IllegalArgumentException((((\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName()) + \": can not find property with name '\") + propName) + \"'\");\n            }\n            idType = idProp.getType();\n            gen = new com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n        } else {\n            com.fasterxml.jackson.databind.JavaType type = ctxt.constructType(implClass);\n            idType = ctxt.getTypeFactory().findTypeParameters(type, com.fasterxml.jackson.annotation.ObjectIdGenerator.class)[0];\n            idProp = null;\n            gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType);\n        builder.setObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    public com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.DeserializationConfig config = ctxt.getConfig();\n        com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc);\n        builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc));\n        addBeanProps(ctxt, beanDesc, builder);\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod am = beanDesc.findMethod(\"initCause\", com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.INIT_CAUSE_PARAMS);\n        if (am != null) {\n            com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new com.fasterxml.jackson.databind.PropertyName(\"cause\"));\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0));\n            if (prop != null) {\n                builder.addOrReplaceProperty(prop, true);\n            }\n        }\n        builder.addIgnorable(\"localizedMessage\");\n        builder.addIgnorable(\"suppressed\");\n        builder.addIgnorable(\"message\");\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                builder = mod.updateBuilder(config, beanDesc, builder);\n            }\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deserializer = builder.build();\n        if (deserializer instanceof com.fasterxml.jackson.databind.deser.BeanDeserializer) {\n            deserializer = new com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer(((com.fasterxml.jackson.databind.deser.BeanDeserializer) (deserializer)));\n        }\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                deserializer = mod.modifyDeserializer(config, beanDesc, deserializer);\n            }\n        }\n        return ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (deserializer));\n    }\n\n    protected com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder constructBeanDeserializerBuilder(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc) {\n        return new com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder(beanDesc, ctxt.getConfig());\n    }\n\n    protected void addBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final boolean isConcrete = !beanDesc.getType().isAbstract();\n        final com.fasterxml.jackson.databind.deser.SettableBeanProperty[] creatorProps = (isConcrete) ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null;\n        final boolean hasCreatorProps = creatorProps != null;\n        com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value ignorals = ctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo());\n        java.util.Set<java.lang.String> ignored;\n        if (ignorals != null) {\n            boolean ignoreAny = ignorals.getIgnoreUnknown();\n            builder.setIgnoreUnknownProperties(ignoreAny);\n            ignored = ignorals.getIgnored();\n            for (java.lang.String propName : ignored) {\n                builder.addIgnorable(propName);\n            }\n        } else {\n            ignored = java.util.Collections.emptySet();\n        }\n        com.fasterxml.jackson.databind.introspect.AnnotatedMethod anySetterMethod = beanDesc.findAnySetter();\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember anySetterField = null;\n        if (anySetterMethod != null) {\n            builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod));\n        } else {\n            anySetterField = beanDesc.findAnySetterField();\n            if (anySetterField != null) {\n                builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField));\n            }\n        }\n        if ((anySetterMethod == null) && (anySetterField == null)) {\n            java.util.Collection<java.lang.String> ignored2 = beanDesc.getIgnoredPropertyNames();\n            if (ignored2 != null) {\n                for (java.lang.String propName : ignored2) {\n                    builder.addIgnorable(propName);\n                }\n            }\n        }\n        final boolean useGettersAsSetters = ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS);\n        java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);\n        if (_factoryConfig.hasDeserializerModifiers()) {\n            for (com.fasterxml.jackson.databind.deser.BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);\n            }\n        }\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef : propDefs) {\n            com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = null;\n            if (propDef.hasSetter()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getSetter().getParameterType(0);\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (propDef.hasField()) {\n                com.fasterxml.jackson.databind.JavaType propertyType = propDef.getField().getType();\n                prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);\n            } else if (useGettersAsSetters && propDef.hasGetter()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n                java.lang.Class<?> rawPropertyType = getter.getRawType();\n                if (java.util.Collection.class.isAssignableFrom(rawPropertyType) || java.util.Map.class.isAssignableFrom(rawPropertyType)) {\n                    prop = constructSetterlessProperty(ctxt, beanDesc, propDef);\n                }\n            }\n            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                final java.lang.String name = propDef.getName();\n                com.fasterxml.jackson.databind.deser.CreatorProperty cprop = null;\n                if (creatorProps != null) {\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        if (name.equals(cp.getName()) && (cp instanceof com.fasterxml.jackson.databind.deser.CreatorProperty)) {\n                            cprop = ((com.fasterxml.jackson.databind.deser.CreatorProperty) (cp));\n                            break;\n                        }\n                    }\n                }\n                if (cprop == null) {\n                    java.util.List<java.lang.String> n = new java.util.ArrayList<>();\n                    for (com.fasterxml.jackson.databind.deser.SettableBeanProperty cp : creatorProps) {\n                        n.add(cp.getName());\n                    }\n                    ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n);\n                    continue;\n                }\n                if (prop != null) {\n                    cprop.setFallbackSetter(prop);\n                }\n                prop = cprop;\n                builder.addCreatorProperty(cprop);\n                continue;\n            }\n            if (prop != null) {\n                java.lang.Class<?>[] views = propDef.findViews();\n                if (views == null) {\n                    if (!ctxt.isEnabled(com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n                        views = com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.NO_VIEWS;\n                    }\n                }\n                prop.setViews(views);\n                builder.addProperty(prop);\n            }\n        }\n    }\n\n    protected java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> filterBeanProps(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder, java.util.List<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> propDefsIn, java.util.Set<java.lang.String> ignored) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition> result = new java.util.ArrayList<com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition>(java.lang.Math.max(4, propDefsIn.size()));\n        java.util.HashMap<java.lang.Class<?>, java.lang.Boolean> ignoredTypes = new java.util.HashMap<java.lang.Class<?>, java.lang.Boolean>();\n        for (com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition property : propDefsIn) {\n            java.lang.String name = property.getName();\n            if (ignored.contains(name)) {\n                continue;\n            }\n            if (!property.hasConstructorParameter()) {\n                java.lang.Class<?> rawPropertyType = null;\n                if (property.hasSetter()) {\n                    rawPropertyType = property.getSetter().getRawParameterType(0);\n                } else if (property.hasField()) {\n                    rawPropertyType = property.getField().getRawType();\n                }\n                if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {\n                    builder.addIgnorable(name);\n                    continue;\n                }\n            }\n            result.add(property);\n        }\n        return result;\n    }\n\n    protected void addReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> refs = beanDesc.findBackReferenceProperties();\n        if (refs != null) {\n            for (java.util.Map.Entry<java.lang.String, com.fasterxml.jackson.databind.introspect.AnnotatedMember> en : refs.entrySet()) {\n                java.lang.String name = en.getKey();\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = en.getValue();\n                com.fasterxml.jackson.databind.JavaType type;\n                if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n                    type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (m)).getParameterType(0);\n                } else {\n                    type = m.getType();\n                    if (m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedParameter) {\n                        ctxt.reportBadTypeDefinition(beanDesc, \"Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)\", beanDesc.getBeanClass().getName(), name, ((com.fasterxml.jackson.databind.introspect.AnnotatedParameter) (m)).getIndex());\n                    }\n                }\n                com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), m, com.fasterxml.jackson.databind.PropertyName.construct(name));\n                builder.addBackReferenceProperty(name, constructSettableProperty(ctxt, beanDesc, propDef, type));\n            }\n        }\n    }\n\n    protected void addInjectables(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder builder) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.util.Map<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> raw = beanDesc.findInjectables();\n        if (raw != null) {\n            for (java.util.Map.Entry<java.lang.Object, com.fasterxml.jackson.databind.introspect.AnnotatedMember> entry : raw.entrySet()) {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMember m = entry.getValue();\n                builder.addInjectable(com.fasterxml.jackson.databind.PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey());\n            }\n        }\n    }\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    protected com.fasterxml.jackson.databind.deser.SettableAnyProperty constructAnySetter(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = null;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)).getParameterType(1);\n        } else if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedField) {\n            type = ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)).getType().getContentType();\n        }\n        type = resolveMemberAndTypeAnnotations(ctxt, mutator, type);\n        com.fasterxml.jackson.databind.BeanProperty.Std prop = new com.fasterxml.jackson.databind.BeanProperty.Std(com.fasterxml.jackson.databind.PropertyName.construct(mutator.getName()), type, null, beanDesc.getClassAnnotations(), mutator, com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL);\n        com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ((com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>) (ctxt.handlePrimaryContextualization(deser, prop, type)));\n        }\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        return new com.fasterxml.jackson.databind.deser.SettableAnyProperty(prop, mutator, type, deser, typeDeser);\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSettableProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef, com.fasterxml.jackson.databind.JavaType propType0) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember mutator = propDef.getNonConstructorMutator();\n        if (mutator == null) {\n            ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\");\n        }\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0);\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop;\n        if (mutator instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod) {\n            prop = new com.fasterxml.jackson.databind.deser.impl.MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (mutator)));\n        } else {\n            prop = new com.fasterxml.jackson.databind.deser.impl.FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), ((com.fasterxml.jackson.databind.introspect.AnnotatedField) (mutator)));\n        }\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();\n        if ((ref != null) && ref.isManagedReference()) {\n            prop.setManagedReferenceName(ref.getName());\n        }\n        com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();\n        if (objectIdInfo != null) {\n            prop.setObjectIdInfo(objectIdInfo);\n        }\n        return prop;\n    }\n\n    protected com.fasterxml.jackson.databind.deser.SettableBeanProperty constructSetterlessProperty(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.BeanDescription beanDesc, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition propDef) throws com.fasterxml.jackson.databind.JsonMappingException {\n        final com.fasterxml.jackson.databind.introspect.AnnotatedMethod getter = propDef.getGetter();\n        com.fasterxml.jackson.databind.JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType());\n        com.fasterxml.jackson.databind.jsontype.TypeDeserializer typeDeser = type.getTypeHandler();\n        com.fasterxml.jackson.databind.deser.SettableBeanProperty prop = new com.fasterxml.jackson.databind.deser.impl.SetterlessProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), getter);\n        com.fasterxml.jackson.databind.JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter);\n        if (deser == null) {\n            deser = type.getValueHandler();\n        }\n        if (deser != null) {\n            deser = ctxt.handlePrimaryContextualization(deser, prop, type);\n            prop = prop.withValueDeserializer(deser);\n        }\n        return prop;\n    }\n\n    protected boolean isPotentialBeanType(java.lang.Class<?> type) {\n        java.lang.String typeStr = com.fasterxml.jackson.databind.util.ClassUtil.canBeABeanType(type);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        if (com.fasterxml.jackson.databind.util.ClassUtil.isProxyType(type)) {\n            throw new java.lang.IllegalArgumentException((\"Can not deserialize Proxy class \" + type.getName()) + \" as a Bean\");\n        }\n        typeStr = com.fasterxml.jackson.databind.util.ClassUtil.isLocalType(type, true);\n        if (typeStr != null) {\n            throw new java.lang.IllegalArgumentException((((\"Can not deserialize Class \" + type.getName()) + \" (of type \") + typeStr) + \") as a Bean\");\n        }\n        return true;\n    }\n\n    protected boolean isIgnorableType(com.fasterxml.jackson.databind.DeserializationConfig config, com.fasterxml.jackson.databind.BeanDescription beanDesc, java.lang.Class<?> type, java.util.Map<java.lang.Class<?>, java.lang.Boolean> ignoredTypes) {\n        java.lang.Boolean status = ignoredTypes.get(type);\n        if (status != null) {\n            return status.booleanValue();\n        }\n        com.fasterxml.jackson.databind.cfg.ConfigOverride override = config.findConfigOverride(type);\n        if (override != null) {\n            status = override.getIsIgnoredType();\n        }\n        if (status == null) {\n            com.fasterxml.jackson.databind.BeanDescription desc = config.introspectClassAnnotations(type);\n            status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n            if (status == null) {\n                status = java.lang.Boolean.FALSE;\n            }\n        }\n        ignoredTypes.put(type, status);\n        return status.booleanValue();\n    }\n\n    protected void checkIllegalTypes(com.fasterxml.jackson.databind.DeserializationContext ctxt, com.fasterxml.jackson.databind.JavaType type, com.fasterxml.jackson.databind.BeanDescription beanDesc) throws com.fasterxml.jackson.databind.JsonMappingException {\n        java.lang.String full = type.getRawClass().getName();\n        if (_cfgIllegalClassNames.contains(full)) {\n            ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "BeanDeserializerFactory"
    }
  ],
  "id": "JacksonDatabind_78"
}