{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@java.lang.Override\npublic boolean hasOwnProperty(java.lang.String name) {\n    return super.hasOwnProperty(name) || \"prototype\".equals(name);\n}",
            "src_parent": "public class FunctionType extends com.google.javascript.rhino.jstype.PrototypeObjectType {\n    private static final long serialVersionUID = 1L;\n\n    private enum Kind {\n\n        ORDINARY,\n        CONSTRUCTOR,\n        INTERFACE;}\n\n    private com.google.javascript.rhino.jstype.ArrowType call;\n\n    private com.google.javascript.rhino.jstype.FunctionPrototypeType prototype;\n\n    private final com.google.javascript.rhino.jstype.FunctionType.Kind kind;\n\n    private com.google.javascript.rhino.jstype.ObjectType typeOfThis;\n\n    private com.google.javascript.rhino.Node source;\n\n    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> implementedInterfaces = com.google.common.collect.ImmutableList.of();\n\n    private java.util.List<com.google.javascript.rhino.jstype.FunctionType> subTypes;\n\n    private java.lang.String templateTypeName;\n\n    @com.google.common.annotations.VisibleForTesting\n    public FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType) {\n        this(registry, name, source, parameters, returnType, null, null, false, false);\n    }\n\n    public FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.ObjectType typeOfThis) {\n        this(registry, name, source, parameters, returnType, typeOfThis, null, false, false);\n    }\n\n    public FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.ObjectType typeOfThis, java.lang.String templateTypeName) {\n        this(registry, name, source, parameters, returnType, typeOfThis, templateTypeName, false, false);\n    }\n\n    FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String name, com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node parameters, com.google.javascript.rhino.jstype.JSType returnType, com.google.javascript.rhino.jstype.ObjectType typeOfThis, java.lang.String templateTypeName, boolean isConstructor, boolean nativeType) {\n        super(registry, name, registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE), nativeType);\n        com.google.common.base.Preconditions.checkArgument((source == null) || (com.google.javascript.rhino.Token.FUNCTION == source.getType()));\n        this.source = source;\n        this.kind = (isConstructor) ? com.google.javascript.rhino.jstype.FunctionType.Kind.CONSTRUCTOR : com.google.javascript.rhino.jstype.FunctionType.Kind.ORDINARY;\n        if (isConstructor) {\n            this.typeOfThis = ((typeOfThis != null) && typeOfThis.isNoObjectType()) ? typeOfThis : new com.google.javascript.rhino.jstype.InstanceObjectType(registry, this, nativeType);\n        } else {\n            this.typeOfThis = (typeOfThis != null) ? typeOfThis : registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        this.call = new com.google.javascript.rhino.jstype.ArrowType(registry, parameters, returnType == null ? getReturnType() : returnType);\n        this.templateTypeName = templateTypeName;\n    }\n\n    FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String name, com.google.javascript.rhino.Node source) {\n        super(registry, name, registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));\n        com.google.common.base.Preconditions.checkArgument((source == null) || (com.google.javascript.rhino.Token.FUNCTION == source.getType()));\n        com.google.common.base.Preconditions.checkArgument(name != null);\n        this.source = source;\n        this.call = null;\n        this.kind = com.google.javascript.rhino.jstype.FunctionType.Kind.INTERFACE;\n        this.typeOfThis = new com.google.javascript.rhino.jstype.InstanceObjectType(registry, this);\n    }\n\n    @java.lang.Override\n    public boolean isInstanceType() {\n        return equals(registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE));\n    }\n\n    @java.lang.Override\n    public boolean isConstructor() {\n        return kind == com.google.javascript.rhino.jstype.FunctionType.Kind.CONSTRUCTOR;\n    }\n\n    @java.lang.Override\n    public boolean isInterface() {\n        return kind == com.google.javascript.rhino.jstype.FunctionType.Kind.INTERFACE;\n    }\n\n    @java.lang.Override\n    public boolean isOrdinaryFunction() {\n        return kind == com.google.javascript.rhino.jstype.FunctionType.Kind.ORDINARY;\n    }\n\n    @java.lang.Override\n    public boolean isFunctionType() {\n        return true;\n    }\n\n    @java.lang.Override\n    public boolean canBeCalled() {\n        return true;\n    }\n\n    public java.lang.Iterable<com.google.javascript.rhino.Node> getParameters() {\n        com.google.javascript.rhino.Node n = getParametersNode();\n        if (n != null) {\n            return n.children();\n        } else {\n            return java.util.Collections.emptySet();\n        }\n    }\n\n    public com.google.javascript.rhino.Node getParametersNode() {\n        return call == null ? null : call.parameters;\n    }\n\n    public int getMinArguments() {\n        int i = 0;\n        int min = 0;\n        for (com.google.javascript.rhino.Node n : getParameters()) {\n            i++;\n            if ((!n.isOptionalArg()) && (!n.isVarArgs())) {\n                min = i;\n            }\n        }\n        return min;\n    }\n\n    public int getMaxArguments() {\n        com.google.javascript.rhino.Node params = getParametersNode();\n        if (params != null) {\n            com.google.javascript.rhino.Node lastParam = params.getLastChild();\n            if ((lastParam == null) || (!lastParam.isVarArgs())) {\n                return params.getChildCount();\n            }\n        }\n        return java.lang.Integer.MAX_VALUE;\n    }\n\n    public com.google.javascript.rhino.jstype.JSType getReturnType() {\n        return call == null ? null : call.returnType;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionPrototypeType getPrototype() {\n        if (prototype == null) {\n            setPrototype(new com.google.javascript.rhino.jstype.FunctionPrototypeType(registry, this, null));\n        }\n        return prototype;\n    }\n\n    public void setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType baseType) {\n        if (prototype == null) {\n            setPrototype(new com.google.javascript.rhino.jstype.FunctionPrototypeType(registry, this, baseType, isNativeObjectType()));\n        } else {\n            prototype.setImplicitPrototype(baseType);\n        }\n    }\n\n    public boolean setPrototype(com.google.javascript.rhino.jstype.FunctionPrototypeType prototype) {\n        if (prototype == null) {\n            return false;\n        }\n        if (isConstructor() && (prototype == getInstanceType())) {\n            return false;\n        }\n        this.prototype = prototype;\n        if (isConstructor() || isInterface()) {\n            com.google.javascript.rhino.jstype.FunctionType superClass = getSuperClassConstructor();\n            if (superClass != null) {\n                superClass.addSubType(this);\n            }\n        }\n        return true;\n    }\n\n    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getAllImplementedInterfaces() {\n        java.util.Set<com.google.javascript.rhino.jstype.ObjectType> interfaces = com.google.common.collect.Sets.newHashSet();\n        for (com.google.javascript.rhino.jstype.ObjectType type : getImplementedInterfaces()) {\n            addRelatedInterfaces(type, interfaces);\n        }\n        return interfaces;\n    }\n\n    private void addRelatedInterfaces(com.google.javascript.rhino.jstype.ObjectType instance, java.util.Set<com.google.javascript.rhino.jstype.ObjectType> set) {\n        com.google.javascript.rhino.jstype.FunctionType constructor = instance.getConstructor();\n        if (constructor != null) {\n            if (!constructor.isInterface()) {\n                return;\n            }\n            set.add(instance);\n            if (constructor.getSuperClassConstructor() != null) {\n                addRelatedInterfaces(constructor.getSuperClassConstructor().getInstanceType(), set);\n            }\n        }\n    }\n\n    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getImplementedInterfaces() {\n        com.google.javascript.rhino.jstype.FunctionType superCtor = (isConstructor()) ? getSuperClassConstructor() : null;\n        if (superCtor == null) {\n            return implementedInterfaces;\n        } else {\n            return com.google.common.collect.Iterables.concat(implementedInterfaces, superCtor.getImplementedInterfaces());\n        }\n    }\n\n    public void setImplementedInterfaces(java.util.List<com.google.javascript.rhino.jstype.ObjectType> implementedInterfaces) {\n        for (com.google.javascript.rhino.jstype.ObjectType type : implementedInterfaces) {\n            registry.registerTypeImplementingInterface(this, type);\n        }\n        this.implementedInterfaces = com.google.common.collect.ImmutableList.copyOf(implementedInterfaces);\n    }\n\n    @java.lang.Override\n    public boolean hasProperty(java.lang.String name) {\n        return super.hasProperty(name) || \"prototype\".equals(name);\n    }\n\n    @java.lang.Override\n    public boolean hasOwnProperty(java.lang.String name) {\n        return super.hasOwnProperty(name) || \"prototype\".equals(name);\n    }\n\n    @java.lang.Override\n    public com.google.javascript.rhino.jstype.JSType getPropertyType(java.lang.String name) {\n        if (\"prototype\".equals(name)) {\n            return getPrototype();\n        } else {\n            if (!hasOwnProperty(name)) {\n                if (\"call\".equals(name)) {\n                    com.google.javascript.rhino.Node params = getParametersNode();\n                    if (params == null) {\n                        defineDeclaredProperty(name, new com.google.javascript.rhino.jstype.FunctionType(registry, null, null, null, getReturnType()), false);\n                    } else {\n                        params = params.cloneTree();\n                        com.google.javascript.rhino.Node thisTypeNode = com.google.javascript.rhino.Node.newString(Token.NAME, \"thisType\");\n                        thisTypeNode.setJSType(registry.createOptionalNullableType(getTypeOfThis()));\n                        params.addChildToFront(thisTypeNode);\n                        thisTypeNode.setOptionalArg(true);\n                        defineDeclaredProperty(name, new com.google.javascript.rhino.jstype.FunctionType(registry, null, null, params, getReturnType()), false);\n                    }\n                } else if (\"apply\".equals(name)) {\n                    com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(registry);\n                    builder.addOptionalParams(registry.createNullableType(getTypeOfThis()), registry.createNullableType(registry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n                    defineDeclaredProperty(name, new com.google.javascript.rhino.jstype.FunctionType(registry, null, null, builder.build(), getReturnType()), false);\n                }\n            }\n            return super.getPropertyType(name);\n        }\n    }\n\n    @java.lang.Override\n    boolean defineProperty(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, boolean inferred, boolean inExterns) {\n        if (\"prototype\".equals(name)) {\n            com.google.javascript.rhino.jstype.ObjectType objType = type.toObjectType();\n            if (objType != null) {\n                if (objType.equals(prototype)) {\n                    return true;\n                }\n                return setPrototype(new com.google.javascript.rhino.jstype.FunctionPrototypeType(registry, this, objType, isNativeObjectType()));\n            } else {\n                return false;\n            }\n        }\n        return super.defineProperty(name, type, inferred, inExterns);\n    }\n\n    @java.lang.Override\n    public boolean isPropertyTypeInferred(java.lang.String property) {\n        return \"prototype\".equals(property) || super.isPropertyTypeInferred(property);\n    }\n\n    @java.lang.Override\n    public com.google.javascript.rhino.jstype.JSType getLeastSupertype(com.google.javascript.rhino.jstype.JSType that) {\n        if (isFunctionType() && that.isFunctionType()) {\n            if (equals(that)) {\n                return this;\n            }\n            com.google.javascript.rhino.jstype.JSType functionInstance = registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n            if (functionInstance.equals(that)) {\n                return that;\n            } else if (functionInstance.equals(this)) {\n                return this;\n            }\n            return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);\n        }\n        return super.getLeastSupertype(that);\n    }\n\n    @java.lang.Override\n    public com.google.javascript.rhino.jstype.JSType getGreatestSubtype(com.google.javascript.rhino.jstype.JSType that) {\n        if (isFunctionType() && that.isFunctionType()) {\n            if (equals(that)) {\n                return this;\n            }\n            com.google.javascript.rhino.jstype.JSType functionInstance = registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);\n            if (functionInstance.equals(that)) {\n                return this;\n            } else if (functionInstance.equals(this)) {\n                return that;\n            }\n            return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n        }\n        return super.getGreatestSubtype(that);\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionType getSuperClassConstructor() {\n        com.google.common.base.Preconditions.checkArgument(isConstructor() || isInterface());\n        com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n        if (maybeSuperInstanceType == null) {\n            return null;\n        }\n        return maybeSuperInstanceType.getConstructor();\n    }\n\n    public boolean hasUnknownSupertype() {\n        com.google.common.base.Preconditions.checkArgument(isConstructor() || isInterface());\n        com.google.common.base.Preconditions.checkArgument(!this.isUnknownType());\n        com.google.javascript.rhino.jstype.FunctionType ctor = this;\n        while (true) {\n            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();\n            if (maybeSuperInstanceType == null) {\n                return false;\n            }\n            if (maybeSuperInstanceType.isUnknownType()) {\n                return true;\n            }\n            ctor = maybeSuperInstanceType.getConstructor();\n            if (ctor == null) {\n                return false;\n            }\n            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());\n        } \n    }\n\n    public com.google.javascript.rhino.jstype.JSType getTopMostDefiningType(java.lang.String propertyName) {\n        com.google.common.base.Preconditions.checkState(isConstructor() || isInterface());\n        com.google.common.base.Preconditions.checkArgument(getPrototype().hasProperty(propertyName));\n        com.google.javascript.rhino.jstype.FunctionType ctor = this;\n        com.google.javascript.rhino.jstype.JSType topInstanceType;\n        do {\n            topInstanceType = ctor.getInstanceType();\n            ctor = ctor.getSuperClassConstructor();\n        } while ((ctor != null) && ctor.getPrototype().hasProperty(propertyName) );\n        return topInstanceType;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object otherType) {\n        if (!(otherType instanceof com.google.javascript.rhino.jstype.FunctionType)) {\n            return false;\n        }\n        com.google.javascript.rhino.jstype.FunctionType that = ((com.google.javascript.rhino.jstype.FunctionType) (otherType));\n        if (!that.isFunctionType()) {\n            return false;\n        }\n        if (this.isConstructor()) {\n            if (that.isConstructor()) {\n                return this == that;\n            }\n            return false;\n        }\n        if (this.isInterface()) {\n            if (that.isInterface()) {\n                return this.getReferenceName().equals(that.getReferenceName());\n            }\n            return false;\n        }\n        if (that.isInterface()) {\n            return false;\n        }\n        return this.typeOfThis.equals(that.typeOfThis) && this.call.equals(that.call);\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        return isInterface() ? getReferenceName().hashCode() : call.hashCode();\n    }\n\n    public boolean hasEqualCallType(com.google.javascript.rhino.jstype.FunctionType otherType) {\n        return this.call.equals(otherType.call);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {\n            return \"Function\";\n        }\n        java.lang.StringBuilder b = new java.lang.StringBuilder(32);\n        b.append(\"function (\");\n        int paramNum = ((call == null) || (call.parameters == null)) ? 0 : call.parameters.getChildCount();\n        boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();\n        if (hasKnownTypeOfThis) {\n            b.append(\"this:\");\n            b.append(typeOfThis.toString());\n        }\n        if (paramNum > 0) {\n            if (hasKnownTypeOfThis) {\n                b.append(\", \");\n            }\n            com.google.javascript.rhino.Node p = call.parameters.getFirstChild();\n            if (p.isVarArgs()) {\n                appendVarArgsString(b, p.getJSType());\n            } else {\n                b.append(p.getJSType().toString());\n            }\n            p = p.getNext();\n            while (p != null) {\n                b.append(\", \");\n                if (p.isVarArgs()) {\n                    appendVarArgsString(b, p.getJSType());\n                } else {\n                    b.append(p.getJSType().toString());\n                }\n                p = p.getNext();\n            } \n        }\n        b.append(\")\");\n        if ((call != null) && (call.returnType != null)) {\n            b.append(\": \");\n            b.append(call.returnType);\n        }\n        return b.toString();\n    }\n\n    private void appendVarArgsString(java.lang.StringBuilder builder, com.google.javascript.rhino.jstype.JSType paramType) {\n        if (paramType.isUnionType()) {\n            paramType = ((com.google.javascript.rhino.jstype.UnionType) (paramType)).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));\n        }\n        builder.append(\"...[\").append(paramType.toString()).append(\"]\");\n    }\n\n    @java.lang.Override\n    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {\n        if (this.equals(that)) {\n            return true;\n        }\n        if (that.isFunctionType()) {\n            if (((com.google.javascript.rhino.jstype.FunctionType) (that)).isInterface()) {\n                return true;\n            }\n            if (this.isInterface()) {\n                return false;\n            }\n            com.google.javascript.rhino.jstype.FunctionType other = ((com.google.javascript.rhino.jstype.FunctionType) (that));\n            return (((this.isConstructor() || other.isConstructor()) || other.typeOfThis.isSubtype(this.typeOfThis)) || this.typeOfThis.isSubtype(other.typeOfThis)) && this.call.isSubtype(other.call);\n        }\n        if (that instanceof com.google.javascript.rhino.jstype.UnionType) {\n            com.google.javascript.rhino.jstype.UnionType union = ((com.google.javascript.rhino.jstype.UnionType) (that));\n            for (com.google.javascript.rhino.jstype.JSType element : union.alternates) {\n                if (this.isSubtype(element)) {\n                    return true;\n                }\n            }\n        }\n        return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);\n    }\n\n    @java.lang.Override\n    public <T> T visit(com.google.javascript.rhino.jstype.Visitor<T> visitor) {\n        return visitor.caseFunctionType(this);\n    }\n\n    public com.google.javascript.rhino.jstype.ObjectType getInstanceType() {\n        com.google.common.base.Preconditions.checkState(hasInstanceType());\n        return typeOfThis;\n    }\n\n    void setInstanceType(com.google.javascript.rhino.jstype.ObjectType instanceType) {\n        typeOfThis = instanceType;\n    }\n\n    public boolean hasInstanceType() {\n        return isConstructor() || isInterface();\n    }\n\n    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {\n        return typeOfThis.isNoObjectType() ? registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;\n    }\n\n    public com.google.javascript.rhino.Node getSource() {\n        return source;\n    }\n\n    public void setSource(com.google.javascript.rhino.Node source) {\n        this.source = source;\n    }\n\n    private void addSubType(com.google.javascript.rhino.jstype.FunctionType subType) {\n        if (subTypes == null) {\n            subTypes = com.google.common.collect.Lists.newArrayList();\n        }\n        subTypes.add(subType);\n    }\n\n    public java.util.List<com.google.javascript.rhino.jstype.FunctionType> getSubTypes() {\n        return subTypes;\n    }\n\n    @java.lang.Override\n    public boolean hasCachedValues() {\n        return (prototype != null) || super.hasCachedValues();\n    }\n\n    public java.lang.String getTemplateTypeName() {\n        return templateTypeName;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {\n        call = ((com.google.javascript.rhino.jstype.ArrowType) (safeResolve(call, t, scope)));\n        prototype = ((com.google.javascript.rhino.jstype.FunctionPrototypeType) (safeResolve(prototype, t, scope)));\n        typeOfThis = ((com.google.javascript.rhino.jstype.ObjectType) (safeResolve(typeOfThis, t, scope)));\n        boolean changed = false;\n        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.ObjectType> resolvedInterfaces = com.google.common.collect.ImmutableList.builder();\n        for (com.google.javascript.rhino.jstype.ObjectType iface : implementedInterfaces) {\n            com.google.javascript.rhino.jstype.ObjectType resolvedIface = ((com.google.javascript.rhino.jstype.ObjectType) (iface.resolve(t, scope)));\n            resolvedInterfaces.add(resolvedIface);\n            changed |= resolvedIface != iface;\n        }\n        if (changed) {\n            implementedInterfaces = resolvedInterfaces.build();\n        }\n        if (subTypes != null) {\n            for (int i = 0; i < subTypes.size(); i++) {\n                subTypes.set(i, ((com.google.javascript.rhino.jstype.FunctionType) (subTypes.get(i).resolve(t, scope))));\n            }\n        }\n        return super.resolveInternal(t, scope);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (objType.equals(prototype)) {\n    return true;\n}",
            "src_parent": "{\n    if (objType.equals(prototype)) {\n        return true;\n    }\n    return setPrototype(new com.google.javascript.rhino.jstype.FunctionPrototypeType(registry, this, objType, isNativeObjectType()));\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "FunctionType"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "newName.setJSType(child.getJSType())",
            "src_parent": "{\n    com.google.javascript.rhino.Node newName = com.google.javascript.rhino.Node.newString(Token.NAME, name);\n    newName.setJSType(child.getJSType());\n    node.replaceChild(child, newName);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "DevirtualizePrototypeMethods"
    }
  ],
  "id": "Closure_135"
}