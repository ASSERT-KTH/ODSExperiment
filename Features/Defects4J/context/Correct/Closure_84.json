{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.rhino.Node target = assign.getFirstChild()",
            "src_parent": "{\n    com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);\n    com.google.javascript.rhino.Node target = assign.getFirstChild();\n    if (!validAssignmentTarget(target)) {\n        errorReporter.error(\"invalid assignment target\", sourceName, target.getLineno(), \"\", 0);\n    }\n    return assign;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!validAssignmentTarget(target)) {\n    errorReporter.error(\"invalid assignment target\", sourceName, target.getLineno(), \"\", 0);\n}",
            "src_parent": "{\n    com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);\n    com.google.javascript.rhino.Node target = assign.getFirstChild();\n    if (!validAssignmentTarget(target)) {\n        errorReporter.error(\"invalid assignment target\", sourceName, target.getLineno(), \"\", 0);\n    }\n    return assign;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {\n    if (!validAssignmentTarget(operand)) {\n        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? \"invalid increment target\" : \"invalid decrement target\";\n        errorReporter.error(msg, sourceName, operand.getLineno(), \"\", 0);\n    }\n}",
            "src_parent": "{\n    if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {\n        if (!validAssignmentTarget(operand)) {\n            java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? \"invalid increment target\" : \"invalid decrement target\";\n            errorReporter.error(msg, sourceName, operand.getLineno(), \"\", 0);\n        }\n    }\n    com.google.javascript.rhino.Node node = newNode(type, operand);\n    if (exprNode.isPostfix()) {\n        node.putBooleanProp(Node.INCRDECR_PROP, true);\n    }\n    return node;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {\n    switch (target.getType()) {\n        case com.google.javascript.rhino.Token.NAME :\n        case com.google.javascript.rhino.Token.GETPROP :\n        case com.google.javascript.rhino.Token.GETELEM :\n            return true;\n    }\n    return false;\n}",
            "src_parent": "private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {\n    private com.google.javascript.rhino.Node processGeneric(com.google.javascript.jscomp.mozilla.rhino.Node n) {\n        com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));\n        for (com.google.javascript.jscomp.mozilla.rhino.Node child : n) {\n            node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));\n        }\n        return node;\n    }\n\n    private com.google.javascript.rhino.Node transformAsString(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode n) {\n        com.google.javascript.rhino.Node ret = transform(n);\n        if (ret.getType() == com.google.javascript.rhino.Token.STRING) {\n            ret.putBooleanProp(Node.QUOTED_PROP, true);\n        } else if (ret.getType() == com.google.javascript.rhino.Token.NAME) {\n            ret.setType(Token.STRING);\n        }\n        return ret;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral literalNode) {\n        if (literalNode.isDestructuring()) {\n            reportDestructuringAssign(literalNode);\n        }\n        com.google.javascript.rhino.Node node = newNode(Token.ARRAYLIT);\n        int skipCount = 0;\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : literalNode.getElements()) {\n            com.google.javascript.rhino.Node c = transform(child);\n            if (c.getType() == com.google.javascript.rhino.Token.EMPTY) {\n                skipCount++;\n            }\n            node.addChildToBack(c);\n        }\n        if (skipCount > 0) {\n            int[] skipIndexes = new int[skipCount];\n            int i = 0;\n            int j = 0;\n            for (com.google.javascript.rhino.Node child : node.children()) {\n                if (child.getType() == com.google.javascript.rhino.Token.EMPTY) {\n                    node.removeChild(child);\n                    skipIndexes[j] = i;\n                    j++;\n                }\n                i++;\n            }\n            node.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processAssignment(com.google.javascript.jscomp.mozilla.rhino.ast.Assignment assignmentNode) {\n        com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);\n        com.google.javascript.rhino.Node target = assign.getFirstChild();\n        if (!validAssignmentTarget(target)) {\n            errorReporter.error(\"invalid assignment target\", sourceName, target.getLineno(), \"\", 0);\n        }\n        return assign;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processAstRoot(com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot rootNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.SCRIPT);\n        for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode) {\n            node.addChildToBack(transform(((com.google.javascript.jscomp.mozilla.rhino.ast.AstNode) (child))));\n        }\n        parseDirectives(node);\n        return node;\n    }\n\n    private void parseDirectives(com.google.javascript.rhino.Node node) {\n        java.util.Set<java.lang.String> directives = null;\n        while (isDirective(node.getFirstChild())) {\n            java.lang.String directive = node.removeFirstChild().getFirstChild().getString();\n            if (directives == null) {\n                directives = com.google.common.collect.Sets.newHashSet(directive);\n            } else {\n                directives.add(directive);\n            }\n        } \n        if (directives != null) {\n            node.setDirectives(directives);\n        }\n    }\n\n    private boolean isDirective(com.google.javascript.rhino.Node n) {\n        if (n == null) {\n            return false;\n        }\n        int nType = n.getType();\n        return (((nType == com.google.javascript.rhino.Token.EXPR_RESULT) || (nType == com.google.javascript.rhino.Token.EXPR_VOID)) && (n.getFirstChild().getType() == com.google.javascript.rhino.Token.STRING)) && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processBlock(com.google.javascript.jscomp.mozilla.rhino.ast.Block blockNode) {\n        return processGeneric(blockNode);\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.jscomp.mozilla.rhino.ast.BreakStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.BREAK);\n        if (statementNode.getBreakLabel() != null) {\n            com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processCatchClause(com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause clauseNode) {\n        com.google.javascript.jscomp.mozilla.rhino.ast.AstNode catchVar = clauseNode.getVarName();\n        com.google.javascript.rhino.Node node = newNode(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            errorReporter.error(\"Catch clauses are not supported\", sourceName, clauseNode.getCatchCondition().getLineno(), \"\", 0);\n        }\n        node.addChildToBack(transformBlock(clauseNode.getBody()));\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ConditionalExpression exprNode) {\n        return newNode(Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processDoLoop(com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop loopNode) {\n        return newNode(Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processElementGet(com.google.javascript.jscomp.mozilla.rhino.ast.ElementGet getNode) {\n        return newNode(Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.jscomp.mozilla.rhino.ast.EmptyExpression exprNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.EMPTY);\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));\n        node.addChildToBack(transform(statementNode.getExpression()));\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processForInLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop loopNode) {\n        return newNode(Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processForLoop(com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop loopNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));\n        node.addChildToBack(transformBlock(loopNode.getBody()));\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionCall callNode) {\n        com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : callNode.getArguments()) {\n            node.addChildToBack(transform(child));\n        }\n        int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n        node.setLineno(callNode.getLineno());\n        node.setCharno(position2charno(leftParamPos));\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.jscomp.mozilla.rhino.ast.FunctionNode functionNode) {\n        com.google.javascript.jscomp.mozilla.rhino.ast.Name name = functionNode.getFunctionName();\n        java.lang.Boolean isUnnamedFunction = false;\n        if (name == null) {\n            name = new com.google.javascript.jscomp.mozilla.rhino.ast.Name();\n            name.setIdentifier(\"\");\n            isUnnamedFunction = true;\n        }\n        com.google.javascript.rhino.Node node = newNode(Token.FUNCTION);\n        com.google.javascript.rhino.Node newName = transform(name);\n        if (isUnnamedFunction) {\n            newName.setLineno(functionNode.getLineno());\n            int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n            newName.setCharno(position2charno(lpColumn));\n        }\n        node.addChildToBack(newName);\n        com.google.javascript.rhino.Node lp = newNode(Token.LP);\n        com.google.javascript.jscomp.mozilla.rhino.ast.Name fnName = functionNode.getFunctionName();\n        if (fnName != null) {\n            lp.setLineno(fnName.getLineno());\n        } else {\n            lp.setLineno(functionNode.getLineno());\n        }\n        int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n        lp.setCharno(position2charno(lparenCharno));\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode param : functionNode.getParams()) {\n            lp.addChildToBack(transform(param));\n        }\n        node.addChildToBack(lp);\n        com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processIfStatement(com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.IF);\n        node.addChildToBack(transform(statementNode.getCondition()));\n        node.addChildToBack(transformBlock(statementNode.getThenPart()));\n        if (statementNode.getElsePart() != null) {\n            node.addChildToBack(transformBlock(statementNode.getElsePart()));\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.jscomp.mozilla.rhino.ast.InfixExpression exprNode) {\n        com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));\n        n.setLineno(exprNode.getLineno());\n        n.setCharno(position2charno(exprNode.getAbsolutePosition() + exprNode.getOperatorPosition()));\n        return n;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.KeywordLiteral literalNode) {\n        return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processLabel(com.google.javascript.jscomp.mozilla.rhino.ast.Label labelNode) {\n        return newStringNode(Token.LABEL_NAME, labelNode.getName());\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.jscomp.mozilla.rhino.ast.LabeledStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.LABEL);\n        com.google.javascript.rhino.Node prev = null;\n        com.google.javascript.rhino.Node cur = node;\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.Label label : statementNode.getLabels()) {\n            if (prev != null) {\n                prev.addChildToBack(cur);\n            }\n            cur.addChildToBack(transform(label));\n            cur.setLineno(label.getLineno());\n            int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());\n            cur.setCharno(clauseAbsolutePosition);\n            prev = cur;\n            cur = newNode(Token.LABEL);\n        }\n        prev.addChildToBack(transform(statementNode.getStatement()));\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processName(com.google.javascript.jscomp.mozilla.rhino.ast.Name nameNode) {\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processNewExpression(com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression exprNode) {\n        return processFunctionCall(exprNode);\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral literalNode) {\n        return newNumberNode(literalNode.getNumber());\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectLiteral literalNode) {\n        if (literalNode.isDestructuring()) {\n            reportDestructuringAssign(literalNode);\n        }\n        com.google.javascript.rhino.Node node = newNode(Token.OBJECTLIT);\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty el : literalNode.getElements()) {\n            if (!config.acceptES5) {\n                if (el.isGetter()) {\n                    reportGetter(el);\n                    continue;\n                } else if (el.isSetter()) {\n                    reportSetter(el);\n                    continue;\n                }\n            }\n            com.google.javascript.rhino.Node key = transformAsString(el.getLeft());\n            if (el.isGetter()) {\n                key.setType(Token.GET);\n            } else if (el.isSetter()) {\n                key.setType(Token.SET);\n            }\n            key.addChildToFront(transform(el.getRight()));\n            node.addChildToBack(key);\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.jscomp.mozilla.rhino.ast.ObjectProperty propertyNode) {\n        return processInfixExpression(propertyNode);\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression exprNode) {\n        com.google.javascript.rhino.Node node = transform(exprNode.getExpression());\n        node.putProp(Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.jscomp.mozilla.rhino.ast.PropertyGet getNode) {\n        return newNode(Token.GETPROP, transform(getNode.getTarget()), transformAsString(getNode.getProperty()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral literalNode) {\n        com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());\n        literalStringNode.setLineno(literalNode.getLineno());\n        com.google.javascript.rhino.Node node = newNode(Token.REGEXP, literalStringNode);\n        java.lang.String flags = literalNode.getFlags();\n        if ((flags != null) && (!flags.isEmpty())) {\n            com.google.javascript.rhino.Node flagsNode = newStringNode(flags);\n            flagsNode.setLineno(literalNode.getLineno());\n            node.addChildToBack(flagsNode);\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ReturnStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.RETURN);\n        if (statementNode.getReturnValue() != null) {\n            node.addChildToBack(transform(statementNode.getReturnValue()));\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processScope(com.google.javascript.jscomp.mozilla.rhino.ast.Scope scopeNode) {\n        return processGeneric(scopeNode);\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral literalNode) {\n        com.google.javascript.rhino.Node n = newStringNode(literalNode.getValue());\n        return n;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase caseNode) {\n        com.google.javascript.rhino.Node node;\n        if (caseNode.isDefault()) {\n            node = newNode(Token.DEFAULT);\n        } else {\n            com.google.javascript.jscomp.mozilla.rhino.ast.AstNode expr = caseNode.getExpression();\n            node = newNode(Token.CASE, transform(expr));\n        }\n        com.google.javascript.rhino.Node block = newNode(Token.BLOCK);\n        block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);\n        block.setLineno(caseNode.getLineno());\n        block.setCharno(position2charno(caseNode.getAbsolutePosition()));\n        if (caseNode.getStatements() != null) {\n            for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : caseNode.getStatements()) {\n                block.addChildToBack(transform(child));\n            }\n        }\n        node.addChildToBack(block);\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.jscomp.mozilla.rhino.ast.SwitchStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.SWITCH, transform(statementNode.getExpression()));\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.AstNode child : statementNode.getCases()) {\n            node.addChildToBack(transform(child));\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.jscomp.mozilla.rhino.ast.ThrowStatement statementNode) {\n        return newNode(Token.THROW, transform(statementNode.getExpression()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processTryStatement(com.google.javascript.jscomp.mozilla.rhino.ast.TryStatement statementNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.TRY, transformBlock(statementNode.getTryBlock()));\n        com.google.javascript.rhino.Node block = newNode(Token.BLOCK);\n        boolean lineSet = false;\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.CatchClause cc : statementNode.getCatchClauses()) {\n            if (lineSet == false) {\n                block.setLineno(cc.getLineno());\n                lineSet = true;\n            }\n            block.addChildToBack(transform(cc));\n        }\n        node.addChildToBack(block);\n        com.google.javascript.jscomp.mozilla.rhino.ast.AstNode finallyBlock = statementNode.getFinallyBlock();\n        if (finallyBlock != null) {\n            node.addChildToBack(transformBlock(finallyBlock));\n        }\n        if ((lineSet == false) && (finallyBlock != null)) {\n            block.setLineno(finallyBlock.getLineno());\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.jscomp.mozilla.rhino.ast.UnaryExpression exprNode) {\n        int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());\n        com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());\n        if ((type == com.google.javascript.rhino.Token.NEG) && (operand.getType() == com.google.javascript.rhino.Token.NUMBER)) {\n            operand.setDouble(-operand.getDouble());\n            return operand;\n        } else {\n            if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {\n                if (!validAssignmentTarget(operand)) {\n                    java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? \"invalid increment target\" : \"invalid decrement target\";\n                    errorReporter.error(msg, sourceName, operand.getLineno(), \"\", 0);\n                }\n            }\n            com.google.javascript.rhino.Node node = newNode(type, operand);\n            if (exprNode.isPostfix()) {\n                node.putBooleanProp(Node.INCRDECR_PROP, true);\n            }\n            return node;\n        }\n    }\n\n    private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {\n        switch (target.getType()) {\n            case com.google.javascript.rhino.Token.NAME :\n            case com.google.javascript.rhino.Token.GETPROP :\n            case com.google.javascript.rhino.Token.GETELEM :\n                return true;\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.jscomp.mozilla.rhino.ast.VariableDeclaration declarationNode) {\n        com.google.javascript.rhino.Node node = newNode(Token.VAR);\n        for (com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer child : declarationNode.getVariables()) {\n            node.addChildToBack(transform(child));\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer initializerNode) {\n        com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());\n        if (initializerNode.getInitializer() != null) {\n            node.addChildToBack(transform(initializerNode.getInitializer()));\n            node.setLineno(node.getLineno());\n        }\n        return node;\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop loopNode) {\n        return newNode(Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processWithStatement(com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement statementNode) {\n        return newNode(Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));\n    }\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        errorReporter.error(\"Unsupported syntax: \" + com.google.javascript.rhino.Token.typeToName(node.getType()), sourceName, node.getLineno(), \"\", 0);\n        return newNode(Token.EMPTY);\n    }\n\n    void reportDestructuringAssign(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        errorReporter.error(\"destructuring assignment forbidden\", sourceName, node.getLineno(), \"\", 0);\n    }\n\n    void reportGetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        errorReporter.error(\"getters are not supported in Internet Explorer\", sourceName, node.getLineno(), \"\", 0);\n    }\n\n    void reportSetter(com.google.javascript.jscomp.mozilla.rhino.ast.AstNode node) {\n        errorReporter.error(\"setters are not supported in Internet Explorer\", sourceName, node.getLineno(), \"\", 0);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "IRFactory"
    }
  ],
  "id": "Closure_84"
}