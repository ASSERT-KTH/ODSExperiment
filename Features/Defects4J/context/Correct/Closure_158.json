{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning)",
            "dst_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off)",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec).setDefine(flags.define)",
            "src_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error)",
            "dst_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning)",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec)",
            "src_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec).setDefine(flags.define)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.javascript.jscomp.CommandLineRunner",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "com.google.javascript.jscomp.CommandLineRunner.Flags",
            "src_parent": "com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec",
            "src_parent_type": "FieldRead",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static final com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuardSpec = new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec();",
            "src_parent": "@java.lang.SuppressWarnings(\"unchecked\")\nprivate static class Flags {\n    private static final com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuardSpec = new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec();\n\n    @org.kohsuke.args4j.Option(name = \"--help\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Displays this message\")\n    private boolean display_help = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_tree\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;\n\n    @org.kohsuke.args4j.Option(name = \"--compute_phase_ordering\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Runs the compile job many times, then prints out the \" + \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_ast\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the internal abstract syntax\" + \" tree and exits\")\n    private boolean print_ast = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_pass_graph\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the passes that will get run\" + \" and exits\")\n    private boolean print_pass_graph = false;\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_dev_mode\", aliases = { \"--dev_mode\" })\n    private CompilerOptions.DevMode jscomp_dev_mode = CompilerOptions.DevMode.OFF;\n\n    @org.kohsuke.args4j.Option(name = \"--logging_level\", usage = \"The logging level (standard java.util.logging.Level\" + (\" values) for Compiler progress. Does not control errors or\" + \" warnings for the JavaScript code under compilation\"))\n    private java.lang.String logging_level = java.util.logging.Level.WARNING.getName();\n\n    @org.kohsuke.args4j.Option(name = \"--externs\", usage = \"The file containing javascript externs. You may specify\" + \" multiple\")\n    private java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js\", usage = \"The javascript filename. You may specify multiple\")\n    private java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js_output_file\", usage = \"Primary output filename. If not specified, output is \" + \"written to stdout\")\n    private java.lang.String js_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module\", usage = \"A javascript module specification. The format is \" + ((((\"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \" + \"unique. Each dep is the name of a module that this module \") + \"depends on. Modules must be listed in dependency order, and js \") + \"source files must be listed in the corresponding order. Where \") + \"--module flags occur in relation to --js flags is unimportant\"))\n    private java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_input_file\", usage = \"File containing the serialized version of the variable \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String variable_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_input_file\", usage = \"File containing the serialized version of the property \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String property_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_output_file\", usage = \"File where the serialized version of the variable \" + \"renaming map produced should be saved\")\n    private java.lang.String variable_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_name_map_files\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"If true, variable renaming and property renaming map \" + (((\"files will be produced as {binary name}_vars_map.out and \" + \"{binary name}_props_map.out. Note that this flag cannot be used \") + \"in conjunction with either variable_map_output_file or \") + \"property_map_output_file\"))\n    private boolean create_name_map_files = false;\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_output_file\", usage = \"File where the serialized version of the property \" + \"renaming map produced should be saved\")\n    private java.lang.String property_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--third_party\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Check source validity but do not enforce Closure style \" + \"rules and conventions\")\n    private boolean third_party = false;\n\n    @org.kohsuke.args4j.Option(name = \"--summary_detail_level\", usage = \"Controls how detailed the compilation summary is. Values:\" + (((\" 0 (never print summary), 1 (print summary only if there are \" + \"errors or warnings), 2 (print summary if type checking is on, \") + \"see --check_types), 3 (always print summary). The default level \") + \"is 1\"))\n    private int summary_detail_level = 1;\n\n    @org.kohsuke.args4j.Option(name = \"--output_wrapper\", usage = \"Interpolate output into this string at the place denoted\" + \" by the marker token %output%. See --output_wrapper_marker\")\n    private java.lang.String output_wrapper = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module_wrapper\", usage = \"An output wrapper for a javascript module (optional). \" + ((\"The format is <name>:<wrapper>. The module name must correspond \" + \"with a module specified using --module. The wrapper must \") + \"contain %s as the code placeholder\"))\n    private java.util.List<java.lang.String> module_wrapper = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--module_output_path_prefix\", usage = \"Prefix for filenames of compiled js modules. \" + (\"<module-name>.js will be appended to this prefix. Directories \" + \"will be created as needed. Use with --module\"))\n    private java.lang.String module_output_path_prefix = \"./\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_source_map\", usage = \"If specified, a source map file mapping the generated \" + (((\"source files back to the original source file will be \" + \"output to the specified path. The %outname% placeholder will \") + \"expand to the name of the output file that the source map \") + \"corresponds to.\"))\n    private java.lang.String create_source_map = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_error\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.class, usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_error = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_warning\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.class, usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_warning = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_off\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.class, usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_off = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--define\", aliases = { \"--D\", \"-D\" }, usage = \"Override the value of a variable annotated @define. \" + (((\"The format is <name>[=<val>], where <name> is the name of a @define \" + \"variable and <val> is a boolean, number, or a single-quoted string \") + \"that contains no single quotes. If [=<val>] is omitted, \") + \"the variable is marked true\"))\n    private java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--charset\", usage = \"Input and output charset for all files. By default, we \" + \"accept UTF-8 as input and output US_ASCII\")\n    private java.lang.String charset = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--compilation_level\", usage = \"Specifies the compilation level to use. Options: \" + \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private com.google.javascript.jscomp.CompilationLevel compilation_level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n    @org.kohsuke.args4j.Option(name = \"--warning_level\", usage = \"Specifies the warning level to use. Options: \" + \"QUIET, DEFAULT, VERBOSE\")\n    private com.google.javascript.jscomp.WarningLevel warning_level = WarningLevel.DEFAULT;\n\n    @org.kohsuke.args4j.Option(name = \"--use_only_custom_externs\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;\n\n    @org.kohsuke.args4j.Option(name = \"--debug\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Enable debugging options\")\n    private boolean debug = false;\n\n    @org.kohsuke.args4j.Option(name = \"--generate_exports\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Generates export code for those marked with @export\")\n    private boolean generate_exports = false;\n\n    @org.kohsuke.args4j.Option(name = \"--formatting\", usage = \"Specifies which formatting options, if any, should be \" + (\"applied to the output JS. Options: \" + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\"))\n    private java.util.List<com.google.javascript.jscomp.CommandLineRunner.FormattingOption> formatting = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--process_closure_primitives\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Processes built-ins from the Closure library, such as \" + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;\n\n    @org.kohsuke.args4j.Option(name = \"--manage_closure_dependencies\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Automatically sort dependencies so that a file that \" + (((\"goog.provides symbol X will always come before a file that \" + \"goog.requires symbol X. If an input provides symbols, and \") + \"those symbols are never required, then that input will not \") + \"be included in the compilation.\"))\n    private boolean manage_closure_dependencies = false;\n\n    @org.kohsuke.args4j.Option(name = \"--closure_entry_point\", usage = \"Entry points to the program. Must be goog.provide'd \" + (((((\"symbols. Any goog.provide'd symbols that are not a transitive \" + \"dependency of the entry points will be removed. Files without \") + \"goog.provides, and their dependencies, will always be left in. \") + \"If any entry points are specified, then the \") + \"manage_closure_dependencies option will be set to true and \") + \"all files will be sorted in dependency order.\"))\n    private java.util.List<java.lang.String> closure_entry_point = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--output_manifest\", usage = \"Prints out a list of all the files in the compilation. \" + ((((\"If --manage_closure_dependencies is on, this will not include \" + \"files that got dropped because they were not required. \") + \"The %outname% placeholder expands to the js output file. \") + \"If you're using modularization, using %outname% will create \") + \"a manifest for each module.\"))\n    private java.lang.String output_manifest = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--accept_const_keyword\", usage = \"Allows usage of const keyword.\")\n    private boolean accept_const_keyword = false;\n\n    @org.kohsuke.args4j.Option(name = \"--language_in\", usage = \"Sets what language spec that input sources conform. \" + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private java.lang.String language_in = \"ECMASCRIPT3\";\n\n    @org.kohsuke.args4j.Option(name = \"--version\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;\n\n    @org.kohsuke.args4j.Option(name = \"--flagfile\", usage = \"A file containing additional command-line options.\")\n    private java.lang.String flag_file = \"\";\n\n    public static class BooleanOptionHandler extends org.kohsuke.args4j.spi.OptionHandler<java.lang.Boolean> {\n        private static final java.util.Set<java.lang.String> TRUES = com.google.common.collect.Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n\n        private static final java.util.Set<java.lang.String> FALSES = com.google.common.collect.Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n        public BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean> setter) {\n            super(parser, option, setter);\n        }\n\n        @java.lang.Override\n        public int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {\n            java.lang.String param = null;\n            try {\n                param = params.getParameter(0);\n            } catch (org.kohsuke.args4j.CmdLineException e) {\n            }\n            if (param == null) {\n                setter.addValue(true);\n                return 0;\n            } else {\n                java.lang.String lowerParam = param.toLowerCase();\n                if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.TRUES.contains(lowerParam)) {\n                    setter.addValue(true);\n                } else if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.FALSES.contains(lowerParam)) {\n                    setter.addValue(false);\n                } else {\n                    setter.addValue(true);\n                    return 0;\n                }\n                return 1;\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getDefaultMetaVariable() {\n            return null;\n        }\n    }\n\n    public static class WarningGuardErrorOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.ERROR));\n        }\n    }\n\n    public static class WarningGuardWarningOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.WARNING));\n        }\n    }\n\n    public static class WarningGuardOffOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.OFF));\n        }\n    }\n\n    private static class WarningGuardSetter implements org.kohsuke.args4j.spi.Setter {\n        private final org.kohsuke.args4j.spi.Setter proxy;\n\n        private final com.google.javascript.jscomp.CheckLevel level;\n\n        private WarningGuardSetter(org.kohsuke.args4j.spi.Setter proxy, com.google.javascript.jscomp.CheckLevel level) {\n            this.proxy = proxy;\n            this.level = level;\n        }\n\n        @java.lang.Override\n        public boolean isMultiValued() {\n            return proxy.isMultiValued();\n        }\n\n        @java.lang.Override\n        public java.lang.Class getType() {\n            return proxy.getType();\n        }\n\n        @java.lang.Override\n        public void addValue(java.lang.Object value) throws org.kohsuke.args4j.CmdLineException {\n            proxy.addValue(((java.lang.String) (value)));\n            com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.add(level, ((java.lang.String) (value)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Annotation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "FieldRead",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.class",
            "src_parent": "@org.kohsuke.args4j.Option(name = \"--jscomp_error\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.class, usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)",
            "src_parent_type": "Annotation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Annotation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "FieldRead",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.class",
            "src_parent": "@org.kohsuke.args4j.Option(name = \"--jscomp_warning\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.class, usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)",
            "src_parent_type": "Annotation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Annotation",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "FieldRead",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.class",
            "src_parent": "@org.kohsuke.args4j.Option(name = \"--jscomp_off\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.class, usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)",
            "src_parent_type": "Annotation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static class WarningGuardErrorOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n    public WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n        super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.ERROR));\n    }\n}",
            "src_parent": "@java.lang.SuppressWarnings(\"unchecked\")\nprivate static class Flags {\n    private static final com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuardSpec = new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec();\n\n    @org.kohsuke.args4j.Option(name = \"--help\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Displays this message\")\n    private boolean display_help = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_tree\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;\n\n    @org.kohsuke.args4j.Option(name = \"--compute_phase_ordering\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Runs the compile job many times, then prints out the \" + \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_ast\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the internal abstract syntax\" + \" tree and exits\")\n    private boolean print_ast = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_pass_graph\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the passes that will get run\" + \" and exits\")\n    private boolean print_pass_graph = false;\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_dev_mode\", aliases = { \"--dev_mode\" })\n    private CompilerOptions.DevMode jscomp_dev_mode = CompilerOptions.DevMode.OFF;\n\n    @org.kohsuke.args4j.Option(name = \"--logging_level\", usage = \"The logging level (standard java.util.logging.Level\" + (\" values) for Compiler progress. Does not control errors or\" + \" warnings for the JavaScript code under compilation\"))\n    private java.lang.String logging_level = java.util.logging.Level.WARNING.getName();\n\n    @org.kohsuke.args4j.Option(name = \"--externs\", usage = \"The file containing javascript externs. You may specify\" + \" multiple\")\n    private java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js\", usage = \"The javascript filename. You may specify multiple\")\n    private java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js_output_file\", usage = \"Primary output filename. If not specified, output is \" + \"written to stdout\")\n    private java.lang.String js_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module\", usage = \"A javascript module specification. The format is \" + ((((\"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \" + \"unique. Each dep is the name of a module that this module \") + \"depends on. Modules must be listed in dependency order, and js \") + \"source files must be listed in the corresponding order. Where \") + \"--module flags occur in relation to --js flags is unimportant\"))\n    private java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_input_file\", usage = \"File containing the serialized version of the variable \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String variable_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_input_file\", usage = \"File containing the serialized version of the property \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String property_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_output_file\", usage = \"File where the serialized version of the variable \" + \"renaming map produced should be saved\")\n    private java.lang.String variable_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_name_map_files\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"If true, variable renaming and property renaming map \" + (((\"files will be produced as {binary name}_vars_map.out and \" + \"{binary name}_props_map.out. Note that this flag cannot be used \") + \"in conjunction with either variable_map_output_file or \") + \"property_map_output_file\"))\n    private boolean create_name_map_files = false;\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_output_file\", usage = \"File where the serialized version of the property \" + \"renaming map produced should be saved\")\n    private java.lang.String property_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--third_party\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Check source validity but do not enforce Closure style \" + \"rules and conventions\")\n    private boolean third_party = false;\n\n    @org.kohsuke.args4j.Option(name = \"--summary_detail_level\", usage = \"Controls how detailed the compilation summary is. Values:\" + (((\" 0 (never print summary), 1 (print summary only if there are \" + \"errors or warnings), 2 (print summary if type checking is on, \") + \"see --check_types), 3 (always print summary). The default level \") + \"is 1\"))\n    private int summary_detail_level = 1;\n\n    @org.kohsuke.args4j.Option(name = \"--output_wrapper\", usage = \"Interpolate output into this string at the place denoted\" + \" by the marker token %output%. See --output_wrapper_marker\")\n    private java.lang.String output_wrapper = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module_wrapper\", usage = \"An output wrapper for a javascript module (optional). \" + ((\"The format is <name>:<wrapper>. The module name must correspond \" + \"with a module specified using --module. The wrapper must \") + \"contain %s as the code placeholder\"))\n    private java.util.List<java.lang.String> module_wrapper = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--module_output_path_prefix\", usage = \"Prefix for filenames of compiled js modules. \" + (\"<module-name>.js will be appended to this prefix. Directories \" + \"will be created as needed. Use with --module\"))\n    private java.lang.String module_output_path_prefix = \"./\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_source_map\", usage = \"If specified, a source map file mapping the generated \" + (((\"source files back to the original source file will be \" + \"output to the specified path. The %outname% placeholder will \") + \"expand to the name of the output file that the source map \") + \"corresponds to.\"))\n    private java.lang.String create_source_map = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_error\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.class, usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_error = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_warning\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.class, usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_warning = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_off\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.class, usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_off = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--define\", aliases = { \"--D\", \"-D\" }, usage = \"Override the value of a variable annotated @define. \" + (((\"The format is <name>[=<val>], where <name> is the name of a @define \" + \"variable and <val> is a boolean, number, or a single-quoted string \") + \"that contains no single quotes. If [=<val>] is omitted, \") + \"the variable is marked true\"))\n    private java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--charset\", usage = \"Input and output charset for all files. By default, we \" + \"accept UTF-8 as input and output US_ASCII\")\n    private java.lang.String charset = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--compilation_level\", usage = \"Specifies the compilation level to use. Options: \" + \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private com.google.javascript.jscomp.CompilationLevel compilation_level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n    @org.kohsuke.args4j.Option(name = \"--warning_level\", usage = \"Specifies the warning level to use. Options: \" + \"QUIET, DEFAULT, VERBOSE\")\n    private com.google.javascript.jscomp.WarningLevel warning_level = WarningLevel.DEFAULT;\n\n    @org.kohsuke.args4j.Option(name = \"--use_only_custom_externs\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;\n\n    @org.kohsuke.args4j.Option(name = \"--debug\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Enable debugging options\")\n    private boolean debug = false;\n\n    @org.kohsuke.args4j.Option(name = \"--generate_exports\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Generates export code for those marked with @export\")\n    private boolean generate_exports = false;\n\n    @org.kohsuke.args4j.Option(name = \"--formatting\", usage = \"Specifies which formatting options, if any, should be \" + (\"applied to the output JS. Options: \" + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\"))\n    private java.util.List<com.google.javascript.jscomp.CommandLineRunner.FormattingOption> formatting = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--process_closure_primitives\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Processes built-ins from the Closure library, such as \" + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;\n\n    @org.kohsuke.args4j.Option(name = \"--manage_closure_dependencies\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Automatically sort dependencies so that a file that \" + (((\"goog.provides symbol X will always come before a file that \" + \"goog.requires symbol X. If an input provides symbols, and \") + \"those symbols are never required, then that input will not \") + \"be included in the compilation.\"))\n    private boolean manage_closure_dependencies = false;\n\n    @org.kohsuke.args4j.Option(name = \"--closure_entry_point\", usage = \"Entry points to the program. Must be goog.provide'd \" + (((((\"symbols. Any goog.provide'd symbols that are not a transitive \" + \"dependency of the entry points will be removed. Files without \") + \"goog.provides, and their dependencies, will always be left in. \") + \"If any entry points are specified, then the \") + \"manage_closure_dependencies option will be set to true and \") + \"all files will be sorted in dependency order.\"))\n    private java.util.List<java.lang.String> closure_entry_point = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--output_manifest\", usage = \"Prints out a list of all the files in the compilation. \" + ((((\"If --manage_closure_dependencies is on, this will not include \" + \"files that got dropped because they were not required. \") + \"The %outname% placeholder expands to the js output file. \") + \"If you're using modularization, using %outname% will create \") + \"a manifest for each module.\"))\n    private java.lang.String output_manifest = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--accept_const_keyword\", usage = \"Allows usage of const keyword.\")\n    private boolean accept_const_keyword = false;\n\n    @org.kohsuke.args4j.Option(name = \"--language_in\", usage = \"Sets what language spec that input sources conform. \" + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private java.lang.String language_in = \"ECMASCRIPT3\";\n\n    @org.kohsuke.args4j.Option(name = \"--version\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;\n\n    @org.kohsuke.args4j.Option(name = \"--flagfile\", usage = \"A file containing additional command-line options.\")\n    private java.lang.String flag_file = \"\";\n\n    public static class BooleanOptionHandler extends org.kohsuke.args4j.spi.OptionHandler<java.lang.Boolean> {\n        private static final java.util.Set<java.lang.String> TRUES = com.google.common.collect.Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n\n        private static final java.util.Set<java.lang.String> FALSES = com.google.common.collect.Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n        public BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean> setter) {\n            super(parser, option, setter);\n        }\n\n        @java.lang.Override\n        public int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {\n            java.lang.String param = null;\n            try {\n                param = params.getParameter(0);\n            } catch (org.kohsuke.args4j.CmdLineException e) {\n            }\n            if (param == null) {\n                setter.addValue(true);\n                return 0;\n            } else {\n                java.lang.String lowerParam = param.toLowerCase();\n                if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.TRUES.contains(lowerParam)) {\n                    setter.addValue(true);\n                } else if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.FALSES.contains(lowerParam)) {\n                    setter.addValue(false);\n                } else {\n                    setter.addValue(true);\n                    return 0;\n                }\n                return 1;\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getDefaultMetaVariable() {\n            return null;\n        }\n    }\n\n    public static class WarningGuardErrorOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.ERROR));\n        }\n    }\n\n    public static class WarningGuardWarningOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.WARNING));\n        }\n    }\n\n    public static class WarningGuardOffOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.OFF));\n        }\n    }\n\n    private static class WarningGuardSetter implements org.kohsuke.args4j.spi.Setter {\n        private final org.kohsuke.args4j.spi.Setter proxy;\n\n        private final com.google.javascript.jscomp.CheckLevel level;\n\n        private WarningGuardSetter(org.kohsuke.args4j.spi.Setter proxy, com.google.javascript.jscomp.CheckLevel level) {\n            this.proxy = proxy;\n            this.level = level;\n        }\n\n        @java.lang.Override\n        public boolean isMultiValued() {\n            return proxy.isMultiValued();\n        }\n\n        @java.lang.Override\n        public java.lang.Class getType() {\n            return proxy.getType();\n        }\n\n        @java.lang.Override\n        public void addValue(java.lang.Object value) throws org.kohsuke.args4j.CmdLineException {\n            proxy.addValue(((java.lang.String) (value)));\n            com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.add(level, ((java.lang.String) (value)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static class WarningGuardWarningOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n    public WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n        super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.WARNING));\n    }\n}",
            "src_parent": "@java.lang.SuppressWarnings(\"unchecked\")\nprivate static class Flags {\n    private static final com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuardSpec = new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec();\n\n    @org.kohsuke.args4j.Option(name = \"--help\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Displays this message\")\n    private boolean display_help = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_tree\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;\n\n    @org.kohsuke.args4j.Option(name = \"--compute_phase_ordering\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Runs the compile job many times, then prints out the \" + \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_ast\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the internal abstract syntax\" + \" tree and exits\")\n    private boolean print_ast = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_pass_graph\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the passes that will get run\" + \" and exits\")\n    private boolean print_pass_graph = false;\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_dev_mode\", aliases = { \"--dev_mode\" })\n    private CompilerOptions.DevMode jscomp_dev_mode = CompilerOptions.DevMode.OFF;\n\n    @org.kohsuke.args4j.Option(name = \"--logging_level\", usage = \"The logging level (standard java.util.logging.Level\" + (\" values) for Compiler progress. Does not control errors or\" + \" warnings for the JavaScript code under compilation\"))\n    private java.lang.String logging_level = java.util.logging.Level.WARNING.getName();\n\n    @org.kohsuke.args4j.Option(name = \"--externs\", usage = \"The file containing javascript externs. You may specify\" + \" multiple\")\n    private java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js\", usage = \"The javascript filename. You may specify multiple\")\n    private java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js_output_file\", usage = \"Primary output filename. If not specified, output is \" + \"written to stdout\")\n    private java.lang.String js_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module\", usage = \"A javascript module specification. The format is \" + ((((\"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \" + \"unique. Each dep is the name of a module that this module \") + \"depends on. Modules must be listed in dependency order, and js \") + \"source files must be listed in the corresponding order. Where \") + \"--module flags occur in relation to --js flags is unimportant\"))\n    private java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_input_file\", usage = \"File containing the serialized version of the variable \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String variable_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_input_file\", usage = \"File containing the serialized version of the property \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String property_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_output_file\", usage = \"File where the serialized version of the variable \" + \"renaming map produced should be saved\")\n    private java.lang.String variable_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_name_map_files\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"If true, variable renaming and property renaming map \" + (((\"files will be produced as {binary name}_vars_map.out and \" + \"{binary name}_props_map.out. Note that this flag cannot be used \") + \"in conjunction with either variable_map_output_file or \") + \"property_map_output_file\"))\n    private boolean create_name_map_files = false;\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_output_file\", usage = \"File where the serialized version of the property \" + \"renaming map produced should be saved\")\n    private java.lang.String property_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--third_party\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Check source validity but do not enforce Closure style \" + \"rules and conventions\")\n    private boolean third_party = false;\n\n    @org.kohsuke.args4j.Option(name = \"--summary_detail_level\", usage = \"Controls how detailed the compilation summary is. Values:\" + (((\" 0 (never print summary), 1 (print summary only if there are \" + \"errors or warnings), 2 (print summary if type checking is on, \") + \"see --check_types), 3 (always print summary). The default level \") + \"is 1\"))\n    private int summary_detail_level = 1;\n\n    @org.kohsuke.args4j.Option(name = \"--output_wrapper\", usage = \"Interpolate output into this string at the place denoted\" + \" by the marker token %output%. See --output_wrapper_marker\")\n    private java.lang.String output_wrapper = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module_wrapper\", usage = \"An output wrapper for a javascript module (optional). \" + ((\"The format is <name>:<wrapper>. The module name must correspond \" + \"with a module specified using --module. The wrapper must \") + \"contain %s as the code placeholder\"))\n    private java.util.List<java.lang.String> module_wrapper = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--module_output_path_prefix\", usage = \"Prefix for filenames of compiled js modules. \" + (\"<module-name>.js will be appended to this prefix. Directories \" + \"will be created as needed. Use with --module\"))\n    private java.lang.String module_output_path_prefix = \"./\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_source_map\", usage = \"If specified, a source map file mapping the generated \" + (((\"source files back to the original source file will be \" + \"output to the specified path. The %outname% placeholder will \") + \"expand to the name of the output file that the source map \") + \"corresponds to.\"))\n    private java.lang.String create_source_map = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_error\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.class, usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_error = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_warning\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.class, usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_warning = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_off\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.class, usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_off = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--define\", aliases = { \"--D\", \"-D\" }, usage = \"Override the value of a variable annotated @define. \" + (((\"The format is <name>[=<val>], where <name> is the name of a @define \" + \"variable and <val> is a boolean, number, or a single-quoted string \") + \"that contains no single quotes. If [=<val>] is omitted, \") + \"the variable is marked true\"))\n    private java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--charset\", usage = \"Input and output charset for all files. By default, we \" + \"accept UTF-8 as input and output US_ASCII\")\n    private java.lang.String charset = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--compilation_level\", usage = \"Specifies the compilation level to use. Options: \" + \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private com.google.javascript.jscomp.CompilationLevel compilation_level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n    @org.kohsuke.args4j.Option(name = \"--warning_level\", usage = \"Specifies the warning level to use. Options: \" + \"QUIET, DEFAULT, VERBOSE\")\n    private com.google.javascript.jscomp.WarningLevel warning_level = WarningLevel.DEFAULT;\n\n    @org.kohsuke.args4j.Option(name = \"--use_only_custom_externs\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;\n\n    @org.kohsuke.args4j.Option(name = \"--debug\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Enable debugging options\")\n    private boolean debug = false;\n\n    @org.kohsuke.args4j.Option(name = \"--generate_exports\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Generates export code for those marked with @export\")\n    private boolean generate_exports = false;\n\n    @org.kohsuke.args4j.Option(name = \"--formatting\", usage = \"Specifies which formatting options, if any, should be \" + (\"applied to the output JS. Options: \" + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\"))\n    private java.util.List<com.google.javascript.jscomp.CommandLineRunner.FormattingOption> formatting = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--process_closure_primitives\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Processes built-ins from the Closure library, such as \" + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;\n\n    @org.kohsuke.args4j.Option(name = \"--manage_closure_dependencies\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Automatically sort dependencies so that a file that \" + (((\"goog.provides symbol X will always come before a file that \" + \"goog.requires symbol X. If an input provides symbols, and \") + \"those symbols are never required, then that input will not \") + \"be included in the compilation.\"))\n    private boolean manage_closure_dependencies = false;\n\n    @org.kohsuke.args4j.Option(name = \"--closure_entry_point\", usage = \"Entry points to the program. Must be goog.provide'd \" + (((((\"symbols. Any goog.provide'd symbols that are not a transitive \" + \"dependency of the entry points will be removed. Files without \") + \"goog.provides, and their dependencies, will always be left in. \") + \"If any entry points are specified, then the \") + \"manage_closure_dependencies option will be set to true and \") + \"all files will be sorted in dependency order.\"))\n    private java.util.List<java.lang.String> closure_entry_point = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--output_manifest\", usage = \"Prints out a list of all the files in the compilation. \" + ((((\"If --manage_closure_dependencies is on, this will not include \" + \"files that got dropped because they were not required. \") + \"The %outname% placeholder expands to the js output file. \") + \"If you're using modularization, using %outname% will create \") + \"a manifest for each module.\"))\n    private java.lang.String output_manifest = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--accept_const_keyword\", usage = \"Allows usage of const keyword.\")\n    private boolean accept_const_keyword = false;\n\n    @org.kohsuke.args4j.Option(name = \"--language_in\", usage = \"Sets what language spec that input sources conform. \" + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private java.lang.String language_in = \"ECMASCRIPT3\";\n\n    @org.kohsuke.args4j.Option(name = \"--version\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;\n\n    @org.kohsuke.args4j.Option(name = \"--flagfile\", usage = \"A file containing additional command-line options.\")\n    private java.lang.String flag_file = \"\";\n\n    public static class BooleanOptionHandler extends org.kohsuke.args4j.spi.OptionHandler<java.lang.Boolean> {\n        private static final java.util.Set<java.lang.String> TRUES = com.google.common.collect.Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n\n        private static final java.util.Set<java.lang.String> FALSES = com.google.common.collect.Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n        public BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean> setter) {\n            super(parser, option, setter);\n        }\n\n        @java.lang.Override\n        public int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {\n            java.lang.String param = null;\n            try {\n                param = params.getParameter(0);\n            } catch (org.kohsuke.args4j.CmdLineException e) {\n            }\n            if (param == null) {\n                setter.addValue(true);\n                return 0;\n            } else {\n                java.lang.String lowerParam = param.toLowerCase();\n                if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.TRUES.contains(lowerParam)) {\n                    setter.addValue(true);\n                } else if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.FALSES.contains(lowerParam)) {\n                    setter.addValue(false);\n                } else {\n                    setter.addValue(true);\n                    return 0;\n                }\n                return 1;\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getDefaultMetaVariable() {\n            return null;\n        }\n    }\n\n    public static class WarningGuardErrorOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.ERROR));\n        }\n    }\n\n    public static class WarningGuardWarningOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.WARNING));\n        }\n    }\n\n    public static class WarningGuardOffOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.OFF));\n        }\n    }\n\n    private static class WarningGuardSetter implements org.kohsuke.args4j.spi.Setter {\n        private final org.kohsuke.args4j.spi.Setter proxy;\n\n        private final com.google.javascript.jscomp.CheckLevel level;\n\n        private WarningGuardSetter(org.kohsuke.args4j.spi.Setter proxy, com.google.javascript.jscomp.CheckLevel level) {\n            this.proxy = proxy;\n            this.level = level;\n        }\n\n        @java.lang.Override\n        public boolean isMultiValued() {\n            return proxy.isMultiValued();\n        }\n\n        @java.lang.Override\n        public java.lang.Class getType() {\n            return proxy.getType();\n        }\n\n        @java.lang.Override\n        public void addValue(java.lang.Object value) throws org.kohsuke.args4j.CmdLineException {\n            proxy.addValue(((java.lang.String) (value)));\n            com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.add(level, ((java.lang.String) (value)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static class WarningGuardOffOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n    public WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n        super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.OFF));\n    }\n}",
            "src_parent": "@java.lang.SuppressWarnings(\"unchecked\")\nprivate static class Flags {\n    private static final com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuardSpec = new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec();\n\n    @org.kohsuke.args4j.Option(name = \"--help\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Displays this message\")\n    private boolean display_help = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_tree\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;\n\n    @org.kohsuke.args4j.Option(name = \"--compute_phase_ordering\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Runs the compile job many times, then prints out the \" + \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_ast\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the internal abstract syntax\" + \" tree and exits\")\n    private boolean print_ast = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_pass_graph\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the passes that will get run\" + \" and exits\")\n    private boolean print_pass_graph = false;\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_dev_mode\", aliases = { \"--dev_mode\" })\n    private CompilerOptions.DevMode jscomp_dev_mode = CompilerOptions.DevMode.OFF;\n\n    @org.kohsuke.args4j.Option(name = \"--logging_level\", usage = \"The logging level (standard java.util.logging.Level\" + (\" values) for Compiler progress. Does not control errors or\" + \" warnings for the JavaScript code under compilation\"))\n    private java.lang.String logging_level = java.util.logging.Level.WARNING.getName();\n\n    @org.kohsuke.args4j.Option(name = \"--externs\", usage = \"The file containing javascript externs. You may specify\" + \" multiple\")\n    private java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js\", usage = \"The javascript filename. You may specify multiple\")\n    private java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js_output_file\", usage = \"Primary output filename. If not specified, output is \" + \"written to stdout\")\n    private java.lang.String js_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module\", usage = \"A javascript module specification. The format is \" + ((((\"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \" + \"unique. Each dep is the name of a module that this module \") + \"depends on. Modules must be listed in dependency order, and js \") + \"source files must be listed in the corresponding order. Where \") + \"--module flags occur in relation to --js flags is unimportant\"))\n    private java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_input_file\", usage = \"File containing the serialized version of the variable \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String variable_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_input_file\", usage = \"File containing the serialized version of the property \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String property_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_output_file\", usage = \"File where the serialized version of the variable \" + \"renaming map produced should be saved\")\n    private java.lang.String variable_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_name_map_files\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"If true, variable renaming and property renaming map \" + (((\"files will be produced as {binary name}_vars_map.out and \" + \"{binary name}_props_map.out. Note that this flag cannot be used \") + \"in conjunction with either variable_map_output_file or \") + \"property_map_output_file\"))\n    private boolean create_name_map_files = false;\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_output_file\", usage = \"File where the serialized version of the property \" + \"renaming map produced should be saved\")\n    private java.lang.String property_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--third_party\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Check source validity but do not enforce Closure style \" + \"rules and conventions\")\n    private boolean third_party = false;\n\n    @org.kohsuke.args4j.Option(name = \"--summary_detail_level\", usage = \"Controls how detailed the compilation summary is. Values:\" + (((\" 0 (never print summary), 1 (print summary only if there are \" + \"errors or warnings), 2 (print summary if type checking is on, \") + \"see --check_types), 3 (always print summary). The default level \") + \"is 1\"))\n    private int summary_detail_level = 1;\n\n    @org.kohsuke.args4j.Option(name = \"--output_wrapper\", usage = \"Interpolate output into this string at the place denoted\" + \" by the marker token %output%. See --output_wrapper_marker\")\n    private java.lang.String output_wrapper = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module_wrapper\", usage = \"An output wrapper for a javascript module (optional). \" + ((\"The format is <name>:<wrapper>. The module name must correspond \" + \"with a module specified using --module. The wrapper must \") + \"contain %s as the code placeholder\"))\n    private java.util.List<java.lang.String> module_wrapper = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--module_output_path_prefix\", usage = \"Prefix for filenames of compiled js modules. \" + (\"<module-name>.js will be appended to this prefix. Directories \" + \"will be created as needed. Use with --module\"))\n    private java.lang.String module_output_path_prefix = \"./\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_source_map\", usage = \"If specified, a source map file mapping the generated \" + (((\"source files back to the original source file will be \" + \"output to the specified path. The %outname% placeholder will \") + \"expand to the name of the output file that the source map \") + \"corresponds to.\"))\n    private java.lang.String create_source_map = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_error\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.class, usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_error = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_warning\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.class, usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_warning = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_off\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.class, usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_off = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--define\", aliases = { \"--D\", \"-D\" }, usage = \"Override the value of a variable annotated @define. \" + (((\"The format is <name>[=<val>], where <name> is the name of a @define \" + \"variable and <val> is a boolean, number, or a single-quoted string \") + \"that contains no single quotes. If [=<val>] is omitted, \") + \"the variable is marked true\"))\n    private java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--charset\", usage = \"Input and output charset for all files. By default, we \" + \"accept UTF-8 as input and output US_ASCII\")\n    private java.lang.String charset = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--compilation_level\", usage = \"Specifies the compilation level to use. Options: \" + \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private com.google.javascript.jscomp.CompilationLevel compilation_level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n    @org.kohsuke.args4j.Option(name = \"--warning_level\", usage = \"Specifies the warning level to use. Options: \" + \"QUIET, DEFAULT, VERBOSE\")\n    private com.google.javascript.jscomp.WarningLevel warning_level = WarningLevel.DEFAULT;\n\n    @org.kohsuke.args4j.Option(name = \"--use_only_custom_externs\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;\n\n    @org.kohsuke.args4j.Option(name = \"--debug\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Enable debugging options\")\n    private boolean debug = false;\n\n    @org.kohsuke.args4j.Option(name = \"--generate_exports\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Generates export code for those marked with @export\")\n    private boolean generate_exports = false;\n\n    @org.kohsuke.args4j.Option(name = \"--formatting\", usage = \"Specifies which formatting options, if any, should be \" + (\"applied to the output JS. Options: \" + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\"))\n    private java.util.List<com.google.javascript.jscomp.CommandLineRunner.FormattingOption> formatting = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--process_closure_primitives\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Processes built-ins from the Closure library, such as \" + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;\n\n    @org.kohsuke.args4j.Option(name = \"--manage_closure_dependencies\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Automatically sort dependencies so that a file that \" + (((\"goog.provides symbol X will always come before a file that \" + \"goog.requires symbol X. If an input provides symbols, and \") + \"those symbols are never required, then that input will not \") + \"be included in the compilation.\"))\n    private boolean manage_closure_dependencies = false;\n\n    @org.kohsuke.args4j.Option(name = \"--closure_entry_point\", usage = \"Entry points to the program. Must be goog.provide'd \" + (((((\"symbols. Any goog.provide'd symbols that are not a transitive \" + \"dependency of the entry points will be removed. Files without \") + \"goog.provides, and their dependencies, will always be left in. \") + \"If any entry points are specified, then the \") + \"manage_closure_dependencies option will be set to true and \") + \"all files will be sorted in dependency order.\"))\n    private java.util.List<java.lang.String> closure_entry_point = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--output_manifest\", usage = \"Prints out a list of all the files in the compilation. \" + ((((\"If --manage_closure_dependencies is on, this will not include \" + \"files that got dropped because they were not required. \") + \"The %outname% placeholder expands to the js output file. \") + \"If you're using modularization, using %outname% will create \") + \"a manifest for each module.\"))\n    private java.lang.String output_manifest = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--accept_const_keyword\", usage = \"Allows usage of const keyword.\")\n    private boolean accept_const_keyword = false;\n\n    @org.kohsuke.args4j.Option(name = \"--language_in\", usage = \"Sets what language spec that input sources conform. \" + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private java.lang.String language_in = \"ECMASCRIPT3\";\n\n    @org.kohsuke.args4j.Option(name = \"--version\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;\n\n    @org.kohsuke.args4j.Option(name = \"--flagfile\", usage = \"A file containing additional command-line options.\")\n    private java.lang.String flag_file = \"\";\n\n    public static class BooleanOptionHandler extends org.kohsuke.args4j.spi.OptionHandler<java.lang.Boolean> {\n        private static final java.util.Set<java.lang.String> TRUES = com.google.common.collect.Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n\n        private static final java.util.Set<java.lang.String> FALSES = com.google.common.collect.Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n        public BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean> setter) {\n            super(parser, option, setter);\n        }\n\n        @java.lang.Override\n        public int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {\n            java.lang.String param = null;\n            try {\n                param = params.getParameter(0);\n            } catch (org.kohsuke.args4j.CmdLineException e) {\n            }\n            if (param == null) {\n                setter.addValue(true);\n                return 0;\n            } else {\n                java.lang.String lowerParam = param.toLowerCase();\n                if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.TRUES.contains(lowerParam)) {\n                    setter.addValue(true);\n                } else if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.FALSES.contains(lowerParam)) {\n                    setter.addValue(false);\n                } else {\n                    setter.addValue(true);\n                    return 0;\n                }\n                return 1;\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getDefaultMetaVariable() {\n            return null;\n        }\n    }\n\n    public static class WarningGuardErrorOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.ERROR));\n        }\n    }\n\n    public static class WarningGuardWarningOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.WARNING));\n        }\n    }\n\n    public static class WarningGuardOffOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.OFF));\n        }\n    }\n\n    private static class WarningGuardSetter implements org.kohsuke.args4j.spi.Setter {\n        private final org.kohsuke.args4j.spi.Setter proxy;\n\n        private final com.google.javascript.jscomp.CheckLevel level;\n\n        private WarningGuardSetter(org.kohsuke.args4j.spi.Setter proxy, com.google.javascript.jscomp.CheckLevel level) {\n            this.proxy = proxy;\n            this.level = level;\n        }\n\n        @java.lang.Override\n        public boolean isMultiValued() {\n            return proxy.isMultiValued();\n        }\n\n        @java.lang.Override\n        public java.lang.Class getType() {\n            return proxy.getType();\n        }\n\n        @java.lang.Override\n        public void addValue(java.lang.Object value) throws org.kohsuke.args4j.CmdLineException {\n            proxy.addValue(((java.lang.String) (value)));\n            com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.add(level, ((java.lang.String) (value)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private static class WarningGuardSetter implements org.kohsuke.args4j.spi.Setter {\n    private final org.kohsuke.args4j.spi.Setter proxy;\n\n    private final com.google.javascript.jscomp.CheckLevel level;\n\n    private WarningGuardSetter(org.kohsuke.args4j.spi.Setter proxy, com.google.javascript.jscomp.CheckLevel level) {\n        this.proxy = proxy;\n        this.level = level;\n    }\n\n    @java.lang.Override\n    public boolean isMultiValued() {\n        return proxy.isMultiValued();\n    }\n\n    @java.lang.Override\n    public java.lang.Class getType() {\n        return proxy.getType();\n    }\n\n    @java.lang.Override\n    public void addValue(java.lang.Object value) throws org.kohsuke.args4j.CmdLineException {\n        proxy.addValue(((java.lang.String) (value)));\n        com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.add(level, ((java.lang.String) (value)));\n    }\n}",
            "src_parent": "@java.lang.SuppressWarnings(\"unchecked\")\nprivate static class Flags {\n    private static final com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuardSpec = new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec();\n\n    @org.kohsuke.args4j.Option(name = \"--help\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Displays this message\")\n    private boolean display_help = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_tree\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;\n\n    @org.kohsuke.args4j.Option(name = \"--compute_phase_ordering\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Runs the compile job many times, then prints out the \" + \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_ast\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the internal abstract syntax\" + \" tree and exits\")\n    private boolean print_ast = false;\n\n    @org.kohsuke.args4j.Option(name = \"--print_pass_graph\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints a dot file describing the passes that will get run\" + \" and exits\")\n    private boolean print_pass_graph = false;\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_dev_mode\", aliases = { \"--dev_mode\" })\n    private CompilerOptions.DevMode jscomp_dev_mode = CompilerOptions.DevMode.OFF;\n\n    @org.kohsuke.args4j.Option(name = \"--logging_level\", usage = \"The logging level (standard java.util.logging.Level\" + (\" values) for Compiler progress. Does not control errors or\" + \" warnings for the JavaScript code under compilation\"))\n    private java.lang.String logging_level = java.util.logging.Level.WARNING.getName();\n\n    @org.kohsuke.args4j.Option(name = \"--externs\", usage = \"The file containing javascript externs. You may specify\" + \" multiple\")\n    private java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js\", usage = \"The javascript filename. You may specify multiple\")\n    private java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--js_output_file\", usage = \"Primary output filename. If not specified, output is \" + \"written to stdout\")\n    private java.lang.String js_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module\", usage = \"A javascript module specification. The format is \" + ((((\"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \" + \"unique. Each dep is the name of a module that this module \") + \"depends on. Modules must be listed in dependency order, and js \") + \"source files must be listed in the corresponding order. Where \") + \"--module flags occur in relation to --js flags is unimportant\"))\n    private java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_input_file\", usage = \"File containing the serialized version of the variable \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String variable_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_input_file\", usage = \"File containing the serialized version of the property \" + \"renaming map produced by a previous compilation\")\n    private java.lang.String property_map_input_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--variable_map_output_file\", usage = \"File where the serialized version of the variable \" + \"renaming map produced should be saved\")\n    private java.lang.String variable_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_name_map_files\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"If true, variable renaming and property renaming map \" + (((\"files will be produced as {binary name}_vars_map.out and \" + \"{binary name}_props_map.out. Note that this flag cannot be used \") + \"in conjunction with either variable_map_output_file or \") + \"property_map_output_file\"))\n    private boolean create_name_map_files = false;\n\n    @org.kohsuke.args4j.Option(name = \"--property_map_output_file\", usage = \"File where the serialized version of the property \" + \"renaming map produced should be saved\")\n    private java.lang.String property_map_output_file = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--third_party\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Check source validity but do not enforce Closure style \" + \"rules and conventions\")\n    private boolean third_party = false;\n\n    @org.kohsuke.args4j.Option(name = \"--summary_detail_level\", usage = \"Controls how detailed the compilation summary is. Values:\" + (((\" 0 (never print summary), 1 (print summary only if there are \" + \"errors or warnings), 2 (print summary if type checking is on, \") + \"see --check_types), 3 (always print summary). The default level \") + \"is 1\"))\n    private int summary_detail_level = 1;\n\n    @org.kohsuke.args4j.Option(name = \"--output_wrapper\", usage = \"Interpolate output into this string at the place denoted\" + \" by the marker token %output%. See --output_wrapper_marker\")\n    private java.lang.String output_wrapper = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--module_wrapper\", usage = \"An output wrapper for a javascript module (optional). \" + ((\"The format is <name>:<wrapper>. The module name must correspond \" + \"with a module specified using --module. The wrapper must \") + \"contain %s as the code placeholder\"))\n    private java.util.List<java.lang.String> module_wrapper = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--module_output_path_prefix\", usage = \"Prefix for filenames of compiled js modules. \" + (\"<module-name>.js will be appended to this prefix. Directories \" + \"will be created as needed. Use with --module\"))\n    private java.lang.String module_output_path_prefix = \"./\";\n\n    @org.kohsuke.args4j.Option(name = \"--create_source_map\", usage = \"If specified, a source map file mapping the generated \" + (((\"source files back to the original source file will be \" + \"output to the specified path. The %outname% placeholder will \") + \"expand to the name of the output file that the source map \") + \"corresponds to.\"))\n    private java.lang.String create_source_map = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_error\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.class, usage = \"Make the named class of warnings an error. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_error = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_warning\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.class, usage = (\"Make the named class of warnings a normal warning. \" + \"Options:\") + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_warning = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--jscomp_off\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.class, usage = \"Turn off the named class of warnings. Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private java.util.List<java.lang.String> jscomp_off = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--define\", aliases = { \"--D\", \"-D\" }, usage = \"Override the value of a variable annotated @define. \" + (((\"The format is <name>[=<val>], where <name> is the name of a @define \" + \"variable and <val> is a boolean, number, or a single-quoted string \") + \"that contains no single quotes. If [=<val>] is omitted, \") + \"the variable is marked true\"))\n    private java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--charset\", usage = \"Input and output charset for all files. By default, we \" + \"accept UTF-8 as input and output US_ASCII\")\n    private java.lang.String charset = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--compilation_level\", usage = \"Specifies the compilation level to use. Options: \" + \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private com.google.javascript.jscomp.CompilationLevel compilation_level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n\n    @org.kohsuke.args4j.Option(name = \"--warning_level\", usage = \"Specifies the warning level to use. Options: \" + \"QUIET, DEFAULT, VERBOSE\")\n    private com.google.javascript.jscomp.WarningLevel warning_level = WarningLevel.DEFAULT;\n\n    @org.kohsuke.args4j.Option(name = \"--use_only_custom_externs\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;\n\n    @org.kohsuke.args4j.Option(name = \"--debug\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Enable debugging options\")\n    private boolean debug = false;\n\n    @org.kohsuke.args4j.Option(name = \"--generate_exports\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Generates export code for those marked with @export\")\n    private boolean generate_exports = false;\n\n    @org.kohsuke.args4j.Option(name = \"--formatting\", usage = \"Specifies which formatting options, if any, should be \" + (\"applied to the output JS. Options: \" + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\"))\n    private java.util.List<com.google.javascript.jscomp.CommandLineRunner.FormattingOption> formatting = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--process_closure_primitives\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Processes built-ins from the Closure library, such as \" + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;\n\n    @org.kohsuke.args4j.Option(name = \"--manage_closure_dependencies\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Automatically sort dependencies so that a file that \" + (((\"goog.provides symbol X will always come before a file that \" + \"goog.requires symbol X. If an input provides symbols, and \") + \"those symbols are never required, then that input will not \") + \"be included in the compilation.\"))\n    private boolean manage_closure_dependencies = false;\n\n    @org.kohsuke.args4j.Option(name = \"--closure_entry_point\", usage = \"Entry points to the program. Must be goog.provide'd \" + (((((\"symbols. Any goog.provide'd symbols that are not a transitive \" + \"dependency of the entry points will be removed. Files without \") + \"goog.provides, and their dependencies, will always be left in. \") + \"If any entry points are specified, then the \") + \"manage_closure_dependencies option will be set to true and \") + \"all files will be sorted in dependency order.\"))\n    private java.util.List<java.lang.String> closure_entry_point = com.google.common.collect.Lists.newArrayList();\n\n    @org.kohsuke.args4j.Option(name = \"--output_manifest\", usage = \"Prints out a list of all the files in the compilation. \" + ((((\"If --manage_closure_dependencies is on, this will not include \" + \"files that got dropped because they were not required. \") + \"The %outname% placeholder expands to the js output file. \") + \"If you're using modularization, using %outname% will create \") + \"a manifest for each module.\"))\n    private java.lang.String output_manifest = \"\";\n\n    @org.kohsuke.args4j.Option(name = \"--accept_const_keyword\", usage = \"Allows usage of const keyword.\")\n    private boolean accept_const_keyword = false;\n\n    @org.kohsuke.args4j.Option(name = \"--language_in\", usage = \"Sets what language spec that input sources conform. \" + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private java.lang.String language_in = \"ECMASCRIPT3\";\n\n    @org.kohsuke.args4j.Option(name = \"--version\", handler = com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.class, usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;\n\n    @org.kohsuke.args4j.Option(name = \"--flagfile\", usage = \"A file containing additional command-line options.\")\n    private java.lang.String flag_file = \"\";\n\n    public static class BooleanOptionHandler extends org.kohsuke.args4j.spi.OptionHandler<java.lang.Boolean> {\n        private static final java.util.Set<java.lang.String> TRUES = com.google.common.collect.Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");\n\n        private static final java.util.Set<java.lang.String> FALSES = com.google.common.collect.Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");\n\n        public BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean> setter) {\n            super(parser, option, setter);\n        }\n\n        @java.lang.Override\n        public int parseArguments(org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException {\n            java.lang.String param = null;\n            try {\n                param = params.getParameter(0);\n            } catch (org.kohsuke.args4j.CmdLineException e) {\n            }\n            if (param == null) {\n                setter.addValue(true);\n                return 0;\n            } else {\n                java.lang.String lowerParam = param.toLowerCase();\n                if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.TRUES.contains(lowerParam)) {\n                    setter.addValue(true);\n                } else if (com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.FALSES.contains(lowerParam)) {\n                    setter.addValue(false);\n                } else {\n                    setter.addValue(true);\n                    return 0;\n                }\n                return 1;\n            }\n        }\n\n        @java.lang.Override\n        public java.lang.String getDefaultMetaVariable() {\n            return null;\n        }\n    }\n\n    public static class WarningGuardErrorOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.ERROR));\n        }\n    }\n\n    public static class WarningGuardWarningOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.WARNING));\n        }\n    }\n\n    public static class WarningGuardOffOptionHandler extends org.kohsuke.args4j.spi.StringOptionHandler {\n        public WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser parser, org.kohsuke.args4j.OptionDef option, org.kohsuke.args4j.spi.Setter<? super java.lang.String> setter) {\n            super(parser, option, new com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter(setter, CheckLevel.OFF));\n        }\n    }\n\n    private static class WarningGuardSetter implements org.kohsuke.args4j.spi.Setter {\n        private final org.kohsuke.args4j.spi.Setter proxy;\n\n        private final com.google.javascript.jscomp.CheckLevel level;\n\n        private WarningGuardSetter(org.kohsuke.args4j.spi.Setter proxy, com.google.javascript.jscomp.CheckLevel level) {\n            this.proxy = proxy;\n            this.level = level;\n        }\n\n        @java.lang.Override\n        public boolean isMultiValued() {\n            return proxy.isMultiValued();\n        }\n\n        @java.lang.Override\n        public java.lang.Class getType() {\n            return proxy.getType();\n        }\n\n        @java.lang.Override\n        public void addValue(java.lang.Object value) throws org.kohsuke.args4j.CmdLineException {\n            proxy.addValue(((java.lang.String) (value)));\n            com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.add(level, ((java.lang.String) (value)));\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Assignment",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.clear()",
            "src_parent": "{\n    java.util.List<java.lang.String> argsInFile = com.google.common.collect.Lists.newArrayList();\n    java.io.File flagFileInput = new java.io.File(flags.flag_file);\n    java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(com.google.common.io.Files.toString(flagFileInput, java.nio.charset.Charset.defaultCharset()));\n    while (tokenizer.hasMoreTokens()) {\n        argsInFile.add(tokenizer.nextToken());\n    } \n    flags.flag_file = \"\";\n    java.util.List<java.lang.String> processedFileArgs = processArgs(argsInFile.toArray(new java.lang.String[]{  }));\n    org.kohsuke.args4j.CmdLineParser parserFileArgs = new org.kohsuke.args4j.CmdLineParser(flags);\n    com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.clear();\n    parserFileArgs.parseArgument(processedFileArgs.toArray(new java.lang.String[]{  }));\n    if (!flags.flag_file.equals(\"\")) {\n        err.println(\"ERROR - Arguments in the file cannot contain \" + \"--flagfile option.\");\n        isConfigValid = false;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Try",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.clear()",
            "src_parent": "{\n    java.util.List<java.lang.String> processedArgs = processArgs(args);\n    org.kohsuke.args4j.CmdLineParser parser = new org.kohsuke.args4j.CmdLineParser(flags);\n    com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec.clear();\n    isConfigValid = true;\n    try {\n        parser.parseArgument(processedArgs.toArray(new java.lang.String[]{  }));\n        if (!flags.flag_file.equals(\"\")) {\n            processFlagFile(err);\n        }\n    } catch (org.kohsuke.args4j.CmdLineException e) {\n        err.println(e.getMessage());\n        isConfigValid = false;\n    } catch (java.io.IOException ioErr) {\n        err.println((\"ERROR - \" + flags.flag_file) + \" read error.\");\n        isConfigValid = false;\n    }\n    if (flags.version) {\n        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.CommandLineRunner.configResource);\n        err.println(((((\"Closure Compiler (http://code.google.com/closure/compiler)\\n\" + \"Version: \") + config.getString(\"compiler.version\")) + \"\\n\") + \"Built on: \") + config.getString(\"compiler.date\"));\n        err.flush();\n    }\n    if ((!isConfigValid) || flags.display_help) {\n        isConfigValid = false;\n        parser.printUsage(err);\n    } else {\n        getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset).setManageClosureDependencies(flags.manage_closure_dependencies).setClosureEntryPoints(flags.closure_entry_point).setOutputManifest(flags.output_manifest).setAcceptConstKeyword(flags.accept_const_keyword).setLanguageIn(flags.language_in);\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define)",
            "src_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define).setCharset(flags.charset)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "flags.define",
            "dst_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off).setDefine(flags.define)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "flags.define",
            "src_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec).setDefine(flags.define)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning)",
            "dst_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setJscompError(flags.jscomp_error).setJscompWarning(flags.jscomp_warning).setJscompOff(flags.jscomp_off)",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec).setDefine(flags.define)",
            "src_parent": "getCommandLineConfig().setPrintTree(flags.print_tree).setComputePhaseOrdering(flags.compute_phase_ordering).setPrintAst(flags.print_ast).setPrintPassGraph(flags.print_pass_graph).setJscompDevMode(flags.jscomp_dev_mode).setLoggingLevel(flags.logging_level).setExterns(flags.externs).setJs(flags.js).setJsOutputFile(flags.js_output_file).setModule(flags.module).setVariableMapInputFile(flags.variable_map_input_file).setPropertyMapInputFile(flags.property_map_input_file).setVariableMapOutputFile(flags.variable_map_output_file).setCreateNameMapFiles(flags.create_name_map_files).setPropertyMapOutputFile(flags.property_map_output_file).setCodingConvention(flags.third_party ? new com.google.javascript.jscomp.DefaultCodingConvention() : new com.google.javascript.jscomp.ClosureCodingConvention()).setSummaryDetailLevel(flags.summary_detail_level).setOutputWrapper(flags.output_wrapper).setModuleWrapper(flags.module_wrapper).setModuleOutputPathPrefix(flags.module_output_path_prefix).setCreateSourceMap(flags.create_source_map).setWarningGuardSpec(com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec).setDefine(flags.define).setCharset(flags.charset)",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.javascript.jscomp.CommandLineRunner",
            "dst_parent": "",
            "dst_parent_type": "ThisAccess",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "com.google.javascript.jscomp.CommandLineRunner.Flags",
            "src_parent": "com.google.javascript.jscomp.CommandLineRunner.Flags.warningGuardSpec",
            "src_parent_type": "FieldRead",
            "src_type": "TypeAccess"
          }
        }
      ],
      "file_name": "CommandLineRunner"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();",
            "dst_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n        this.jscompError.clear();\n        this.jscompError.addAll(jscompError);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n        this.jscompWarning.clear();\n        this.jscompWarning.addAll(jscompWarning);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n        this.jscompOff.clear();\n        this.jscompOff.addAll(jscompOff);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Field",
            "operator": "UPD",
            "src": "private com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuards = null;",
            "src_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuards = null;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec) {\n        this.warningGuards = spec;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}",
            "dst_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n        this.jscompError.clear();\n        this.jscompError.addAll(jscompError);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n        this.jscompWarning.clear();\n        this.jscompWarning.addAll(jscompWarning);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n        this.jscompOff.clear();\n        this.jscompOff.addAll(jscompOff);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec) {\n    this.warningGuards = spec;\n    return this;\n}",
            "src_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuards = null;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec) {\n        this.warningGuards = spec;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "config.jscompError",
            "dst_parent": "diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "config.warningGuards",
            "src_parent": "config.warningGuards != null",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "config.jscompWarning",
            "dst_parent": "diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "UPD",
            "src": "config.warningGuards",
            "src_parent": "config.warningGuards.entries",
            "src_parent_type": "FieldRead",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<java.lang.String>",
            "dst_parent": "private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();",
            "dst_parent_type": "Field",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec",
            "src_parent": "private com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuards = null;",
            "src_parent_type": "Field",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<java.lang.String> jscompWarning",
            "dst_parent": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n    this.jscompWarning.clear();\n    this.jscompWarning.addAll(jscompWarning);\n    return this;\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "UPD",
            "src": "com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec",
            "src_parent": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec) {\n    this.warningGuards = spec;\n    return this;\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Parameter",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<java.lang.String>",
            "dst_parent": "java.util.List<java.lang.String> jscompWarning",
            "dst_parent_type": "Parameter",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec",
            "src_parent": "com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec",
            "src_parent_type": "Parameter",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (config.warningGuards != null) {\n    for (com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n    }\n}",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    if (config.warningGuards != null) {\n        for (com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n            diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n        }\n    }\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Unknown language `\" + config.languageIn) + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected static class WarningGuardSpec {\n    private static class Entry {\n        private final com.google.javascript.jscomp.CheckLevel level;\n\n        private final java.lang.String groupName;\n\n        private Entry(com.google.javascript.jscomp.CheckLevel level, java.lang.String groupName) {\n            this.level = level;\n            this.groupName = groupName;\n        }\n    }\n\n    private final java.util.List<com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry> entries = com.google.common.collect.Lists.newArrayList();\n\n    protected void add(com.google.javascript.jscomp.CheckLevel level, java.lang.String groupName) {\n        entries.add(new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry(level, groupName));\n    }\n\n    protected void clear() {\n        entries.clear();\n    }\n}",
            "src_parent": "abstract class AbstractCommandLineRunner<A extends java.lang.Compiler, B extends com.google.javascript.jscomp.CompilerOptions> {\n    private final com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig config;\n\n    private java.lang.Appendable out;\n\n    private final java.io.PrintStream err;\n\n    private A compiler;\n\n    private java.nio.charset.Charset inputCharset;\n\n    private java.lang.String outputCharset;\n\n    private boolean testMode = false;\n\n    private com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSSourceFile>> externsSupplierForTesting = null;\n\n    private com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSSourceFile>> inputsSupplierForTesting = null;\n\n    private com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSModule>> modulesSupplierForTesting = null;\n\n    private com.google.common.base.Function<java.lang.Integer, java.lang.Boolean> exitCodeReceiverForTesting = null;\n\n    private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;\n\n    private static final java.lang.String OUTPUT_WRAPPER_MARKER = \"%output%\";\n\n    private final com.google.javascript.jscomp.AbstractCommandLineRunner<A, B>.RunTimeStats runTimeStats = new RunTimeStats();\n\n    AbstractCommandLineRunner() {\n        this(java.lang.System.out, java.lang.System.err);\n    }\n\n    AbstractCommandLineRunner(java.io.PrintStream out, java.io.PrintStream err) {\n        this.config = new com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig();\n        this.out = out;\n        this.err = err;\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    void enableTestMode(com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSSourceFile>> externsSupplier, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSSourceFile>> inputsSupplier, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSModule>> modulesSupplier, com.google.common.base.Function<java.lang.Integer, java.lang.Boolean> exitCodeReceiver) {\n        com.google.common.base.Preconditions.checkArgument((inputsSupplier == null) ^ (modulesSupplier == null));\n        testMode = true;\n        this.externsSupplierForTesting = externsSupplier;\n        this.inputsSupplierForTesting = inputsSupplier;\n        this.modulesSupplierForTesting = modulesSupplier;\n        this.exitCodeReceiverForTesting = exitCodeReceiver;\n    }\n\n    protected boolean isInTestMode() {\n        return testMode;\n    }\n\n    protected com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig getCommandLineConfig() {\n        return config;\n    }\n\n    protected abstract A createCompiler();\n\n    protected abstract B createOptions();\n\n    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {\n        if (compiler == null) {\n            return new com.google.javascript.jscomp.DiagnosticGroups();\n        }\n        return compiler.getDiagnosticGroups();\n    }\n\n    @java.lang.Deprecated\n    protected void initOptionsFromFlags(com.google.javascript.jscomp.CompilerOptions options) {\n    }\n\n    protected final void setRunOptions(com.google.javascript.jscomp.CompilerOptions options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n        if (config.warningGuards != null) {\n            for (com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n                diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n            }\n        }\n        com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.define, options, false);\n        options.setTweakProcessing(config.tweakProcessing);\n        com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.tweak, options, true);\n        options.manageClosureDependencies = config.manageClosureDependencies;\n        if (config.closureEntryPoints.size() > 0) {\n            options.setManageClosureDependencies(config.closureEntryPoints);\n        }\n        options.devMode = config.jscompDevMode;\n        options.setCodingConvention(config.codingConvention);\n        options.setSummaryDetailLevel(config.summaryDetailLevel);\n        outputCharset = options.outputCharset = getOutputCharset();\n        inputCharset = getInputCharset();\n        if (config.jsOutputFile.length() > 0) {\n            options.jsOutputFile = config.jsOutputFile;\n        }\n        if (config.createSourceMap.length() > 0) {\n            options.sourceMapOutputPath = config.createSourceMap;\n        }\n        options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n        options.sourceMapFormat = config.sourceMapFormat;\n        if (!config.variableMapInputFile.equals(\"\")) {\n            options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();\n        }\n        if (!config.propertyMapInputFile.equals(\"\")) {\n            options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();\n        }\n        if (config.languageIn.length() > 0) {\n            if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n            } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n            } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n                options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n            } else {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Unknown language `\" + config.languageIn) + \"' specified.\");\n            }\n        }\n        options.acceptConstKeyword = config.acceptConstKeyword;\n    }\n\n    protected final A getCompiler() {\n        return compiler;\n    }\n\n    public final void run() {\n        int result = 0;\n        int runs = 1;\n        if (config.computePhaseOrdering) {\n            runs = com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;\n            com.google.javascript.jscomp.PhaseOptimizer.randomizeLoops();\n        }\n        try {\n            for (int i = 0; (i < runs) && (result == 0); i++) {\n                runTimeStats.recordStartRun();\n                result = doRun();\n                runTimeStats.recordEndRun();\n            }\n        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {\n            java.lang.System.err.println(e.getMessage());\n            result = -1;\n        } catch (java.lang.Throwable t) {\n            t.printStackTrace();\n            result = -2;\n        }\n        if (config.computePhaseOrdering) {\n            runTimeStats.outputBestPhaseOrdering();\n        }\n        if (testMode) {\n            exitCodeReceiverForTesting.apply(result);\n        } else {\n            java.lang.System.exit(result);\n        }\n    }\n\n    protected java.io.PrintStream getErrorPrintStream() {\n        return err;\n    }\n\n    public static class FlagUsageException extends java.lang.Exception {\n        private static final long serialVersionUID = 1L;\n\n        public FlagUsageException(java.lang.String message) {\n            super(message);\n        }\n    }\n\n    protected java.util.List<com.google.javascript.jscomp.JSSourceFile> createInputs(java.util.List<java.lang.String> files, boolean allowStdIn) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        java.util.List<com.google.javascript.jscomp.JSSourceFile> inputs = new java.util.ArrayList<com.google.javascript.jscomp.JSSourceFile>(files.size());\n        boolean usingStdin = false;\n        for (java.lang.String filename : files) {\n            if (!\"-\".equals(filename)) {\n                com.google.javascript.jscomp.JSSourceFile newFile = com.google.javascript.jscomp.JSSourceFile.fromFile(filename, inputCharset);\n                inputs.add(newFile);\n            } else {\n                if (!allowStdIn) {\n                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Can't specify stdin.\");\n                }\n                if (usingStdin) {\n                    throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Can't specify stdin twice.\");\n                }\n                inputs.add(com.google.javascript.jscomp.JSSourceFile.fromInputStream(\"stdin\", java.lang.System.in));\n                usingStdin = true;\n            }\n        }\n        return inputs;\n    }\n\n    private java.util.List<com.google.javascript.jscomp.JSSourceFile> createSourceInputs(java.util.List<java.lang.String> files) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        if (isInTestMode()) {\n            return inputsSupplierForTesting.get();\n        }\n        if (files.isEmpty()) {\n            files = java.util.Collections.singletonList(\"-\");\n        }\n        try {\n            return createInputs(files, true);\n        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Bad --js flag. \" + e.getMessage());\n        }\n    }\n\n    private java.util.List<com.google.javascript.jscomp.JSSourceFile> createExternInputs(java.util.List<java.lang.String> files) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        if (files.isEmpty()) {\n            return com.google.common.collect.ImmutableList.of(com.google.javascript.jscomp.JSSourceFile.fromCode(\"/dev/null\", \"\"));\n        }\n        try {\n            return createInputs(files, false);\n        } catch (com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException e) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Bad --externs flag. \" + e.getMessage());\n        }\n    }\n\n    java.util.List<com.google.javascript.jscomp.JSModule> createJsModules(java.util.List<java.lang.String> specs, java.util.List<java.lang.String> jsFiles) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        if (isInTestMode()) {\n            return modulesSupplierForTesting.get();\n        }\n        com.google.common.base.Preconditions.checkState(specs != null);\n        com.google.common.base.Preconditions.checkState(!specs.isEmpty());\n        com.google.common.base.Preconditions.checkState(jsFiles != null);\n        final int totalNumJsFiles = jsFiles.size();\n        int nextJsFileIndex = 0;\n        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();\n        for (java.lang.String spec : specs) {\n            java.lang.String[] parts = spec.split(\":\");\n            if ((parts.length < 2) || (parts.length > 4)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Expected 2-4 colon-delimited parts in \" + \"module spec: \") + spec);\n            }\n            java.lang.String name = parts[0];\n            checkModuleName(name);\n            if (modulesByName.containsKey(name)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"Duplicate module name: \" + name);\n            }\n            com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(name);\n            int numJsFiles = -1;\n            try {\n                numJsFiles = java.lang.Integer.parseInt(parts[1]);\n            } catch (java.lang.NumberFormatException ignored) {\n                numJsFiles = -1;\n            }\n            if (numJsFiles < 0) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(((\"Invalid js file count '\" + parts[1]) + \"' for module: \") + name);\n            }\n            if ((nextJsFileIndex + numJsFiles) > totalNumJsFiles) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(((\"Not enough js files specified. Expected \" + ((nextJsFileIndex + numJsFiles) - totalNumJsFiles)) + \" more in module:\") + name);\n            }\n            java.util.List<java.lang.String> moduleJsFiles = jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);\n            for (com.google.javascript.jscomp.JSSourceFile input : createInputs(moduleJsFiles, false)) {\n                module.add(input);\n            }\n            nextJsFileIndex += numJsFiles;\n            if (parts.length > 2) {\n                java.lang.String depList = parts[2];\n                if (depList.length() > 0) {\n                    java.lang.String[] deps = depList.split(\",\");\n                    for (java.lang.String dep : deps) {\n                        com.google.javascript.jscomp.JSModule other = modulesByName.get(dep);\n                        if (other == null) {\n                            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((((\"Module '\" + name) + \"' depends on unknown module '\") + dep) + \"'. Be sure to list modules in dependency order.\");\n                        }\n                        module.addDependency(other);\n                    }\n                }\n            }\n            modulesByName.put(name, module);\n        }\n        if (nextJsFileIndex < totalNumJsFiles) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(((\"Too many js files specified. Expected \" + nextJsFileIndex) + \" but found \") + totalNumJsFiles);\n        }\n        return com.google.common.collect.Lists.newArrayList(modulesByName.values());\n    }\n\n    protected void checkModuleName(java.lang.String name) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n        if (!com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Invalid module name: '\" + name) + \"'\");\n        }\n    }\n\n    static java.util.Map<java.lang.String, java.lang.String> parseModuleWrappers(java.util.List<java.lang.String> specs, java.util.List<com.google.javascript.jscomp.JSModule> modules) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n        com.google.common.base.Preconditions.checkState(specs != null);\n        java.util.Map<java.lang.String, java.lang.String> wrappers = com.google.common.collect.Maps.newHashMapWithExpectedSize(modules.size());\n        for (com.google.javascript.jscomp.JSModule m : modules) {\n            wrappers.put(m.getName(), \"\");\n        }\n        for (java.lang.String spec : specs) {\n            int pos = spec.indexOf(':');\n            if (pos == (-1)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Expected module wrapper to have \" + \"<name>:<wrapper> format: \") + spec);\n            }\n            java.lang.String name = spec.substring(0, pos);\n            if (!wrappers.containsKey(name)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Unknown module: '\" + name) + \"'\");\n            }\n            java.lang.String wrapper = spec.substring(pos + 1);\n            if (!wrapper.contains(\"%s\")) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"No %s placeholder in module wrapper: '\" + wrapper) + \"'\");\n            }\n            wrappers.put(name, wrapper);\n        }\n        return wrappers;\n    }\n\n    static void writeOutput(java.lang.Appendable out, java.lang.Compiler compiler, java.lang.String code, java.lang.String wrapper, java.lang.String codePlaceholder) throws java.io.IOException {\n        int pos = wrapper.indexOf(codePlaceholder);\n        if (pos != (-1)) {\n            java.lang.String prefix = \"\";\n            if (pos > 0) {\n                prefix = wrapper.substring(0, pos);\n                out.append(prefix);\n            }\n            out.append(code);\n            int suffixStart = pos + codePlaceholder.length();\n            if (suffixStart != wrapper.length()) {\n                out.append(wrapper.substring(suffixStart));\n            }\n            out.append('\\n');\n            if ((compiler != null) && (compiler.getSourceMap() != null)) {\n                compiler.getSourceMap().setWrapperPrefix(prefix);\n            }\n        } else {\n            out.append(code);\n            out.append('\\n');\n        }\n    }\n\n    private static void maybeCreateDirsForPath(java.lang.String pathPrefix) {\n        if (pathPrefix.length() > 0) {\n            java.lang.String dirName = (pathPrefix.charAt(pathPrefix.length() - 1) == java.io.File.separatorChar) ? pathPrefix.substring(0, pathPrefix.length() - 1) : new java.io.File(pathPrefix).getParent();\n            if (dirName != null) {\n                new java.io.File(dirName).mkdirs();\n            }\n        }\n    }\n\n    protected int doRun() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        java.lang.Compiler.setLoggingLevel(java.util.logging.Level.parse(config.loggingLevel));\n        java.util.List<com.google.javascript.jscomp.JSSourceFile> externs = createExterns();\n        compiler = createCompiler();\n        B options = createOptions();\n        java.util.List<com.google.javascript.jscomp.JSModule> modules = null;\n        com.google.javascript.jscomp.Result result;\n        setRunOptions(options);\n        boolean writeOutputToFile = !options.jsOutputFile.isEmpty();\n        if (writeOutputToFile) {\n            out = fileNameToOutputWriter(options.jsOutputFile);\n        } else if (out instanceof java.io.OutputStream) {\n            out = streamToOutputWriter(((java.io.OutputStream) (out)));\n        }\n        java.util.List<java.lang.String> jsFiles = config.js;\n        java.util.List<java.lang.String> moduleSpecs = config.module;\n        if (!moduleSpecs.isEmpty()) {\n            modules = createJsModules(moduleSpecs, jsFiles);\n            result = compiler.compileModules(externs, modules, options);\n        } else {\n            java.util.List<com.google.javascript.jscomp.JSSourceFile> inputs = createSourceInputs(jsFiles);\n            result = compiler.compile(externs, inputs, options);\n        }\n        int errCode = processResults(result, modules, options);\n        if (out instanceof java.io.Closeable) {\n            ((java.io.Closeable) (out)).close();\n        }\n        return errCode;\n    }\n\n    int processResults(com.google.javascript.jscomp.Result result, java.util.List<com.google.javascript.jscomp.JSModule> modules, B options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        if (config.computePhaseOrdering) {\n            return 0;\n        }\n        if (config.printPassGraph) {\n            if (compiler.getRoot() == null) {\n                return 1;\n            } else {\n                out.append(com.google.javascript.jscomp.DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n                out.append('\\n');\n                return 0;\n            }\n        }\n        if (config.printAst) {\n            if (compiler.getRoot() == null) {\n                return 1;\n            } else {\n                com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg = compiler.computeCFG();\n                com.google.javascript.jscomp.DotFormatter.appendDot(compiler.getRoot().getLastChild(), cfg, out);\n                out.append('\\n');\n                return 0;\n            }\n        }\n        if (config.printTree) {\n            if (compiler.getRoot() == null) {\n                out.append(\"Code contains errors; no tree was generated.\\n\");\n                return 1;\n            } else {\n                compiler.getRoot().appendStringTree(out);\n                out.append(\"\\n\");\n                return 0;\n            }\n        }\n        if (result.success) {\n            if (modules == null) {\n                com.google.javascript.jscomp.AbstractCommandLineRunner.writeOutput(out, compiler, compiler.toSource(), config.outputWrapper, com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_WRAPPER_MARKER);\n                outputSourceMap(options);\n            } else {\n                java.lang.String moduleFilePrefix = config.moduleOutputPathPrefix;\n                com.google.javascript.jscomp.AbstractCommandLineRunner.maybeCreateDirsForPath(moduleFilePrefix);\n                java.util.Map<java.lang.String, java.lang.String> moduleWrappers = com.google.javascript.jscomp.AbstractCommandLineRunner.parseModuleWrappers(config.moduleWrapper, modules);\n                java.io.Writer mapOut = null;\n                if (!shouldGenerateMapPerModule(options)) {\n                    mapOut = fileNameToOutputWriter(expandSourceMapPath(options, null));\n                }\n                for (com.google.javascript.jscomp.JSModule m : modules) {\n                    if (shouldGenerateMapPerModule(options)) {\n                        mapOut = fileNameToOutputWriter(expandSourceMapPath(options, m));\n                    }\n                    java.io.Writer writer = fileNameToOutputWriter((moduleFilePrefix + m.getName()) + \".js\");\n                    if (options.sourceMapOutputPath != null) {\n                        compiler.getSourceMap().reset();\n                    }\n                    com.google.javascript.jscomp.AbstractCommandLineRunner.writeOutput(writer, compiler, compiler.toSource(m), moduleWrappers.get(m.getName()), \"%s\");\n                    if (options.sourceMapOutputPath != null) {\n                        compiler.getSourceMap().appendTo(mapOut, m.getName());\n                    }\n                    writer.close();\n                    if (shouldGenerateMapPerModule(options) && (mapOut != null)) {\n                        mapOut.close();\n                        mapOut = null;\n                    }\n                }\n                if (mapOut != null) {\n                    mapOut.close();\n                }\n            }\n            if (options.externExportsPath != null) {\n                java.io.Writer eeOut = openExternExportsStream(options, options.jsOutputFile);\n                eeOut.append(result.externExport);\n                eeOut.close();\n            }\n            outputNameMaps(options);\n            outputManifest();\n        }\n        return java.lang.Math.min(result.errors.length, 0x7f);\n    }\n\n    private java.nio.charset.Charset getInputCharset() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n        if (!config.charset.isEmpty()) {\n            if (!java.nio.charset.Charset.isSupported(config.charset)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + \" is not a valid charset name.\");\n            }\n            return java.nio.charset.Charset.forName(config.charset);\n        }\n        return com.google.common.base.Charsets.UTF_8;\n    }\n\n    private java.lang.String getOutputCharset() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException {\n        if (!config.charset.isEmpty()) {\n            if (!java.nio.charset.Charset.isSupported(config.charset)) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(config.charset + \" is not a valid charset name.\");\n            }\n            return config.charset;\n        }\n        return \"US-ASCII\";\n    }\n\n    protected java.util.List<com.google.javascript.jscomp.JSSourceFile> createExterns() throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        return isInTestMode() ? externsSupplierForTesting.get() : createExternInputs(config.externs);\n    }\n\n    private boolean shouldGenerateMapPerModule(B options) {\n        return (options.sourceMapOutputPath != null) && options.sourceMapOutputPath.contains(\"%outname%\");\n    }\n\n    private java.io.Writer openExternExportsStream(B options, java.lang.String path) throws java.io.IOException {\n        if (options.externExportsPath == null) {\n            return null;\n        }\n        java.lang.String exPath = options.externExportsPath;\n        if (!exPath.contains(java.io.File.separator)) {\n            java.io.File outputFile = new java.io.File(path);\n            exPath = (outputFile.getParent() + java.io.File.separatorChar) + exPath;\n        }\n        return fileNameToOutputWriter(exPath);\n    }\n\n    private java.lang.String expandCommandLinePath(java.lang.String path, com.google.javascript.jscomp.JSModule forModule) {\n        java.lang.String sub;\n        if (forModule != null) {\n            sub = (config.moduleOutputPathPrefix + forModule.getName()) + \".js\";\n        } else if (!config.module.isEmpty()) {\n            sub = config.moduleOutputPathPrefix;\n        } else {\n            sub = config.jsOutputFile;\n        }\n        return path.replace(\"%outname%\", sub);\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    java.lang.String expandSourceMapPath(B options, com.google.javascript.jscomp.JSModule forModule) {\n        if (com.google.javascript.jscomp.Strings.isEmpty(options.sourceMapOutputPath)) {\n            return null;\n        }\n        return expandCommandLinePath(options.sourceMapOutputPath, forModule);\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    java.lang.String expandManifest(com.google.javascript.jscomp.JSModule forModule) {\n        if (com.google.javascript.jscomp.Strings.isEmpty(config.outputManifest)) {\n            return null;\n        }\n        return expandCommandLinePath(config.outputManifest, forModule);\n    }\n\n    private java.io.Writer fileNameToOutputWriter(java.lang.String fileName) throws java.io.IOException {\n        if (fileName == null) {\n            return null;\n        }\n        if (testMode) {\n            return new java.io.StringWriter();\n        }\n        return streamToOutputWriter(filenameToOutputStream(fileName));\n    }\n\n    protected java.io.OutputStream filenameToOutputStream(java.lang.String fileName) throws java.io.IOException {\n        if (fileName == null) {\n            return null;\n        }\n        return new java.io.FileOutputStream(fileName);\n    }\n\n    private java.io.Writer streamToOutputWriter(java.io.OutputStream stream) throws java.io.IOException {\n        if (outputCharset == null) {\n            return new java.io.BufferedWriter(new java.io.OutputStreamWriter(stream));\n        } else {\n            return new java.io.BufferedWriter(new java.io.OutputStreamWriter(stream, outputCharset));\n        }\n    }\n\n    private void outputSourceMap(B options) throws java.io.IOException {\n        if (com.google.javascript.jscomp.Strings.isEmpty(options.sourceMapOutputPath)) {\n            return;\n        }\n        java.lang.String outName = expandSourceMapPath(options, null);\n        java.io.Writer out = fileNameToOutputWriter(outName);\n        compiler.getSourceMap().appendTo(out, outName);\n        out.close();\n    }\n\n    private java.lang.String getMapPath(java.lang.String outputFile) {\n        java.lang.String basePath = \"\";\n        if (outputFile.equals(\"\")) {\n            if (!config.moduleOutputPathPrefix.equals(\"\")) {\n                basePath = config.moduleOutputPathPrefix;\n            } else {\n                basePath = \"jscompiler\";\n            }\n        } else {\n            java.io.File file = new java.io.File(outputFile);\n            java.lang.String outputFileName = file.getName();\n            if (outputFileName.endsWith(\".js\")) {\n                outputFileName = outputFileName.substring(0, outputFileName.length() - 3);\n            }\n            basePath = (file.getParent() + java.io.File.separatorChar) + outputFileName;\n        }\n        return basePath;\n    }\n\n    private void outputNameMaps(B options) throws com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException, java.io.IOException {\n        java.lang.String propertyMapOutputPath = null;\n        java.lang.String variableMapOutputPath = null;\n        java.lang.String functionInformationMapOutputPath = null;\n        if (config.createNameMapFiles) {\n            java.lang.String basePath = getMapPath(options.jsOutputFile);\n            propertyMapOutputPath = basePath + \"_props_map.out\";\n            variableMapOutputPath = basePath + \"_vars_map.out\";\n            functionInformationMapOutputPath = basePath + \"_functions_map.out\";\n        }\n        if (!config.variableMapOutputFile.equals(\"\")) {\n            if (variableMapOutputPath != null) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n            }\n            variableMapOutputPath = config.variableMapOutputFile;\n        }\n        if (!config.propertyMapOutputFile.equals(\"\")) {\n            if (propertyMapOutputPath != null) {\n                throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException(\"The flags property_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\");\n            }\n            propertyMapOutputPath = config.propertyMapOutputFile;\n        }\n        if (variableMapOutputPath != null) {\n            if (compiler.getVariableMap() != null) {\n                compiler.getVariableMap().save(variableMapOutputPath);\n            }\n        }\n        if (propertyMapOutputPath != null) {\n            if (compiler.getPropertyMap() != null) {\n                compiler.getPropertyMap().save(propertyMapOutputPath);\n            }\n        }\n        if (functionInformationMapOutputPath != null) {\n            if (compiler.getFunctionalInformationMap() != null) {\n                java.io.OutputStream file = filenameToOutputStream(functionInformationMapOutputPath);\n                com.google.protobuf.CodedOutputStream outputStream = com.google.protobuf.CodedOutputStream.newInstance(file);\n                compiler.getFunctionalInformationMap().writeTo(outputStream);\n                outputStream.flush();\n                file.flush();\n                file.close();\n            }\n        }\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    static void createDefineOrTweakReplacements(java.util.List<java.lang.String> definitions, com.google.javascript.jscomp.CompilerOptions options, boolean tweaks) {\n        for (java.lang.String override : definitions) {\n            java.lang.String[] assignment = override.split(\"=\", 2);\n            java.lang.String defName = assignment[0];\n            if (defName.length() > 0) {\n                java.lang.String defValue = (assignment.length == 1) ? \"true\" : assignment[1];\n                boolean isTrue = defValue.equals(\"true\");\n                boolean isFalse = defValue.equals(\"false\");\n                if (isTrue || isFalse) {\n                    if (tweaks) {\n                        options.setTweakToBooleanLiteral(defName, isTrue);\n                    } else {\n                        options.setDefineToBooleanLiteral(defName, isTrue);\n                    }\n                    continue;\n                } else if ((defValue.length() > 1) && (((defValue.charAt(0) == '\\'') && (defValue.charAt(defValue.length() - 1) == '\\'')) || ((defValue.charAt(0) == '\\\"') && (defValue.charAt(defValue.length() - 1) == '\\\"')))) {\n                    java.lang.String maybeStringVal = defValue.substring(1, defValue.length() - 1);\n                    if (maybeStringVal.indexOf(defValue.charAt(0)) == (-1)) {\n                        if (tweaks) {\n                            options.setTweakToStringLiteral(defName, maybeStringVal);\n                        } else {\n                            options.setDefineToStringLiteral(defName, maybeStringVal);\n                        }\n                        continue;\n                    }\n                } else {\n                    try {\n                        double value = java.lang.Double.parseDouble(defValue);\n                        if (tweaks) {\n                            options.setTweakToDoubleLiteral(defName, value);\n                        } else {\n                            options.setDefineToDoubleLiteral(defName, value);\n                        }\n                        continue;\n                    } catch (java.lang.NumberFormatException e) {\n                    }\n                }\n            }\n            if (tweaks) {\n                throw new java.lang.RuntimeException(\"--tweak flag syntax invalid: \" + override);\n            }\n            throw new java.lang.RuntimeException(\"--define flag syntax invalid: \" + override);\n        }\n    }\n\n    private boolean shouldGenerateManifestPerModule() {\n        return ((!config.module.isEmpty()) && (config.outputManifest != null)) && config.outputManifest.contains(\"%outname%\");\n    }\n\n    private void outputManifest() throws java.io.IOException {\n        java.lang.String outputManifest = config.outputManifest;\n        if (com.google.javascript.jscomp.Strings.isEmpty(outputManifest)) {\n            return;\n        }\n        com.google.javascript.jscomp.JSModuleGraph graph = compiler.getModuleGraph();\n        if (shouldGenerateManifestPerModule()) {\n            java.lang.Iterable<com.google.javascript.jscomp.JSModule> modules = graph.getAllModules();\n            for (com.google.javascript.jscomp.JSModule module : modules) {\n                java.io.Writer out = fileNameToOutputWriter(expandManifest(module));\n                printManifestTo(module.getInputs(), out);\n                out.close();\n            }\n        } else {\n            java.io.Writer out = fileNameToOutputWriter(expandManifest(null));\n            if (graph == null) {\n                printManifestTo(compiler.getInputsInOrder(), out);\n            } else {\n                printModuleGraphManifestTo(graph, out);\n            }\n            out.close();\n        }\n    }\n\n    @com.google.common.annotations.VisibleForTesting\n    void printModuleGraphManifestTo(com.google.javascript.jscomp.JSModuleGraph graph, java.lang.Appendable out) throws java.io.IOException {\n        com.google.common.base.Joiner commas = com.google.common.base.Joiner.on(\",\");\n        boolean requiresNewline = false;\n        for (com.google.javascript.jscomp.JSModule module : graph.getAllModulesInDependencyOrder()) {\n            if (requiresNewline) {\n                out.append(\"\\n\");\n            }\n            java.lang.String dependencies = commas.join(module.getSortedDependencyNames());\n            out.append(java.lang.String.format(\"{%s%s}\\n\", module.getName(), dependencies.isEmpty() ? \"\" : \":\" + dependencies));\n            printManifestTo(module.getInputs(), out);\n            requiresNewline = true;\n        }\n    }\n\n    private void printManifestTo(java.lang.Iterable<com.google.javascript.jscomp.CompilerInput> inputs, java.lang.Appendable out) throws java.io.IOException {\n        java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayList();\n        for (com.google.javascript.jscomp.CompilerInput input : inputs) {\n            names.add(input.getName());\n        }\n        java.lang.String result = com.google.common.base.Joiner.on(\"\\n\").join(names);\n        out.append(result);\n        out.append(\"\\n\");\n    }\n\n    private class RunTimeStats {\n        private long bestRunTime = java.lang.Long.MAX_VALUE;\n\n        private long worstRunTime = java.lang.Long.MIN_VALUE;\n\n        private long lastStartTime = 0;\n\n        private java.util.List<java.util.List<java.lang.String>> loopedPassesInBestRun = null;\n\n        private void recordStartRun() {\n            lastStartTime = java.lang.System.currentTimeMillis();\n            com.google.javascript.jscomp.PhaseOptimizer.clearLoopsRun();\n        }\n\n        private void recordEndRun() {\n            long endTime = java.lang.System.currentTimeMillis();\n            long length = endTime - lastStartTime;\n            worstRunTime = java.lang.Math.max(length, worstRunTime);\n            if (length < bestRunTime) {\n                loopedPassesInBestRun = com.google.javascript.jscomp.PhaseOptimizer.getLoopsRun();\n                bestRunTime = length;\n            }\n        }\n\n        private void outputBestPhaseOrdering() {\n            try {\n                out.append((\"Best time: \" + bestRunTime) + \"\\n\");\n                out.append((\"Worst time: \" + worstRunTime) + \"\\n\");\n                int i = 1;\n                for (java.util.List<java.lang.String> loop : loopedPassesInBestRun) {\n                    out.append((((\"\\nLoop \" + i) + \":\\n\") + com.google.common.base.Joiner.on(\"\\n\").join(loop)) + \"\\n\");\n                    i++;\n                }\n            } catch (java.io.IOException e) {\n                throw new java.lang.RuntimeException(\"unexpected exception\", e);\n            }\n        }\n    }\n\n    static class CommandLineConfig {\n        private boolean printTree = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n            this.printTree = printTree;\n            return this;\n        }\n\n        private boolean computePhaseOrdering = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n            this.computePhaseOrdering = computePhaseOrdering;\n            return this;\n        }\n\n        private boolean printAst = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n            this.printAst = printAst;\n            return this;\n        }\n\n        private boolean printPassGraph = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n            this.printPassGraph = printPassGraph;\n            return this;\n        }\n\n        private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n            this.jscompDevMode = jscompDevMode;\n            return this;\n        }\n\n        private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n            this.loggingLevel = loggingLevel;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n            this.externs.clear();\n            this.externs.addAll(externs);\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n            this.js.clear();\n            this.js.addAll(js);\n            return this;\n        }\n\n        private java.lang.String jsOutputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n            this.jsOutputFile = jsOutputFile;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n            this.module.clear();\n            this.module.addAll(module);\n            return this;\n        }\n\n        private java.lang.String variableMapInputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n            this.variableMapInputFile = variableMapInputFile;\n            return this;\n        }\n\n        private java.lang.String propertyMapInputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n            this.propertyMapInputFile = propertyMapInputFile;\n            return this;\n        }\n\n        private java.lang.String variableMapOutputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n            this.variableMapOutputFile = variableMapOutputFile;\n            return this;\n        }\n\n        private boolean createNameMapFiles = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n            this.createNameMapFiles = createNameMapFiles;\n            return this;\n        }\n\n        private java.lang.String propertyMapOutputFile = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n            this.propertyMapOutputFile = propertyMapOutputFile;\n            return this;\n        }\n\n        private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n            this.codingConvention = codingConvention;\n            return this;\n        }\n\n        private int summaryDetailLevel = 1;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n            this.summaryDetailLevel = summaryDetailLevel;\n            return this;\n        }\n\n        private java.lang.String outputWrapper = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n            this.outputWrapper = outputWrapper;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n            this.moduleWrapper.clear();\n            this.moduleWrapper.addAll(moduleWrapper);\n            return this;\n        }\n\n        private java.lang.String moduleOutputPathPrefix = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n            this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n            return this;\n        }\n\n        private java.lang.String createSourceMap = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n            this.createSourceMap = createSourceMap;\n            return this;\n        }\n\n        private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n            this.sourceMapDetailLevel = level;\n            return this;\n        }\n\n        private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n            this.sourceMapFormat = format;\n            return this;\n        }\n\n        private com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec warningGuards = null;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec spec) {\n            this.warningGuards = spec;\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n            this.define.clear();\n            this.define.addAll(define);\n            return this;\n        }\n\n        private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n            this.tweak.clear();\n            this.tweak.addAll(tweak);\n            return this;\n        }\n\n        private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n            this.tweakProcessing = tweakProcessing;\n            return this;\n        }\n\n        private java.lang.String charset = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n            this.charset = charset;\n            return this;\n        }\n\n        private boolean manageClosureDependencies = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n            this.manageClosureDependencies = newVal;\n            return this;\n        }\n\n        private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n            com.google.common.base.Preconditions.checkNotNull(entryPoints);\n            this.closureEntryPoints = entryPoints;\n            return this;\n        }\n\n        private java.lang.String outputManifest = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n            this.outputManifest = outputManifest;\n            return this;\n        }\n\n        private boolean acceptConstKeyword = false;\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n            this.acceptConstKeyword = acceptConstKeyword;\n            return this;\n        }\n\n        private java.lang.String languageIn = \"\";\n\n        com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n            this.languageIn = languageIn;\n            return this;\n        }\n    }\n\n    protected static class WarningGuardSpec {\n        private static class Entry {\n            private final com.google.javascript.jscomp.CheckLevel level;\n\n            private final java.lang.String groupName;\n\n            private Entry(com.google.javascript.jscomp.CheckLevel level, java.lang.String groupName) {\n                this.level = level;\n                this.groupName = groupName;\n            }\n        }\n\n        private final java.util.List<com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry> entries = com.google.common.collect.Lists.newArrayList();\n\n        protected void add(com.google.javascript.jscomp.CheckLevel level, java.lang.String groupName) {\n            entries.add(new com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry(level, groupName));\n        }\n\n        protected void clear() {\n            entries.clear();\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Class"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR)",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Unknown language `\" + config.languageIn) + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING)",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Unknown language `\" + config.languageIn) + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF)",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies = config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() > 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset = options.outputCharset = getOutputCharset();\n    inputCharset = getInputCharset();\n    if (config.jsOutputFile.length() > 0) {\n        options.jsOutputFile = config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() > 0) {\n        options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized = com.google.javascript.jscomp.VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() > 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException((\"Unknown language `\" + config.languageIn) + \"' specified.\");\n        }\n    }\n    options.acceptConstKeyword = config.acceptConstKeyword;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();",
            "src_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n        this.jscompError.clear();\n        this.jscompError.addAll(jscompError);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n        this.jscompWarning.clear();\n        this.jscompWarning.addAll(jscompWarning);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n        this.jscompOff.clear();\n        this.jscompOff.addAll(jscompOff);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}",
            "src_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n        this.jscompError.clear();\n        this.jscompError.addAll(jscompError);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n        this.jscompWarning.clear();\n        this.jscompWarning.addAll(jscompWarning);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n        this.jscompOff.clear();\n        this.jscompOff.addAll(jscompOff);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();",
            "src_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n        this.jscompError.clear();\n        this.jscompError.addAll(jscompError);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n        this.jscompWarning.clear();\n        this.jscompWarning.addAll(jscompWarning);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n        this.jscompOff.clear();\n        this.jscompOff.addAll(jscompOff);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n    this.jscompOff.clear();\n    this.jscompOff.addAll(jscompOff);\n    return this;\n}",
            "src_parent": "static class CommandLineConfig {\n    private boolean printTree = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintTree(boolean printTree) {\n        this.printTree = printTree;\n        return this;\n    }\n\n    private boolean computePhaseOrdering = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {\n        this.computePhaseOrdering = computePhaseOrdering;\n        return this;\n    }\n\n    private boolean printAst = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintAst(boolean printAst) {\n        this.printAst = printAst;\n        return this;\n    }\n\n    private boolean printPassGraph = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n        this.printPassGraph = printPassGraph;\n        return this;\n    }\n\n    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode jscompDevMode) {\n        this.jscompDevMode = jscompDevMode;\n        return this;\n    }\n\n    private java.lang.String loggingLevel = java.util.logging.Level.WARNING.getName();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLoggingLevel(java.lang.String loggingLevel) {\n        this.loggingLevel = loggingLevel;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> externs = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setExterns(java.util.List<java.lang.String> externs) {\n        this.externs.clear();\n        this.externs.addAll(externs);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> js = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJs(java.util.List<java.lang.String> js) {\n        this.js.clear();\n        this.js.addAll(js);\n        return this;\n    }\n\n    private java.lang.String jsOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJsOutputFile(java.lang.String jsOutputFile) {\n        this.jsOutputFile = jsOutputFile;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> module = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModule(java.util.List<java.lang.String> module) {\n        this.module.clear();\n        this.module.addAll(module);\n        return this;\n    }\n\n    private java.lang.String variableMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapInputFile(java.lang.String variableMapInputFile) {\n        this.variableMapInputFile = variableMapInputFile;\n        return this;\n    }\n\n    private java.lang.String propertyMapInputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapInputFile(java.lang.String propertyMapInputFile) {\n        this.propertyMapInputFile = propertyMapInputFile;\n        return this;\n    }\n\n    private java.lang.String variableMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setVariableMapOutputFile(java.lang.String variableMapOutputFile) {\n        this.variableMapOutputFile = variableMapOutputFile;\n        return this;\n    }\n\n    private boolean createNameMapFiles = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n        this.createNameMapFiles = createNameMapFiles;\n        return this;\n    }\n\n    private java.lang.String propertyMapOutputFile = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setPropertyMapOutputFile(java.lang.String propertyMapOutputFile) {\n        this.propertyMapOutputFile = propertyMapOutputFile;\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CodingConvention codingConvention = new com.google.javascript.jscomp.DefaultCodingConvention();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCodingConvention(com.google.javascript.jscomp.CodingConvention codingConvention) {\n        this.codingConvention = codingConvention;\n        return this;\n    }\n\n    private int summaryDetailLevel = 1;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n        this.summaryDetailLevel = summaryDetailLevel;\n        return this;\n    }\n\n    private java.lang.String outputWrapper = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputWrapper(java.lang.String outputWrapper) {\n        this.outputWrapper = outputWrapper;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> moduleWrapper = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleWrapper(java.util.List<java.lang.String> moduleWrapper) {\n        this.moduleWrapper.clear();\n        this.moduleWrapper.addAll(moduleWrapper);\n        return this;\n    }\n\n    private java.lang.String moduleOutputPathPrefix = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setModuleOutputPathPrefix(java.lang.String moduleOutputPathPrefix) {\n        this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n        return this;\n    }\n\n    private java.lang.String createSourceMap = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCreateSourceMap(java.lang.String createSourceMap) {\n        this.createSourceMap = createSourceMap;\n        return this;\n    }\n\n    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap.DetailLevel level) {\n        this.sourceMapDetailLevel = level;\n        return this;\n    }\n\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format format) {\n        this.sourceMapFormat = format;\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompError(java.util.List<java.lang.String> jscompError) {\n        this.jscompError.clear();\n        this.jscompError.addAll(jscompError);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompWarning(java.util.List<java.lang.String> jscompWarning) {\n        this.jscompWarning.clear();\n        this.jscompWarning.addAll(jscompWarning);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setJscompOff(java.util.List<java.lang.String> jscompOff) {\n        this.jscompOff.clear();\n        this.jscompOff.addAll(jscompOff);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> define = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setDefine(java.util.List<java.lang.String> define) {\n        this.define.clear();\n        this.define.addAll(define);\n        return this;\n    }\n\n    private final java.util.List<java.lang.String> tweak = com.google.common.collect.Lists.newArrayList();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweak(java.util.List<java.lang.String> tweak) {\n        this.tweak.clear();\n        this.tweak.addAll(tweak);\n        return this;\n    }\n\n    private com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing) {\n        this.tweakProcessing = tweakProcessing;\n        return this;\n    }\n\n    private java.lang.String charset = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setCharset(java.lang.String charset) {\n        this.charset = charset;\n        return this;\n    }\n\n    private boolean manageClosureDependencies = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setManageClosureDependencies(boolean newVal) {\n        this.manageClosureDependencies = newVal;\n        return this;\n    }\n\n    private java.util.List<java.lang.String> closureEntryPoints = com.google.common.collect.ImmutableList.of();\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setClosureEntryPoints(java.util.List<java.lang.String> entryPoints) {\n        com.google.common.base.Preconditions.checkNotNull(entryPoints);\n        this.closureEntryPoints = entryPoints;\n        return this;\n    }\n\n    private java.lang.String outputManifest = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setOutputManifest(java.lang.String outputManifest) {\n        this.outputManifest = outputManifest;\n        return this;\n    }\n\n    private boolean acceptConstKeyword = false;\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n        this.acceptConstKeyword = acceptConstKeyword;\n        return this;\n    }\n\n    private java.lang.String languageIn = \"\";\n\n    com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig setLanguageIn(java.lang.String languageIn) {\n        this.languageIn = languageIn;\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "config.jscompError",
            "dst_parent": "diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "config.warningGuards",
            "src_parent": "config.warningGuards != null",
            "src_parent_type": "BinaryOperator",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "ForEach",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "config.jscompWarning",
            "dst_parent": "diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "config.warningGuards",
            "src_parent": "config.warningGuards.entries",
            "src_parent_type": "FieldRead",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "diagnosticGroups",
            "dst_parent": "diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "diagnosticGroups",
            "src_parent": "diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "ForEach",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "options",
            "dst_parent": "diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF)",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "options",
            "src_parent": "diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Field",
            "dst_parent": "private final java.util.List<java.lang.String> jscompError = com.google.common.collect.Lists.newArrayList();",
            "dst_parent_type": "Field",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Field",
            "src_parent": "private final java.util.List<com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry> entries = com.google.common.collect.Lists.newArrayList();",
            "src_parent_type": "Field",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return this",
            "dst_parent": "{\n    this.jscompError.clear();\n    this.jscompError.addAll(jscompError);\n    return this;\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return this",
            "src_parent": "{\n    this.warningGuards = spec;\n    return this;\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Field",
            "dst_parent": "private final java.util.List<java.lang.String> jscompWarning = com.google.common.collect.Lists.newArrayList();",
            "dst_parent_type": "Field",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Field",
            "src_parent": "private final java.lang.String groupName;",
            "src_parent_type": "Field",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Field",
            "dst_parent": "private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();",
            "dst_parent_type": "Field",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Field",
            "src_parent": "private final com.google.javascript.jscomp.CheckLevel level;",
            "src_parent_type": "Field",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Field",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.collect.Lists.newArrayList()",
            "dst_parent": "private final java.util.List<java.lang.String> jscompOff = com.google.common.collect.Lists.newArrayList();",
            "dst_parent_type": "Field",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "com.google.common.collect.Lists.newArrayList()",
            "src_parent": "private final java.util.List<com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec.Entry> entries = com.google.common.collect.Lists.newArrayList();",
            "src_parent_type": "Field",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "this",
            "dst_parent": "this.jscompError",
            "dst_parent_type": "FieldRead",
            "dst_type": "ThisAccess",
            "operator": "MOV",
            "src": "this",
            "src_parent": "this.warningGuards",
            "src_parent_type": "FieldWrite",
            "src_type": "ThisAccess"
          }
        }
      ],
      "file_name": "AbstractCommandLineRunner"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "void setWarningLevels(com.google.javascript.jscomp.CompilerOptions options, java.util.List<java.lang.String> diagnosticGroups, com.google.javascript.jscomp.CheckLevel level) {\n    for (java.lang.String name : diagnosticGroups) {\n        com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n        com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}",
            "dst_parent": "public class DiagnosticGroups {\n    public DiagnosticGroups() {\n    }\n\n    private static final java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup> groupsByName = com.google.common.collect.Maps.newHashMap();\n\n    static com.google.javascript.jscomp.DiagnosticGroup registerGroup(java.lang.String name, com.google.javascript.jscomp.DiagnosticGroup group) {\n        com.google.javascript.jscomp.DiagnosticGroups.groupsByName.put(name, group);\n        return group;\n    }\n\n    static com.google.javascript.jscomp.DiagnosticGroup registerGroup(java.lang.String name, com.google.javascript.jscomp.DiagnosticType... types) {\n        com.google.javascript.jscomp.DiagnosticGroup group = new com.google.javascript.jscomp.DiagnosticGroup(name, types);\n        com.google.javascript.jscomp.DiagnosticGroups.groupsByName.put(name, group);\n        return group;\n    }\n\n    static com.google.javascript.jscomp.DiagnosticGroup registerGroup(java.lang.String name, com.google.javascript.jscomp.DiagnosticGroup... groups) {\n        com.google.javascript.jscomp.DiagnosticGroup group = new com.google.javascript.jscomp.DiagnosticGroup(name, groups);\n        com.google.javascript.jscomp.DiagnosticGroups.groupsByName.put(name, group);\n        return group;\n    }\n\n    protected java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup> getRegisteredGroups() {\n        return com.google.common.collect.ImmutableMap.copyOf(com.google.javascript.jscomp.DiagnosticGroups.groupsByName);\n    }\n\n    protected com.google.javascript.jscomp.DiagnosticGroup forName(java.lang.String name) {\n        return com.google.javascript.jscomp.DiagnosticGroups.groupsByName.get(name);\n    }\n\n    static final java.lang.String DIAGNOSTIC_GROUP_NAMES = \"accessControls, ambiguousFunctionDecl, checkRegExp,\" + (((((\"checkTypes, checkVars, constantProperty, deprecated, \" + \"externsValidation, fileoverviewTags, globalThis, \") + \"internetExplorerChecks, nvalidCasts, missingProperties, \") + \"nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, \") + \"undefinedVars, unknownDefines, uselessCode, \") + \"visibility\");\n\n    public static com.google.javascript.jscomp.DiagnosticGroup GLOBAL_THIS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"globalThis\", CheckGlobalThis.GLOBAL_THIS);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup DEPRECATED = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"deprecated\", CheckAccessControls.DEPRECATED_NAME, CheckAccessControls.DEPRECATED_NAME_REASON, CheckAccessControls.DEPRECATED_PROP, CheckAccessControls.DEPRECATED_PROP_REASON, CheckAccessControls.DEPRECATED_CLASS, CheckAccessControls.DEPRECATED_CLASS_REASON);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup VISIBILITY = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"visibility\", CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS, CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS, CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS, CheckAccessControls.PRIVATE_OVERRIDE, CheckAccessControls.VISIBILITY_MISMATCH);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CONSTANT_PROPERTY = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"constantProperty\", CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup NON_STANDARD_JSDOC = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"nonStandardJsDocs\", RhinoErrorReporter.BAD_JSDOC_ANNOTATION);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup ACCESS_CONTROLS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"accessControls\", com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED, com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup INVALID_CASTS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"invalidCasts\", TypeValidator.INVALID_CAST);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup FILEOVERVIEW_JSDOC = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"fileoverviewTags\", RhinoErrorReporter.EXTRA_FILEOVERVIEW);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup STRICT_MODULE_DEP_CHECK = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"strictModuleDepCheck\", VarCheck.STRICT_MODULE_DEP_ERROR, CheckGlobalNames.STRICT_MODULE_DEP_QNAME);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup EXTERNS_VALIDATION = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"externsValidation\", VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup AMBIGUOUS_FUNCTION_DECL = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\", VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup UNKNOWN_DEFINES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"unknownDefines\", ProcessDefines.UNKNOWN_DEFINE_WARNING);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup TWEAKS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"tweakValidation\", ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING, ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING, ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup MISSING_PROPERTIES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"missingProperties\", TypeCheck.INEXISTENT_PROPERTY);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup INTERNET_EXPLORER_CHECKS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"internetExplorerChecks\", RhinoErrorReporter.TRAILING_COMMA);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup UNDEFINED_VARIABLES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"undefinedVars\", VarCheck.UNDEFINED_VAR_ERROR);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_REGEXP = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"checkRegExp\", CheckRegExp.REGEXP_REFERENCE);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_TYPES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"checkTypes\", TypeValidator.ALL_DIAGNOSTICS, TypeCheck.ALL_DIAGNOSTICS);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_VARIABLES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"checkVars\", VarCheck.UNDEFINED_VAR_ERROR, SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_USELESS_CODE = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"uselessCode\", CheckSideEffects.USELESS_CODE_ERROR, CheckUnreachableCode.UNREACHABLE_CODE);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup TYPE_INVALIDATION = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"typeInvalidation\", DisambiguateProperties.Warnings.INVALIDATION);\n\n    void setWarningLevels(com.google.javascript.jscomp.CompilerOptions options, java.util.List<java.lang.String> diagnosticGroups, com.google.javascript.jscomp.CheckLevel level) {\n        for (java.lang.String name : diagnosticGroups) {\n            com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n            com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n            options.setWarningLevel(group, level);\n        }\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "void setWarningLevel(com.google.javascript.jscomp.CompilerOptions options, java.lang.String name, com.google.javascript.jscomp.CheckLevel level) {\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "src_parent": "public class DiagnosticGroups {\n    public DiagnosticGroups() {\n    }\n\n    private static final java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup> groupsByName = com.google.common.collect.Maps.newHashMap();\n\n    static com.google.javascript.jscomp.DiagnosticGroup registerGroup(java.lang.String name, com.google.javascript.jscomp.DiagnosticGroup group) {\n        com.google.javascript.jscomp.DiagnosticGroups.groupsByName.put(name, group);\n        return group;\n    }\n\n    static com.google.javascript.jscomp.DiagnosticGroup registerGroup(java.lang.String name, com.google.javascript.jscomp.DiagnosticType... types) {\n        com.google.javascript.jscomp.DiagnosticGroup group = new com.google.javascript.jscomp.DiagnosticGroup(name, types);\n        com.google.javascript.jscomp.DiagnosticGroups.groupsByName.put(name, group);\n        return group;\n    }\n\n    static com.google.javascript.jscomp.DiagnosticGroup registerGroup(java.lang.String name, com.google.javascript.jscomp.DiagnosticGroup... groups) {\n        com.google.javascript.jscomp.DiagnosticGroup group = new com.google.javascript.jscomp.DiagnosticGroup(name, groups);\n        com.google.javascript.jscomp.DiagnosticGroups.groupsByName.put(name, group);\n        return group;\n    }\n\n    protected java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup> getRegisteredGroups() {\n        return com.google.common.collect.ImmutableMap.copyOf(com.google.javascript.jscomp.DiagnosticGroups.groupsByName);\n    }\n\n    protected com.google.javascript.jscomp.DiagnosticGroup forName(java.lang.String name) {\n        return com.google.javascript.jscomp.DiagnosticGroups.groupsByName.get(name);\n    }\n\n    static final java.lang.String DIAGNOSTIC_GROUP_NAMES = \"accessControls, ambiguousFunctionDecl, checkRegExp,\" + (((((\"checkTypes, checkVars, constantProperty, deprecated, \" + \"externsValidation, fileoverviewTags, globalThis, \") + \"internetExplorerChecks, nvalidCasts, missingProperties, \") + \"nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, \") + \"undefinedVars, unknownDefines, uselessCode, \") + \"visibility\");\n\n    public static com.google.javascript.jscomp.DiagnosticGroup GLOBAL_THIS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"globalThis\", CheckGlobalThis.GLOBAL_THIS);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup DEPRECATED = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"deprecated\", CheckAccessControls.DEPRECATED_NAME, CheckAccessControls.DEPRECATED_NAME_REASON, CheckAccessControls.DEPRECATED_PROP, CheckAccessControls.DEPRECATED_PROP_REASON, CheckAccessControls.DEPRECATED_CLASS, CheckAccessControls.DEPRECATED_CLASS_REASON);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup VISIBILITY = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"visibility\", CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS, CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS, CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS, CheckAccessControls.PRIVATE_OVERRIDE, CheckAccessControls.VISIBILITY_MISMATCH);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CONSTANT_PROPERTY = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"constantProperty\", CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup NON_STANDARD_JSDOC = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"nonStandardJsDocs\", RhinoErrorReporter.BAD_JSDOC_ANNOTATION);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup ACCESS_CONTROLS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"accessControls\", com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED, com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup INVALID_CASTS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"invalidCasts\", TypeValidator.INVALID_CAST);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup FILEOVERVIEW_JSDOC = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"fileoverviewTags\", RhinoErrorReporter.EXTRA_FILEOVERVIEW);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup STRICT_MODULE_DEP_CHECK = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"strictModuleDepCheck\", VarCheck.STRICT_MODULE_DEP_ERROR, CheckGlobalNames.STRICT_MODULE_DEP_QNAME);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup EXTERNS_VALIDATION = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"externsValidation\", VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup AMBIGUOUS_FUNCTION_DECL = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\", VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup UNKNOWN_DEFINES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"unknownDefines\", ProcessDefines.UNKNOWN_DEFINE_WARNING);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup TWEAKS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"tweakValidation\", ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING, ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING, ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup MISSING_PROPERTIES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"missingProperties\", TypeCheck.INEXISTENT_PROPERTY);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup INTERNET_EXPLORER_CHECKS = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"internetExplorerChecks\", RhinoErrorReporter.TRAILING_COMMA);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup UNDEFINED_VARIABLES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"undefinedVars\", VarCheck.UNDEFINED_VAR_ERROR);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_REGEXP = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"checkRegExp\", CheckRegExp.REGEXP_REFERENCE);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_TYPES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"checkTypes\", TypeValidator.ALL_DIAGNOSTICS, TypeCheck.ALL_DIAGNOSTICS);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_VARIABLES = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"checkVars\", VarCheck.UNDEFINED_VAR_ERROR, SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup CHECK_USELESS_CODE = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"uselessCode\", CheckSideEffects.USELESS_CODE_ERROR, CheckUnreachableCode.UNREACHABLE_CODE);\n\n    public static com.google.javascript.jscomp.DiagnosticGroup TYPE_INVALIDATION = com.google.javascript.jscomp.DiagnosticGroups.registerGroup(\"typeInvalidation\", DisambiguateProperties.Warnings.INVALIDATION);\n\n    void setWarningLevel(com.google.javascript.jscomp.CompilerOptions options, java.lang.String name, com.google.javascript.jscomp.CheckLevel level) {\n        com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n        com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<java.lang.String> diagnosticGroups",
            "dst_parent": "void setWarningLevels(com.google.javascript.jscomp.CompilerOptions options, java.util.List<java.lang.String> diagnosticGroups, com.google.javascript.jscomp.CheckLevel level) {\n    for (java.lang.String name : diagnosticGroups) {\n        com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n        com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n        options.setWarningLevel(group, level);\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "UPD",
            "src": "java.lang.String name",
            "src_parent": "void setWarningLevel(com.google.javascript.jscomp.CompilerOptions options, java.lang.String name, com.google.javascript.jscomp.CheckLevel level) {\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Parameter",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.util.List<java.lang.String>",
            "dst_parent": "java.util.List<java.lang.String> diagnosticGroups",
            "dst_parent_type": "Parameter",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "java.lang.String name",
            "src_parent_type": "Parameter",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.javascript.jscomp.DiagnosticGroup group = forName(name)",
            "dst_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "com.google.javascript.jscomp.DiagnosticGroup group = forName(name)",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name)",
            "dst_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name)",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "options.setWarningLevel(group, level)",
            "dst_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "options.setWarningLevel(group, level)",
            "src_parent": "{\n    com.google.javascript.jscomp.DiagnosticGroup group = forName(name);\n    com.google.common.base.Preconditions.checkNotNull(group, \"No warning class for name: \" + name);\n    options.setWarningLevel(group, level);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "DiagnosticGroups"
    }
  ],
  "id": "Closure_158"
}