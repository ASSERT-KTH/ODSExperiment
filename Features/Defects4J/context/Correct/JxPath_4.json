{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected java.lang.String getLanguage() {\n    java.lang.Object n = node;\n    while (n != null) {\n        if (n instanceof org.jdom.Element) {\n            org.jdom.Element e = ((org.jdom.Element) (n));\n            java.lang.String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE);\n            if ((attr != null) && (!attr.equals(\"\"))) {\n                return attr;\n            }\n        }\n        n = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(n);\n    } \n    return null;\n}",
            "dst_parent": "public class JDOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -6346532297491082651L;\n\n    private java.lang.Object node;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public JDOMNodePointer(java.lang.Object node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public JDOMNodePointer(java.lang.Object node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public JDOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, java.lang.Object node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator(this);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer(this, prefix);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceURI(node);\n    }\n\n    private static java.lang.String getNamespaceURI(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            java.lang.String ns = element.getNamespaceURI();\n            if ((ns != null) && ns.equals(\"\")) {\n                ns = null;\n            }\n            return ns;\n        }\n        return null;\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if (node instanceof org.jdom.Document) {\n            org.jdom.Element element = ((org.jdom.Document) (node)).getRootElement();\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns != null) {\n                return ns.getURI();\n            }\n        } else if (node instanceof org.jdom.Element) {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns != null) {\n                return ns.getURI();\n            }\n        }\n        return null;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        java.lang.Object node1 = pointer1.getBaseValue();\n        java.lang.Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n        if ((node1 instanceof org.jdom.Attribute) && (!(node2 instanceof org.jdom.Attribute))) {\n            return -1;\n        }\n        if ((!(node1 instanceof org.jdom.Attribute)) && (node2 instanceof org.jdom.Attribute)) {\n            return 1;\n        }\n        if ((node1 instanceof org.jdom.Attribute) && (node2 instanceof org.jdom.Attribute)) {\n            java.util.List list = ((org.jdom.Element) (getNode())).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                java.lang.Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                } else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        if (!(node instanceof org.jdom.Element)) {\n            throw new java.lang.RuntimeException((\"JXPath internal error: \" + \"compareChildNodes called for \") + node);\n        }\n        java.util.List children = ((org.jdom.Element) (node)).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            java.lang.Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            if (n == node2) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        if (node instanceof org.jdom.Element) {\n            return ((org.jdom.Element) (node)).getContent().size() == 0;\n        }\n        if (node instanceof org.jdom.Document) {\n            return ((org.jdom.Document) (node)).getContent().size() == 0;\n        }\n        return true;\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ns = null;\n        java.lang.String ln = null;\n        if (node instanceof org.jdom.Element) {\n            ns = ((org.jdom.Element) (node)).getNamespacePrefix();\n            if ((ns != null) && ns.equals(\"\")) {\n                ns = null;\n            }\n            ln = ((org.jdom.Element) (node)).getName();\n        } else if (node instanceof org.jdom.ProcessingInstruction) {\n            ln = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public java.lang.Object getValue() {\n        if (node instanceof org.jdom.Element) {\n            return ((org.jdom.Element) (node)).getTextTrim();\n        }\n        if (node instanceof org.jdom.Comment) {\n            java.lang.String text = ((org.jdom.Comment) (node)).getText();\n            if (text != null) {\n                text = text.trim();\n            }\n            return text;\n        }\n        if (node instanceof org.jdom.Text) {\n            return ((org.jdom.Text) (node)).getTextTrim();\n        }\n        if (node instanceof org.jdom.CDATA) {\n            return ((org.jdom.CDATA) (node)).getTextTrim();\n        }\n        if (node instanceof org.jdom.ProcessingInstruction) {\n            java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData();\n            if (text != null) {\n                text = text.trim();\n            }\n            return text;\n        }\n        return null;\n    }\n\n    public void setValue(java.lang.Object value) {\n        if (node instanceof org.jdom.Text) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                ((org.jdom.Text) (node)).setText(string);\n            } else {\n                org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(node).removeContent(((org.jdom.Text) (node)));\n            }\n        } else {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            element.getContent().clear();\n            if (value instanceof org.jdom.Element) {\n                org.jdom.Element valueElement = ((org.jdom.Element) (value));\n                addContent(valueElement.getContent());\n            } else if (value instanceof org.jdom.Document) {\n                org.jdom.Document valueDocument = ((org.jdom.Document) (value));\n                addContent(valueDocument.getContent());\n            } else if ((value instanceof org.jdom.Text) || (value instanceof org.jdom.CDATA)) {\n                java.lang.String string = ((org.jdom.Text) (value)).getText();\n                element.addContent(new org.jdom.Text(string));\n            } else if (value instanceof org.jdom.ProcessingInstruction) {\n                org.jdom.ProcessingInstruction pi = ((org.jdom.ProcessingInstruction) (((org.jdom.ProcessingInstruction) (value)).clone()));\n                element.addContent(pi);\n            } else if (value instanceof org.jdom.Comment) {\n                org.jdom.Comment comment = ((org.jdom.Comment) (((org.jdom.Comment) (value)).clone()));\n                element.addContent(comment);\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    element.addContent(new org.jdom.Text(string));\n                }\n            }\n        }\n    }\n\n    private void addContent(java.util.List content) {\n        org.jdom.Element element = ((org.jdom.Element) (node));\n        int count = content.size();\n        for (int i = 0; i < count; i++) {\n            java.lang.Object child = content.get(i);\n            if (child instanceof org.jdom.Element) {\n                child = ((org.jdom.Element) (child)).clone();\n                element.addContent(((org.jdom.Element) (child)));\n            } else if (child instanceof org.jdom.Text) {\n                child = ((org.jdom.Text) (child)).clone();\n                element.addContent(((org.jdom.Text) (child)));\n            } else if (node instanceof org.jdom.CDATA) {\n                child = ((org.jdom.CDATA) (child)).clone();\n                element.addContent(((org.jdom.CDATA) (child)));\n            } else if (node instanceof org.jdom.ProcessingInstruction) {\n                child = ((org.jdom.ProcessingInstruction) (child)).clone();\n                element.addContent(((org.jdom.ProcessingInstruction) (child)));\n            } else if (node instanceof org.jdom.Comment) {\n                child = ((org.jdom.Comment) (child)).clone();\n                element.addContent(((org.jdom.Comment) (child)));\n            }\n        }\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode(this, node, test);\n    }\n\n    public static boolean testNode(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.Object node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (!(node instanceof org.jdom.Element)) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (node instanceof org.jdom.Element) || (node instanceof org.jdom.Document);\n                case NODE_TYPE_TEXT :\n                    return (node instanceof org.jdom.Text) || (node instanceof org.jdom.CDATA);\n                case NODE_TYPE_COMMENT :\n                    return node instanceof org.jdom.Comment;\n                case NODE_TYPE_PI :\n                    return node instanceof org.jdom.ProcessingInstruction;\n            }\n            return false;\n        }\n        if ((test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) && (node instanceof org.jdom.ProcessingInstruction)) {\n            java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n            java.lang.String nodePI = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n            return testPI.equals(nodePI);\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public static java.lang.String getPrefix(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            java.lang.String prefix = ((org.jdom.Element) (node)).getNamespacePrefix();\n            return (prefix == null) || prefix.equals(\"\") ? null : prefix;\n        }\n        if (node instanceof org.jdom.Attribute) {\n            java.lang.String prefix = ((org.jdom.Attribute) (node)).getNamespacePrefix();\n            return (prefix == null) || prefix.equals(\"\") ? null : prefix;\n        }\n        return null;\n    }\n\n    public static java.lang.String getLocalName(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            return ((org.jdom.Element) (node)).getName();\n        }\n        if (node instanceof org.jdom.Attribute) {\n            return ((org.jdom.Attribute) (node)).getName();\n        }\n        return null;\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected java.lang.String getLanguage() {\n        java.lang.Object n = node;\n        while (n != null) {\n            if (n instanceof org.jdom.Element) {\n                org.jdom.Element e = ((org.jdom.Element) (n));\n                java.lang.String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(n);\n        } \n        return null;\n    }\n\n    private static org.jdom.Element nodeParent(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n            return parent instanceof org.jdom.Element ? ((org.jdom.Element) (parent)) : null;\n        }\n        if (node instanceof org.jdom.Text) {\n            return ((org.jdom.Element) (((org.jdom.Text) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.CDATA) {\n            return ((org.jdom.Element) (((org.jdom.CDATA) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.ProcessingInstruction) {\n            return ((org.jdom.Element) (((org.jdom.ProcessingInstruction) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.Comment) {\n            return ((org.jdom.Element) (((org.jdom.Comment) (node)).getParent()));\n        }\n        return null;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException(((((((\"Factory could not create \" + \"a child node for path: \") + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.jdom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.jdom.Element element = ((org.jdom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            org.jdom.Attribute attr = element.getAttribute(name.getName(), ns);\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\", ns);\n            }\n        } else {\n            org.jdom.Attribute attr = element.getAttribute(name.getName());\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\");\n            }\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.jdom.Element parent = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(node);\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root JDOM node\");\n        }\n        parent.getContent().remove(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        if (node instanceof org.jdom.Element) {\n            if (parent instanceof org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer) {\n                if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                    buffer.append('/');\n                }\n                java.lang.String nsURI = getNamespaceURI();\n                java.lang.String ln = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLocalName(node);\n                if (org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                    buffer.append(ln);\n                    buffer.append('[');\n                    buffer.append(getRelativePositionByName()).append(']');\n                } else {\n                    java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix != null) {\n                        buffer.append(prefix);\n                        buffer.append(':');\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName());\n                        buffer.append(']');\n                    } else {\n                        buffer.append(\"node()\");\n                        buffer.append('[');\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(']');\n                    }\n                }\n            }\n        } else if ((node instanceof org.jdom.Text) || (node instanceof org.jdom.CDATA)) {\n            buffer.append(\"/text()\");\n            buffer.append('[').append(getRelativePositionOfTextNode()).append(']');\n        } else if (node instanceof org.jdom.ProcessingInstruction) {\n            java.lang.String target = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n            buffer.append(\"/processing-instruction(\\'\").append(target).append(\"')\");\n            buffer.append('[').append(getRelativePositionOfPI(target)).append(']');\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        if (node instanceof org.jdom.Element) {\n            java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n            if (!(parent instanceof org.jdom.Element)) {\n                return 1;\n            }\n            java.util.List children = ((org.jdom.Element) (parent)).getContent();\n            int count = 0;\n            java.lang.String name = ((org.jdom.Element) (node)).getQualifiedName();\n            for (int i = 0; i < children.size(); i++) {\n                java.lang.Object child = children.get(i);\n                if ((child instanceof org.jdom.Element) && ((org.jdom.Element) (child)).getQualifiedName().equals(name)) {\n                    count++;\n                }\n                if (child == node) {\n                    break;\n                }\n            }\n            return count;\n        }\n        return 1;\n    }\n\n    private int getRelativePositionOfElement() {\n        java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children;\n        if (parent instanceof org.jdom.Element) {\n            children = ((org.jdom.Element) (parent)).getContent();\n        } else {\n            children = ((org.jdom.Document) (parent)).getContent();\n        }\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if (child instanceof org.jdom.Element) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        org.jdom.Element parent;\n        if (node instanceof org.jdom.Text) {\n            parent = ((org.jdom.Element) (((org.jdom.Text) (node)).getParent()));\n        } else {\n            parent = ((org.jdom.Element) (((org.jdom.CDATA) (node)).getParent()));\n        }\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if ((child instanceof org.jdom.Text) || (child instanceof org.jdom.CDATA)) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        org.jdom.Element parent = ((org.jdom.Element) (((org.jdom.ProcessingInstruction) (node)).getParent()));\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if ((child instanceof org.jdom.ProcessingInstruction) && ((target == null) || target.equals(((org.jdom.ProcessingInstruction) (child)).getTarget()))) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        if (object == this) {\n            return true;\n        }\n        if (!(object instanceof org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer)) {\n            return false;\n        }\n        org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer other = ((org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer) (object));\n        return node == other.node;\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n        }\n        return factory;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "protected static java.lang.String findEnclosingAttribute(java.lang.Object n, java.lang.String attrName, org.jdom.Namespace ns) {\n    while (n != null) {\n        if (n instanceof org.jdom.Element) {\n            org.jdom.Element e = ((org.jdom.Element) (n));\n            java.lang.String attr = e.getAttributeValue(attrName, ns);\n            if ((attr != null) && (!attr.equals(\"\"))) {\n                return attr;\n            }\n        }\n        n = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(n);\n    } \n    return null;\n}",
            "src_parent": "public class JDOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -6346532297491082651L;\n\n    private java.lang.Object node;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public JDOMNodePointer(java.lang.Object node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public JDOMNodePointer(java.lang.Object node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public JDOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, java.lang.Object node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator(this);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer(this, prefix);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceURI(node);\n    }\n\n    private static java.lang.String getNamespaceURI(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            java.lang.String ns = element.getNamespaceURI();\n            if ((ns != null) && ns.equals(\"\")) {\n                ns = null;\n            }\n            return ns;\n        }\n        return null;\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if (node instanceof org.jdom.Document) {\n            org.jdom.Element element = ((org.jdom.Document) (node)).getRootElement();\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns != null) {\n                return ns.getURI();\n            }\n        } else if (node instanceof org.jdom.Element) {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns != null) {\n                return ns.getURI();\n            }\n        }\n        return null;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        java.lang.Object node1 = pointer1.getBaseValue();\n        java.lang.Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n        if ((node1 instanceof org.jdom.Attribute) && (!(node2 instanceof org.jdom.Attribute))) {\n            return -1;\n        }\n        if ((!(node1 instanceof org.jdom.Attribute)) && (node2 instanceof org.jdom.Attribute)) {\n            return 1;\n        }\n        if ((node1 instanceof org.jdom.Attribute) && (node2 instanceof org.jdom.Attribute)) {\n            java.util.List list = ((org.jdom.Element) (getNode())).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                java.lang.Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                } else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        if (!(node instanceof org.jdom.Element)) {\n            throw new java.lang.RuntimeException((\"JXPath internal error: \" + \"compareChildNodes called for \") + node);\n        }\n        java.util.List children = ((org.jdom.Element) (node)).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            java.lang.Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            if (n == node2) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        if (node instanceof org.jdom.Element) {\n            return ((org.jdom.Element) (node)).getContent().size() == 0;\n        }\n        if (node instanceof org.jdom.Document) {\n            return ((org.jdom.Document) (node)).getContent().size() == 0;\n        }\n        return true;\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ns = null;\n        java.lang.String ln = null;\n        if (node instanceof org.jdom.Element) {\n            ns = ((org.jdom.Element) (node)).getNamespacePrefix();\n            if ((ns != null) && ns.equals(\"\")) {\n                ns = null;\n            }\n            ln = ((org.jdom.Element) (node)).getName();\n        } else if (node instanceof org.jdom.ProcessingInstruction) {\n            ln = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public java.lang.Object getValue() {\n        if (node instanceof org.jdom.Element) {\n            java.lang.StringBuffer buf = new java.lang.StringBuffer();\n            for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n                org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n                if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n                    buf.append(ptr.getValue());\n                }\n            }\n            return buf.toString();\n        }\n        if (node instanceof org.jdom.Comment) {\n            java.lang.String text = ((org.jdom.Comment) (node)).getText();\n            if (text != null) {\n                text = text.trim();\n            }\n            return text;\n        }\n        java.lang.String result = null;\n        if (node instanceof org.jdom.Text) {\n            result = ((org.jdom.Text) (node)).getText();\n        }\n        if (node instanceof org.jdom.ProcessingInstruction) {\n            result = ((org.jdom.ProcessingInstruction) (node)).getData();\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n        return (result != null) && trim ? result.trim() : result;\n    }\n\n    public void setValue(java.lang.Object value) {\n        if (node instanceof org.jdom.Text) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                ((org.jdom.Text) (node)).setText(string);\n            } else {\n                org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(node).removeContent(((org.jdom.Text) (node)));\n            }\n        } else {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            element.getContent().clear();\n            if (value instanceof org.jdom.Element) {\n                org.jdom.Element valueElement = ((org.jdom.Element) (value));\n                addContent(valueElement.getContent());\n            } else if (value instanceof org.jdom.Document) {\n                org.jdom.Document valueDocument = ((org.jdom.Document) (value));\n                addContent(valueDocument.getContent());\n            } else if ((value instanceof org.jdom.Text) || (value instanceof org.jdom.CDATA)) {\n                java.lang.String string = ((org.jdom.Text) (value)).getText();\n                element.addContent(new org.jdom.Text(string));\n            } else if (value instanceof org.jdom.ProcessingInstruction) {\n                org.jdom.ProcessingInstruction pi = ((org.jdom.ProcessingInstruction) (((org.jdom.ProcessingInstruction) (value)).clone()));\n                element.addContent(pi);\n            } else if (value instanceof org.jdom.Comment) {\n                org.jdom.Comment comment = ((org.jdom.Comment) (((org.jdom.Comment) (value)).clone()));\n                element.addContent(comment);\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    element.addContent(new org.jdom.Text(string));\n                }\n            }\n        }\n    }\n\n    private void addContent(java.util.List content) {\n        org.jdom.Element element = ((org.jdom.Element) (node));\n        int count = content.size();\n        for (int i = 0; i < count; i++) {\n            java.lang.Object child = content.get(i);\n            if (child instanceof org.jdom.Element) {\n                child = ((org.jdom.Element) (child)).clone();\n                element.addContent(((org.jdom.Element) (child)));\n            } else if (child instanceof org.jdom.Text) {\n                child = ((org.jdom.Text) (child)).clone();\n                element.addContent(((org.jdom.Text) (child)));\n            } else if (node instanceof org.jdom.CDATA) {\n                child = ((org.jdom.CDATA) (child)).clone();\n                element.addContent(((org.jdom.CDATA) (child)));\n            } else if (node instanceof org.jdom.ProcessingInstruction) {\n                child = ((org.jdom.ProcessingInstruction) (child)).clone();\n                element.addContent(((org.jdom.ProcessingInstruction) (child)));\n            } else if (node instanceof org.jdom.Comment) {\n                child = ((org.jdom.Comment) (child)).clone();\n                element.addContent(((org.jdom.Comment) (child)));\n            }\n        }\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode(this, node, test);\n    }\n\n    public static boolean testNode(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.Object node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (!(node instanceof org.jdom.Element)) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (node instanceof org.jdom.Element) || (node instanceof org.jdom.Document);\n                case NODE_TYPE_TEXT :\n                    return (node instanceof org.jdom.Text) || (node instanceof org.jdom.CDATA);\n                case NODE_TYPE_COMMENT :\n                    return node instanceof org.jdom.Comment;\n                case NODE_TYPE_PI :\n                    return node instanceof org.jdom.ProcessingInstruction;\n            }\n            return false;\n        }\n        if ((test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) && (node instanceof org.jdom.ProcessingInstruction)) {\n            java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n            java.lang.String nodePI = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n            return testPI.equals(nodePI);\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public static java.lang.String getPrefix(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            java.lang.String prefix = ((org.jdom.Element) (node)).getNamespacePrefix();\n            return (prefix == null) || prefix.equals(\"\") ? null : prefix;\n        }\n        if (node instanceof org.jdom.Attribute) {\n            java.lang.String prefix = ((org.jdom.Attribute) (node)).getNamespacePrefix();\n            return (prefix == null) || prefix.equals(\"\") ? null : prefix;\n        }\n        return null;\n    }\n\n    public static java.lang.String getLocalName(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            return ((org.jdom.Element) (node)).getName();\n        }\n        if (node instanceof org.jdom.Attribute) {\n            return ((org.jdom.Attribute) (node)).getName();\n        }\n        return null;\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n    }\n\n    protected static java.lang.String findEnclosingAttribute(java.lang.Object n, java.lang.String attrName, org.jdom.Namespace ns) {\n        while (n != null) {\n            if (n instanceof org.jdom.Element) {\n                org.jdom.Element e = ((org.jdom.Element) (n));\n                java.lang.String attr = e.getAttributeValue(attrName, ns);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(n);\n        } \n        return null;\n    }\n\n    private static org.jdom.Element nodeParent(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n            return parent instanceof org.jdom.Element ? ((org.jdom.Element) (parent)) : null;\n        }\n        if (node instanceof org.jdom.Text) {\n            return ((org.jdom.Element) (((org.jdom.Text) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.CDATA) {\n            return ((org.jdom.Element) (((org.jdom.CDATA) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.ProcessingInstruction) {\n            return ((org.jdom.Element) (((org.jdom.ProcessingInstruction) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.Comment) {\n            return ((org.jdom.Element) (((org.jdom.Comment) (node)).getParent()));\n        }\n        return null;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException(((((((\"Factory could not create \" + \"a child node for path: \") + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.jdom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.jdom.Element element = ((org.jdom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            org.jdom.Attribute attr = element.getAttribute(name.getName(), ns);\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\", ns);\n            }\n        } else {\n            org.jdom.Attribute attr = element.getAttribute(name.getName());\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\");\n            }\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.jdom.Element parent = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(node);\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root JDOM node\");\n        }\n        parent.getContent().remove(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        if (node instanceof org.jdom.Element) {\n            if (parent instanceof org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer) {\n                if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                    buffer.append('/');\n                }\n                java.lang.String nsURI = getNamespaceURI();\n                java.lang.String ln = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLocalName(node);\n                if (org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                    buffer.append(ln);\n                    buffer.append('[');\n                    buffer.append(getRelativePositionByName()).append(']');\n                } else {\n                    java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix != null) {\n                        buffer.append(prefix);\n                        buffer.append(':');\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName());\n                        buffer.append(']');\n                    } else {\n                        buffer.append(\"node()\");\n                        buffer.append('[');\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(']');\n                    }\n                }\n            }\n        } else if ((node instanceof org.jdom.Text) || (node instanceof org.jdom.CDATA)) {\n            buffer.append(\"/text()\");\n            buffer.append('[').append(getRelativePositionOfTextNode()).append(']');\n        } else if (node instanceof org.jdom.ProcessingInstruction) {\n            java.lang.String target = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n            buffer.append(\"/processing-instruction(\\'\").append(target).append(\"')\");\n            buffer.append('[').append(getRelativePositionOfPI(target)).append(']');\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        if (node instanceof org.jdom.Element) {\n            java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n            if (!(parent instanceof org.jdom.Element)) {\n                return 1;\n            }\n            java.util.List children = ((org.jdom.Element) (parent)).getContent();\n            int count = 0;\n            java.lang.String name = ((org.jdom.Element) (node)).getQualifiedName();\n            for (int i = 0; i < children.size(); i++) {\n                java.lang.Object child = children.get(i);\n                if ((child instanceof org.jdom.Element) && ((org.jdom.Element) (child)).getQualifiedName().equals(name)) {\n                    count++;\n                }\n                if (child == node) {\n                    break;\n                }\n            }\n            return count;\n        }\n        return 1;\n    }\n\n    private int getRelativePositionOfElement() {\n        java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children;\n        if (parent instanceof org.jdom.Element) {\n            children = ((org.jdom.Element) (parent)).getContent();\n        } else {\n            children = ((org.jdom.Document) (parent)).getContent();\n        }\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if (child instanceof org.jdom.Element) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        org.jdom.Element parent;\n        if (node instanceof org.jdom.Text) {\n            parent = ((org.jdom.Element) (((org.jdom.Text) (node)).getParent()));\n        } else {\n            parent = ((org.jdom.Element) (((org.jdom.CDATA) (node)).getParent()));\n        }\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if ((child instanceof org.jdom.Text) || (child instanceof org.jdom.CDATA)) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        org.jdom.Element parent = ((org.jdom.Element) (((org.jdom.ProcessingInstruction) (node)).getParent()));\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if ((child instanceof org.jdom.ProcessingInstruction) && ((target == null) || target.equals(((org.jdom.ProcessingInstruction) (child)).getTarget()))) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        if (object == this) {\n            return true;\n        }\n        if (!(object instanceof org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer)) {\n            return false;\n        }\n        org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer other = ((org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer) (object));\n        return node == other.node;\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n        }\n        return factory;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jdom.CDATA",
            "dst_parent": "node instanceof org.jdom.CDATA",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "TypeAccess",
            "operator": "UPD",
            "src": "org.jdom.Text",
            "src_parent": "(ptr.getImmediateNode() instanceof org.jdom.Text)",
            "src_parent_type": "BinaryOperator",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.jdom.Text) (node)).getTextTrim()",
            "dst_parent": "return ((org.jdom.Text) (node)).getTextTrim()",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE)",
            "src_parent": "return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE)",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.jdom.CDATA) (node)).getTextTrim()",
            "dst_parent": "return ((org.jdom.CDATA) (node)).getTextTrim()",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "((org.jdom.Text) (node)).getText()",
            "src_parent": "result = ((org.jdom.Text) (node)).getText()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "text",
            "dst_parent": "text = text.trim()",
            "dst_parent_type": "Assignment",
            "dst_type": "VariableWrite",
            "operator": "UPD",
            "src": "result",
            "src_parent": "result = ((org.jdom.ProcessingInstruction) (node)).getData()",
            "src_parent_type": "Assignment",
            "src_type": "VariableWrite"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (node instanceof org.jdom.Element) {\n    java.lang.StringBuffer buf = new java.lang.StringBuffer();\n    for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n        if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n            buf.append(ptr.getValue());\n        }\n    }\n    return buf.toString();\n}",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        java.lang.StringBuffer buf = new java.lang.StringBuffer();\n        for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n            org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n            if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n                buf.append(ptr.getValue());\n            }\n        }\n        return buf.toString();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    java.lang.String result = null;\n    if (node instanceof org.jdom.Text) {\n        result = ((org.jdom.Text) (node)).getText();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        result = ((org.jdom.ProcessingInstruction) (node)).getData();\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n    return (result != null) && trim ? result.trim() : result;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "result = ((org.jdom.Text) (node)).getText()",
            "src_parent": "{\n    result = ((org.jdom.Text) (node)).getText();\n}",
            "src_parent_type": "Block",
            "src_type": "Assignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.String result = null",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        java.lang.StringBuffer buf = new java.lang.StringBuffer();\n        for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n            org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n            if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n                buf.append(ptr.getValue());\n            }\n        }\n        return buf.toString();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    java.lang.String result = null;\n    if (node instanceof org.jdom.Text) {\n        result = ((org.jdom.Text) (node)).getText();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        result = ((org.jdom.ProcessingInstruction) (node)).getData();\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n    return (result != null) && trim ? result.trim() : result;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (node instanceof org.jdom.Text) {\n    result = ((org.jdom.Text) (node)).getText();\n}",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        java.lang.StringBuffer buf = new java.lang.StringBuffer();\n        for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n            org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n            if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n                buf.append(ptr.getValue());\n            }\n        }\n        return buf.toString();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    java.lang.String result = null;\n    if (node instanceof org.jdom.Text) {\n        result = ((org.jdom.Text) (node)).getText();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        result = ((org.jdom.ProcessingInstruction) (node)).getData();\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n    return (result != null) && trim ? result.trim() : result;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (node instanceof org.jdom.ProcessingInstruction) {\n    result = ((org.jdom.ProcessingInstruction) (node)).getData();\n}",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        java.lang.StringBuffer buf = new java.lang.StringBuffer();\n        for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n            org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n            if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n                buf.append(ptr.getValue());\n            }\n        }\n        return buf.toString();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    java.lang.String result = null;\n    if (node instanceof org.jdom.Text) {\n        result = ((org.jdom.Text) (node)).getText();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        result = ((org.jdom.ProcessingInstruction) (node)).getData();\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n    return (result != null) && trim ? result.trim() : result;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE))",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        java.lang.StringBuffer buf = new java.lang.StringBuffer();\n        for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n            org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n            if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n                buf.append(ptr.getValue());\n            }\n        }\n        return buf.toString();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    java.lang.String result = null;\n    if (node instanceof org.jdom.Text) {\n        result = ((org.jdom.Text) (node)).getText();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        result = ((org.jdom.ProcessingInstruction) (node)).getData();\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n    return (result != null) && trim ? result.trim() : result;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(result != null) && trim ? result.trim() : result",
            "src_parent": "return (result != null) && trim ? result.trim() : result",
            "src_parent_type": "Return",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "protected java.lang.String getLanguage() {\n    return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n}",
            "src_parent": "public class JDOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -6346532297491082651L;\n\n    private java.lang.Object node;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public JDOMNodePointer(java.lang.Object node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public JDOMNodePointer(java.lang.Object node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public JDOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, java.lang.Object node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNamespaceIterator(this);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.jdom.JDOMNamespacePointer(this, prefix);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceURI(node);\n    }\n\n    private static java.lang.String getNamespaceURI(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            java.lang.String ns = element.getNamespaceURI();\n            if ((ns != null) && ns.equals(\"\")) {\n                ns = null;\n            }\n            return ns;\n        }\n        return null;\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if (node instanceof org.jdom.Document) {\n            org.jdom.Element element = ((org.jdom.Document) (node)).getRootElement();\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns != null) {\n                return ns.getURI();\n            }\n        } else if (node instanceof org.jdom.Element) {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns != null) {\n                return ns.getURI();\n            }\n        }\n        return null;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        java.lang.Object node1 = pointer1.getBaseValue();\n        java.lang.Object node2 = pointer2.getBaseValue();\n        if (node1 == node2) {\n            return 0;\n        }\n        if ((node1 instanceof org.jdom.Attribute) && (!(node2 instanceof org.jdom.Attribute))) {\n            return -1;\n        }\n        if ((!(node1 instanceof org.jdom.Attribute)) && (node2 instanceof org.jdom.Attribute)) {\n            return 1;\n        }\n        if ((node1 instanceof org.jdom.Attribute) && (node2 instanceof org.jdom.Attribute)) {\n            java.util.List list = ((org.jdom.Element) (getNode())).getAttributes();\n            int length = list.size();\n            for (int i = 0; i < length; i++) {\n                java.lang.Object n = list.get(i);\n                if (n == node1) {\n                    return -1;\n                } else if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        if (!(node instanceof org.jdom.Element)) {\n            throw new java.lang.RuntimeException((\"JXPath internal error: \" + \"compareChildNodes called for \") + node);\n        }\n        java.util.List children = ((org.jdom.Element) (node)).getContent();\n        int length = children.size();\n        for (int i = 0; i < length; i++) {\n            java.lang.Object n = children.get(i);\n            if (n == node1) {\n                return -1;\n            }\n            if (n == node2) {\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        if (node instanceof org.jdom.Element) {\n            return ((org.jdom.Element) (node)).getContent().size() == 0;\n        }\n        if (node instanceof org.jdom.Document) {\n            return ((org.jdom.Document) (node)).getContent().size() == 0;\n        }\n        return true;\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ns = null;\n        java.lang.String ln = null;\n        if (node instanceof org.jdom.Element) {\n            ns = ((org.jdom.Element) (node)).getNamespacePrefix();\n            if ((ns != null) && ns.equals(\"\")) {\n                ns = null;\n            }\n            ln = ((org.jdom.Element) (node)).getName();\n        } else if (node instanceof org.jdom.ProcessingInstruction) {\n            ln = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public java.lang.Object getValue() {\n        if (node instanceof org.jdom.Element) {\n            java.lang.StringBuffer buf = new java.lang.StringBuffer();\n            for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n                org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n                if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n                    buf.append(ptr.getValue());\n                }\n            }\n            return buf.toString();\n        }\n        if (node instanceof org.jdom.Comment) {\n            java.lang.String text = ((org.jdom.Comment) (node)).getText();\n            if (text != null) {\n                text = text.trim();\n            }\n            return text;\n        }\n        java.lang.String result = null;\n        if (node instanceof org.jdom.Text) {\n            result = ((org.jdom.Text) (node)).getText();\n        }\n        if (node instanceof org.jdom.ProcessingInstruction) {\n            result = ((org.jdom.ProcessingInstruction) (node)).getData();\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE));\n        return (result != null) && trim ? result.trim() : result;\n    }\n\n    public void setValue(java.lang.Object value) {\n        if (node instanceof org.jdom.Text) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                ((org.jdom.Text) (node)).setText(string);\n            } else {\n                org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(node).removeContent(((org.jdom.Text) (node)));\n            }\n        } else {\n            org.jdom.Element element = ((org.jdom.Element) (node));\n            element.getContent().clear();\n            if (value instanceof org.jdom.Element) {\n                org.jdom.Element valueElement = ((org.jdom.Element) (value));\n                addContent(valueElement.getContent());\n            } else if (value instanceof org.jdom.Document) {\n                org.jdom.Document valueDocument = ((org.jdom.Document) (value));\n                addContent(valueDocument.getContent());\n            } else if ((value instanceof org.jdom.Text) || (value instanceof org.jdom.CDATA)) {\n                java.lang.String string = ((org.jdom.Text) (value)).getText();\n                element.addContent(new org.jdom.Text(string));\n            } else if (value instanceof org.jdom.ProcessingInstruction) {\n                org.jdom.ProcessingInstruction pi = ((org.jdom.ProcessingInstruction) (((org.jdom.ProcessingInstruction) (value)).clone()));\n                element.addContent(pi);\n            } else if (value instanceof org.jdom.Comment) {\n                org.jdom.Comment comment = ((org.jdom.Comment) (((org.jdom.Comment) (value)).clone()));\n                element.addContent(comment);\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    element.addContent(new org.jdom.Text(string));\n                }\n            }\n        }\n    }\n\n    private void addContent(java.util.List content) {\n        org.jdom.Element element = ((org.jdom.Element) (node));\n        int count = content.size();\n        for (int i = 0; i < count; i++) {\n            java.lang.Object child = content.get(i);\n            if (child instanceof org.jdom.Element) {\n                child = ((org.jdom.Element) (child)).clone();\n                element.addContent(((org.jdom.Element) (child)));\n            } else if (child instanceof org.jdom.Text) {\n                child = ((org.jdom.Text) (child)).clone();\n                element.addContent(((org.jdom.Text) (child)));\n            } else if (node instanceof org.jdom.CDATA) {\n                child = ((org.jdom.CDATA) (child)).clone();\n                element.addContent(((org.jdom.CDATA) (child)));\n            } else if (node instanceof org.jdom.ProcessingInstruction) {\n                child = ((org.jdom.ProcessingInstruction) (child)).clone();\n                element.addContent(((org.jdom.ProcessingInstruction) (child)));\n            } else if (node instanceof org.jdom.Comment) {\n                child = ((org.jdom.Comment) (child)).clone();\n                element.addContent(((org.jdom.Comment) (child)));\n            }\n        }\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.testNode(this, node, test);\n    }\n\n    public static boolean testNode(org.apache.commons.jxpath.ri.model.NodePointer pointer, java.lang.Object node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (!(node instanceof org.jdom.Element)) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (node instanceof org.jdom.Element) || (node instanceof org.jdom.Document);\n                case NODE_TYPE_TEXT :\n                    return (node instanceof org.jdom.Text) || (node instanceof org.jdom.CDATA);\n                case NODE_TYPE_COMMENT :\n                    return node instanceof org.jdom.Comment;\n                case NODE_TYPE_PI :\n                    return node instanceof org.jdom.ProcessingInstruction;\n            }\n            return false;\n        }\n        if ((test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) && (node instanceof org.jdom.ProcessingInstruction)) {\n            java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n            java.lang.String nodePI = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n            return testPI.equals(nodePI);\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public static java.lang.String getPrefix(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            java.lang.String prefix = ((org.jdom.Element) (node)).getNamespacePrefix();\n            return (prefix == null) || prefix.equals(\"\") ? null : prefix;\n        }\n        if (node instanceof org.jdom.Attribute) {\n            java.lang.String prefix = ((org.jdom.Attribute) (node)).getNamespacePrefix();\n            return (prefix == null) || prefix.equals(\"\") ? null : prefix;\n        }\n        return null;\n    }\n\n    public static java.lang.String getLocalName(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            return ((org.jdom.Element) (node)).getName();\n        }\n        if (node instanceof org.jdom.Attribute) {\n            return ((org.jdom.Attribute) (node)).getName();\n        }\n        return null;\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n    }\n\n    protected static java.lang.String findEnclosingAttribute(java.lang.Object n, java.lang.String attrName, org.jdom.Namespace ns) {\n        while (n != null) {\n            if (n instanceof org.jdom.Element) {\n                org.jdom.Element e = ((org.jdom.Element) (n));\n                java.lang.String attr = e.getAttributeValue(attrName, ns);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(n);\n        } \n        return null;\n    }\n\n    private static org.jdom.Element nodeParent(java.lang.Object node) {\n        if (node instanceof org.jdom.Element) {\n            java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n            return parent instanceof org.jdom.Element ? ((org.jdom.Element) (parent)) : null;\n        }\n        if (node instanceof org.jdom.Text) {\n            return ((org.jdom.Element) (((org.jdom.Text) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.CDATA) {\n            return ((org.jdom.Element) (((org.jdom.CDATA) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.ProcessingInstruction) {\n            return ((org.jdom.Element) (((org.jdom.ProcessingInstruction) (node)).getParent()));\n        }\n        if (node instanceof org.jdom.Comment) {\n            return ((org.jdom.Element) (((org.jdom.Comment) (node)).getParent()));\n        }\n        return null;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException(((((((\"Factory could not create \" + \"a child node for path: \") + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.jdom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.jdom.Element element = ((org.jdom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            org.jdom.Namespace ns = element.getNamespace(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            org.jdom.Attribute attr = element.getAttribute(name.getName(), ns);\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\", ns);\n            }\n        } else {\n            org.jdom.Attribute attr = element.getAttribute(name.getName());\n            if (attr == null) {\n                element.setAttribute(name.getName(), \"\");\n            }\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.jdom.Element parent = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(node);\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root JDOM node\");\n        }\n        parent.getContent().remove(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        if (node instanceof org.jdom.Element) {\n            if (parent instanceof org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer) {\n                if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                    buffer.append('/');\n                }\n                java.lang.String nsURI = getNamespaceURI();\n                java.lang.String ln = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.getLocalName(node);\n                if (org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                    buffer.append(ln);\n                    buffer.append('[');\n                    buffer.append(getRelativePositionByName()).append(']');\n                } else {\n                    java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                    if (prefix != null) {\n                        buffer.append(prefix);\n                        buffer.append(':');\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName());\n                        buffer.append(']');\n                    } else {\n                        buffer.append(\"node()\");\n                        buffer.append('[');\n                        buffer.append(getRelativePositionOfElement());\n                        buffer.append(']');\n                    }\n                }\n            }\n        } else if ((node instanceof org.jdom.Text) || (node instanceof org.jdom.CDATA)) {\n            buffer.append(\"/text()\");\n            buffer.append('[').append(getRelativePositionOfTextNode()).append(']');\n        } else if (node instanceof org.jdom.ProcessingInstruction) {\n            java.lang.String target = ((org.jdom.ProcessingInstruction) (node)).getTarget();\n            buffer.append(\"/processing-instruction(\\'\").append(target).append(\"')\");\n            buffer.append('[').append(getRelativePositionOfPI(target)).append(']');\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        if (node instanceof org.jdom.Element) {\n            java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n            if (!(parent instanceof org.jdom.Element)) {\n                return 1;\n            }\n            java.util.List children = ((org.jdom.Element) (parent)).getContent();\n            int count = 0;\n            java.lang.String name = ((org.jdom.Element) (node)).getQualifiedName();\n            for (int i = 0; i < children.size(); i++) {\n                java.lang.Object child = children.get(i);\n                if ((child instanceof org.jdom.Element) && ((org.jdom.Element) (child)).getQualifiedName().equals(name)) {\n                    count++;\n                }\n                if (child == node) {\n                    break;\n                }\n            }\n            return count;\n        }\n        return 1;\n    }\n\n    private int getRelativePositionOfElement() {\n        java.lang.Object parent = ((org.jdom.Element) (node)).getParent();\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children;\n        if (parent instanceof org.jdom.Element) {\n            children = ((org.jdom.Element) (parent)).getContent();\n        } else {\n            children = ((org.jdom.Document) (parent)).getContent();\n        }\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if (child instanceof org.jdom.Element) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        org.jdom.Element parent;\n        if (node instanceof org.jdom.Text) {\n            parent = ((org.jdom.Element) (((org.jdom.Text) (node)).getParent()));\n        } else {\n            parent = ((org.jdom.Element) (((org.jdom.CDATA) (node)).getParent()));\n        }\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if ((child instanceof org.jdom.Text) || (child instanceof org.jdom.CDATA)) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        org.jdom.Element parent = ((org.jdom.Element) (((org.jdom.ProcessingInstruction) (node)).getParent()));\n        if (parent == null) {\n            return 1;\n        }\n        java.util.List children = parent.getContent();\n        int count = 0;\n        for (int i = 0; i < children.size(); i++) {\n            java.lang.Object child = children.get(i);\n            if ((child instanceof org.jdom.ProcessingInstruction) && ((target == null) || target.equals(((org.jdom.ProcessingInstruction) (child)).getTarget()))) {\n                count++;\n            }\n            if (child == node) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        if (object == this) {\n            return true;\n        }\n        if (!(object instanceof org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer)) {\n            return false;\n        }\n        org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer other = ((org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer) (object));\n        return node == other.node;\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Factory is not set on the JXPathContext - cannot create path: \" + asPath());\n        }\n        return factory;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "attrName",
            "src_parent": "e.getAttributeValue(attrName, ns)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "ns",
            "src_parent": "e.getAttributeValue(attrName, ns)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (node instanceof org.jdom.Element) {\n    return ((org.jdom.Element) (node)).getTextTrim();\n}",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        return ((org.jdom.Element) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    if (node instanceof org.jdom.Text) {\n        return ((org.jdom.Text) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.CDATA) {\n        return ((org.jdom.CDATA) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (node instanceof org.jdom.Text) {\n    return ((org.jdom.Text) (node)).getTextTrim();\n}",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        return ((org.jdom.Element) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    if (node instanceof org.jdom.Text) {\n        return ((org.jdom.Text) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.CDATA) {\n        return ((org.jdom.CDATA) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (node instanceof org.jdom.CDATA) {\n    return ((org.jdom.CDATA) (node)).getTextTrim();\n}",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        return ((org.jdom.Element) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    if (node instanceof org.jdom.Text) {\n        return ((org.jdom.Text) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.CDATA) {\n        return ((org.jdom.CDATA) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (node instanceof org.jdom.ProcessingInstruction) {\n    java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData();\n    if (text != null) {\n        text = text.trim();\n    }\n    return text;\n}",
            "src_parent": "{\n    if (node instanceof org.jdom.Element) {\n        return ((org.jdom.Element) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.Comment) {\n        java.lang.String text = ((org.jdom.Comment) (node)).getText();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    if (node instanceof org.jdom.Text) {\n        return ((org.jdom.Text) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.CDATA) {\n        return ((org.jdom.CDATA) (node)).getTextTrim();\n    }\n    if (node instanceof org.jdom.ProcessingInstruction) {\n        java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData();\n        if (text != null) {\n            text = text.trim();\n        }\n        return text;\n    }\n    return null;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "null",
            "src_parent": "return null",
            "src_parent_type": "Return",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "return ((org.jdom.CDATA) (node)).getTextTrim()",
            "src_parent": "{\n    return ((org.jdom.CDATA) (node)).getTextTrim();\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "text.trim()",
            "src_parent": "text = text.trim()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "\"lang\"",
            "src_parent": "e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE)",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "Namespace.XML_NAMESPACE",
            "src_parent": "e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE)",
            "src_parent_type": "Invocation",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "protected java.lang.String getLanguage() {\n    java.lang.Object n = node;\n    while (n != null) {\n        if (n instanceof org.jdom.Element) {\n            org.jdom.Element e = ((org.jdom.Element) (n));\n            java.lang.String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE);\n            if ((attr != null) && (!attr.equals(\"\"))) {\n                return attr;\n            }\n        }\n        n = org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.nodeParent(n);\n    } \n    return null;\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "protected java.lang.String getLanguage() {\n    return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "node instanceof org.jdom.Element",
            "dst_parent": "if (node instanceof org.jdom.Element) {\n    return ((org.jdom.Element) (node)).getTextTrim();\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "node instanceof org.jdom.Element",
            "src_parent": "if (node instanceof org.jdom.Element) {\n    java.lang.StringBuffer buf = new java.lang.StringBuffer();\n    for (org.apache.commons.jxpath.ri.model.NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = children.getNodePointer();\n        if ((ptr.getImmediateNode() instanceof org.jdom.Element) || (ptr.getImmediateNode() instanceof org.jdom.Text)) {\n            buf.append(ptr.getValue());\n        }\n    }\n    return buf.toString();\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "node instanceof org.jdom.Text",
            "dst_parent": "if (node instanceof org.jdom.Text) {\n    return ((org.jdom.Text) (node)).getTextTrim();\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "node instanceof org.jdom.Text",
            "src_parent": "if (node instanceof org.jdom.Text) {\n    result = ((org.jdom.Text) (node)).getText();\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    return ((org.jdom.CDATA) (node)).getTextTrim();\n}",
            "dst_parent": "if (node instanceof org.jdom.CDATA) {\n    return ((org.jdom.CDATA) (node)).getTextTrim();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    result = ((org.jdom.Text) (node)).getText();\n}",
            "src_parent": "if (node instanceof org.jdom.Text) {\n    result = ((org.jdom.Text) (node)).getText();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "node instanceof org.jdom.ProcessingInstruction",
            "dst_parent": "if (node instanceof org.jdom.ProcessingInstruction) {\n    java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData();\n    if (text != null) {\n        text = text.trim();\n    }\n    return text;\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "node instanceof org.jdom.ProcessingInstruction",
            "src_parent": "if (node instanceof org.jdom.ProcessingInstruction) {\n    result = ((org.jdom.ProcessingInstruction) (node)).getData();\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return ((org.jdom.Text) (node)).getTextTrim()",
            "dst_parent": "{\n    return ((org.jdom.Text) (node)).getTextTrim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE)",
            "src_parent": "{\n    return org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE);\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "node",
            "dst_parent": "node instanceof org.jdom.CDATA",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "node",
            "src_parent": "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer.findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jdom.CDATA",
            "dst_parent": "node instanceof org.jdom.CDATA",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "TypeAccess",
            "operator": "MOV",
            "src": "org.jdom.Text",
            "src_parent": "(ptr.getImmediateNode() instanceof org.jdom.Text)",
            "src_parent_type": "BinaryOperator",
            "src_type": "TypeAccess"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.jdom.CDATA) (node)).getTextTrim()",
            "dst_parent": "return ((org.jdom.CDATA) (node)).getTextTrim()",
            "dst_parent_type": "Return",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "((org.jdom.Text) (node)).getText()",
            "src_parent": "result = ((org.jdom.Text) (node)).getText()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.String",
            "src_parent": "java.lang.String result = null",
            "src_parent_type": "LocalVariable",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((org.jdom.ProcessingInstruction) (node)).getData()",
            "dst_parent": "java.lang.String text = ((org.jdom.ProcessingInstruction) (node)).getData()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "((org.jdom.ProcessingInstruction) (node)).getData()",
            "src_parent": "result = ((org.jdom.ProcessingInstruction) (node)).getData()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    text = text.trim();\n}",
            "dst_parent": "if (text != null) {\n    text = text.trim();\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    result = ((org.jdom.ProcessingInstruction) (node)).getData();\n}",
            "src_parent": "if (node instanceof org.jdom.ProcessingInstruction) {\n    result = ((org.jdom.ProcessingInstruction) (node)).getData();\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "JDOMNodePointer"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "protected java.lang.String getLanguage() {\n    org.w3c.dom.Node n = node;\n    while (n != null) {\n        if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n            org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n            java.lang.String attr = e.getAttribute(\"xml:lang\");\n            if ((attr != null) && (!attr.equals(\"\"))) {\n                return attr;\n            }\n        }\n        n = n.getParentNode();\n    } \n    return null;\n}",
            "dst_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected java.lang.String getLanguage() {\n        org.w3c.dom.Node n = node;\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(\"xml:lang\");\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : text.trim();\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n                buf.append(child.getNodeValue());\n            } else {\n                buf.append(stringValue(child));\n            }\n        }\n        return buf.toString().trim();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n    while (n != null) {\n        if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n            org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n            java.lang.String attr = e.getAttribute(attrName);\n            if ((attr != null) && (!attr.equals(\"\"))) {\n                return attr;\n            }\n        }\n        n = n.getParentNode();\n    } \n    return null;\n}",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(attrName);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public java.lang.Object getValue() {\n    return stringValue(node);\n}",
            "dst_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected java.lang.String getLanguage() {\n        org.w3c.dom.Node n = node;\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(\"xml:lang\");\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : text.trim();\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n                buf.append(child.getNodeValue());\n            } else {\n                buf.append(stringValue(child));\n            }\n        }\n        return buf.toString().trim();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "protected java.lang.String getLanguage() {\n    return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n}",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(attrName);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Object",
            "dst_parent": "public java.lang.Object getValue() {\n    return stringValue(node);\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.String",
            "src_parent": "protected java.lang.String getLanguage() {\n    return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "UPD",
            "src": "java.lang.Object",
            "src_parent": "public java.lang.Object getValue() {\n    if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    return stringValue(node);\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Wrapper",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static",
            "src_parent": "protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n    while (n != null) {\n        if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n            org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n            java.lang.String attr = e.getAttribute(attrName);\n            if ((attr != null) && (!attr.equals(\"\"))) {\n                return attr;\n            }\n        }\n        n = n.getParentNode();\n    } \n    return null;\n}",
            "src_parent_type": "Method",
            "src_type": "Wra"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "attrName",
            "src_parent": "e.getAttribute(attrName)",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE",
            "src_parent": "if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n    java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n    return text == null ? \"\" : text.trim();\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((org.w3c.dom.Comment) (node))",
            "src_parent": "((org.w3c.dom.Comment) (node)).getData()",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "trim ? text.trim() : text",
            "src_parent": "text == null ? \"\" : trim ? text.trim() : text",
            "src_parent_type": "Conditional",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "trim ? text.trim() : text",
            "src_parent": "text == null ? \"\" : trim ? text.trim() : text",
            "src_parent_type": "Conditional",
            "src_type": "Conditional"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public java.lang.Object getValue() {\n    if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    return stringValue(node);\n}",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(attrName);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(attrName);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected java.lang.String getLanguage() {\n        org.w3c.dom.Node n = node;\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(\"xml:lang\");\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : text.trim();\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n                buf.append(child.getNodeValue());\n            } else {\n                buf.append(stringValue(child));\n            }\n        }\n        return buf.toString().trim();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n    buf.append(child.getNodeValue());\n} else {\n    buf.append(stringValue(child));\n}",
            "src_parent": "{\n    org.w3c.dom.Node child = list.item(i);\n    if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n        buf.append(child.getNodeValue());\n    } else {\n        buf.append(stringValue(child));\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "buf.toString().trim()",
            "src_parent": "return buf.toString().trim()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "((org.w3c.dom.Comment) (node))",
            "src_parent": "((org.w3c.dom.Comment) (node)).getData()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "\"xml:lang\"",
            "src_parent": "e.getAttribute(\"xml:lang\")",
            "src_parent_type": "Invocation",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "public java.lang.Object getValue() {\n    return stringValue(node);\n}",
            "dst_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected java.lang.String getLanguage() {\n        org.w3c.dom.Node n = node;\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(\"xml:lang\");\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : text.trim();\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n                buf.append(child.getNodeValue());\n            } else {\n                buf.append(stringValue(child));\n            }\n        }\n        return buf.toString().trim();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "MOV",
            "src": "protected java.lang.String getLanguage() {\n    return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n}",
            "src_parent": "public class DOMNodePointer extends org.apache.commons.jxpath.ri.model.NodePointer {\n    private static final long serialVersionUID = -8751046933894857319L;\n\n    private org.w3c.dom.Node node;\n\n    private java.util.Map namespaces;\n\n    private java.lang.String defaultNamespace;\n\n    private java.lang.String id;\n\n    public static final java.lang.String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";\n\n    public static final java.lang.String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale) {\n        super(null, locale);\n        this.node = node;\n    }\n\n    public DOMNodePointer(org.w3c.dom.Node node, java.util.Locale locale, java.lang.String id) {\n        super(null, locale);\n        this.node = node;\n        this.id = id;\n    }\n\n    public DOMNodePointer(org.apache.commons.jxpath.ri.model.NodePointer parent, org.w3c.dom.Node node) {\n        super(parent);\n        this.node = node;\n    }\n\n    public boolean testNode(org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.testNode(node, test);\n    }\n\n    public static boolean testNode(org.w3c.dom.Node node, org.apache.commons.jxpath.ri.compiler.NodeTest test) {\n        if (test == null) {\n            return true;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest) {\n            if (node.getNodeType() != org.w3c.dom.Node.ELEMENT_NODE) {\n                return false;\n            }\n            org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (test));\n            org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName();\n            java.lang.String namespaceURI = nodeNameTest.getNamespaceURI();\n            boolean wildcard = nodeNameTest.isWildcard();\n            java.lang.String testPrefix = testName.getPrefix();\n            if (wildcard && (testPrefix == null)) {\n                return true;\n            }\n            if (wildcard || testName.getName().equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node))) {\n                java.lang.String nodeNS = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n                return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(namespaceURI, nodeNS);\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.NodeTypeTest) {\n            int nodeType = node.getNodeType();\n            switch (((org.apache.commons.jxpath.ri.compiler.NodeTypeTest) (test)).getNodeType()) {\n                case NODE_TYPE_NODE :\n                    return (nodeType == org.w3c.dom.Node.ELEMENT_NODE) || (nodeType == org.w3c.dom.Node.DOCUMENT_NODE);\n                case NODE_TYPE_TEXT :\n                    return (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE) || (nodeType == org.w3c.dom.Node.TEXT_NODE);\n                case NODE_TYPE_COMMENT :\n                    return nodeType == org.w3c.dom.Node.COMMENT_NODE;\n                case NODE_TYPE_PI :\n                    return nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE;\n            }\n            return false;\n        }\n        if (test instanceof org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) {\n            if (node.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n                java.lang.String testPI = ((org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest) (test)).getTarget();\n                java.lang.String nodePI = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                return testPI.equals(nodePI);\n            }\n        }\n        return false;\n    }\n\n    private static boolean equalStrings(java.lang.String s1, java.lang.String s2) {\n        if (s1 == s2) {\n            return true;\n        }\n        s1 = (s1 == null) ? \"\" : s1.trim();\n        s2 = (s2 == null) ? \"\" : s2.trim();\n        return s1.equals(s2);\n    }\n\n    public org.apache.commons.jxpath.ri.QName getName() {\n        java.lang.String ln = null;\n        java.lang.String ns = null;\n        int type = node.getNodeType();\n        if (type == org.w3c.dom.Node.ELEMENT_NODE) {\n            ns = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n            ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n        } else if (type == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            ln = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n        }\n        return new org.apache.commons.jxpath.ri.QName(ns, ln);\n    }\n\n    public java.lang.String getNamespaceURI() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getNamespaceURI(node);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator childIterator(org.apache.commons.jxpath.ri.compiler.NodeTest test, boolean reverse, org.apache.commons.jxpath.ri.model.NodePointer startWith) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNodeIterator(this, test, reverse, startWith);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator attributeIterator(org.apache.commons.jxpath.ri.QName name) {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator(this, name);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer namespacePointer(java.lang.String prefix) {\n        return new org.apache.commons.jxpath.ri.model.dom.NamespacePointer(this, prefix);\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodeIterator namespaceIterator() {\n        return new org.apache.commons.jxpath.ri.model.dom.DOMNamespaceIterator(this);\n    }\n\n    public java.lang.String getNamespaceURI(java.lang.String prefix) {\n        if ((prefix == null) || prefix.equals(\"\")) {\n            return getDefaultNamespaceURI();\n        }\n        if (prefix.equals(\"xml\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XML_NAMESPACE_URI;\n        }\n        if (prefix.equals(\"xmlns\")) {\n            return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.XMLNS_NAMESPACE_URI;\n        }\n        java.lang.String namespace = null;\n        if (namespaces == null) {\n            namespaces = new java.util.HashMap();\n        } else {\n            namespace = ((java.lang.String) (namespaces.get(prefix)));\n        }\n        if (namespace == null) {\n            java.lang.String qname = \"xmlns:\" + prefix;\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                    if (attr != null) {\n                        namespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n            if ((namespace == null) || namespace.equals(\"\")) {\n                namespace = org.apache.commons.jxpath.ri.model.NodePointer.UNKNOWN_NAMESPACE;\n            }\n        }\n        namespaces.put(prefix, namespace);\n        if (namespace == UNKNOWN_NAMESPACE) {\n            return null;\n        }\n        return namespace;\n    }\n\n    public java.lang.String getDefaultNamespaceURI() {\n        if (defaultNamespace == null) {\n            org.w3c.dom.Node aNode = node;\n            if (aNode instanceof org.w3c.dom.Document) {\n                aNode = ((org.w3c.dom.Document) (aNode)).getDocumentElement();\n            }\n            while (aNode != null) {\n                if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                    org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(\"xmlns\");\n                    if (attr != null) {\n                        defaultNamespace = attr.getValue();\n                        break;\n                    }\n                }\n                aNode = aNode.getParentNode();\n            } \n        }\n        if (defaultNamespace == null) {\n            defaultNamespace = \"\";\n        }\n        return defaultNamespace.equals(\"\") ? null : defaultNamespace;\n    }\n\n    public java.lang.Object getBaseValue() {\n        return node;\n    }\n\n    public java.lang.Object getImmediateNode() {\n        return node;\n    }\n\n    public boolean isActual() {\n        return true;\n    }\n\n    public boolean isCollection() {\n        return false;\n    }\n\n    public int getLength() {\n        return 1;\n    }\n\n    public boolean isLeaf() {\n        return !node.hasChildNodes();\n    }\n\n    public boolean isLanguage(java.lang.String lang) {\n        java.lang.String current = getLanguage();\n        return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());\n    }\n\n    protected static java.lang.String findEnclosingAttribute(org.w3c.dom.Node n, java.lang.String attrName) {\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n                java.lang.String attr = e.getAttribute(attrName);\n                if ((attr != null) && (!attr.equals(\"\"))) {\n                    return attr;\n                }\n            }\n            n = n.getParentNode();\n        } \n        return null;\n    }\n\n    protected java.lang.String getLanguage() {\n        return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n    }\n\n    public void setValue(java.lang.Object value) {\n        if ((node.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (node.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n            if ((string != null) && (!string.equals(\"\"))) {\n                node.setNodeValue(string);\n            } else {\n                node.getParentNode().removeChild(node);\n            }\n        } else {\n            org.w3c.dom.NodeList children = node.getChildNodes();\n            int count = children.getLength();\n            for (int i = count; (--i) >= 0;) {\n                org.w3c.dom.Node child = children.item(i);\n                node.removeChild(child);\n            }\n            if (value instanceof org.w3c.dom.Node) {\n                org.w3c.dom.Node valueNode = ((org.w3c.dom.Node) (value));\n                if ((valueNode instanceof org.w3c.dom.Element) || (valueNode instanceof org.w3c.dom.Document)) {\n                    children = valueNode.getChildNodes();\n                    for (int i = 0; i < children.getLength(); i++) {\n                        org.w3c.dom.Node child = children.item(i);\n                        node.appendChild(child.cloneNode(true));\n                    }\n                } else {\n                    node.appendChild(valueNode.cloneNode(true));\n                }\n            } else {\n                java.lang.String string = ((java.lang.String) (org.apache.commons.jxpath.util.TypeUtils.convert(value, java.lang.String.class)));\n                if ((string != null) && (!string.equals(\"\"))) {\n                    org.w3c.dom.Node textNode = node.getOwnerDocument().createTextNode(string);\n                    node.appendChild(textNode);\n                }\n            }\n        }\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index) {\n        if (index == WHOLE_COLLECTION) {\n            index = 0;\n        }\n        boolean success = getAbstractFactory(context).createObject(context, this, node, name.toString(), index);\n        if (success) {\n            org.apache.commons.jxpath.ri.compiler.NodeTest nodeTest;\n            java.lang.String prefix = name.getPrefix();\n            java.lang.String namespaceURI = (prefix != null) ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();\n            nodeTest = new org.apache.commons.jxpath.ri.compiler.NodeNameTest(name, namespaceURI);\n            org.apache.commons.jxpath.ri.model.NodeIterator it = childIterator(nodeTest, false, null);\n            if ((it != null) && it.setPosition(index + 1)) {\n                return it.getNodePointer();\n            }\n        }\n        throw new org.apache.commons.jxpath.JXPathAbstractFactoryException((((((\"Factory could not create a child node for path: \" + asPath()) + \"/\") + name) + \"[\") + (index + 1)) + \"]\");\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createChild(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name, int index, java.lang.Object value) {\n        org.apache.commons.jxpath.ri.model.NodePointer ptr = createChild(context, name, index);\n        ptr.setValue(value);\n        return ptr;\n    }\n\n    public org.apache.commons.jxpath.ri.model.NodePointer createAttribute(org.apache.commons.jxpath.JXPathContext context, org.apache.commons.jxpath.ri.QName name) {\n        if (!(node instanceof org.w3c.dom.Element)) {\n            return super.createAttribute(context, name);\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String prefix = name.getPrefix();\n        if (prefix != null) {\n            java.lang.String ns = getNamespaceURI(prefix);\n            if (ns == null) {\n                throw new org.apache.commons.jxpath.JXPathException(\"Unknown namespace prefix: \" + prefix);\n            }\n            element.setAttributeNS(ns, name.toString(), \"\");\n        } else if (!element.hasAttribute(name.getName())) {\n            element.setAttribute(name.getName(), \"\");\n        }\n        org.apache.commons.jxpath.ri.model.NodeIterator it = attributeIterator(name);\n        it.setPosition(1);\n        return it.getNodePointer();\n    }\n\n    public void remove() {\n        org.w3c.dom.Node parent = node.getParentNode();\n        if (parent == null) {\n            throw new org.apache.commons.jxpath.JXPathException(\"Cannot remove root DOM node\");\n        }\n        parent.removeChild(node);\n    }\n\n    public java.lang.String asPath() {\n        if (id != null) {\n            return (\"id('\" + escape(id)) + \"')\";\n        }\n        java.lang.StringBuffer buffer = new java.lang.StringBuffer();\n        if (parent != null) {\n            buffer.append(parent.asPath());\n        }\n        switch (node.getNodeType()) {\n            case org.w3c.dom.Node.ELEMENT_NODE :\n                if (parent instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) {\n                    if ((buffer.length() == 0) || (buffer.charAt(buffer.length() - 1) != '/')) {\n                        buffer.append('/');\n                    }\n                    java.lang.String ln = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(node);\n                    java.lang.String nsURI = getNamespaceURI();\n                    if (org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {\n                        buffer.append(ln);\n                        buffer.append('[');\n                        buffer.append(getRelativePositionByName()).append(']');\n                    } else {\n                        java.lang.String prefix = getNamespaceResolver().getPrefix(nsURI);\n                        if (prefix != null) {\n                            buffer.append(prefix);\n                            buffer.append(':');\n                            buffer.append(ln);\n                            buffer.append('[');\n                            buffer.append(getRelativePositionByName());\n                            buffer.append(']');\n                        } else {\n                            buffer.append(\"node()\");\n                            buffer.append('[');\n                            buffer.append(getRelativePositionOfElement());\n                            buffer.append(']');\n                        }\n                    }\n                }\n                break;\n            case org.w3c.dom.Node.TEXT_NODE :\n            case org.w3c.dom.Node.CDATA_SECTION_NODE :\n                buffer.append(\"/text()\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfTextNode()).append(']');\n                break;\n            case org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE :\n                java.lang.String target = ((org.w3c.dom.ProcessingInstruction) (node)).getTarget();\n                buffer.append(\"/processing-instruction(\\'\");\n                buffer.append(target).append(\"')\");\n                buffer.append('[');\n                buffer.append(getRelativePositionOfPI(target)).append(']');\n                break;\n            case org.w3c.dom.Node.DOCUMENT_NODE :\n        }\n        return buffer.toString();\n    }\n\n    private java.lang.String escape(java.lang.String string) {\n        int index = string.indexOf('\\'');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&apos;\") + string.substring(index + 1);\n            index = string.indexOf('\\'');\n        } \n        index = string.indexOf('\\\"');\n        while (index != (-1)) {\n            string = (string.substring(0, index) + \"&quot;\") + string.substring(index + 1);\n            index = string.indexOf('\\\"');\n        } \n        return string;\n    }\n\n    private int getRelativePositionByName() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                java.lang.String nm = n.getNodeName();\n                if (nm.equals(node.getNodeName())) {\n                    count++;\n                }\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfElement() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfTextNode() {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.TEXT_NODE) || (n.getNodeType() == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    private int getRelativePositionOfPI(java.lang.String target) {\n        int count = 1;\n        org.w3c.dom.Node n = node.getPreviousSibling();\n        while (n != null) {\n            if ((n.getNodeType() == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) && ((org.w3c.dom.ProcessingInstruction) (n)).getTarget().equals(target)) {\n                count++;\n            }\n            n = n.getPreviousSibling();\n        } \n        return count;\n    }\n\n    public int hashCode() {\n        return java.lang.System.identityHashCode(node);\n    }\n\n    public boolean equals(java.lang.Object object) {\n        return (object == this) || ((object instanceof org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) && (node == ((org.apache.commons.jxpath.ri.model.dom.DOMNodePointer) (object)).node));\n    }\n\n    public static java.lang.String getPrefix(org.w3c.dom.Node node) {\n        java.lang.String prefix = node.getPrefix();\n        if (prefix != null) {\n            return prefix;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? null : name.substring(0, index);\n    }\n\n    public static java.lang.String getLocalName(org.w3c.dom.Node node) {\n        java.lang.String localName = node.getLocalName();\n        if (localName != null) {\n            return localName;\n        }\n        java.lang.String name = node.getNodeName();\n        int index = name.lastIndexOf(':');\n        return index < 0 ? name : name.substring(index + 1);\n    }\n\n    public static java.lang.String getNamespaceURI(org.w3c.dom.Node node) {\n        if (node instanceof org.w3c.dom.Document) {\n            node = ((org.w3c.dom.Document) (node)).getDocumentElement();\n        }\n        org.w3c.dom.Element element = ((org.w3c.dom.Element) (node));\n        java.lang.String uri = element.getNamespaceURI();\n        if (uri != null) {\n            return uri;\n        }\n        java.lang.String prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getPrefix(node);\n        java.lang.String qname = (prefix == null) ? \"xmlns\" : \"xmlns:\" + prefix;\n        org.w3c.dom.Node aNode = node;\n        while (aNode != null) {\n            if (aNode.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n                org.w3c.dom.Attr attr = ((org.w3c.dom.Element) (aNode)).getAttributeNode(qname);\n                if (attr != null) {\n                    return attr.getValue();\n                }\n            }\n            aNode = aNode.getParentNode();\n        } \n        return null;\n    }\n\n    public java.lang.Object getValue() {\n        if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n            java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n            return text == null ? \"\" : text.trim();\n        }\n        return stringValue(node);\n    }\n\n    private java.lang.String stringValue(org.w3c.dom.Node node) {\n        int nodeType = node.getNodeType();\n        if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n            return \"\";\n        }\n        boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n        if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n            java.lang.String text = node.getNodeValue();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n            java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n            return text == null ? \"\" : trim ? text.trim() : text;\n        }\n        org.w3c.dom.NodeList list = node.getChildNodes();\n        java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n        for (int i = 0; i < list.getLength(); i++) {\n            org.w3c.dom.Node child = list.item(i);\n            buf.append(stringValue(child));\n        }\n        return buf.toString();\n    }\n\n    public org.apache.commons.jxpath.Pointer getPointerByID(org.apache.commons.jxpath.JXPathContext context, java.lang.String id) {\n        org.w3c.dom.Document document = (node.getNodeType() == org.w3c.dom.Node.DOCUMENT_NODE) ? ((org.w3c.dom.Document) (node)) : node.getOwnerDocument();\n        org.w3c.dom.Element element = document.getElementById(id);\n        return element == null ? ((org.apache.commons.jxpath.Pointer) (new org.apache.commons.jxpath.ri.model.beans.NullPointer(getLocale(), id))) : new org.apache.commons.jxpath.ri.model.dom.DOMNodePointer(element, getLocale(), id);\n    }\n\n    private org.apache.commons.jxpath.AbstractFactory getAbstractFactory(org.apache.commons.jxpath.JXPathContext context) {\n        org.apache.commons.jxpath.AbstractFactory factory = context.getFactory();\n        if (factory == null) {\n            throw new org.apache.commons.jxpath.JXPathException((\"Factory is not set on the JXPathContext - \" + \"cannot create path: \") + asPath());\n        }\n        return factory;\n    }\n\n    public int compareChildNodePointers(org.apache.commons.jxpath.ri.model.NodePointer pointer1, org.apache.commons.jxpath.ri.model.NodePointer pointer2) {\n        org.w3c.dom.Node node1 = ((org.w3c.dom.Node) (pointer1.getBaseValue()));\n        org.w3c.dom.Node node2 = ((org.w3c.dom.Node) (pointer2.getBaseValue()));\n        if (node1 == node2) {\n            return 0;\n        }\n        int t1 = node1.getNodeType();\n        int t2 = node2.getNodeType();\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 != org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return -1;\n        }\n        if ((t1 != org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            return 1;\n        }\n        if ((t1 == org.w3c.dom.Node.ATTRIBUTE_NODE) && (t2 == org.w3c.dom.Node.ATTRIBUTE_NODE)) {\n            org.w3c.dom.NamedNodeMap map = ((org.w3c.dom.Node) (getNode())).getAttributes();\n            int length = map.getLength();\n            for (int i = 0; i < length; i++) {\n                org.w3c.dom.Node n = map.item(i);\n                if (n == node1) {\n                    return -1;\n                }\n                if (n == node2) {\n                    return 1;\n                }\n            }\n            return 0;\n        }\n        org.w3c.dom.Node current = node.getFirstChild();\n        while (current != null) {\n            if (current == node1) {\n                return -1;\n            }\n            if (current == node2) {\n                return 1;\n            }\n            current = current.getNextSibling();\n        } \n        return 0;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "protected java.lang.String getLanguage() {\n    org.w3c.dom.Node n = node;\n    while (n != null) {\n        if (n.getNodeType() == org.w3c.dom.Node.ELEMENT_NODE) {\n            org.w3c.dom.Element e = ((org.w3c.dom.Element) (n));\n            java.lang.String attr = e.getAttribute(\"xml:lang\");\n            if ((attr != null) && (!attr.equals(\"\"))) {\n                return attr;\n            }\n        }\n        n = n.getParentNode();\n    } \n    return null;\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "protected java.lang.String getLanguage() {\n    return org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\");\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "TypeReference",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.String",
            "dst_parent": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Method",
            "dst_type": "TypeReference",
            "operator": "MOV",
            "src": "java.lang.Object",
            "src_parent": "public java.lang.Object getValue() {\n    if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    return stringValue(node);\n}",
            "src_parent_type": "Method",
            "src_type": "TypeReference"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "VirtualElement",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "VE: Modifiers_Method",
            "dst_parent": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Method",
            "dst_type": "VirtualEle",
            "operator": "MOV",
            "src": "VE: Modifiers_Method",
            "src_parent": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Method",
            "src_type": "VirtualEle"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.w3c.dom.Node node",
            "dst_parent": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "org.w3c.dom.Node node",
            "src_parent": "private java.lang.String stringValue(org.w3c.dom.Node node) {\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "int nodeType = node.getNodeType()",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "int nodeType = node.getNodeType()",
            "src_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n    java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n    return text == null ? \"\" : text.trim();\n}",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n    java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n    return text == null ? \"\" : text.trim();\n}",
            "src_parent": "{\n    if (node.getNodeType() == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    return stringValue(node);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n    java.lang.String text = node.getNodeValue();\n    return text == null ? \"\" : text.trim();\n}",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n    java.lang.String text = node.getNodeValue();\n    return text == null ? \"\" : trim ? text.trim() : text;\n}",
            "src_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n    java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n    return text == null ? \"\" : text.trim();\n}",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n    java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n    return text == null ? \"\" : trim ? text.trim() : text;\n}",
            "src_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.w3c.dom.NodeList list = node.getChildNodes()",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "org.w3c.dom.NodeList list = node.getChildNodes()",
            "src_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.StringBuffer buf = new java.lang.StringBuffer(16)",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "LocalVariable",
            "operator": "MOV",
            "src": "java.lang.StringBuffer buf = new java.lang.StringBuffer(16)",
            "src_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "for (int i = 0; i < list.getLength(); i++) {\n    org.w3c.dom.Node child = list.item(i);\n    if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n        buf.append(child.getNodeValue());\n    } else {\n        buf.append(stringValue(child));\n    }\n}",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "For",
            "operator": "MOV",
            "src": "for (int i = 0; i < list.getLength(); i++) {\n    org.w3c.dom.Node child = list.item(i);\n    buf.append(stringValue(child));\n}",
            "src_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "For"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "return buf.toString().trim()",
            "dst_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        java.lang.String text = ((org.w3c.dom.Comment) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : text.trim();\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : text.trim();\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        if (child.getNodeType() == org.w3c.dom.Node.TEXT_NODE) {\n            buf.append(child.getNodeValue());\n        } else {\n            buf.append(stringValue(child));\n        }\n    }\n    return buf.toString().trim();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Return",
            "operator": "MOV",
            "src": "return buf.toString()",
            "src_parent": "{\n    int nodeType = node.getNodeType();\n    if (nodeType == org.w3c.dom.Node.COMMENT_NODE) {\n        return \"\";\n    }\n    boolean trim = !\"preserve\".equals(org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:space\"));\n    if ((nodeType == org.w3c.dom.Node.TEXT_NODE) || (nodeType == org.w3c.dom.Node.CDATA_SECTION_NODE)) {\n        java.lang.String text = node.getNodeValue();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    if (nodeType == org.w3c.dom.Node.PROCESSING_INSTRUCTION_NODE) {\n        java.lang.String text = ((org.w3c.dom.ProcessingInstruction) (node)).getData();\n        return text == null ? \"\" : trim ? text.trim() : text;\n    }\n    org.w3c.dom.NodeList list = node.getChildNodes();\n    java.lang.StringBuffer buf = new java.lang.StringBuffer(16);\n    for (int i = 0; i < list.getLength(); i++) {\n        org.w3c.dom.Node child = list.item(i);\n        buf.append(stringValue(child));\n    }\n    return buf.toString();\n}",
            "src_parent_type": "Block",
            "src_type": "Return"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "node",
            "dst_parent": "org.w3c.dom.Node n = node",
            "dst_parent_type": "LocalVariable",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "node",
            "src_parent": "org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.findEnclosingAttribute(node, \"xml:lang\")",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "buf.toString()",
            "dst_parent": "buf.toString().trim()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "buf.toString()",
            "src_parent": "return buf.toString()",
            "src_parent_type": "Return",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "For",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "buf.append(stringValue(child))",
            "dst_parent": "{\n    buf.append(stringValue(child));\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "buf.append(stringValue(child))",
            "src_parent": "{\n    org.w3c.dom.Node child = list.item(i);\n    buf.append(stringValue(child));\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "text.trim()",
            "dst_parent": "text == null ? \"\" : text.trim()",
            "dst_parent_type": "Conditional",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "text.trim()",
            "src_parent": "trim ? text.trim() : text",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "text.trim()",
            "dst_parent": "text == null ? \"\" : text.trim()",
            "dst_parent_type": "Conditional",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "text.trim()",
            "src_parent": "trim ? text.trim() : text",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "DOMNodePointer"
    }
  ],
  "id": "JxPath_4"
}