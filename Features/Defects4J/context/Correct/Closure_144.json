{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public com.google.javascript.rhino.jstype.FunctionBuilder withReturnType(com.google.javascript.rhino.jstype.JSType returnType, boolean inferred) {\n    this.returnType = returnType;\n    this.inferredReturnType = inferred;\n    return this;\n}",
            "src_parent": "public final class FunctionBuilder {\n    private final com.google.javascript.rhino.jstype.JSTypeRegistry registry;\n\n    private java.lang.String name = null;\n\n    private com.google.javascript.rhino.Node sourceNode = null;\n\n    private com.google.javascript.rhino.Node parametersNode = null;\n\n    private com.google.javascript.rhino.jstype.JSType returnType = null;\n\n    private com.google.javascript.rhino.jstype.ObjectType typeOfThis = null;\n\n    private java.lang.String templateTypeName = null;\n\n    private boolean inferredReturnType = false;\n\n    private boolean isConstructor = false;\n\n    private boolean isNativeType = false;\n\n    public FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry registry) {\n        this.registry = registry;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withName(java.lang.String name) {\n        this.name = name;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withSourceNode(com.google.javascript.rhino.Node sourceNode) {\n        this.sourceNode = sourceNode;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withParams(com.google.javascript.rhino.jstype.FunctionParamBuilder params) {\n        this.parametersNode = params.build();\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withParamsNode(com.google.javascript.rhino.Node parametersNode) {\n        this.parametersNode = parametersNode;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withReturnType(com.google.javascript.rhino.jstype.JSType returnType) {\n        this.returnType = returnType;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withReturnType(com.google.javascript.rhino.jstype.JSType returnType, boolean inferred) {\n        this.returnType = returnType;\n        this.inferredReturnType = inferred;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withInferredReturnType(com.google.javascript.rhino.jstype.JSType returnType) {\n        this.returnType = returnType;\n        this.inferredReturnType = true;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withTypeOfThis(com.google.javascript.rhino.jstype.ObjectType typeOfThis) {\n        this.typeOfThis = typeOfThis;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder withTemplateName(java.lang.String templateTypeName) {\n        this.templateTypeName = templateTypeName;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder forConstructor() {\n        this.isConstructor = true;\n        return this;\n    }\n\n    com.google.javascript.rhino.jstype.FunctionBuilder forNativeType() {\n        this.isNativeType = true;\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionBuilder copyFromOtherFunction(com.google.javascript.rhino.jstype.FunctionType otherType) {\n        this.name = otherType.getReferenceName();\n        this.sourceNode = otherType.getSource();\n        this.parametersNode = otherType.getParametersNode();\n        this.returnType = otherType.getReturnType();\n        this.typeOfThis = otherType.getTypeOfThis();\n        this.templateTypeName = otherType.getTemplateTypeName();\n        this.isConstructor = otherType.isConstructor();\n        this.isNativeType = otherType.isNativeObjectType();\n        return this;\n    }\n\n    public com.google.javascript.rhino.jstype.FunctionType build() {\n        return new com.google.javascript.rhino.jstype.FunctionType(registry, name, sourceNode, new com.google.javascript.rhino.jstype.ArrowType(registry, parametersNode, returnType, inferredReturnType), typeOfThis, templateTypeName, isConstructor, isNativeType);\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "FunctionBuilder"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "source",
            "src_parent": "new com.google.javascript.rhino.jstype.FunctionType(registry, null, source, new com.google.javascript.rhino.jstype.ArrowType(registry, call.parameters, newReturnType, inferred), typeOfThis, null, false, false)",
            "src_parent_type": "ConstructorCall",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "null",
            "src_parent": "new com.google.javascript.rhino.jstype.FunctionType(registry, null, null, new com.google.javascript.rhino.jstype.ArrowType(registry, call.parameters, newReturnType, inferred), typeOfThis, null, false, false)",
            "src_parent_type": "ConstructorCall",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Return",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "new com.google.javascript.rhino.jstype.FunctionType(registry, null, null, new com.google.javascript.rhino.jstype.ArrowType(registry, call.parameters, newReturnType, inferred), typeOfThis, null, false, false)",
            "dst_parent_type": "ConstructorCall",
            "dst_type": "Literal",
            "operator": "MOV",
            "src": "null",
            "src_parent": "new com.google.javascript.rhino.jstype.FunctionType(registry, null, source, new com.google.javascript.rhino.jstype.ArrowType(registry, call.parameters, newReturnType, inferred), typeOfThis, null, false, false)",
            "src_parent_type": "ConstructorCall",
            "src_type": "Literal"
          }
        }
      ],
      "file_name": "FunctionType"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).buildAndRegister()",
            "dst_parent": "functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).buildAndRegister()",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).inferReturnStatements(fnBlock)",
            "src_parent": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).buildAndRegister()",
            "dst_parent": "functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).buildAndRegister()",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).inferReturnStatements(fnBlock)",
            "src_parent": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.rhino.Node fnBlock = (isFnLiteral) ? parametersNode.getNext() : null",
            "src_parent": "{\n    com.google.javascript.rhino.jstype.FunctionType functionType = null;\n    if ((rValue != null) && rValue.isQualifiedName()) {\n        com.google.javascript.jscomp.Scope.Var var = scope.getVar(rValue.getQualifiedName());\n        if ((var != null) && (var.getType() instanceof com.google.javascript.rhino.jstype.FunctionType)) {\n            functionType = ((com.google.javascript.rhino.jstype.FunctionType) (var.getType()));\n            if ((functionType != null) && functionType.isConstructor()) {\n                typeRegistry.declareType(name, functionType.getInstanceType());\n            }\n        }\n        return functionType;\n    }\n    com.google.javascript.rhino.Node owner = null;\n    if (lvalueNode != null) {\n        owner = com.google.javascript.jscomp.TypedScopeCreator.getPrototypePropertyOwner(lvalueNode);\n    }\n    com.google.javascript.rhino.Node errorRoot = (rValue == null) ? lvalueNode : rValue;\n    boolean isFnLiteral = (rValue != null) && (rValue.getType() == com.google.javascript.rhino.Token.FUNCTION);\n    com.google.javascript.rhino.Node fnRoot = (isFnLiteral) ? rValue : null;\n    com.google.javascript.rhino.Node parametersNode = (isFnLiteral) ? rValue.getFirstChild().getNext() : null;\n    com.google.javascript.rhino.Node fnBlock = (isFnLiteral) ? parametersNode.getNext() : null;\n    if (((functionType == null) && (info != null)) && info.hasType()) {\n        com.google.javascript.rhino.jstype.JSType type = info.getType().evaluate(scope, typeRegistry);\n        type = type.restrictByNotNullOrUndefined();\n        if (type.isFunctionType()) {\n            functionType = ((com.google.javascript.rhino.jstype.FunctionType) (type));\n            functionType.setJSDocInfo(info);\n        }\n    }\n    if (functionType == null) {\n        if ((info == null) || (!com.google.javascript.jscomp.FunctionTypeBuilder.isFunctionTypeDeclaration(info))) {\n            if (((lvalueNode != null) && (lvalueNode.getType() == com.google.javascript.rhino.Token.GETPROP)) && lvalueNode.isQualifiedName()) {\n                com.google.javascript.jscomp.Scope.Var var = scope.getVar(lvalueNode.getFirstChild().getQualifiedName());\n                if (var != null) {\n                    com.google.javascript.rhino.jstype.ObjectType ownerType = com.google.javascript.rhino.jstype.ObjectType.cast(var.getType());\n                    com.google.javascript.rhino.jstype.FunctionType propType = null;\n                    if (ownerType != null) {\n                        java.lang.String propName = lvalueNode.getLastChild().getString();\n                        propType = findOverriddenFunction(ownerType, propName);\n                    }\n                    if (propType != null) {\n                        functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).inferReturnStatements(fnBlock).buildAndRegister();\n                    }\n                }\n            }\n        }\n    }\n    if (functionType == null) {\n        functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).inferReturnStatements(fnBlock).buildAndRegister();\n    }\n    if (rValue != null) {\n        setDeferredType(rValue, functionType);\n    }\n    return functionType;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent": "functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent": "functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent_type": "Assignment",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).buildAndRegister()",
            "dst_parent": "functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).buildAndRegister()",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).inferReturnStatements(fnBlock)",
            "src_parent": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferTemplateTypeName(info).inferReturnType(info).inferInheritance(info).inferThisType(info, owner).inferParameterTypes(parametersNode, info).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).buildAndRegister()",
            "dst_parent": "functionType = new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).buildAndRegister()",
            "dst_parent_type": "Assignment",
            "dst_type": "Invocation",
            "operator": "MOV",
            "src": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).inferReturnStatements(fnBlock)",
            "src_parent": "new com.google.javascript.jscomp.FunctionTypeBuilder(name, compiler, errorRoot, sourceName, scope).setSourceNode(fnRoot).inferFromOverriddenFunction(propType, parametersNode).inferThisType(info, owner).inferReturnStatements(fnBlock).buildAndRegister()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "TypedScopeCreator"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean returnTypeInferred = false;",
            "src_parent": "final class FunctionTypeBuilder {\n    private final java.lang.String fnName;\n\n    private final com.google.javascript.jscomp.AbstractCompiler compiler;\n\n    private final com.google.javascript.jscomp.CodingConvention codingConvention;\n\n    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;\n\n    private final com.google.javascript.rhino.Node errorRoot;\n\n    private final java.lang.String sourceName;\n\n    private final com.google.javascript.jscomp.Scope scope;\n\n    private com.google.javascript.rhino.jstype.JSType returnType = null;\n\n    private boolean returnTypeInferred = false;\n\n    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> implementedInterfaces = null;\n\n    private com.google.javascript.rhino.jstype.ObjectType baseType = null;\n\n    private com.google.javascript.rhino.jstype.ObjectType thisType = null;\n\n    private boolean isConstructor = false;\n\n    private boolean isInterface = false;\n\n    private com.google.javascript.rhino.Node parametersNode = null;\n\n    private com.google.javascript.rhino.Node sourceNode = null;\n\n    private java.lang.String templateTypeName = null;\n\n    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_WITHOUT_TYPEDEF = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_EXTENDS_WITHOUT_TYPEDEF\", \"@extends used without @constructor or @interface for {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_EXTENDS_NON_OBJECT\", \"{0} @extends non-object type {1}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\", \"@implements used without @constructor or @interface for {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType VAR_ARGS_MUST_BE_LAST = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_VAR_ARGS_MUST_BE_LAST\", \"variable length argument must be last\");\n\n    static final com.google.javascript.jscomp.DiagnosticType OPTIONAL_ARG_AT_END = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_OPTIONAL_ARG_AT_END\", \"optional arguments must be at the end\");\n\n    static final com.google.javascript.jscomp.DiagnosticType INEXISTANT_PARAM = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_INEXISTANT_PARAM\", \"parameter {0} does not appear in {1}''s parameter list\");\n\n    static final com.google.javascript.jscomp.DiagnosticType TYPE_REDEFINITION = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_TYPE_REDEFINITION\", \"attempted re-definition of type {0}\\n\" + (\"found   : {1}\\n\" + \"expected: {2}\"));\n\n    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_DUPLICATED = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_TEMPLATE_TYPE_DUPLICATED\", \"Only one parameter type must be the template type\");\n\n    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_EXPECTED = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_TEMPLATE_TYPE_EXPECTED\", \"The template type must be a parameter type\");\n\n    FunctionTypeBuilder(java.lang.String fnName, com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node errorRoot, java.lang.String sourceName, com.google.javascript.jscomp.Scope scope) {\n        com.google.common.base.Preconditions.checkNotNull(errorRoot);\n        this.fnName = (fnName == null) ? \"\" : fnName;\n        this.codingConvention = compiler.getCodingConvention();\n        this.typeRegistry = compiler.getTypeRegistry();\n        this.errorRoot = errorRoot;\n        this.sourceName = sourceName;\n        this.compiler = compiler;\n        this.scope = scope;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder setSourceNode(@javax.annotation.Nullable\n    com.google.javascript.rhino.Node sourceNode) {\n        this.sourceNode = sourceNode;\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferFromOverriddenFunction(com.google.javascript.rhino.jstype.FunctionType oldType, @javax.annotation.Nullable\n    com.google.javascript.rhino.Node paramsParent) {\n        returnType = oldType.getReturnType();\n        if (paramsParent == null) {\n            parametersNode = oldType.getParametersNode();\n            if (parametersNode == null) {\n                parametersNode = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry).build();\n            }\n        } else {\n            com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);\n            java.util.Iterator<com.google.javascript.rhino.Node> oldParams = oldType.getParameters().iterator();\n            boolean warnedAboutArgList = false;\n            for (com.google.javascript.rhino.Node currentParam = paramsParent.getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {\n                if (oldParams.hasNext()) {\n                    paramBuilder.newParameterFromNode(oldParams.next());\n                } else {\n                    warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam), codingConvention.isVarArgsParameter(currentParam));\n                }\n            }\n            parametersNode = paramBuilder.build();\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferReturnType(@javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        returnType = ((info != null) && info.hasReturnType()) ? info.getReturnType().evaluate(scope, typeRegistry) : null;\n        if (((templateTypeName != null) && (returnType != null)) && returnType.restrictByNotNullOrUndefined().isTemplateType()) {\n            reportError(com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED, fnName);\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferReturnStatements(@javax.annotation.Nullable\n    com.google.javascript.rhino.Node functionBlock) {\n        if ((functionBlock == null) || compiler.getInput(sourceName).isExtern()) {\n            return this;\n        }\n        com.google.common.base.Preconditions.checkArgument(functionBlock.getType() == com.google.javascript.rhino.Token.BLOCK);\n        if (returnType == null) {\n            boolean hasNonEmptyReturns = false;\n            java.util.List<com.google.javascript.rhino.Node> worklist = com.google.common.collect.Lists.newArrayList(functionBlock);\n            while (!worklist.isEmpty()) {\n                com.google.javascript.rhino.Node current = worklist.remove(worklist.size() - 1);\n                int cType = current.getType();\n                if (((cType == com.google.javascript.rhino.Token.RETURN) && (current.getFirstChild() != null)) || (cType == com.google.javascript.rhino.Token.THROW)) {\n                    hasNonEmptyReturns = true;\n                    break;\n                } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(current) || com.google.javascript.jscomp.NodeUtil.isControlStructure(current)) {\n                    for (com.google.javascript.rhino.Node child = current.getFirstChild(); child != null; child = child.getNext()) {\n                        worklist.add(child);\n                    }\n                }\n            } \n            if (!hasNonEmptyReturns) {\n                returnType = typeRegistry.getNativeType(com.google.javascript.jscomp.VOID_TYPE);\n                returnTypeInferred = true;\n            }\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferInheritance(@javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (info != null) {\n            isConstructor = info.isConstructor();\n            isInterface = info.isInterface();\n            if (info.hasBaseType()) {\n                if (isConstructor || isInterface) {\n                    baseType = com.google.javascript.rhino.jstype.ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));\n                    if (baseType == null) {\n                        reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                    }\n                } else {\n                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF, fnName);\n                }\n            }\n            if (isConstructor || isInterface) {\n                implementedInterfaces = com.google.common.collect.Lists.newArrayList();\n                for (com.google.javascript.rhino.JSTypeExpression t : info.getImplementedInterfaces()) {\n                    com.google.javascript.rhino.jstype.ObjectType interType = com.google.javascript.rhino.jstype.ObjectType.cast(t.evaluate(scope, typeRegistry));\n                    if (interType != null) {\n                        implementedInterfaces.add(interType);\n                    } else {\n                        reportError(com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, fnName);\n                    }\n                }\n                if (baseType != null) {\n                    com.google.javascript.rhino.jstype.JSType maybeFunctionType = baseType.getConstructor();\n                    if (maybeFunctionType instanceof com.google.javascript.rhino.jstype.FunctionType) {\n                        com.google.javascript.rhino.jstype.FunctionType functionType = baseType.getConstructor();\n                        com.google.common.collect.Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                    }\n                }\n            } else if (info.getImplementedInterfaceCount() > 0) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n            }\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType type) {\n        com.google.javascript.rhino.jstype.ObjectType objType = com.google.javascript.rhino.jstype.ObjectType.cast(type);\n        if ((objType != null) && ((info == null) || (!info.hasType()))) {\n            thisType = objType;\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info, @javax.annotation.Nullable\n    com.google.javascript.rhino.Node owner) {\n        com.google.javascript.rhino.jstype.ObjectType maybeThisType = null;\n        if ((info != null) && info.hasThisType()) {\n            maybeThisType = com.google.javascript.rhino.jstype.ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n        }\n        if (maybeThisType != null) {\n            thisType = maybeThisType;\n        } else if ((owner != null) && ((info == null) || (!info.hasType()))) {\n            java.lang.String ownerTypeName = owner.getQualifiedName();\n            com.google.javascript.rhino.jstype.ObjectType ownerType = com.google.javascript.rhino.jstype.ObjectType.cast(typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n            if (ownerType != null) {\n                thisType = ownerType;\n            }\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(com.google.javascript.rhino.JSDocInfo info) {\n        com.google.javascript.rhino.Node lp = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.LP);\n        for (java.lang.String name : info.getParameterNames()) {\n            lp.addChildToBack(com.google.javascript.rhino.Node.newString(Token.NAME, name));\n        }\n        return inferParameterTypes(lp, info);\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(@javax.annotation.Nullable\n    com.google.javascript.rhino.Node argsParent, @javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (argsParent == null) {\n            if (info == null) {\n                return this;\n            } else {\n                return inferParameterTypes(info);\n            }\n        }\n        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);\n        boolean warnedAboutArgList = false;\n        java.util.Set<java.lang.String> allJsDocParams = (info == null) ? com.google.common.collect.Sets.<java.lang.String>newHashSet() : com.google.common.collect.Sets.newHashSet(info.getParameterNames());\n        boolean foundTemplateType = false;\n        for (com.google.javascript.rhino.Node arg : argsParent.children()) {\n            java.lang.String argumentName = arg.getString();\n            allJsDocParams.remove(argumentName);\n            com.google.javascript.rhino.jstype.JSType parameterType = ((info != null) && info.hasParameterType(argumentName)) ? info.getParameterType(argumentName).evaluate(scope, typeRegistry) : typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE);\n            if ((templateTypeName != null) && parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n                if (foundTemplateType) {\n                    reportError(com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED, fnName);\n                }\n                foundTemplateType = true;\n            }\n            warnedAboutArgList |= addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n        }\n        if ((templateTypeName != null) && (!foundTemplateType)) {\n            reportError(com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED, fnName);\n        }\n        for (java.lang.String inexistentName : allJsDocParams) {\n            reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM, inexistentName, fnName);\n        }\n        parametersNode = builder.build();\n        return this;\n    }\n\n    private boolean isOptionalParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (codingConvention.isOptionalParameter(param)) {\n            return true;\n        }\n        java.lang.String paramName = param.getString();\n        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isOptionalArg();\n    }\n\n    private boolean isVarArgsParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (codingConvention.isVarArgsParameter(param)) {\n            return true;\n        }\n        java.lang.String paramName = param.getString();\n        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isVarArgs();\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferTemplateTypeName(@javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (info != null) {\n            templateTypeName = info.getTemplateTypeName();\n            typeRegistry.setTemplateTypeName(templateTypeName);\n        }\n        return this;\n    }\n\n    private boolean addParameter(com.google.javascript.rhino.jstype.FunctionParamBuilder builder, com.google.javascript.rhino.jstype.JSType paramType, boolean warnedAboutArgList, boolean isOptional, boolean isVarArgs) {\n        boolean emittedWarning = false;\n        if (isOptional) {\n            if ((!builder.addOptionalParams(paramType)) && (!warnedAboutArgList)) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);\n                emittedWarning = true;\n            }\n        } else if (isVarArgs) {\n            if ((!builder.addVarArgs(paramType)) && (!warnedAboutArgList)) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);\n                emittedWarning = true;\n            }\n        } else if ((!builder.addRequiredParams(paramType)) && (!warnedAboutArgList)) {\n            if (builder.hasVarArgs()) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);\n            } else {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);\n            }\n            emittedWarning = true;\n        }\n        return emittedWarning;\n    }\n\n    com.google.javascript.rhino.jstype.FunctionType buildAndRegister() {\n        if (returnType == null) {\n            returnType = typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE);\n        }\n        if (parametersNode == null) {\n            throw new java.lang.IllegalStateException(\"All Function types must have params and a return type\");\n        }\n        com.google.javascript.rhino.jstype.FunctionType fnType;\n        if (isConstructor) {\n            fnType = getOrCreateConstructor();\n        } else if (isInterface) {\n            fnType = typeRegistry.createInterfaceType(fnName, sourceNode);\n            if (scope.isGlobal() && (!fnName.isEmpty())) {\n                typeRegistry.declareType(fnName, fnType.getInstanceType());\n            }\n            maybeSetBaseType(fnType);\n        } else {\n            fnType = new com.google.javascript.rhino.jstype.FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n            maybeSetBaseType(fnType);\n        }\n        if (implementedInterfaces != null) {\n            fnType.setImplementedInterfaces(implementedInterfaces);\n        }\n        typeRegistry.clearTemplateTypeName();\n        return fnType;\n    }\n\n    private void maybeSetBaseType(com.google.javascript.rhino.jstype.FunctionType fnType) {\n        if (baseType != null) {\n            fnType.setPrototypeBasedOn(baseType);\n        }\n    }\n\n    private com.google.javascript.rhino.jstype.FunctionType getOrCreateConstructor() {\n        com.google.javascript.rhino.jstype.FunctionType fnType = typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n        com.google.javascript.rhino.jstype.JSType existingType = typeRegistry.getType(fnName);\n        if (existingType != null) {\n            boolean isInstanceObject = existingType instanceof com.google.javascript.rhino.jstype.InstanceObjectType;\n            if (isInstanceObject || fnName.equals(\"Function\")) {\n                com.google.javascript.rhino.jstype.FunctionType existingFn = (isInstanceObject) ? ((com.google.javascript.rhino.jstype.InstanceObjectType) (existingType)).getConstructor() : typeRegistry.getNativeFunctionType(com.google.javascript.jscomp.FUNCTION_FUNCTION_TYPE);\n                if (existingFn.getSource() == null) {\n                    existingFn.setSource(sourceNode);\n                }\n                if (!existingFn.hasEqualCallType(fnType)) {\n                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n                }\n                return existingFn;\n            } else {\n            }\n        }\n        maybeSetBaseType(fnType);\n        if (scope.isGlobal() && (!fnName.isEmpty())) {\n            typeRegistry.declareType(fnName, fnType.getInstanceType());\n        }\n        return fnType;\n    }\n\n    private void reportWarning(com.google.javascript.jscomp.DiagnosticType warning, java.lang.String... args) {\n        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, warning, args));\n    }\n\n    private void reportError(com.google.javascript.jscomp.DiagnosticType error, java.lang.String... args) {\n        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, error, args));\n    }\n\n    static boolean isFunctionTypeDeclaration(com.google.javascript.rhino.JSDocInfo info) {\n        return ((((info.getParameterCount() > 0) || info.hasReturnType()) || info.hasThisType()) || info.isConstructor()) || info.isInterface();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "null",
            "src_parent": "((info != null) && info.hasReturnType()) ? info.getReturnType().evaluate(scope, typeRegistry) : null",
            "src_parent_type": "Conditional",
            "src_type": "Literal"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((templateTypeName != null) && (returnType != null))",
            "src_parent": "((templateTypeName != null) && (returnType != null)) && returnType.restrictByNotNullOrUndefined().isTemplateType()",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "com.google.javascript.jscomp.FunctionTypeBuilder inferReturnStatements(@javax.annotation.Nullable\ncom.google.javascript.rhino.Node functionBlock) {\n    if ((functionBlock == null) || compiler.getInput(sourceName).isExtern()) {\n        return this;\n    }\n    com.google.common.base.Preconditions.checkArgument(functionBlock.getType() == com.google.javascript.rhino.Token.BLOCK);\n    if (returnType == null) {\n        boolean hasNonEmptyReturns = false;\n        java.util.List<com.google.javascript.rhino.Node> worklist = com.google.common.collect.Lists.newArrayList(functionBlock);\n        while (!worklist.isEmpty()) {\n            com.google.javascript.rhino.Node current = worklist.remove(worklist.size() - 1);\n            int cType = current.getType();\n            if (((cType == com.google.javascript.rhino.Token.RETURN) && (current.getFirstChild() != null)) || (cType == com.google.javascript.rhino.Token.THROW)) {\n                hasNonEmptyReturns = true;\n                break;\n            } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(current) || com.google.javascript.jscomp.NodeUtil.isControlStructure(current)) {\n                for (com.google.javascript.rhino.Node child = current.getFirstChild(); child != null; child = child.getNext()) {\n                    worklist.add(child);\n                }\n            }\n        } \n        if (!hasNonEmptyReturns) {\n            returnType = typeRegistry.getNativeType(com.google.javascript.jscomp.VOID_TYPE);\n            returnTypeInferred = true;\n        }\n    }\n    return this;\n}",
            "src_parent": "final class FunctionTypeBuilder {\n    private final java.lang.String fnName;\n\n    private final com.google.javascript.jscomp.AbstractCompiler compiler;\n\n    private final com.google.javascript.jscomp.CodingConvention codingConvention;\n\n    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;\n\n    private final com.google.javascript.rhino.Node errorRoot;\n\n    private final java.lang.String sourceName;\n\n    private final com.google.javascript.jscomp.Scope scope;\n\n    private com.google.javascript.rhino.jstype.JSType returnType = null;\n\n    private boolean returnTypeInferred = false;\n\n    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> implementedInterfaces = null;\n\n    private com.google.javascript.rhino.jstype.ObjectType baseType = null;\n\n    private com.google.javascript.rhino.jstype.ObjectType thisType = null;\n\n    private boolean isConstructor = false;\n\n    private boolean isInterface = false;\n\n    private com.google.javascript.rhino.Node parametersNode = null;\n\n    private com.google.javascript.rhino.Node sourceNode = null;\n\n    private java.lang.String templateTypeName = null;\n\n    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_WITHOUT_TYPEDEF = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_EXTENDS_WITHOUT_TYPEDEF\", \"@extends used without @constructor or @interface for {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_EXTENDS_NON_OBJECT\", \"{0} @extends non-object type {1}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\", \"@implements used without @constructor or @interface for {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType VAR_ARGS_MUST_BE_LAST = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_VAR_ARGS_MUST_BE_LAST\", \"variable length argument must be last\");\n\n    static final com.google.javascript.jscomp.DiagnosticType OPTIONAL_ARG_AT_END = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_OPTIONAL_ARG_AT_END\", \"optional arguments must be at the end\");\n\n    static final com.google.javascript.jscomp.DiagnosticType INEXISTANT_PARAM = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_INEXISTANT_PARAM\", \"parameter {0} does not appear in {1}''s parameter list\");\n\n    static final com.google.javascript.jscomp.DiagnosticType TYPE_REDEFINITION = com.google.javascript.jscomp.DiagnosticType.warning(\"JSC_TYPE_REDEFINITION\", \"attempted re-definition of type {0}\\n\" + (\"found   : {1}\\n\" + \"expected: {2}\"));\n\n    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_DUPLICATED = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_TEMPLATE_TYPE_DUPLICATED\", \"Only one parameter type must be the template type\");\n\n    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_EXPECTED = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_TEMPLATE_TYPE_EXPECTED\", \"The template type must be a parameter type\");\n\n    FunctionTypeBuilder(java.lang.String fnName, com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node errorRoot, java.lang.String sourceName, com.google.javascript.jscomp.Scope scope) {\n        com.google.common.base.Preconditions.checkNotNull(errorRoot);\n        this.fnName = (fnName == null) ? \"\" : fnName;\n        this.codingConvention = compiler.getCodingConvention();\n        this.typeRegistry = compiler.getTypeRegistry();\n        this.errorRoot = errorRoot;\n        this.sourceName = sourceName;\n        this.compiler = compiler;\n        this.scope = scope;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder setSourceNode(@javax.annotation.Nullable\n    com.google.javascript.rhino.Node sourceNode) {\n        this.sourceNode = sourceNode;\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferFromOverriddenFunction(com.google.javascript.rhino.jstype.FunctionType oldType, @javax.annotation.Nullable\n    com.google.javascript.rhino.Node paramsParent) {\n        returnType = oldType.getReturnType();\n        if (paramsParent == null) {\n            parametersNode = oldType.getParametersNode();\n            if (parametersNode == null) {\n                parametersNode = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry).build();\n            }\n        } else {\n            com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);\n            java.util.Iterator<com.google.javascript.rhino.Node> oldParams = oldType.getParameters().iterator();\n            boolean warnedAboutArgList = false;\n            for (com.google.javascript.rhino.Node currentParam = paramsParent.getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {\n                if (oldParams.hasNext()) {\n                    paramBuilder.newParameterFromNode(oldParams.next());\n                } else {\n                    warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam), codingConvention.isVarArgsParameter(currentParam));\n                }\n            }\n            parametersNode = paramBuilder.build();\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferReturnType(@javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        returnType = ((info != null) && info.hasReturnType()) ? info.getReturnType().evaluate(scope, typeRegistry) : null;\n        if (((templateTypeName != null) && (returnType != null)) && returnType.restrictByNotNullOrUndefined().isTemplateType()) {\n            reportError(com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED, fnName);\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferReturnStatements(@javax.annotation.Nullable\n    com.google.javascript.rhino.Node functionBlock) {\n        if ((functionBlock == null) || compiler.getInput(sourceName).isExtern()) {\n            return this;\n        }\n        com.google.common.base.Preconditions.checkArgument(functionBlock.getType() == com.google.javascript.rhino.Token.BLOCK);\n        if (returnType == null) {\n            boolean hasNonEmptyReturns = false;\n            java.util.List<com.google.javascript.rhino.Node> worklist = com.google.common.collect.Lists.newArrayList(functionBlock);\n            while (!worklist.isEmpty()) {\n                com.google.javascript.rhino.Node current = worklist.remove(worklist.size() - 1);\n                int cType = current.getType();\n                if (((cType == com.google.javascript.rhino.Token.RETURN) && (current.getFirstChild() != null)) || (cType == com.google.javascript.rhino.Token.THROW)) {\n                    hasNonEmptyReturns = true;\n                    break;\n                } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(current) || com.google.javascript.jscomp.NodeUtil.isControlStructure(current)) {\n                    for (com.google.javascript.rhino.Node child = current.getFirstChild(); child != null; child = child.getNext()) {\n                        worklist.add(child);\n                    }\n                }\n            } \n            if (!hasNonEmptyReturns) {\n                returnType = typeRegistry.getNativeType(com.google.javascript.jscomp.VOID_TYPE);\n                returnTypeInferred = true;\n            }\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferInheritance(@javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (info != null) {\n            isConstructor = info.isConstructor();\n            isInterface = info.isInterface();\n            if (info.hasBaseType()) {\n                if (isConstructor || isInterface) {\n                    baseType = com.google.javascript.rhino.jstype.ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));\n                    if (baseType == null) {\n                        reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT, fnName, baseType.toString());\n                    }\n                } else {\n                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF, fnName);\n                }\n            }\n            if (isConstructor || isInterface) {\n                implementedInterfaces = com.google.common.collect.Lists.newArrayList();\n                for (com.google.javascript.rhino.JSTypeExpression t : info.getImplementedInterfaces()) {\n                    com.google.javascript.rhino.jstype.ObjectType interType = com.google.javascript.rhino.jstype.ObjectType.cast(t.evaluate(scope, typeRegistry));\n                    if (interType != null) {\n                        implementedInterfaces.add(interType);\n                    } else {\n                        reportError(com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, fnName);\n                    }\n                }\n                if (baseType != null) {\n                    com.google.javascript.rhino.jstype.JSType maybeFunctionType = baseType.getConstructor();\n                    if (maybeFunctionType instanceof com.google.javascript.rhino.jstype.FunctionType) {\n                        com.google.javascript.rhino.jstype.FunctionType functionType = baseType.getConstructor();\n                        com.google.common.collect.Iterables.addAll(implementedInterfaces, functionType.getImplementedInterfaces());\n                    }\n                }\n            } else if (info.getImplementedInterfaceCount() > 0) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);\n            }\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType type) {\n        com.google.javascript.rhino.jstype.ObjectType objType = com.google.javascript.rhino.jstype.ObjectType.cast(type);\n        if ((objType != null) && ((info == null) || (!info.hasType()))) {\n            thisType = objType;\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info, @javax.annotation.Nullable\n    com.google.javascript.rhino.Node owner) {\n        com.google.javascript.rhino.jstype.ObjectType maybeThisType = null;\n        if ((info != null) && info.hasThisType()) {\n            maybeThisType = com.google.javascript.rhino.jstype.ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));\n        }\n        if (maybeThisType != null) {\n            thisType = maybeThisType;\n        } else if ((owner != null) && ((info == null) || (!info.hasType()))) {\n            java.lang.String ownerTypeName = owner.getQualifiedName();\n            com.google.javascript.rhino.jstype.ObjectType ownerType = com.google.javascript.rhino.jstype.ObjectType.cast(typeRegistry.getType(scope, ownerTypeName, sourceName, owner.getLineno(), owner.getCharno()));\n            if (ownerType != null) {\n                thisType = ownerType;\n            }\n        }\n        return this;\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(com.google.javascript.rhino.JSDocInfo info) {\n        com.google.javascript.rhino.Node lp = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.LP);\n        for (java.lang.String name : info.getParameterNames()) {\n            lp.addChildToBack(com.google.javascript.rhino.Node.newString(Token.NAME, name));\n        }\n        return inferParameterTypes(lp, info);\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(@javax.annotation.Nullable\n    com.google.javascript.rhino.Node argsParent, @javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (argsParent == null) {\n            if (info == null) {\n                return this;\n            } else {\n                return inferParameterTypes(info);\n            }\n        }\n        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);\n        boolean warnedAboutArgList = false;\n        java.util.Set<java.lang.String> allJsDocParams = (info == null) ? com.google.common.collect.Sets.<java.lang.String>newHashSet() : com.google.common.collect.Sets.newHashSet(info.getParameterNames());\n        boolean foundTemplateType = false;\n        for (com.google.javascript.rhino.Node arg : argsParent.children()) {\n            java.lang.String argumentName = arg.getString();\n            allJsDocParams.remove(argumentName);\n            com.google.javascript.rhino.jstype.JSType parameterType = ((info != null) && info.hasParameterType(argumentName)) ? info.getParameterType(argumentName).evaluate(scope, typeRegistry) : typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE);\n            if ((templateTypeName != null) && parameterType.restrictByNotNullOrUndefined().isTemplateType()) {\n                if (foundTemplateType) {\n                    reportError(com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED, fnName);\n                }\n                foundTemplateType = true;\n            }\n            warnedAboutArgList |= addParameter(builder, parameterType, warnedAboutArgList, isOptionalParameter(arg, info), isVarArgsParameter(arg, info));\n        }\n        if ((templateTypeName != null) && (!foundTemplateType)) {\n            reportError(com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED, fnName);\n        }\n        for (java.lang.String inexistentName : allJsDocParams) {\n            reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM, inexistentName, fnName);\n        }\n        parametersNode = builder.build();\n        return this;\n    }\n\n    private boolean isOptionalParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (codingConvention.isOptionalParameter(param)) {\n            return true;\n        }\n        java.lang.String paramName = param.getString();\n        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isOptionalArg();\n    }\n\n    private boolean isVarArgsParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (codingConvention.isVarArgsParameter(param)) {\n            return true;\n        }\n        java.lang.String paramName = param.getString();\n        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isVarArgs();\n    }\n\n    com.google.javascript.jscomp.FunctionTypeBuilder inferTemplateTypeName(@javax.annotation.Nullable\n    com.google.javascript.rhino.JSDocInfo info) {\n        if (info != null) {\n            templateTypeName = info.getTemplateTypeName();\n            typeRegistry.setTemplateTypeName(templateTypeName);\n        }\n        return this;\n    }\n\n    private boolean addParameter(com.google.javascript.rhino.jstype.FunctionParamBuilder builder, com.google.javascript.rhino.jstype.JSType paramType, boolean warnedAboutArgList, boolean isOptional, boolean isVarArgs) {\n        boolean emittedWarning = false;\n        if (isOptional) {\n            if ((!builder.addOptionalParams(paramType)) && (!warnedAboutArgList)) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);\n                emittedWarning = true;\n            }\n        } else if (isVarArgs) {\n            if ((!builder.addVarArgs(paramType)) && (!warnedAboutArgList)) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);\n                emittedWarning = true;\n            }\n        } else if ((!builder.addRequiredParams(paramType)) && (!warnedAboutArgList)) {\n            if (builder.hasVarArgs()) {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);\n            } else {\n                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);\n            }\n            emittedWarning = true;\n        }\n        return emittedWarning;\n    }\n\n    com.google.javascript.rhino.jstype.FunctionType buildAndRegister() {\n        if (returnType == null) {\n            returnType = typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE);\n        }\n        if (parametersNode == null) {\n            throw new java.lang.IllegalStateException(\"All Function types must have params and a return type\");\n        }\n        com.google.javascript.rhino.jstype.FunctionType fnType;\n        if (isConstructor) {\n            fnType = getOrCreateConstructor();\n        } else if (isInterface) {\n            fnType = typeRegistry.createInterfaceType(fnName, sourceNode);\n            if (scope.isGlobal() && (!fnName.isEmpty())) {\n                typeRegistry.declareType(fnName, fnType.getInstanceType());\n            }\n            maybeSetBaseType(fnType);\n        } else {\n            fnType = new com.google.javascript.rhino.jstype.FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateName(templateTypeName).build();\n            maybeSetBaseType(fnType);\n        }\n        if (implementedInterfaces != null) {\n            fnType.setImplementedInterfaces(implementedInterfaces);\n        }\n        typeRegistry.clearTemplateTypeName();\n        return fnType;\n    }\n\n    private void maybeSetBaseType(com.google.javascript.rhino.jstype.FunctionType fnType) {\n        if (baseType != null) {\n            fnType.setPrototypeBasedOn(baseType);\n        }\n    }\n\n    private com.google.javascript.rhino.jstype.FunctionType getOrCreateConstructor() {\n        com.google.javascript.rhino.jstype.FunctionType fnType = typeRegistry.createConstructorType(fnName, sourceNode, parametersNode, returnType);\n        com.google.javascript.rhino.jstype.JSType existingType = typeRegistry.getType(fnName);\n        if (existingType != null) {\n            boolean isInstanceObject = existingType instanceof com.google.javascript.rhino.jstype.InstanceObjectType;\n            if (isInstanceObject || fnName.equals(\"Function\")) {\n                com.google.javascript.rhino.jstype.FunctionType existingFn = (isInstanceObject) ? ((com.google.javascript.rhino.jstype.InstanceObjectType) (existingType)).getConstructor() : typeRegistry.getNativeFunctionType(com.google.javascript.jscomp.FUNCTION_FUNCTION_TYPE);\n                if (existingFn.getSource() == null) {\n                    existingFn.setSource(sourceNode);\n                }\n                if (!existingFn.hasEqualCallType(fnType)) {\n                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());\n                }\n                return existingFn;\n            } else {\n            }\n        }\n        maybeSetBaseType(fnType);\n        if (scope.isGlobal() && (!fnName.isEmpty())) {\n            typeRegistry.declareType(fnName, fnType.getInstanceType());\n        }\n        return fnType;\n    }\n\n    private void reportWarning(com.google.javascript.jscomp.DiagnosticType warning, java.lang.String... args) {\n        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, warning, args));\n    }\n\n    private void reportError(com.google.javascript.jscomp.DiagnosticType error, java.lang.String... args) {\n        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, error, args));\n    }\n\n    static boolean isFunctionTypeDeclaration(com.google.javascript.rhino.JSDocInfo info) {\n        return ((((info.getParameterCount() > 0) || info.hasReturnType()) || info.hasThisType()) || info.isConstructor()) || info.isInterface();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "returnTypeInferred",
            "src_parent": "new com.google.javascript.rhino.jstype.FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(sourceNode).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE)",
            "src_parent": "((info != null) && info.hasReturnType()) ? info.getReturnType().evaluate(scope, typeRegistry) : typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE)",
            "src_parent_type": "Conditional",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(templateTypeName != null)",
            "dst_parent": "(templateTypeName != null) && returnType.restrictByNotNullOrUndefined().isTemplateType()",
            "dst_parent_type": "BinaryOperator",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(templateTypeName != null)",
            "src_parent": "((templateTypeName != null) && (returnType != null))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Assignment",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "typeRegistry",
            "dst_parent": "typeRegistry.getNativeType(com.google.javascript.jscomp.UNKNOWN_TYPE)",
            "dst_parent_type": "Invocation",
            "dst_type": "FieldRead",
            "operator": "MOV",
            "src": "typeRegistry",
            "src_parent": "typeRegistry.getNativeType(com.google.javascript.jscomp.VOID_TYPE)",
            "src_parent_type": "Invocation",
            "src_type": "FieldRead"
          }
        }
      ],
      "file_name": "FunctionTypeBuilder"
    }
  ],
  "id": "Closure_144"
}