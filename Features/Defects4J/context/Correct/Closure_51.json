{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(((long) (x)) == x) && (!com.google.javascript.jscomp.CodeConsumer.isNegativeZero(x))",
            "src_parent": "if ((((long) (x)) == x) && (!com.google.javascript.jscomp.CodeConsumer.isNegativeZero(x))) {\n    long value = ((long) (x));\n    long mantissa = value;\n    int exp = 0;\n    if (java.lang.Math.abs(x) >= 100) {\n        while (((mantissa / 10) * java.lang.Math.pow(10, exp + 1)) == value) {\n            mantissa /= 10;\n            exp++;\n        } \n    }\n    if (exp > 2) {\n        add((java.lang.Long.toString(mantissa) + \"E\") + java.lang.Integer.toString(exp));\n    } else {\n        add(java.lang.Long.toString(value));\n    }\n} else {\n    add(java.lang.String.valueOf(x));\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "static boolean isNegativeZero(double x) {\n    return (x == 0.0) && (java.lang.Math.copySign(1, x) == (-1.0));\n}",
            "src_parent": "abstract class CodeConsumer {\n    boolean statementNeedsEnded = false;\n\n    boolean statementStarted = false;\n\n    boolean sawFunction = false;\n\n    void startSourceMapping(com.google.javascript.rhino.Node node) {\n    }\n\n    void endSourceMapping(com.google.javascript.rhino.Node node) {\n    }\n\n    boolean continueProcessing() {\n        return true;\n    }\n\n    abstract char getLastChar();\n\n    void addIdentifier(java.lang.String identifier) {\n        add(identifier);\n    }\n\n    abstract void append(java.lang.String str);\n\n    void appendBlockStart() {\n        append(\"{\");\n    }\n\n    void appendBlockEnd() {\n        append(\"}\");\n    }\n\n    void startNewLine() {\n    }\n\n    void maybeLineBreak() {\n        maybeCutLine();\n    }\n\n    void maybeCutLine() {\n    }\n\n    void endLine() {\n    }\n\n    void notePreferredLineBreak() {\n    }\n\n    void beginBlock() {\n        if (statementNeedsEnded) {\n            append(\";\");\n            maybeLineBreak();\n        }\n        appendBlockStart();\n        endLine();\n        statementNeedsEnded = false;\n    }\n\n    void endBlock() {\n        endBlock(false);\n    }\n\n    void endBlock(boolean shouldEndLine) {\n        appendBlockEnd();\n        if (shouldEndLine) {\n            endLine();\n        }\n        statementNeedsEnded = false;\n    }\n\n    void listSeparator() {\n        add(\",\");\n        maybeLineBreak();\n    }\n\n    void endStatement() {\n        endStatement(false);\n    }\n\n    void endStatement(boolean needSemiColon) {\n        if (needSemiColon) {\n            append(\";\");\n            maybeLineBreak();\n            statementNeedsEnded = false;\n        } else if (statementStarted) {\n            statementNeedsEnded = true;\n        }\n    }\n\n    void maybeEndStatement() {\n        if (statementNeedsEnded) {\n            append(\";\");\n            maybeLineBreak();\n            endLine();\n            statementNeedsEnded = false;\n        }\n        statementStarted = true;\n    }\n\n    void endFunction() {\n        endFunction(false);\n    }\n\n    void endFunction(boolean statementContext) {\n        sawFunction = true;\n        if (statementContext) {\n            endLine();\n        }\n    }\n\n    void beginCaseBody() {\n        append(\":\");\n    }\n\n    void endCaseBody() {\n    }\n\n    void add(java.lang.String newcode) {\n        maybeEndStatement();\n        if (newcode.length() == 0) {\n            return;\n        }\n        char c = newcode.charAt(0);\n        if ((com.google.javascript.jscomp.CodeConsumer.isWordChar(c) || (c == '\\\\')) && com.google.javascript.jscomp.CodeConsumer.isWordChar(getLastChar())) {\n            append(\" \");\n        }\n        append(newcode);\n    }\n\n    void appendOp(java.lang.String op, boolean binOp) {\n        append(op);\n    }\n\n    void addOp(java.lang.String op, boolean binOp) {\n        maybeEndStatement();\n        char first = op.charAt(0);\n        char prev = getLastChar();\n        if (((first == '+') || (first == '-')) && (prev == first)) {\n            append(\" \");\n        } else if (java.lang.Character.isLetter(first) && com.google.javascript.jscomp.CodeConsumer.isWordChar(prev)) {\n            append(\" \");\n        } else if ((prev == '-') && (first == '>')) {\n            append(\" \");\n        }\n        appendOp(op, binOp);\n        if (binOp) {\n            maybeCutLine();\n        }\n    }\n\n    void addNumber(double x) {\n        char prev = getLastChar();\n        if ((x < 0) && (prev == '-')) {\n            add(\" \");\n        }\n        if ((((long) (x)) == x) && (!com.google.javascript.jscomp.CodeConsumer.isNegativeZero(x))) {\n            long value = ((long) (x));\n            long mantissa = value;\n            int exp = 0;\n            if (java.lang.Math.abs(x) >= 100) {\n                while (((mantissa / 10) * java.lang.Math.pow(10, exp + 1)) == value) {\n                    mantissa /= 10;\n                    exp++;\n                } \n            }\n            if (exp > 2) {\n                add((java.lang.Long.toString(mantissa) + \"E\") + java.lang.Integer.toString(exp));\n            } else {\n                add(java.lang.Long.toString(value));\n            }\n        } else {\n            add(java.lang.String.valueOf(x));\n        }\n    }\n\n    static boolean isNegativeZero(double x) {\n        return (x == 0.0) && (java.lang.Math.copySign(1, x) == (-1.0));\n    }\n\n    static boolean isWordChar(char ch) {\n        return ((ch == '_') || (ch == '$')) || java.lang.Character.isLetterOrDigit(ch);\n    }\n\n    boolean shouldPreserveExtraBlocks() {\n        return false;\n    }\n\n    boolean breakAfterBlockFor(com.google.javascript.rhino.Node n, boolean statementContext) {\n        return statementContext;\n    }\n\n    void endFile() {\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "((long) (x)) == x",
            "dst_parent": "if (((long) (x)) == x) {\n    long value = ((long) (x));\n    long mantissa = value;\n    int exp = 0;\n    if (java.lang.Math.abs(x) >= 100) {\n        while (((mantissa / 10) * java.lang.Math.pow(10, exp + 1)) == value) {\n            mantissa /= 10;\n            exp++;\n        } \n    }\n    if (exp > 2) {\n        add((java.lang.Long.toString(mantissa) + \"E\") + java.lang.Integer.toString(exp));\n    } else {\n        add(java.lang.Long.toString(value));\n    }\n} else {\n    add(java.lang.String.valueOf(x));\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(((long) (x)) == x)",
            "src_parent": "(((long) (x)) == x) && (!com.google.javascript.jscomp.CodeConsumer.isNegativeZero(x))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "CodeConsumer"
    }
  ],
  "id": "Closure_51"
}