{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "renderWrappedText(sb, width, nextLineTabStop, text)",
            "dst_parent": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(text.length());\n    renderWrappedText(sb, width, nextLineTabStop, text);\n    pw.println(sb.toString());\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "renderWrappedTextBlock(sb, width, nextLineTabStop, text)",
            "src_parent": "{\n    java.lang.StringBuffer sb = new java.lang.StringBuffer(text.length());\n    renderWrappedTextBlock(sb, width, nextLineTabStop, text);\n    pw.println(sb.toString());\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private java.lang.StringBuffer renderWrappedTextBlock(java.lang.StringBuffer sb, int width, int nextLineTabStop, java.lang.String text) {\n    try {\n        java.io.BufferedReader in = new java.io.BufferedReader(new java.io.StringReader(text));\n        java.lang.String line;\n        boolean firstLine = true;\n        while ((line = in.readLine()) != null) {\n            if (!firstLine) {\n                sb.append(getNewLine());\n            } else {\n                firstLine = false;\n            }\n            renderWrappedText(sb, width, nextLineTabStop, line);\n        } \n    } catch (java.io.IOException e) {\n    }\n    return sb;\n}",
            "src_parent": "public class HelpFormatter {\n    public static final int DEFAULT_WIDTH = 74;\n\n    public static final int DEFAULT_LEFT_PAD = 1;\n\n    public static final int DEFAULT_DESC_PAD = 3;\n\n    public static final java.lang.String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n\n    public static final java.lang.String DEFAULT_OPT_PREFIX = \"-\";\n\n    public static final java.lang.String DEFAULT_LONG_OPT_PREFIX = \"--\";\n\n    public static final java.lang.String DEFAULT_LONG_OPT_SEPARATOR = \" \";\n\n    public static final java.lang.String DEFAULT_ARG_NAME = \"arg\";\n\n    public int defaultWidth = org.apache.commons.cli.HelpFormatter.DEFAULT_WIDTH;\n\n    public int defaultLeftPad = org.apache.commons.cli.HelpFormatter.DEFAULT_LEFT_PAD;\n\n    public int defaultDescPad = org.apache.commons.cli.HelpFormatter.DEFAULT_DESC_PAD;\n\n    public java.lang.String defaultSyntaxPrefix = org.apache.commons.cli.HelpFormatter.DEFAULT_SYNTAX_PREFIX;\n\n    public java.lang.String defaultNewLine = java.lang.System.getProperty(\"line.separator\");\n\n    public java.lang.String defaultOptPrefix = org.apache.commons.cli.HelpFormatter.DEFAULT_OPT_PREFIX;\n\n    public java.lang.String defaultLongOptPrefix = org.apache.commons.cli.HelpFormatter.DEFAULT_LONG_OPT_PREFIX;\n\n    private java.lang.String longOptSeparator = org.apache.commons.cli.HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR;\n\n    public java.lang.String defaultArgName = org.apache.commons.cli.HelpFormatter.DEFAULT_ARG_NAME;\n\n    protected java.util.Comparator optionComparator = new org.apache.commons.cli.HelpFormatter.OptionComparator();\n\n    public void setWidth(int width) {\n        this.defaultWidth = width;\n    }\n\n    public int getWidth() {\n        return defaultWidth;\n    }\n\n    public void setLeftPadding(int padding) {\n        this.defaultLeftPad = padding;\n    }\n\n    public int getLeftPadding() {\n        return defaultLeftPad;\n    }\n\n    public void setDescPadding(int padding) {\n        this.defaultDescPad = padding;\n    }\n\n    public int getDescPadding() {\n        return defaultDescPad;\n    }\n\n    public void setSyntaxPrefix(java.lang.String prefix) {\n        this.defaultSyntaxPrefix = prefix;\n    }\n\n    public java.lang.String getSyntaxPrefix() {\n        return defaultSyntaxPrefix;\n    }\n\n    public void setNewLine(java.lang.String newline) {\n        this.defaultNewLine = newline;\n    }\n\n    public java.lang.String getNewLine() {\n        return defaultNewLine;\n    }\n\n    public void setOptPrefix(java.lang.String prefix) {\n        this.defaultOptPrefix = prefix;\n    }\n\n    public java.lang.String getOptPrefix() {\n        return defaultOptPrefix;\n    }\n\n    public void setLongOptPrefix(java.lang.String prefix) {\n        this.defaultLongOptPrefix = prefix;\n    }\n\n    public java.lang.String getLongOptPrefix() {\n        return defaultLongOptPrefix;\n    }\n\n    public void setLongOptSeparator(java.lang.String longOptSeparator) {\n        this.longOptSeparator = longOptSeparator;\n    }\n\n    public java.lang.String getLongOptSeparator() {\n        return longOptSeparator;\n    }\n\n    public void setArgName(java.lang.String name) {\n        this.defaultArgName = name;\n    }\n\n    public java.lang.String getArgName() {\n        return defaultArgName;\n    }\n\n    public java.util.Comparator getOptionComparator() {\n        return optionComparator;\n    }\n\n    public void setOptionComparator(java.util.Comparator comparator) {\n        if (comparator == null) {\n            this.optionComparator = new org.apache.commons.cli.HelpFormatter.OptionComparator();\n        } else {\n            this.optionComparator = comparator;\n        }\n    }\n\n    public void printHelp(java.lang.String cmdLineSyntax, org.apache.commons.cli.Options options) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);\n    }\n\n    public void printHelp(java.lang.String cmdLineSyntax, org.apache.commons.cli.Options options, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);\n    }\n\n    public void printHelp(java.lang.String cmdLineSyntax, java.lang.String header, org.apache.commons.cli.Options options, java.lang.String footer) {\n        printHelp(cmdLineSyntax, header, options, footer, false);\n    }\n\n    public void printHelp(java.lang.String cmdLineSyntax, java.lang.String header, org.apache.commons.cli.Options options, java.lang.String footer, boolean autoUsage) {\n        printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);\n    }\n\n    public void printHelp(int width, java.lang.String cmdLineSyntax, java.lang.String header, org.apache.commons.cli.Options options, java.lang.String footer) {\n        printHelp(width, cmdLineSyntax, header, options, footer, false);\n    }\n\n    public void printHelp(int width, java.lang.String cmdLineSyntax, java.lang.String header, org.apache.commons.cli.Options options, java.lang.String footer, boolean autoUsage) {\n        java.io.PrintWriter pw = new java.io.PrintWriter(java.lang.System.out);\n        printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);\n        pw.flush();\n    }\n\n    public void printHelp(java.io.PrintWriter pw, int width, java.lang.String cmdLineSyntax, java.lang.String header, org.apache.commons.cli.Options options, int leftPad, int descPad, java.lang.String footer) {\n        printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);\n    }\n\n    public void printHelp(java.io.PrintWriter pw, int width, java.lang.String cmdLineSyntax, java.lang.String header, org.apache.commons.cli.Options options, int leftPad, int descPad, java.lang.String footer, boolean autoUsage) {\n        if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) {\n            throw new java.lang.IllegalArgumentException(\"cmdLineSyntax not provided\");\n        }\n        if (autoUsage) {\n            printUsage(pw, width, cmdLineSyntax, options);\n        } else {\n            printUsage(pw, width, cmdLineSyntax);\n        }\n        if ((header != null) && (header.trim().length() > 0)) {\n            printWrapped(pw, width, header);\n        }\n        printOptions(pw, width, options, leftPad, descPad);\n        if ((footer != null) && (footer.trim().length() > 0)) {\n            printWrapped(pw, width, footer);\n        }\n    }\n\n    public void printUsage(java.io.PrintWriter pw, int width, java.lang.String app, org.apache.commons.cli.Options options) {\n        java.lang.StringBuffer buff = new java.lang.StringBuffer(defaultSyntaxPrefix).append(app).append(\" \");\n        final java.util.Collection processedGroups = new java.util.ArrayList();\n        org.apache.commons.cli.Option option;\n        java.util.List optList = new java.util.ArrayList(options.getOptions());\n        java.util.Collections.sort(optList, getOptionComparator());\n        for (java.util.Iterator i = optList.iterator(); i.hasNext();) {\n            option = ((org.apache.commons.cli.Option) (i.next()));\n            org.apache.commons.cli.OptionGroup group = options.getOptionGroup(option);\n            if (group != null) {\n                if (!processedGroups.contains(group)) {\n                    processedGroups.add(group);\n                    appendOptionGroup(buff, group);\n                }\n            } else {\n                appendOption(buff, option, option.isRequired());\n            }\n            if (i.hasNext()) {\n                buff.append(\" \");\n            }\n        }\n        printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());\n    }\n\n    private void appendOptionGroup(final java.lang.StringBuffer buff, final org.apache.commons.cli.OptionGroup group) {\n        if (!group.isRequired()) {\n            buff.append(\"[\");\n        }\n        java.util.List optList = new java.util.ArrayList(group.getOptions());\n        java.util.Collections.sort(optList, getOptionComparator());\n        for (java.util.Iterator i = optList.iterator(); i.hasNext();) {\n            appendOption(buff, ((org.apache.commons.cli.Option) (i.next())), true);\n            if (i.hasNext()) {\n                buff.append(\" | \");\n            }\n        }\n        if (!group.isRequired()) {\n            buff.append(\"]\");\n        }\n    }\n\n    private void appendOption(final java.lang.StringBuffer buff, final org.apache.commons.cli.Option option, final boolean required) {\n        if (!required) {\n            buff.append(\"[\");\n        }\n        if (option.getOpt() != null) {\n            buff.append(\"-\").append(option.getOpt());\n        } else {\n            buff.append(\"--\").append(option.getLongOpt());\n        }\n        if (option.hasArg() && ((option.getArgName() == null) || (option.getArgName().length() != 0))) {\n            buff.append(option.getOpt() == null ? longOptSeparator : \" \");\n            buff.append(\"<\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\">\");\n        }\n        if (!required) {\n            buff.append(\"]\");\n        }\n    }\n\n    public void printUsage(java.io.PrintWriter pw, int width, java.lang.String cmdLineSyntax) {\n        int argPos = cmdLineSyntax.indexOf(' ') + 1;\n        printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);\n    }\n\n    public void printOptions(java.io.PrintWriter pw, int width, org.apache.commons.cli.Options options, int leftPad, int descPad) {\n        java.lang.StringBuffer sb = new java.lang.StringBuffer();\n        renderOptions(sb, width, options, leftPad, descPad);\n        pw.println(sb.toString());\n    }\n\n    public void printWrapped(java.io.PrintWriter pw, int width, java.lang.String text) {\n        printWrapped(pw, width, 0, text);\n    }\n\n    public void printWrapped(java.io.PrintWriter pw, int width, int nextLineTabStop, java.lang.String text) {\n        java.lang.StringBuffer sb = new java.lang.StringBuffer(text.length());\n        renderWrappedTextBlock(sb, width, nextLineTabStop, text);\n        pw.println(sb.toString());\n    }\n\n    protected java.lang.StringBuffer renderOptions(java.lang.StringBuffer sb, int width, org.apache.commons.cli.Options options, int leftPad, int descPad) {\n        final java.lang.String lpad = createPadding(leftPad);\n        final java.lang.String dpad = createPadding(descPad);\n        int max = 0;\n        java.lang.StringBuffer optBuf;\n        java.util.List prefixList = new java.util.ArrayList();\n        java.util.List optList = options.helpOptions();\n        java.util.Collections.sort(optList, getOptionComparator());\n        for (java.util.Iterator i = optList.iterator(); i.hasNext();) {\n            org.apache.commons.cli.Option option = ((org.apache.commons.cli.Option) (i.next()));\n            optBuf = new java.lang.StringBuffer();\n            if (option.getOpt() == null) {\n                optBuf.append(lpad).append(\"   \" + defaultLongOptPrefix).append(option.getLongOpt());\n            } else {\n                optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());\n                if (option.hasLongOpt()) {\n                    optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());\n                }\n            }\n            if (option.hasArg()) {\n                java.lang.String argName = option.getArgName();\n                if ((argName != null) && (argName.length() == 0)) {\n                    optBuf.append(' ');\n                } else {\n                    optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \");\n                    optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\");\n                }\n            }\n            prefixList.add(optBuf);\n            max = (optBuf.length() > max) ? optBuf.length() : max;\n        }\n        int x = 0;\n        for (java.util.Iterator i = optList.iterator(); i.hasNext();) {\n            org.apache.commons.cli.Option option = ((org.apache.commons.cli.Option) (i.next()));\n            optBuf = new java.lang.StringBuffer(prefixList.get(x++).toString());\n            if (optBuf.length() < max) {\n                optBuf.append(createPadding(max - optBuf.length()));\n            }\n            optBuf.append(dpad);\n            int nextLineTabStop = max + descPad;\n            if (option.getDescription() != null) {\n                optBuf.append(option.getDescription());\n            }\n            renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());\n            if (i.hasNext()) {\n                sb.append(defaultNewLine);\n            }\n        }\n        return sb;\n    }\n\n    protected java.lang.StringBuffer renderWrappedText(java.lang.StringBuffer sb, int width, int nextLineTabStop, java.lang.String text) {\n        int pos = findWrapPos(text, width, 0);\n        if (pos == (-1)) {\n            sb.append(rtrim(text));\n            return sb;\n        }\n        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        if (nextLineTabStop >= width) {\n            nextLineTabStop = 1;\n        }\n        final java.lang.String padding = createPadding(nextLineTabStop);\n        while (true) {\n            text = padding + text.substring(pos).trim();\n            pos = findWrapPos(text, width, 0);\n            if (pos == (-1)) {\n                sb.append(text);\n                return sb;\n            }\n            if ((text.length() > width) && (pos == (nextLineTabStop - 1))) {\n                pos = width;\n            }\n            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);\n        } \n    }\n\n    private java.lang.StringBuffer renderWrappedTextBlock(java.lang.StringBuffer sb, int width, int nextLineTabStop, java.lang.String text) {\n        try {\n            java.io.BufferedReader in = new java.io.BufferedReader(new java.io.StringReader(text));\n            java.lang.String line;\n            boolean firstLine = true;\n            while ((line = in.readLine()) != null) {\n                if (!firstLine) {\n                    sb.append(getNewLine());\n                } else {\n                    firstLine = false;\n                }\n                renderWrappedText(sb, width, nextLineTabStop, line);\n            } \n        } catch (java.io.IOException e) {\n        }\n        return sb;\n    }\n\n    protected int findWrapPos(java.lang.String text, int width, int startPos) {\n        int pos;\n        if ((((pos = text.indexOf('\\n', startPos)) != (-1)) && (pos <= width)) || (((pos = text.indexOf('\\t', startPos)) != (-1)) && (pos <= width))) {\n            return pos + 1;\n        } else if ((startPos + width) >= text.length()) {\n            return -1;\n        }\n        pos = startPos + width;\n        char c;\n        while ((((pos >= startPos) && ((c = text.charAt(pos)) != ' ')) && (c != '\\n')) && (c != '\\r')) {\n            --pos;\n        } \n        if (pos > startPos) {\n            return pos;\n        }\n        pos = startPos + width;\n        return pos == text.length() ? -1 : pos;\n    }\n\n    protected java.lang.String createPadding(int len) {\n        char[] padding = new char[len];\n        java.util.Arrays.fill(padding, ' ');\n        return new java.lang.String(padding);\n    }\n\n    protected java.lang.String rtrim(java.lang.String s) {\n        if ((s == null) || (s.length() == 0)) {\n            return s;\n        }\n        int pos = s.length();\n        while ((pos > 0) && java.lang.Character.isWhitespace(s.charAt(pos - 1))) {\n            --pos;\n        } \n        return s.substring(0, pos);\n    }\n\n    private static class OptionComparator implements java.util.Comparator {\n        public int compare(java.lang.Object o1, java.lang.Object o2) {\n            org.apache.commons.cli.Option opt1 = ((org.apache.commons.cli.Option) (o1));\n            org.apache.commons.cli.Option opt2 = ((org.apache.commons.cli.Option) (o2));\n            return opt1.getKey().compareToIgnoreCase(opt2.getKey());\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "HelpFormatter"
    }
  ],
  "id": "Cli_33"
}