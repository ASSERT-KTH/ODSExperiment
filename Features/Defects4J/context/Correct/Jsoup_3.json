{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "ForEach",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jsoup.parser.Parser.parseBodyFragment(html, baseUri)",
            "dst_parent": "org.jsoup.parser.Parser.parseBodyFragment(html, baseUri).body()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(html, baseUri())",
            "src_parent": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(html, baseUri()).body()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jsoup.parser.Parser.parseBodyFragment(html, baseUri)",
            "dst_parent": "org.jsoup.parser.Parser.parseBodyFragment(html, baseUri).body()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(html, baseUri())",
            "src_parent": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(html, baseUri()).body()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "org.jsoup.parser.Parser.parseBodyFragment(html, baseUri)",
            "dst_parent": "org.jsoup.parser.Parser.parseBodyFragment(html, baseUri).body()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(html, baseUri)",
            "src_parent": "org.jsoup.parser.Parser.parseBodyFragmentRelaxed(html, baseUri).body()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        }
      ],
      "file_name": "Element"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "boolean isValidParent(org.jsoup.parser.Tag child) {\n    if (child.ancestors.isEmpty()) {\n        return true;\n    }\n    for (org.jsoup.parser.Tag tag : child.ancestors) {\n        if (this.equals(tag)) {\n            return true;\n        }\n    }\n    return false;\n}",
            "dst_parent": "public class Tag {\n    private static final java.util.Map<java.lang.String, org.jsoup.parser.Tag> tags = new java.util.HashMap<java.lang.String, org.jsoup.parser.Tag>();\n\n    private static final org.jsoup.parser.Tag defaultAncestor;\n\n    static {\n        defaultAncestor = new Tag(\"BODY\");\n        tags.put(org.jsoup.parser.Tag.defaultAncestor.tagName, defaultAncestor);\n    }\n\n    private java.lang.String tagName;\n\n    private boolean isBlock = true;\n\n    private boolean canContainBlock = true;\n\n    private boolean canContainInline = true;\n\n    private boolean optionalClosing = false;\n\n    private boolean empty = false;\n\n    private boolean preserveWhitespace = false;\n\n    private java.util.List<org.jsoup.parser.Tag> ancestors;\n\n    private Tag(java.lang.String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    public java.lang.String getName() {\n        return tagName;\n    }\n\n    public static org.jsoup.parser.Tag valueOf(java.lang.String tagName) {\n        org.apache.commons.lang.Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        org.apache.commons.lang.Validate.notEmpty(tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.tags.get(tagName);\n            if (tag == null) {\n                tag = new org.jsoup.parser.Tag(tagName);\n                tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    boolean canContain(org.jsoup.parser.Tag child) {\n        org.apache.commons.lang.Validate.notNull(child);\n        if (child.isBlock && (!this.canContainBlock)) {\n            return false;\n        }\n        if ((!child.isBlock) && (!this.canContainInline)) {\n            return false;\n        }\n        if (this.optionalClosing && this.equals(child)) {\n            return false;\n        }\n        if (this.empty || this.isData()) {\n            return false;\n        }\n        if (this.tagName.equals(\"head\")) {\n            if (((((((child.tagName.equals(\"base\") || child.tagName.equals(\"script\")) || child.tagName.equals(\"noscript\")) || child.tagName.equals(\"link\")) || child.tagName.equals(\"meta\")) || child.tagName.equals(\"title\")) || child.tagName.equals(\"style\")) || child.tagName.equals(\"object\")) {\n                return true;\n            }\n            return false;\n        }\n        if (this.tagName.equals(\"dt\") && child.tagName.equals(\"dd\")) {\n            return false;\n        }\n        if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\")) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    public boolean isData() {\n        return (!canContainInline) && (!isEmpty());\n    }\n\n    public boolean isEmpty() {\n        return empty;\n    }\n\n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    org.jsoup.parser.Tag getImplicitParent() {\n        return !ancestors.isEmpty() ? ancestors.get(0) : null;\n    }\n\n    boolean isValidParent(org.jsoup.parser.Tag child) {\n        if (child.ancestors.isEmpty()) {\n            return true;\n        }\n        for (org.jsoup.parser.Tag tag : child.ancestors) {\n            if (this.equals(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.parser.Tag tag = ((org.jsoup.parser.Tag) (o));\n        if (canContainBlock != tag.canContainBlock) {\n            return false;\n        }\n        if (canContainInline != tag.canContainInline) {\n            return false;\n        }\n        if (empty != tag.empty) {\n            return false;\n        }\n        if (isBlock != tag.isBlock) {\n            return false;\n        }\n        if (optionalClosing != tag.optionalClosing) {\n            return false;\n        }\n        if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = (tagName != null) ? tagName.hashCode() : 0;\n        result = (31 * result) + (isBlock ? 1 : 0);\n        result = (31 * result) + (canContainBlock ? 1 : 0);\n        result = (31 * result) + (canContainInline ? 1 : 0);\n        result = (31 * result) + (optionalClosing ? 1 : 0);\n        result = (31 * result) + (empty ? 1 : 0);\n        return result;\n    }\n\n    public java.lang.String toString() {\n        return tagName;\n    }\n\n    static {\n        createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n        createBlock(\"HEAD\").setAncestor(\"HTML\");\n        createBlock(\"BODY\").setAncestor(\"HTML\");\n        createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"FRAME\").setAncestor(\"FRAMESET\").setEmpty();\n        createBlock(\"NOFRAMES\").setAncestor(\"FRAMESET\").setContainDataOnly();\n        createInline(\"FONT\");\n        createInline(\"TT\");\n        createInline(\"I\");\n        createInline(\"B\");\n        createInline(\"BIG\");\n        createInline(\"SMALL\");\n        createInline(\"EM\");\n        createInline(\"STRONG\");\n        createInline(\"DFN\");\n        createInline(\"CODE\");\n        createInline(\"SAMP\");\n        createInline(\"KBD\");\n        createInline(\"VAR\");\n        createInline(\"CITE\");\n        createInline(\"ABBR\");\n        createInline(\"ACRONYM\");\n        createInline(\"A\").setOptionalClosing();\n        createInline(\"IMG\").setEmpty();\n        createInline(\"BR\").setEmpty();\n        createInline(\"MAP\");\n        createInline(\"Q\");\n        createInline(\"SUB\");\n        createInline(\"SUP\");\n        createInline(\"SPAN\");\n        createInline(\"BDO\");\n        createBlock(\"P\").setContainInlineOnly();\n        createBlock(\"H1\").setContainInlineOnly();\n        createBlock(\"H2\").setContainInlineOnly();\n        createBlock(\"H3\").setContainInlineOnly();\n        createBlock(\"H4\").setContainInlineOnly();\n        createBlock(\"H5\").setContainInlineOnly();\n        createBlock(\"H6\").setContainInlineOnly();\n        createBlock(\"UL\");\n        createBlock(\"OL\");\n        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n        createBlock(\"DIV\");\n        createBlock(\"BLOCKQUOTE\");\n        createBlock(\"HR\").setEmpty();\n        createBlock(\"ADDRESS\").setContainInlineOnly();\n        createBlock(\"FORM\").setOptionalClosing();\n        createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n        createInline(\"SELECT\").setAncestor(\"FORM\");\n        createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n        createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n        createInline(\"BUTTON\").setAncestor(\"FORM\");\n        createInline(\"OPTGROUP\").setAncestor(\"SELECT\");\n        createInline(\"OPTION\").setAncestor(\"SELECT\").setContainDataOnly();\n        createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n        createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n        createInline(\"AREA\").setEmpty();\n        createInline(\"PARAM\").setAncestor(\"OBJECT\").setEmpty();\n        createBlock(\"INS\");\n        createBlock(\"DEL\");\n        createBlock(\"DL\");\n        createInline(\"DT\").setAncestor(\"DL\").setOptionalClosing();\n        createInline(\"DD\").setAncestor(\"DL\").setOptionalClosing();\n        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n        createBlock(\"TABLE\");\n        createBlock(\"CAPTION\").setAncestor(\"TABLE\");\n        createBlock(\"THEAD\").setAncestor(\"TABLE\").setOptionalClosing();\n        createBlock(\"TFOOT\").setAncestor(\"TABLE\").setOptionalClosing();\n        createBlock(\"TBODY\").setAncestor(\"TABLE\").setOptionalClosing();\n        createBlock(\"COLGROUP\").setAncestor(\"TABLE\").setOptionalClosing();\n        createBlock(\"COL\").setAncestor(\"COLGROUP\").setEmpty();\n        createBlock(\"TR\").setAncestor(\"TABLE\").setOptionalClosing();\n        createBlock(\"TH\").setAncestor(\"TR\").setOptionalClosing();\n        createBlock(\"TD\").setAncestor(\"TR\").setOptionalClosing();\n    }\n\n    private static org.jsoup.parser.Tag createBlock(java.lang.String tagName) {\n        return org.jsoup.parser.Tag.register(new org.jsoup.parser.Tag(tagName));\n    }\n\n    private static org.jsoup.parser.Tag createInline(java.lang.String tagName) {\n        org.jsoup.parser.Tag inline = new org.jsoup.parser.Tag(tagName);\n        inline.isBlock = false;\n        inline.canContainBlock = false;\n        return org.jsoup.parser.Tag.register(inline);\n    }\n\n    private static org.jsoup.parser.Tag register(org.jsoup.parser.Tag tag) {\n        tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag.tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n\n    private org.jsoup.parser.Tag setContainInlineOnly() {\n        canContainBlock = false;\n        canContainInline = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setContainDataOnly() {\n        canContainBlock = false;\n        canContainInline = false;\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setEmpty() {\n        canContainBlock = false;\n        canContainInline = false;\n        empty = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setOptionalClosing() {\n        optionalClosing = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setPreserveWhitespace() {\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setAncestor(java.lang.String... tagNames) {\n        if (tagNames == null) {\n            ancestors = java.util.Collections.emptyList();\n        } else {\n            ancestors = new java.util.ArrayList<org.jsoup.parser.Tag>(tagNames.length);\n            for (java.lang.String name : tagNames) {\n                ancestors.add(org.jsoup.parser.Tag.valueOf(name));\n            }\n        }\n        return this;\n    }\n}",
            "dst_parent_type": "Class",
            "dst_type": "Method",
            "operator": "UPD",
            "src": "boolean isValidAncestor(org.jsoup.parser.Tag child) {\n    if (child.ancestors.isEmpty()) {\n        return true;\n    }\n    for (org.jsoup.parser.Tag tag : child.ancestors) {\n        if (this.equals(tag)) {\n            return true;\n        }\n    }\n    return false;\n}",
            "src_parent": "public class Tag {\n    private static final java.util.Map<java.lang.String, org.jsoup.parser.Tag> tags = new java.util.HashMap<java.lang.String, org.jsoup.parser.Tag>();\n\n    private static final org.jsoup.parser.Tag defaultAncestor;\n\n    static {\n        defaultAncestor = new Tag(\"BODY\");\n        tags.put(org.jsoup.parser.Tag.defaultAncestor.tagName, defaultAncestor);\n    }\n\n    private java.lang.String tagName;\n\n    private boolean isBlock = true;\n\n    private boolean canContainBlock = true;\n\n    private boolean canContainInline = true;\n\n    private boolean optionalClosing = false;\n\n    private boolean empty = false;\n\n    private boolean preserveWhitespace = false;\n\n    private java.util.List<org.jsoup.parser.Tag> ancestors;\n\n    private org.jsoup.parser.Tag parent;\n\n    private Tag(java.lang.String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    public java.lang.String getName() {\n        return tagName;\n    }\n\n    public static org.jsoup.parser.Tag valueOf(java.lang.String tagName) {\n        org.apache.commons.lang.Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        org.apache.commons.lang.Validate.notEmpty(tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.tags.get(tagName);\n            if (tag == null) {\n                tag = new org.jsoup.parser.Tag(tagName);\n                tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    boolean canContain(org.jsoup.parser.Tag child) {\n        org.apache.commons.lang.Validate.notNull(child);\n        if (child.isBlock && (!this.canContainBlock)) {\n            return false;\n        }\n        if ((!child.isBlock) && (!this.canContainInline)) {\n            return false;\n        }\n        if (this.optionalClosing && this.equals(child)) {\n            return false;\n        }\n        if (this.empty || this.isData()) {\n            return false;\n        }\n        if (this.tagName.equals(\"head\")) {\n            if (((((((child.tagName.equals(\"base\") || child.tagName.equals(\"script\")) || child.tagName.equals(\"noscript\")) || child.tagName.equals(\"link\")) || child.tagName.equals(\"meta\")) || child.tagName.equals(\"title\")) || child.tagName.equals(\"style\")) || child.tagName.equals(\"object\")) {\n                return true;\n            }\n            return false;\n        }\n        if (this.tagName.equals(\"dt\") && child.tagName.equals(\"dd\")) {\n            return false;\n        }\n        if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\")) {\n            return false;\n        }\n        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child)) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    public boolean isData() {\n        return (!canContainInline) && (!isEmpty());\n    }\n\n    public boolean isEmpty() {\n        return empty;\n    }\n\n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    org.jsoup.parser.Tag getImplicitParent() {\n        return !ancestors.isEmpty() ? ancestors.get(0) : null;\n    }\n\n    boolean requiresSpecificParent() {\n        return this.parent != null;\n    }\n\n    boolean isValidParent(org.jsoup.parser.Tag child) {\n        return this.equals(child.parent);\n    }\n\n    boolean isValidAncestor(org.jsoup.parser.Tag child) {\n        if (child.ancestors.isEmpty()) {\n            return true;\n        }\n        for (org.jsoup.parser.Tag tag : child.ancestors) {\n            if (this.equals(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.parser.Tag tag = ((org.jsoup.parser.Tag) (o));\n        if (canContainBlock != tag.canContainBlock) {\n            return false;\n        }\n        if (canContainInline != tag.canContainInline) {\n            return false;\n        }\n        if (empty != tag.empty) {\n            return false;\n        }\n        if (isBlock != tag.isBlock) {\n            return false;\n        }\n        if (optionalClosing != tag.optionalClosing) {\n            return false;\n        }\n        if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = (tagName != null) ? tagName.hashCode() : 0;\n        result = (31 * result) + (isBlock ? 1 : 0);\n        result = (31 * result) + (canContainBlock ? 1 : 0);\n        result = (31 * result) + (canContainInline ? 1 : 0);\n        result = (31 * result) + (optionalClosing ? 1 : 0);\n        result = (31 * result) + (empty ? 1 : 0);\n        return result;\n    }\n\n    public java.lang.String toString() {\n        return tagName;\n    }\n\n    static {\n        createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n        createBlock(\"HEAD\").setAncestor(\"HTML\");\n        createBlock(\"BODY\").setAncestor(\"HTML\");\n        createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n        createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n        createInline(\"FONT\");\n        createInline(\"TT\");\n        createInline(\"I\");\n        createInline(\"B\");\n        createInline(\"BIG\");\n        createInline(\"SMALL\");\n        createInline(\"EM\");\n        createInline(\"STRONG\");\n        createInline(\"DFN\");\n        createInline(\"CODE\");\n        createInline(\"SAMP\");\n        createInline(\"KBD\");\n        createInline(\"VAR\");\n        createInline(\"CITE\");\n        createInline(\"ABBR\");\n        createInline(\"ACRONYM\");\n        createInline(\"A\").setOptionalClosing();\n        createInline(\"IMG\").setEmpty();\n        createInline(\"BR\").setEmpty();\n        createInline(\"MAP\");\n        createInline(\"Q\");\n        createInline(\"SUB\");\n        createInline(\"SUP\");\n        createInline(\"SPAN\");\n        createInline(\"BDO\");\n        createBlock(\"P\").setContainInlineOnly();\n        createBlock(\"H1\").setContainInlineOnly();\n        createBlock(\"H2\").setContainInlineOnly();\n        createBlock(\"H3\").setContainInlineOnly();\n        createBlock(\"H4\").setContainInlineOnly();\n        createBlock(\"H5\").setContainInlineOnly();\n        createBlock(\"H6\").setContainInlineOnly();\n        createBlock(\"UL\");\n        createBlock(\"OL\");\n        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n        createBlock(\"DIV\");\n        createBlock(\"BLOCKQUOTE\");\n        createBlock(\"HR\").setEmpty();\n        createBlock(\"ADDRESS\").setContainInlineOnly();\n        createBlock(\"FORM\").setOptionalClosing();\n        createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n        createInline(\"SELECT\").setAncestor(\"FORM\");\n        createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n        createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n        createInline(\"BUTTON\").setAncestor(\"FORM\");\n        createInline(\"OPTGROUP\").setParent(\"SELECT\");\n        createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n        createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n        createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n        createInline(\"AREA\").setEmpty();\n        createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n        createBlock(\"INS\");\n        createBlock(\"DEL\");\n        createBlock(\"DL\");\n        createInline(\"DT\").setParent(\"DL\").setOptionalClosing();\n        createInline(\"DD\").setParent(\"DL\").setOptionalClosing();\n        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n        createBlock(\"TABLE\");\n        createBlock(\"CAPTION\").setParent(\"TABLE\");\n        createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n        createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n        createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n    }\n\n    private static org.jsoup.parser.Tag createBlock(java.lang.String tagName) {\n        return org.jsoup.parser.Tag.register(new org.jsoup.parser.Tag(tagName));\n    }\n\n    private static org.jsoup.parser.Tag createInline(java.lang.String tagName) {\n        org.jsoup.parser.Tag inline = new org.jsoup.parser.Tag(tagName);\n        inline.isBlock = false;\n        inline.canContainBlock = false;\n        return org.jsoup.parser.Tag.register(inline);\n    }\n\n    private static org.jsoup.parser.Tag register(org.jsoup.parser.Tag tag) {\n        tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag.tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n\n    private org.jsoup.parser.Tag setContainInlineOnly() {\n        canContainBlock = false;\n        canContainInline = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setContainDataOnly() {\n        canContainBlock = false;\n        canContainInline = false;\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setEmpty() {\n        canContainBlock = false;\n        canContainInline = false;\n        empty = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setOptionalClosing() {\n        optionalClosing = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setPreserveWhitespace() {\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setAncestor(java.lang.String... tagNames) {\n        if (tagNames == null) {\n            ancestors = java.util.Collections.emptyList();\n        } else {\n            ancestors = new java.util.ArrayList<org.jsoup.parser.Tag>(tagNames.length);\n            for (java.lang.String name : tagNames) {\n                ancestors.add(org.jsoup.parser.Tag.valueOf(name));\n            }\n        }\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setParent(java.lang.String tagName) {\n        parent = org.jsoup.parser.Tag.valueOf(tagName);\n        setAncestor(tagName);\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createInline(\"OPTGROUP\").setAncestor(\"SELECT\")",
            "dst_parent": "{\n    createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n    createBlock(\"HEAD\").setAncestor(\"HTML\");\n    createBlock(\"BODY\").setAncestor(\"HTML\");\n    createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n    createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"FRAME\").setAncestor(\"FRAMESET\").setEmpty();\n    createBlock(\"NOFRAMES\").setAncestor(\"FRAMESET\").setContainDataOnly();\n    createInline(\"FONT\");\n    createInline(\"TT\");\n    createInline(\"I\");\n    createInline(\"B\");\n    createInline(\"BIG\");\n    createInline(\"SMALL\");\n    createInline(\"EM\");\n    createInline(\"STRONG\");\n    createInline(\"DFN\");\n    createInline(\"CODE\");\n    createInline(\"SAMP\");\n    createInline(\"KBD\");\n    createInline(\"VAR\");\n    createInline(\"CITE\");\n    createInline(\"ABBR\");\n    createInline(\"ACRONYM\");\n    createInline(\"A\").setOptionalClosing();\n    createInline(\"IMG\").setEmpty();\n    createInline(\"BR\").setEmpty();\n    createInline(\"MAP\");\n    createInline(\"Q\");\n    createInline(\"SUB\");\n    createInline(\"SUP\");\n    createInline(\"SPAN\");\n    createInline(\"BDO\");\n    createBlock(\"P\").setContainInlineOnly();\n    createBlock(\"H1\").setContainInlineOnly();\n    createBlock(\"H2\").setContainInlineOnly();\n    createBlock(\"H3\").setContainInlineOnly();\n    createBlock(\"H4\").setContainInlineOnly();\n    createBlock(\"H5\").setContainInlineOnly();\n    createBlock(\"H6\").setContainInlineOnly();\n    createBlock(\"UL\");\n    createBlock(\"OL\");\n    createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n    createBlock(\"DIV\");\n    createBlock(\"BLOCKQUOTE\");\n    createBlock(\"HR\").setEmpty();\n    createBlock(\"ADDRESS\").setContainInlineOnly();\n    createBlock(\"FORM\").setOptionalClosing();\n    createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n    createInline(\"SELECT\").setAncestor(\"FORM\");\n    createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n    createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n    createInline(\"BUTTON\").setAncestor(\"FORM\");\n    createInline(\"OPTGROUP\").setAncestor(\"SELECT\");\n    createInline(\"OPTION\").setAncestor(\"SELECT\").setContainDataOnly();\n    createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n    createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n    createInline(\"AREA\").setEmpty();\n    createInline(\"PARAM\").setAncestor(\"OBJECT\").setEmpty();\n    createBlock(\"INS\");\n    createBlock(\"DEL\");\n    createBlock(\"DL\");\n    createInline(\"DT\").setAncestor(\"DL\").setOptionalClosing();\n    createInline(\"DD\").setAncestor(\"DL\").setOptionalClosing();\n    createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n    createBlock(\"TABLE\");\n    createBlock(\"CAPTION\").setAncestor(\"TABLE\");\n    createBlock(\"THEAD\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"TFOOT\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"TBODY\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"COLGROUP\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"COL\").setAncestor(\"COLGROUP\").setEmpty();\n    createBlock(\"TR\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"TH\").setAncestor(\"TR\").setOptionalClosing();\n    createBlock(\"TD\").setAncestor(\"TR\").setOptionalClosing();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createInline(\"OPTGROUP\").setParent(\"SELECT\")",
            "src_parent": "{\n    createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n    createBlock(\"HEAD\").setAncestor(\"HTML\");\n    createBlock(\"BODY\").setAncestor(\"HTML\");\n    createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n    createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n    createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n    createInline(\"FONT\");\n    createInline(\"TT\");\n    createInline(\"I\");\n    createInline(\"B\");\n    createInline(\"BIG\");\n    createInline(\"SMALL\");\n    createInline(\"EM\");\n    createInline(\"STRONG\");\n    createInline(\"DFN\");\n    createInline(\"CODE\");\n    createInline(\"SAMP\");\n    createInline(\"KBD\");\n    createInline(\"VAR\");\n    createInline(\"CITE\");\n    createInline(\"ABBR\");\n    createInline(\"ACRONYM\");\n    createInline(\"A\").setOptionalClosing();\n    createInline(\"IMG\").setEmpty();\n    createInline(\"BR\").setEmpty();\n    createInline(\"MAP\");\n    createInline(\"Q\");\n    createInline(\"SUB\");\n    createInline(\"SUP\");\n    createInline(\"SPAN\");\n    createInline(\"BDO\");\n    createBlock(\"P\").setContainInlineOnly();\n    createBlock(\"H1\").setContainInlineOnly();\n    createBlock(\"H2\").setContainInlineOnly();\n    createBlock(\"H3\").setContainInlineOnly();\n    createBlock(\"H4\").setContainInlineOnly();\n    createBlock(\"H5\").setContainInlineOnly();\n    createBlock(\"H6\").setContainInlineOnly();\n    createBlock(\"UL\");\n    createBlock(\"OL\");\n    createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n    createBlock(\"DIV\");\n    createBlock(\"BLOCKQUOTE\");\n    createBlock(\"HR\").setEmpty();\n    createBlock(\"ADDRESS\").setContainInlineOnly();\n    createBlock(\"FORM\").setOptionalClosing();\n    createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n    createInline(\"SELECT\").setAncestor(\"FORM\");\n    createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n    createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n    createInline(\"BUTTON\").setAncestor(\"FORM\");\n    createInline(\"OPTGROUP\").setParent(\"SELECT\");\n    createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n    createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n    createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n    createInline(\"AREA\").setEmpty();\n    createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n    createBlock(\"INS\");\n    createBlock(\"DEL\");\n    createBlock(\"DL\");\n    createInline(\"DT\").setParent(\"DL\").setOptionalClosing();\n    createInline(\"DD\").setParent(\"DL\").setOptionalClosing();\n    createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n    createBlock(\"TABLE\");\n    createBlock(\"CAPTION\").setParent(\"TABLE\");\n    createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n    createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n    createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"CAPTION\").setAncestor(\"TABLE\")",
            "dst_parent": "{\n    createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n    createBlock(\"HEAD\").setAncestor(\"HTML\");\n    createBlock(\"BODY\").setAncestor(\"HTML\");\n    createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n    createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"FRAME\").setAncestor(\"FRAMESET\").setEmpty();\n    createBlock(\"NOFRAMES\").setAncestor(\"FRAMESET\").setContainDataOnly();\n    createInline(\"FONT\");\n    createInline(\"TT\");\n    createInline(\"I\");\n    createInline(\"B\");\n    createInline(\"BIG\");\n    createInline(\"SMALL\");\n    createInline(\"EM\");\n    createInline(\"STRONG\");\n    createInline(\"DFN\");\n    createInline(\"CODE\");\n    createInline(\"SAMP\");\n    createInline(\"KBD\");\n    createInline(\"VAR\");\n    createInline(\"CITE\");\n    createInline(\"ABBR\");\n    createInline(\"ACRONYM\");\n    createInline(\"A\").setOptionalClosing();\n    createInline(\"IMG\").setEmpty();\n    createInline(\"BR\").setEmpty();\n    createInline(\"MAP\");\n    createInline(\"Q\");\n    createInline(\"SUB\");\n    createInline(\"SUP\");\n    createInline(\"SPAN\");\n    createInline(\"BDO\");\n    createBlock(\"P\").setContainInlineOnly();\n    createBlock(\"H1\").setContainInlineOnly();\n    createBlock(\"H2\").setContainInlineOnly();\n    createBlock(\"H3\").setContainInlineOnly();\n    createBlock(\"H4\").setContainInlineOnly();\n    createBlock(\"H5\").setContainInlineOnly();\n    createBlock(\"H6\").setContainInlineOnly();\n    createBlock(\"UL\");\n    createBlock(\"OL\");\n    createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n    createBlock(\"DIV\");\n    createBlock(\"BLOCKQUOTE\");\n    createBlock(\"HR\").setEmpty();\n    createBlock(\"ADDRESS\").setContainInlineOnly();\n    createBlock(\"FORM\").setOptionalClosing();\n    createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n    createInline(\"SELECT\").setAncestor(\"FORM\");\n    createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n    createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n    createInline(\"BUTTON\").setAncestor(\"FORM\");\n    createInline(\"OPTGROUP\").setAncestor(\"SELECT\");\n    createInline(\"OPTION\").setAncestor(\"SELECT\").setContainDataOnly();\n    createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n    createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n    createInline(\"AREA\").setEmpty();\n    createInline(\"PARAM\").setAncestor(\"OBJECT\").setEmpty();\n    createBlock(\"INS\");\n    createBlock(\"DEL\");\n    createBlock(\"DL\");\n    createInline(\"DT\").setAncestor(\"DL\").setOptionalClosing();\n    createInline(\"DD\").setAncestor(\"DL\").setOptionalClosing();\n    createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n    createBlock(\"TABLE\");\n    createBlock(\"CAPTION\").setAncestor(\"TABLE\");\n    createBlock(\"THEAD\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"TFOOT\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"TBODY\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"COLGROUP\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"COL\").setAncestor(\"COLGROUP\").setEmpty();\n    createBlock(\"TR\").setAncestor(\"TABLE\").setOptionalClosing();\n    createBlock(\"TH\").setAncestor(\"TR\").setOptionalClosing();\n    createBlock(\"TD\").setAncestor(\"TR\").setOptionalClosing();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"CAPTION\").setParent(\"TABLE\")",
            "src_parent": "{\n    createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n    createBlock(\"HEAD\").setAncestor(\"HTML\");\n    createBlock(\"BODY\").setAncestor(\"HTML\");\n    createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n    createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n    createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n    createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n    createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n    createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n    createInline(\"FONT\");\n    createInline(\"TT\");\n    createInline(\"I\");\n    createInline(\"B\");\n    createInline(\"BIG\");\n    createInline(\"SMALL\");\n    createInline(\"EM\");\n    createInline(\"STRONG\");\n    createInline(\"DFN\");\n    createInline(\"CODE\");\n    createInline(\"SAMP\");\n    createInline(\"KBD\");\n    createInline(\"VAR\");\n    createInline(\"CITE\");\n    createInline(\"ABBR\");\n    createInline(\"ACRONYM\");\n    createInline(\"A\").setOptionalClosing();\n    createInline(\"IMG\").setEmpty();\n    createInline(\"BR\").setEmpty();\n    createInline(\"MAP\");\n    createInline(\"Q\");\n    createInline(\"SUB\");\n    createInline(\"SUP\");\n    createInline(\"SPAN\");\n    createInline(\"BDO\");\n    createBlock(\"P\").setContainInlineOnly();\n    createBlock(\"H1\").setContainInlineOnly();\n    createBlock(\"H2\").setContainInlineOnly();\n    createBlock(\"H3\").setContainInlineOnly();\n    createBlock(\"H4\").setContainInlineOnly();\n    createBlock(\"H5\").setContainInlineOnly();\n    createBlock(\"H6\").setContainInlineOnly();\n    createBlock(\"UL\");\n    createBlock(\"OL\");\n    createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n    createBlock(\"DIV\");\n    createBlock(\"BLOCKQUOTE\");\n    createBlock(\"HR\").setEmpty();\n    createBlock(\"ADDRESS\").setContainInlineOnly();\n    createBlock(\"FORM\").setOptionalClosing();\n    createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n    createInline(\"SELECT\").setAncestor(\"FORM\");\n    createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n    createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n    createInline(\"BUTTON\").setAncestor(\"FORM\");\n    createInline(\"OPTGROUP\").setParent(\"SELECT\");\n    createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n    createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n    createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n    createInline(\"AREA\").setEmpty();\n    createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n    createBlock(\"INS\");\n    createBlock(\"DEL\");\n    createBlock(\"DL\");\n    createInline(\"DT\").setParent(\"DL\").setOptionalClosing();\n    createInline(\"DD\").setParent(\"DL\").setOptionalClosing();\n    createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n    createBlock(\"TABLE\");\n    createBlock(\"CAPTION\").setParent(\"TABLE\");\n    createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n    createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing();\n    createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n    createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"FRAME\").setAncestor(\"FRAMESET\")",
            "dst_parent": "createBlock(\"FRAME\").setAncestor(\"FRAMESET\").setEmpty()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"FRAME\").setParent(\"FRAMESET\")",
            "src_parent": "createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"NOFRAMES\").setAncestor(\"FRAMESET\")",
            "dst_parent": "createBlock(\"NOFRAMES\").setAncestor(\"FRAMESET\").setContainDataOnly()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"NOFRAMES\").setParent(\"FRAMESET\")",
            "src_parent": "createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createInline(\"OPTION\").setAncestor(\"SELECT\")",
            "dst_parent": "createInline(\"OPTION\").setAncestor(\"SELECT\").setContainDataOnly()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createInline(\"OPTION\").setParent(\"SELECT\")",
            "src_parent": "createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createInline(\"PARAM\").setAncestor(\"OBJECT\")",
            "dst_parent": "createInline(\"PARAM\").setAncestor(\"OBJECT\").setEmpty()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createInline(\"PARAM\").setParent(\"OBJECT\")",
            "src_parent": "createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createInline(\"DT\").setAncestor(\"DL\")",
            "dst_parent": "createInline(\"DT\").setAncestor(\"DL\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createInline(\"DT\").setParent(\"DL\")",
            "src_parent": "createInline(\"DT\").setParent(\"DL\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createInline(\"DD\").setAncestor(\"DL\")",
            "dst_parent": "createInline(\"DD\").setAncestor(\"DL\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createInline(\"DD\").setParent(\"DL\")",
            "src_parent": "createInline(\"DD\").setParent(\"DL\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"THEAD\").setAncestor(\"TABLE\")",
            "dst_parent": "createBlock(\"THEAD\").setAncestor(\"TABLE\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"THEAD\").setParent(\"TABLE\")",
            "src_parent": "createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"TFOOT\").setAncestor(\"TABLE\")",
            "dst_parent": "createBlock(\"TFOOT\").setAncestor(\"TABLE\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"TFOOT\").setParent(\"TABLE\")",
            "src_parent": "createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"TBODY\").setAncestor(\"TABLE\")",
            "dst_parent": "createBlock(\"TBODY\").setAncestor(\"TABLE\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"TBODY\").setParent(\"TABLE\")",
            "src_parent": "createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"COLGROUP\").setAncestor(\"TABLE\")",
            "dst_parent": "createBlock(\"COLGROUP\").setAncestor(\"TABLE\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"COLGROUP\").setParent(\"TABLE\")",
            "src_parent": "createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"COL\").setAncestor(\"COLGROUP\")",
            "dst_parent": "createBlock(\"COL\").setAncestor(\"COLGROUP\").setEmpty()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"COL\").setParent(\"COLGROUP\")",
            "src_parent": "createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"TR\").setAncestor(\"TABLE\")",
            "dst_parent": "createBlock(\"TR\").setAncestor(\"TABLE\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"TR\").setParent(\"TABLE\")",
            "src_parent": "createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"TH\").setAncestor(\"TR\")",
            "dst_parent": "createBlock(\"TH\").setAncestor(\"TR\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"TH\").setParent(\"TR\")",
            "src_parent": "createBlock(\"TH\").setParent(\"TR\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "AnonymousExecutable",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Invocation",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "createBlock(\"TD\").setAncestor(\"TR\")",
            "dst_parent": "createBlock(\"TD\").setAncestor(\"TR\").setOptionalClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "createBlock(\"TD\").setParent(\"TR\")",
            "src_parent": "createBlock(\"TD\").setParent(\"TR\").setOptionalClosing()",
            "src_parent_type": "Invocation",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private org.jsoup.parser.Tag parent;",
            "src_parent": "public class Tag {\n    private static final java.util.Map<java.lang.String, org.jsoup.parser.Tag> tags = new java.util.HashMap<java.lang.String, org.jsoup.parser.Tag>();\n\n    private static final org.jsoup.parser.Tag defaultAncestor;\n\n    static {\n        defaultAncestor = new Tag(\"BODY\");\n        tags.put(org.jsoup.parser.Tag.defaultAncestor.tagName, defaultAncestor);\n    }\n\n    private java.lang.String tagName;\n\n    private boolean isBlock = true;\n\n    private boolean canContainBlock = true;\n\n    private boolean canContainInline = true;\n\n    private boolean optionalClosing = false;\n\n    private boolean empty = false;\n\n    private boolean preserveWhitespace = false;\n\n    private java.util.List<org.jsoup.parser.Tag> ancestors;\n\n    private org.jsoup.parser.Tag parent;\n\n    private Tag(java.lang.String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    public java.lang.String getName() {\n        return tagName;\n    }\n\n    public static org.jsoup.parser.Tag valueOf(java.lang.String tagName) {\n        org.apache.commons.lang.Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        org.apache.commons.lang.Validate.notEmpty(tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.tags.get(tagName);\n            if (tag == null) {\n                tag = new org.jsoup.parser.Tag(tagName);\n                tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    boolean canContain(org.jsoup.parser.Tag child) {\n        org.apache.commons.lang.Validate.notNull(child);\n        if (child.isBlock && (!this.canContainBlock)) {\n            return false;\n        }\n        if ((!child.isBlock) && (!this.canContainInline)) {\n            return false;\n        }\n        if (this.optionalClosing && this.equals(child)) {\n            return false;\n        }\n        if (this.empty || this.isData()) {\n            return false;\n        }\n        if (this.tagName.equals(\"head\")) {\n            if (((((((child.tagName.equals(\"base\") || child.tagName.equals(\"script\")) || child.tagName.equals(\"noscript\")) || child.tagName.equals(\"link\")) || child.tagName.equals(\"meta\")) || child.tagName.equals(\"title\")) || child.tagName.equals(\"style\")) || child.tagName.equals(\"object\")) {\n                return true;\n            }\n            return false;\n        }\n        if (this.tagName.equals(\"dt\") && child.tagName.equals(\"dd\")) {\n            return false;\n        }\n        if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\")) {\n            return false;\n        }\n        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child)) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    public boolean isData() {\n        return (!canContainInline) && (!isEmpty());\n    }\n\n    public boolean isEmpty() {\n        return empty;\n    }\n\n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    org.jsoup.parser.Tag getImplicitParent() {\n        return !ancestors.isEmpty() ? ancestors.get(0) : null;\n    }\n\n    boolean requiresSpecificParent() {\n        return this.parent != null;\n    }\n\n    boolean isValidParent(org.jsoup.parser.Tag child) {\n        return this.equals(child.parent);\n    }\n\n    boolean isValidAncestor(org.jsoup.parser.Tag child) {\n        if (child.ancestors.isEmpty()) {\n            return true;\n        }\n        for (org.jsoup.parser.Tag tag : child.ancestors) {\n            if (this.equals(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.parser.Tag tag = ((org.jsoup.parser.Tag) (o));\n        if (canContainBlock != tag.canContainBlock) {\n            return false;\n        }\n        if (canContainInline != tag.canContainInline) {\n            return false;\n        }\n        if (empty != tag.empty) {\n            return false;\n        }\n        if (isBlock != tag.isBlock) {\n            return false;\n        }\n        if (optionalClosing != tag.optionalClosing) {\n            return false;\n        }\n        if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = (tagName != null) ? tagName.hashCode() : 0;\n        result = (31 * result) + (isBlock ? 1 : 0);\n        result = (31 * result) + (canContainBlock ? 1 : 0);\n        result = (31 * result) + (canContainInline ? 1 : 0);\n        result = (31 * result) + (optionalClosing ? 1 : 0);\n        result = (31 * result) + (empty ? 1 : 0);\n        return result;\n    }\n\n    public java.lang.String toString() {\n        return tagName;\n    }\n\n    static {\n        createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n        createBlock(\"HEAD\").setAncestor(\"HTML\");\n        createBlock(\"BODY\").setAncestor(\"HTML\");\n        createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n        createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n        createInline(\"FONT\");\n        createInline(\"TT\");\n        createInline(\"I\");\n        createInline(\"B\");\n        createInline(\"BIG\");\n        createInline(\"SMALL\");\n        createInline(\"EM\");\n        createInline(\"STRONG\");\n        createInline(\"DFN\");\n        createInline(\"CODE\");\n        createInline(\"SAMP\");\n        createInline(\"KBD\");\n        createInline(\"VAR\");\n        createInline(\"CITE\");\n        createInline(\"ABBR\");\n        createInline(\"ACRONYM\");\n        createInline(\"A\").setOptionalClosing();\n        createInline(\"IMG\").setEmpty();\n        createInline(\"BR\").setEmpty();\n        createInline(\"MAP\");\n        createInline(\"Q\");\n        createInline(\"SUB\");\n        createInline(\"SUP\");\n        createInline(\"SPAN\");\n        createInline(\"BDO\");\n        createBlock(\"P\").setContainInlineOnly();\n        createBlock(\"H1\").setContainInlineOnly();\n        createBlock(\"H2\").setContainInlineOnly();\n        createBlock(\"H3\").setContainInlineOnly();\n        createBlock(\"H4\").setContainInlineOnly();\n        createBlock(\"H5\").setContainInlineOnly();\n        createBlock(\"H6\").setContainInlineOnly();\n        createBlock(\"UL\");\n        createBlock(\"OL\");\n        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n        createBlock(\"DIV\");\n        createBlock(\"BLOCKQUOTE\");\n        createBlock(\"HR\").setEmpty();\n        createBlock(\"ADDRESS\").setContainInlineOnly();\n        createBlock(\"FORM\").setOptionalClosing();\n        createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n        createInline(\"SELECT\").setAncestor(\"FORM\");\n        createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n        createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n        createInline(\"BUTTON\").setAncestor(\"FORM\");\n        createInline(\"OPTGROUP\").setParent(\"SELECT\");\n        createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n        createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n        createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n        createInline(\"AREA\").setEmpty();\n        createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n        createBlock(\"INS\");\n        createBlock(\"DEL\");\n        createBlock(\"DL\");\n        createInline(\"DT\").setParent(\"DL\").setOptionalClosing();\n        createInline(\"DD\").setParent(\"DL\").setOptionalClosing();\n        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n        createBlock(\"TABLE\");\n        createBlock(\"CAPTION\").setParent(\"TABLE\");\n        createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n        createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n        createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n    }\n\n    private static org.jsoup.parser.Tag createBlock(java.lang.String tagName) {\n        return org.jsoup.parser.Tag.register(new org.jsoup.parser.Tag(tagName));\n    }\n\n    private static org.jsoup.parser.Tag createInline(java.lang.String tagName) {\n        org.jsoup.parser.Tag inline = new org.jsoup.parser.Tag(tagName);\n        inline.isBlock = false;\n        inline.canContainBlock = false;\n        return org.jsoup.parser.Tag.register(inline);\n    }\n\n    private static org.jsoup.parser.Tag register(org.jsoup.parser.Tag tag) {\n        tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag.tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n\n    private org.jsoup.parser.Tag setContainInlineOnly() {\n        canContainBlock = false;\n        canContainInline = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setContainDataOnly() {\n        canContainBlock = false;\n        canContainInline = false;\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setEmpty() {\n        canContainBlock = false;\n        canContainInline = false;\n        empty = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setOptionalClosing() {\n        optionalClosing = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setPreserveWhitespace() {\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setAncestor(java.lang.String... tagNames) {\n        if (tagNames == null) {\n            ancestors = java.util.Collections.emptyList();\n        } else {\n            ancestors = new java.util.ArrayList<org.jsoup.parser.Tag>(tagNames.length);\n            for (java.lang.String name : tagNames) {\n                ancestors.add(org.jsoup.parser.Tag.valueOf(name));\n            }\n        }\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setParent(java.lang.String tagName) {\n        parent = org.jsoup.parser.Tag.valueOf(tagName);\n        setAncestor(tagName);\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (this.requiresSpecificParent() && this.getImplicitParent().equals(child)) {\n    return false;\n}",
            "src_parent": "{\n    org.apache.commons.lang.Validate.notNull(child);\n    if (child.isBlock && (!this.canContainBlock)) {\n        return false;\n    }\n    if ((!child.isBlock) && (!this.canContainInline)) {\n        return false;\n    }\n    if (this.optionalClosing && this.equals(child)) {\n        return false;\n    }\n    if (this.empty || this.isData()) {\n        return false;\n    }\n    if (this.tagName.equals(\"head\")) {\n        if (((((((child.tagName.equals(\"base\") || child.tagName.equals(\"script\")) || child.tagName.equals(\"noscript\")) || child.tagName.equals(\"link\")) || child.tagName.equals(\"meta\")) || child.tagName.equals(\"title\")) || child.tagName.equals(\"style\")) || child.tagName.equals(\"object\")) {\n            return true;\n        }\n        return false;\n    }\n    if (this.tagName.equals(\"dt\") && child.tagName.equals(\"dd\")) {\n        return false;\n    }\n    if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\")) {\n        return false;\n    }\n    if (this.requiresSpecificParent() && this.getImplicitParent().equals(child)) {\n        return false;\n    }\n    return true;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean requiresSpecificParent() {\n    return this.parent != null;\n}",
            "src_parent": "public class Tag {\n    private static final java.util.Map<java.lang.String, org.jsoup.parser.Tag> tags = new java.util.HashMap<java.lang.String, org.jsoup.parser.Tag>();\n\n    private static final org.jsoup.parser.Tag defaultAncestor;\n\n    static {\n        defaultAncestor = new Tag(\"BODY\");\n        tags.put(org.jsoup.parser.Tag.defaultAncestor.tagName, defaultAncestor);\n    }\n\n    private java.lang.String tagName;\n\n    private boolean isBlock = true;\n\n    private boolean canContainBlock = true;\n\n    private boolean canContainInline = true;\n\n    private boolean optionalClosing = false;\n\n    private boolean empty = false;\n\n    private boolean preserveWhitespace = false;\n\n    private java.util.List<org.jsoup.parser.Tag> ancestors;\n\n    private org.jsoup.parser.Tag parent;\n\n    private Tag(java.lang.String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    public java.lang.String getName() {\n        return tagName;\n    }\n\n    public static org.jsoup.parser.Tag valueOf(java.lang.String tagName) {\n        org.apache.commons.lang.Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        org.apache.commons.lang.Validate.notEmpty(tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.tags.get(tagName);\n            if (tag == null) {\n                tag = new org.jsoup.parser.Tag(tagName);\n                tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    boolean canContain(org.jsoup.parser.Tag child) {\n        org.apache.commons.lang.Validate.notNull(child);\n        if (child.isBlock && (!this.canContainBlock)) {\n            return false;\n        }\n        if ((!child.isBlock) && (!this.canContainInline)) {\n            return false;\n        }\n        if (this.optionalClosing && this.equals(child)) {\n            return false;\n        }\n        if (this.empty || this.isData()) {\n            return false;\n        }\n        if (this.tagName.equals(\"head\")) {\n            if (((((((child.tagName.equals(\"base\") || child.tagName.equals(\"script\")) || child.tagName.equals(\"noscript\")) || child.tagName.equals(\"link\")) || child.tagName.equals(\"meta\")) || child.tagName.equals(\"title\")) || child.tagName.equals(\"style\")) || child.tagName.equals(\"object\")) {\n                return true;\n            }\n            return false;\n        }\n        if (this.tagName.equals(\"dt\") && child.tagName.equals(\"dd\")) {\n            return false;\n        }\n        if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\")) {\n            return false;\n        }\n        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child)) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    public boolean isData() {\n        return (!canContainInline) && (!isEmpty());\n    }\n\n    public boolean isEmpty() {\n        return empty;\n    }\n\n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    org.jsoup.parser.Tag getImplicitParent() {\n        return !ancestors.isEmpty() ? ancestors.get(0) : null;\n    }\n\n    boolean requiresSpecificParent() {\n        return this.parent != null;\n    }\n\n    boolean isValidParent(org.jsoup.parser.Tag child) {\n        return this.equals(child.parent);\n    }\n\n    boolean isValidAncestor(org.jsoup.parser.Tag child) {\n        if (child.ancestors.isEmpty()) {\n            return true;\n        }\n        for (org.jsoup.parser.Tag tag : child.ancestors) {\n            if (this.equals(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.parser.Tag tag = ((org.jsoup.parser.Tag) (o));\n        if (canContainBlock != tag.canContainBlock) {\n            return false;\n        }\n        if (canContainInline != tag.canContainInline) {\n            return false;\n        }\n        if (empty != tag.empty) {\n            return false;\n        }\n        if (isBlock != tag.isBlock) {\n            return false;\n        }\n        if (optionalClosing != tag.optionalClosing) {\n            return false;\n        }\n        if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = (tagName != null) ? tagName.hashCode() : 0;\n        result = (31 * result) + (isBlock ? 1 : 0);\n        result = (31 * result) + (canContainBlock ? 1 : 0);\n        result = (31 * result) + (canContainInline ? 1 : 0);\n        result = (31 * result) + (optionalClosing ? 1 : 0);\n        result = (31 * result) + (empty ? 1 : 0);\n        return result;\n    }\n\n    public java.lang.String toString() {\n        return tagName;\n    }\n\n    static {\n        createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n        createBlock(\"HEAD\").setAncestor(\"HTML\");\n        createBlock(\"BODY\").setAncestor(\"HTML\");\n        createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n        createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n        createInline(\"FONT\");\n        createInline(\"TT\");\n        createInline(\"I\");\n        createInline(\"B\");\n        createInline(\"BIG\");\n        createInline(\"SMALL\");\n        createInline(\"EM\");\n        createInline(\"STRONG\");\n        createInline(\"DFN\");\n        createInline(\"CODE\");\n        createInline(\"SAMP\");\n        createInline(\"KBD\");\n        createInline(\"VAR\");\n        createInline(\"CITE\");\n        createInline(\"ABBR\");\n        createInline(\"ACRONYM\");\n        createInline(\"A\").setOptionalClosing();\n        createInline(\"IMG\").setEmpty();\n        createInline(\"BR\").setEmpty();\n        createInline(\"MAP\");\n        createInline(\"Q\");\n        createInline(\"SUB\");\n        createInline(\"SUP\");\n        createInline(\"SPAN\");\n        createInline(\"BDO\");\n        createBlock(\"P\").setContainInlineOnly();\n        createBlock(\"H1\").setContainInlineOnly();\n        createBlock(\"H2\").setContainInlineOnly();\n        createBlock(\"H3\").setContainInlineOnly();\n        createBlock(\"H4\").setContainInlineOnly();\n        createBlock(\"H5\").setContainInlineOnly();\n        createBlock(\"H6\").setContainInlineOnly();\n        createBlock(\"UL\");\n        createBlock(\"OL\");\n        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n        createBlock(\"DIV\");\n        createBlock(\"BLOCKQUOTE\");\n        createBlock(\"HR\").setEmpty();\n        createBlock(\"ADDRESS\").setContainInlineOnly();\n        createBlock(\"FORM\").setOptionalClosing();\n        createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n        createInline(\"SELECT\").setAncestor(\"FORM\");\n        createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n        createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n        createInline(\"BUTTON\").setAncestor(\"FORM\");\n        createInline(\"OPTGROUP\").setParent(\"SELECT\");\n        createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n        createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n        createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n        createInline(\"AREA\").setEmpty();\n        createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n        createBlock(\"INS\");\n        createBlock(\"DEL\");\n        createBlock(\"DL\");\n        createInline(\"DT\").setParent(\"DL\").setOptionalClosing();\n        createInline(\"DD\").setParent(\"DL\").setOptionalClosing();\n        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n        createBlock(\"TABLE\");\n        createBlock(\"CAPTION\").setParent(\"TABLE\");\n        createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n        createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n        createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n    }\n\n    private static org.jsoup.parser.Tag createBlock(java.lang.String tagName) {\n        return org.jsoup.parser.Tag.register(new org.jsoup.parser.Tag(tagName));\n    }\n\n    private static org.jsoup.parser.Tag createInline(java.lang.String tagName) {\n        org.jsoup.parser.Tag inline = new org.jsoup.parser.Tag(tagName);\n        inline.isBlock = false;\n        inline.canContainBlock = false;\n        return org.jsoup.parser.Tag.register(inline);\n    }\n\n    private static org.jsoup.parser.Tag register(org.jsoup.parser.Tag tag) {\n        tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag.tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n\n    private org.jsoup.parser.Tag setContainInlineOnly() {\n        canContainBlock = false;\n        canContainInline = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setContainDataOnly() {\n        canContainBlock = false;\n        canContainInline = false;\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setEmpty() {\n        canContainBlock = false;\n        canContainInline = false;\n        empty = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setOptionalClosing() {\n        optionalClosing = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setPreserveWhitespace() {\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setAncestor(java.lang.String... tagNames) {\n        if (tagNames == null) {\n            ancestors = java.util.Collections.emptyList();\n        } else {\n            ancestors = new java.util.ArrayList<org.jsoup.parser.Tag>(tagNames.length);\n            for (java.lang.String name : tagNames) {\n                ancestors.add(org.jsoup.parser.Tag.valueOf(name));\n            }\n        }\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setParent(java.lang.String tagName) {\n        parent = org.jsoup.parser.Tag.valueOf(tagName);\n        setAncestor(tagName);\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "boolean isValidParent(org.jsoup.parser.Tag child) {\n    return this.equals(child.parent);\n}",
            "src_parent": "public class Tag {\n    private static final java.util.Map<java.lang.String, org.jsoup.parser.Tag> tags = new java.util.HashMap<java.lang.String, org.jsoup.parser.Tag>();\n\n    private static final org.jsoup.parser.Tag defaultAncestor;\n\n    static {\n        defaultAncestor = new Tag(\"BODY\");\n        tags.put(org.jsoup.parser.Tag.defaultAncestor.tagName, defaultAncestor);\n    }\n\n    private java.lang.String tagName;\n\n    private boolean isBlock = true;\n\n    private boolean canContainBlock = true;\n\n    private boolean canContainInline = true;\n\n    private boolean optionalClosing = false;\n\n    private boolean empty = false;\n\n    private boolean preserveWhitespace = false;\n\n    private java.util.List<org.jsoup.parser.Tag> ancestors;\n\n    private org.jsoup.parser.Tag parent;\n\n    private Tag(java.lang.String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    public java.lang.String getName() {\n        return tagName;\n    }\n\n    public static org.jsoup.parser.Tag valueOf(java.lang.String tagName) {\n        org.apache.commons.lang.Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        org.apache.commons.lang.Validate.notEmpty(tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.tags.get(tagName);\n            if (tag == null) {\n                tag = new org.jsoup.parser.Tag(tagName);\n                tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    boolean canContain(org.jsoup.parser.Tag child) {\n        org.apache.commons.lang.Validate.notNull(child);\n        if (child.isBlock && (!this.canContainBlock)) {\n            return false;\n        }\n        if ((!child.isBlock) && (!this.canContainInline)) {\n            return false;\n        }\n        if (this.optionalClosing && this.equals(child)) {\n            return false;\n        }\n        if (this.empty || this.isData()) {\n            return false;\n        }\n        if (this.tagName.equals(\"head\")) {\n            if (((((((child.tagName.equals(\"base\") || child.tagName.equals(\"script\")) || child.tagName.equals(\"noscript\")) || child.tagName.equals(\"link\")) || child.tagName.equals(\"meta\")) || child.tagName.equals(\"title\")) || child.tagName.equals(\"style\")) || child.tagName.equals(\"object\")) {\n                return true;\n            }\n            return false;\n        }\n        if (this.tagName.equals(\"dt\") && child.tagName.equals(\"dd\")) {\n            return false;\n        }\n        if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\")) {\n            return false;\n        }\n        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child)) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    public boolean isData() {\n        return (!canContainInline) && (!isEmpty());\n    }\n\n    public boolean isEmpty() {\n        return empty;\n    }\n\n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    org.jsoup.parser.Tag getImplicitParent() {\n        return !ancestors.isEmpty() ? ancestors.get(0) : null;\n    }\n\n    boolean requiresSpecificParent() {\n        return this.parent != null;\n    }\n\n    boolean isValidParent(org.jsoup.parser.Tag child) {\n        return this.equals(child.parent);\n    }\n\n    boolean isValidAncestor(org.jsoup.parser.Tag child) {\n        if (child.ancestors.isEmpty()) {\n            return true;\n        }\n        for (org.jsoup.parser.Tag tag : child.ancestors) {\n            if (this.equals(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.parser.Tag tag = ((org.jsoup.parser.Tag) (o));\n        if (canContainBlock != tag.canContainBlock) {\n            return false;\n        }\n        if (canContainInline != tag.canContainInline) {\n            return false;\n        }\n        if (empty != tag.empty) {\n            return false;\n        }\n        if (isBlock != tag.isBlock) {\n            return false;\n        }\n        if (optionalClosing != tag.optionalClosing) {\n            return false;\n        }\n        if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = (tagName != null) ? tagName.hashCode() : 0;\n        result = (31 * result) + (isBlock ? 1 : 0);\n        result = (31 * result) + (canContainBlock ? 1 : 0);\n        result = (31 * result) + (canContainInline ? 1 : 0);\n        result = (31 * result) + (optionalClosing ? 1 : 0);\n        result = (31 * result) + (empty ? 1 : 0);\n        return result;\n    }\n\n    public java.lang.String toString() {\n        return tagName;\n    }\n\n    static {\n        createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n        createBlock(\"HEAD\").setAncestor(\"HTML\");\n        createBlock(\"BODY\").setAncestor(\"HTML\");\n        createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n        createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n        createInline(\"FONT\");\n        createInline(\"TT\");\n        createInline(\"I\");\n        createInline(\"B\");\n        createInline(\"BIG\");\n        createInline(\"SMALL\");\n        createInline(\"EM\");\n        createInline(\"STRONG\");\n        createInline(\"DFN\");\n        createInline(\"CODE\");\n        createInline(\"SAMP\");\n        createInline(\"KBD\");\n        createInline(\"VAR\");\n        createInline(\"CITE\");\n        createInline(\"ABBR\");\n        createInline(\"ACRONYM\");\n        createInline(\"A\").setOptionalClosing();\n        createInline(\"IMG\").setEmpty();\n        createInline(\"BR\").setEmpty();\n        createInline(\"MAP\");\n        createInline(\"Q\");\n        createInline(\"SUB\");\n        createInline(\"SUP\");\n        createInline(\"SPAN\");\n        createInline(\"BDO\");\n        createBlock(\"P\").setContainInlineOnly();\n        createBlock(\"H1\").setContainInlineOnly();\n        createBlock(\"H2\").setContainInlineOnly();\n        createBlock(\"H3\").setContainInlineOnly();\n        createBlock(\"H4\").setContainInlineOnly();\n        createBlock(\"H5\").setContainInlineOnly();\n        createBlock(\"H6\").setContainInlineOnly();\n        createBlock(\"UL\");\n        createBlock(\"OL\");\n        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n        createBlock(\"DIV\");\n        createBlock(\"BLOCKQUOTE\");\n        createBlock(\"HR\").setEmpty();\n        createBlock(\"ADDRESS\").setContainInlineOnly();\n        createBlock(\"FORM\").setOptionalClosing();\n        createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n        createInline(\"SELECT\").setAncestor(\"FORM\");\n        createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n        createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n        createInline(\"BUTTON\").setAncestor(\"FORM\");\n        createInline(\"OPTGROUP\").setParent(\"SELECT\");\n        createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n        createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n        createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n        createInline(\"AREA\").setEmpty();\n        createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n        createBlock(\"INS\");\n        createBlock(\"DEL\");\n        createBlock(\"DL\");\n        createInline(\"DT\").setParent(\"DL\").setOptionalClosing();\n        createInline(\"DD\").setParent(\"DL\").setOptionalClosing();\n        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n        createBlock(\"TABLE\");\n        createBlock(\"CAPTION\").setParent(\"TABLE\");\n        createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n        createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n        createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n    }\n\n    private static org.jsoup.parser.Tag createBlock(java.lang.String tagName) {\n        return org.jsoup.parser.Tag.register(new org.jsoup.parser.Tag(tagName));\n    }\n\n    private static org.jsoup.parser.Tag createInline(java.lang.String tagName) {\n        org.jsoup.parser.Tag inline = new org.jsoup.parser.Tag(tagName);\n        inline.isBlock = false;\n        inline.canContainBlock = false;\n        return org.jsoup.parser.Tag.register(inline);\n    }\n\n    private static org.jsoup.parser.Tag register(org.jsoup.parser.Tag tag) {\n        tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag.tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n\n    private org.jsoup.parser.Tag setContainInlineOnly() {\n        canContainBlock = false;\n        canContainInline = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setContainDataOnly() {\n        canContainBlock = false;\n        canContainInline = false;\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setEmpty() {\n        canContainBlock = false;\n        canContainInline = false;\n        empty = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setOptionalClosing() {\n        optionalClosing = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setPreserveWhitespace() {\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setAncestor(java.lang.String... tagNames) {\n        if (tagNames == null) {\n            ancestors = java.util.Collections.emptyList();\n        } else {\n            ancestors = new java.util.ArrayList<org.jsoup.parser.Tag>(tagNames.length);\n            for (java.lang.String name : tagNames) {\n                ancestors.add(org.jsoup.parser.Tag.valueOf(name));\n            }\n        }\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setParent(java.lang.String tagName) {\n        parent = org.jsoup.parser.Tag.valueOf(tagName);\n        setAncestor(tagName);\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private org.jsoup.parser.Tag setParent(java.lang.String tagName) {\n    parent = org.jsoup.parser.Tag.valueOf(tagName);\n    setAncestor(tagName);\n    return this;\n}",
            "src_parent": "public class Tag {\n    private static final java.util.Map<java.lang.String, org.jsoup.parser.Tag> tags = new java.util.HashMap<java.lang.String, org.jsoup.parser.Tag>();\n\n    private static final org.jsoup.parser.Tag defaultAncestor;\n\n    static {\n        defaultAncestor = new Tag(\"BODY\");\n        tags.put(org.jsoup.parser.Tag.defaultAncestor.tagName, defaultAncestor);\n    }\n\n    private java.lang.String tagName;\n\n    private boolean isBlock = true;\n\n    private boolean canContainBlock = true;\n\n    private boolean canContainInline = true;\n\n    private boolean optionalClosing = false;\n\n    private boolean empty = false;\n\n    private boolean preserveWhitespace = false;\n\n    private java.util.List<org.jsoup.parser.Tag> ancestors;\n\n    private org.jsoup.parser.Tag parent;\n\n    private Tag(java.lang.String tagName) {\n        this.tagName = tagName.toLowerCase();\n    }\n\n    public java.lang.String getName() {\n        return tagName;\n    }\n\n    public static org.jsoup.parser.Tag valueOf(java.lang.String tagName) {\n        org.apache.commons.lang.Validate.notNull(tagName);\n        tagName = tagName.trim().toLowerCase();\n        org.apache.commons.lang.Validate.notEmpty(tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.tags.get(tagName);\n            if (tag == null) {\n                tag = new org.jsoup.parser.Tag(tagName);\n                tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n                tag.isBlock = false;\n                tag.canContainBlock = true;\n            }\n            return tag;\n        }\n    }\n\n    boolean canContain(org.jsoup.parser.Tag child) {\n        org.apache.commons.lang.Validate.notNull(child);\n        if (child.isBlock && (!this.canContainBlock)) {\n            return false;\n        }\n        if ((!child.isBlock) && (!this.canContainInline)) {\n            return false;\n        }\n        if (this.optionalClosing && this.equals(child)) {\n            return false;\n        }\n        if (this.empty || this.isData()) {\n            return false;\n        }\n        if (this.tagName.equals(\"head\")) {\n            if (((((((child.tagName.equals(\"base\") || child.tagName.equals(\"script\")) || child.tagName.equals(\"noscript\")) || child.tagName.equals(\"link\")) || child.tagName.equals(\"meta\")) || child.tagName.equals(\"title\")) || child.tagName.equals(\"style\")) || child.tagName.equals(\"object\")) {\n                return true;\n            }\n            return false;\n        }\n        if (this.tagName.equals(\"dt\") && child.tagName.equals(\"dd\")) {\n            return false;\n        }\n        if (this.tagName.equals(\"dd\") && child.tagName.equals(\"dt\")) {\n            return false;\n        }\n        if (this.requiresSpecificParent() && this.getImplicitParent().equals(child)) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean isBlock() {\n        return isBlock;\n    }\n\n    public boolean canContainBlock() {\n        return canContainBlock;\n    }\n\n    public boolean isInline() {\n        return !isBlock;\n    }\n\n    public boolean isData() {\n        return (!canContainInline) && (!isEmpty());\n    }\n\n    public boolean isEmpty() {\n        return empty;\n    }\n\n    public boolean preserveWhitespace() {\n        return preserveWhitespace;\n    }\n\n    org.jsoup.parser.Tag getImplicitParent() {\n        return !ancestors.isEmpty() ? ancestors.get(0) : null;\n    }\n\n    boolean requiresSpecificParent() {\n        return this.parent != null;\n    }\n\n    boolean isValidParent(org.jsoup.parser.Tag child) {\n        return this.equals(child.parent);\n    }\n\n    boolean isValidAncestor(org.jsoup.parser.Tag child) {\n        if (child.ancestors.isEmpty()) {\n            return true;\n        }\n        for (org.jsoup.parser.Tag tag : child.ancestors) {\n            if (this.equals(tag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    public boolean equals(java.lang.Object o) {\n        if (this == o) {\n            return true;\n        }\n        if ((o == null) || (getClass() != o.getClass())) {\n            return false;\n        }\n        org.jsoup.parser.Tag tag = ((org.jsoup.parser.Tag) (o));\n        if (canContainBlock != tag.canContainBlock) {\n            return false;\n        }\n        if (canContainInline != tag.canContainInline) {\n            return false;\n        }\n        if (empty != tag.empty) {\n            return false;\n        }\n        if (isBlock != tag.isBlock) {\n            return false;\n        }\n        if (optionalClosing != tag.optionalClosing) {\n            return false;\n        }\n        if (tagName != null ? !tagName.equals(tag.tagName) : tag.tagName != null) {\n            return false;\n        }\n        return true;\n    }\n\n    @java.lang.Override\n    public int hashCode() {\n        int result = (tagName != null) ? tagName.hashCode() : 0;\n        result = (31 * result) + (isBlock ? 1 : 0);\n        result = (31 * result) + (canContainBlock ? 1 : 0);\n        result = (31 * result) + (canContainInline ? 1 : 0);\n        result = (31 * result) + (optionalClosing ? 1 : 0);\n        result = (31 * result) + (empty ? 1 : 0);\n        return result;\n    }\n\n    public java.lang.String toString() {\n        return tagName;\n    }\n\n    static {\n        createBlock(\"HTML\").setAncestor(new java.lang.String[0]);\n        createBlock(\"HEAD\").setAncestor(\"HTML\");\n        createBlock(\"BODY\").setAncestor(\"HTML\");\n        createBlock(\"FRAMESET\").setAncestor(\"HTML\");\n        createBlock(\"SCRIPT\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"NOSCRIPT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"STYLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\");\n        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n        createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n        createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n        createBlock(\"NOFRAMES\").setParent(\"FRAMESET\").setContainDataOnly();\n        createInline(\"FONT\");\n        createInline(\"TT\");\n        createInline(\"I\");\n        createInline(\"B\");\n        createInline(\"BIG\");\n        createInline(\"SMALL\");\n        createInline(\"EM\");\n        createInline(\"STRONG\");\n        createInline(\"DFN\");\n        createInline(\"CODE\");\n        createInline(\"SAMP\");\n        createInline(\"KBD\");\n        createInline(\"VAR\");\n        createInline(\"CITE\");\n        createInline(\"ABBR\");\n        createInline(\"ACRONYM\");\n        createInline(\"A\").setOptionalClosing();\n        createInline(\"IMG\").setEmpty();\n        createInline(\"BR\").setEmpty();\n        createInline(\"MAP\");\n        createInline(\"Q\");\n        createInline(\"SUB\");\n        createInline(\"SUP\");\n        createInline(\"SPAN\");\n        createInline(\"BDO\");\n        createBlock(\"P\").setContainInlineOnly();\n        createBlock(\"H1\").setContainInlineOnly();\n        createBlock(\"H2\").setContainInlineOnly();\n        createBlock(\"H3\").setContainInlineOnly();\n        createBlock(\"H4\").setContainInlineOnly();\n        createBlock(\"H5\").setContainInlineOnly();\n        createBlock(\"H6\").setContainInlineOnly();\n        createBlock(\"UL\");\n        createBlock(\"OL\");\n        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n        createBlock(\"DIV\");\n        createBlock(\"BLOCKQUOTE\");\n        createBlock(\"HR\").setEmpty();\n        createBlock(\"ADDRESS\").setContainInlineOnly();\n        createBlock(\"FORM\").setOptionalClosing();\n        createInline(\"INPUT\").setAncestor(\"FORM\").setEmpty();\n        createInline(\"SELECT\").setAncestor(\"FORM\");\n        createInline(\"TEXTAREA\").setAncestor(\"FORM\").setContainDataOnly();\n        createInline(\"LABEL\").setAncestor(\"FORM\").setOptionalClosing();\n        createInline(\"BUTTON\").setAncestor(\"FORM\");\n        createInline(\"OPTGROUP\").setParent(\"SELECT\");\n        createInline(\"OPTION\").setParent(\"SELECT\").setContainDataOnly();\n        createBlock(\"FIELDSET\").setAncestor(\"FORM\");\n        createInline(\"LEGEND\").setAncestor(\"FIELDSET\");\n        createInline(\"AREA\").setEmpty();\n        createInline(\"PARAM\").setParent(\"OBJECT\").setEmpty();\n        createBlock(\"INS\");\n        createBlock(\"DEL\");\n        createBlock(\"DL\");\n        createInline(\"DT\").setParent(\"DL\").setOptionalClosing();\n        createInline(\"DD\").setParent(\"DL\").setOptionalClosing();\n        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing();\n        createBlock(\"TABLE\");\n        createBlock(\"CAPTION\").setParent(\"TABLE\");\n        createBlock(\"THEAD\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TFOOT\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TBODY\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COLGROUP\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n        createBlock(\"TR\").setParent(\"TABLE\").setOptionalClosing();\n        createBlock(\"TH\").setParent(\"TR\").setOptionalClosing();\n        createBlock(\"TD\").setParent(\"TR\").setOptionalClosing();\n    }\n\n    private static org.jsoup.parser.Tag createBlock(java.lang.String tagName) {\n        return org.jsoup.parser.Tag.register(new org.jsoup.parser.Tag(tagName));\n    }\n\n    private static org.jsoup.parser.Tag createInline(java.lang.String tagName) {\n        org.jsoup.parser.Tag inline = new org.jsoup.parser.Tag(tagName);\n        inline.isBlock = false;\n        inline.canContainBlock = false;\n        return org.jsoup.parser.Tag.register(inline);\n    }\n\n    private static org.jsoup.parser.Tag register(org.jsoup.parser.Tag tag) {\n        tag.setAncestor(org.jsoup.parser.Tag.defaultAncestor.tagName);\n        synchronized(org.jsoup.parser.Tag.tags) {\n            org.jsoup.parser.Tag.tags.put(tag.tagName, tag);\n        }\n        return tag;\n    }\n\n    private org.jsoup.parser.Tag setContainInlineOnly() {\n        canContainBlock = false;\n        canContainInline = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setContainDataOnly() {\n        canContainBlock = false;\n        canContainInline = false;\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setEmpty() {\n        canContainBlock = false;\n        canContainInline = false;\n        empty = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setOptionalClosing() {\n        optionalClosing = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setPreserveWhitespace() {\n        preserveWhitespace = true;\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setAncestor(java.lang.String... tagNames) {\n        if (tagNames == null) {\n            ancestors = java.util.Collections.emptyList();\n        } else {\n            ancestors = new java.util.ArrayList<org.jsoup.parser.Tag>(tagNames.length);\n            for (java.lang.String name : tagNames) {\n                ancestors.add(org.jsoup.parser.Tag.valueOf(name));\n            }\n        }\n        return this;\n    }\n\n    private org.jsoup.parser.Tag setParent(java.lang.String tagName) {\n        parent = org.jsoup.parser.Tag.valueOf(tagName);\n        setAncestor(tagName);\n        return this;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "Tag"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "For",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "parent2.isValidParent(childTag)",
            "dst_parent": "if (parent2.isValidParent(childTag)) {\n    return true;\n}",
            "dst_parent_type": "If",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "parent2.isValidAncestor(childTag)",
            "src_parent": "if (parent2.isValidAncestor(childTag)) {\n    return true;\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean relaxed = false;",
            "src_parent": "public class Parser {\n    private static final java.lang.String SQ = \"'\";\n\n    private static final java.lang.String DQ = \"\\\"\";\n\n    private static final org.jsoup.parser.Tag htmlTag = org.jsoup.parser.Tag.valueOf(\"html\");\n\n    private static final org.jsoup.parser.Tag headTag = org.jsoup.parser.Tag.valueOf(\"head\");\n\n    private static final org.jsoup.parser.Tag bodyTag = org.jsoup.parser.Tag.valueOf(\"body\");\n\n    private static final org.jsoup.parser.Tag titleTag = org.jsoup.parser.Tag.valueOf(\"title\");\n\n    private static final org.jsoup.parser.Tag textareaTag = org.jsoup.parser.Tag.valueOf(\"textarea\");\n\n    private final java.util.LinkedList<org.jsoup.parser.Element> stack;\n\n    private final org.jsoup.parser.TokenQueue tq;\n\n    private final org.jsoup.parser.Document doc;\n\n    private java.lang.String baseUri;\n\n    private boolean relaxed = false;\n\n    private Parser(java.lang.String html, java.lang.String baseUri, boolean isBodyFragment) {\n        org.apache.commons.lang.Validate.notNull(html);\n        org.apache.commons.lang.Validate.notNull(baseUri);\n        stack = new java.util.LinkedList<org.jsoup.parser.Element>();\n        tq = new org.jsoup.parser.TokenQueue(html);\n        this.baseUri = baseUri;\n        if (isBodyFragment) {\n            doc = org.jsoup.parser.Document.createShell(baseUri);\n            stack.add(doc.body());\n        } else {\n            doc = new org.jsoup.parser.Document(baseUri);\n            stack.add(doc);\n        }\n    }\n\n    public static org.jsoup.parser.Document parse(java.lang.String html, java.lang.String baseUri) {\n        org.jsoup.parser.Parser parser = new org.jsoup.parser.Parser(html, baseUri, false);\n        return parser.parse();\n    }\n\n    public static org.jsoup.parser.Document parseBodyFragment(java.lang.String bodyHtml, java.lang.String baseUri) {\n        org.jsoup.parser.Parser parser = new org.jsoup.parser.Parser(bodyHtml, baseUri, true);\n        return parser.parse();\n    }\n\n    public static org.jsoup.parser.Document parseBodyFragmentRelaxed(java.lang.String bodyHtml, java.lang.String baseUri) {\n        org.jsoup.parser.Parser parser = new org.jsoup.parser.Parser(bodyHtml, baseUri, true);\n        parser.relaxed = true;\n        return parser.parse();\n    }\n\n    private org.jsoup.parser.Document parse() {\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"<!--\")) {\n                parseComment();\n            } else if (tq.matches(\"<![CDATA[\")) {\n                parseCdata();\n            } else if (tq.matches(\"<?\") || tq.matches(\"<!\")) {\n                parseXmlDecl();\n            } else if (tq.matches(\"</\")) {\n                parseEndTag();\n            } else if (tq.matches(\"<\")) {\n                parseStartTag();\n            } else {\n                parseTextNode();\n            }\n        } \n        return doc.normalise();\n    }\n\n    private void parseComment() {\n        tq.consume(\"<!--\");\n        java.lang.String data = tq.chompTo(\"->\");\n        if (data.endsWith(\"-\")) {\n            data = data.substring(0, data.length() - 1);\n        }\n        org.jsoup.parser.Comment comment = new org.jsoup.parser.Comment(data, baseUri);\n        last().appendChild(comment);\n    }\n\n    private void parseXmlDecl() {\n        tq.consume(\"<\");\n        java.lang.Character firstChar = tq.consume();\n        boolean procInstr = firstChar.toString().equals(\"!\");\n        java.lang.String data = tq.chompTo(\">\");\n        org.jsoup.parser.XmlDeclaration decl = new org.jsoup.parser.XmlDeclaration(data, baseUri, procInstr);\n        last().appendChild(decl);\n    }\n\n    private void parseEndTag() {\n        tq.consume(\"</\");\n        java.lang.String tagName = tq.consumeWord();\n        tq.chompTo(\">\");\n        if (tagName.length() != 0) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf(tagName);\n            popStackToClose(tag);\n        }\n    }\n\n    private void parseStartTag() {\n        tq.consume(\"<\");\n        java.lang.String tagName = tq.consumeWord();\n        if (tagName.length() == 0) {\n            tq.addFirst(\"&lt;\");\n            parseTextNode();\n            return;\n        }\n        org.jsoup.parser.Attributes attributes = new org.jsoup.parser.Attributes();\n        while ((!tq.matchesAny(\"<\", \"/>\", \">\")) && (!tq.isEmpty())) {\n            org.jsoup.parser.Attribute attribute = parseAttribute();\n            if (attribute != null) {\n                attributes.put(attribute);\n            }\n        } \n        org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf(tagName);\n        org.jsoup.parser.Element child = new org.jsoup.parser.Element(tag, baseUri, attributes);\n        boolean isEmptyElement = tag.isEmpty();\n        if (tq.matchChomp(\"/>\")) {\n            isEmptyElement = true;\n        } else {\n            tq.matchChomp(\">\");\n        }\n        addChildToParent(child, isEmptyElement);\n        if (tag.isData()) {\n            java.lang.String data = tq.chompTo(\"</\" + tagName);\n            tq.chompTo(\">\");\n            popStackToClose(tag);\n            org.jsoup.parser.Node dataNode;\n            if (tag.equals(org.jsoup.parser.Parser.titleTag) || tag.equals(org.jsoup.parser.Parser.textareaTag)) {\n                dataNode = org.jsoup.parser.TextNode.createFromEncoded(data, baseUri);\n            } else {\n                dataNode = new org.jsoup.parser.DataNode(data, baseUri);\n            }\n            child.appendChild(dataNode);\n        }\n        if (child.tagName().equals(\"base\")) {\n            java.lang.String href = child.absUrl(\"href\");\n            if (href.length() != 0) {\n                baseUri = href;\n                doc.setBaseUri(href);\n            }\n        }\n    }\n\n    private org.jsoup.parser.Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        java.lang.String key = tq.consumeAttributeKey();\n        java.lang.String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n            if (tq.matchChomp(org.jsoup.parser.Parser.SQ)) {\n                value = tq.chompTo(org.jsoup.parser.Parser.SQ);\n            } else if (tq.matchChomp(org.jsoup.parser.Parser.DQ)) {\n                value = tq.chompTo(org.jsoup.parser.Parser.DQ);\n            } else {\n                java.lang.StringBuilder valueAccum = new java.lang.StringBuilder();\n                while (((!tq.matchesAny(\"<\", \"/>\", \">\")) && (!tq.matchesWhitespace())) && (!tq.isEmpty())) {\n                    valueAccum.append(tq.consume());\n                } \n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0) {\n            return org.jsoup.parser.Attribute.createFromEncoded(key, value);\n        } else {\n            tq.consume();\n            return null;\n        }\n    }\n\n    private void parseTextNode() {\n        java.lang.String text = tq.consumeTo(\"<\");\n        org.jsoup.parser.TextNode textNode = org.jsoup.parser.TextNode.createFromEncoded(text, baseUri);\n        last().appendChild(textNode);\n    }\n\n    private void parseCdata() {\n        tq.consume(\"<![CDATA[\");\n        java.lang.String rawText = tq.chompTo(\"]]>\");\n        org.jsoup.parser.TextNode textNode = new org.jsoup.parser.TextNode(rawText, baseUri);\n        last().appendChild(textNode);\n    }\n\n    private org.jsoup.parser.Element addChildToParent(org.jsoup.parser.Element child, boolean isEmptyElement) {\n        org.jsoup.parser.Element parent = popStackToSuitableContainer(child.tag());\n        org.jsoup.parser.Tag childTag = child.tag();\n        boolean validAncestor = stackHasValidParent(childTag);\n        if ((!validAncestor) && (!relaxed)) {\n            org.jsoup.parser.Tag parentTag = childTag.getImplicitParent();\n            org.jsoup.parser.Element implicit = new org.jsoup.parser.Element(parentTag, baseUri);\n            if (child.tag().equals(org.jsoup.parser.Parser.bodyTag)) {\n                org.jsoup.parser.Element head = new org.jsoup.parser.Element(org.jsoup.parser.Parser.headTag, baseUri);\n                implicit.appendChild(head);\n            }\n            implicit.appendChild(child);\n            org.jsoup.parser.Element root = addChildToParent(implicit, false);\n            if (!isEmptyElement) {\n                stack.addLast(child);\n            }\n            return root;\n        }\n        parent.appendChild(child);\n        if (!isEmptyElement) {\n            stack.addLast(child);\n        }\n        return parent;\n    }\n\n    private boolean stackHasValidParent(org.jsoup.parser.Tag childTag) {\n        if ((stack.size() == 1) && childTag.equals(org.jsoup.parser.Parser.htmlTag)) {\n            return true;\n        }\n        if (childTag.requiresSpecificParent()) {\n            return stack.getLast().tag().isValidParent(childTag);\n        }\n        for (int i = stack.size() - 1; i >= 0; i--) {\n            org.jsoup.parser.Element el = stack.get(i);\n            org.jsoup.parser.Tag parent2 = el.tag();\n            if (parent2.isValidAncestor(childTag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private org.jsoup.parser.Element popStackToSuitableContainer(org.jsoup.parser.Tag tag) {\n        while (!stack.isEmpty()) {\n            if (last().tag().canContain(tag)) {\n                return last();\n            } else {\n                stack.removeLast();\n            }\n        } \n        return null;\n    }\n\n    private org.jsoup.parser.Element popStackToClose(org.jsoup.parser.Tag tag) {\n        int counter = 0;\n        org.jsoup.parser.Element elToClose = null;\n        for (int i = stack.size() - 1; i > 0; i--) {\n            counter++;\n            org.jsoup.parser.Element el = stack.get(i);\n            org.jsoup.parser.Tag elTag = el.tag();\n            if (elTag.equals(org.jsoup.parser.Parser.bodyTag) || elTag.equals(org.jsoup.parser.Parser.htmlTag)) {\n                break;\n            } else if (elTag.equals(tag)) {\n                elToClose = el;\n                break;\n            }\n        }\n        if (elToClose != null) {\n            for (int i = 0; i < counter; i++) {\n                stack.removeLast();\n            }\n        }\n        return elToClose;\n    }\n\n    private org.jsoup.parser.Element last() {\n        return stack.getLast();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "public static org.jsoup.parser.Document parseBodyFragmentRelaxed(java.lang.String bodyHtml, java.lang.String baseUri) {\n    org.jsoup.parser.Parser parser = new org.jsoup.parser.Parser(bodyHtml, baseUri, true);\n    parser.relaxed = true;\n    return parser.parse();\n}",
            "src_parent": "public class Parser {\n    private static final java.lang.String SQ = \"'\";\n\n    private static final java.lang.String DQ = \"\\\"\";\n\n    private static final org.jsoup.parser.Tag htmlTag = org.jsoup.parser.Tag.valueOf(\"html\");\n\n    private static final org.jsoup.parser.Tag headTag = org.jsoup.parser.Tag.valueOf(\"head\");\n\n    private static final org.jsoup.parser.Tag bodyTag = org.jsoup.parser.Tag.valueOf(\"body\");\n\n    private static final org.jsoup.parser.Tag titleTag = org.jsoup.parser.Tag.valueOf(\"title\");\n\n    private static final org.jsoup.parser.Tag textareaTag = org.jsoup.parser.Tag.valueOf(\"textarea\");\n\n    private final java.util.LinkedList<org.jsoup.parser.Element> stack;\n\n    private final org.jsoup.parser.TokenQueue tq;\n\n    private final org.jsoup.parser.Document doc;\n\n    private java.lang.String baseUri;\n\n    private boolean relaxed = false;\n\n    private Parser(java.lang.String html, java.lang.String baseUri, boolean isBodyFragment) {\n        org.apache.commons.lang.Validate.notNull(html);\n        org.apache.commons.lang.Validate.notNull(baseUri);\n        stack = new java.util.LinkedList<org.jsoup.parser.Element>();\n        tq = new org.jsoup.parser.TokenQueue(html);\n        this.baseUri = baseUri;\n        if (isBodyFragment) {\n            doc = org.jsoup.parser.Document.createShell(baseUri);\n            stack.add(doc.body());\n        } else {\n            doc = new org.jsoup.parser.Document(baseUri);\n            stack.add(doc);\n        }\n    }\n\n    public static org.jsoup.parser.Document parse(java.lang.String html, java.lang.String baseUri) {\n        org.jsoup.parser.Parser parser = new org.jsoup.parser.Parser(html, baseUri, false);\n        return parser.parse();\n    }\n\n    public static org.jsoup.parser.Document parseBodyFragment(java.lang.String bodyHtml, java.lang.String baseUri) {\n        org.jsoup.parser.Parser parser = new org.jsoup.parser.Parser(bodyHtml, baseUri, true);\n        return parser.parse();\n    }\n\n    public static org.jsoup.parser.Document parseBodyFragmentRelaxed(java.lang.String bodyHtml, java.lang.String baseUri) {\n        org.jsoup.parser.Parser parser = new org.jsoup.parser.Parser(bodyHtml, baseUri, true);\n        parser.relaxed = true;\n        return parser.parse();\n    }\n\n    private org.jsoup.parser.Document parse() {\n        while (!tq.isEmpty()) {\n            if (tq.matches(\"<!--\")) {\n                parseComment();\n            } else if (tq.matches(\"<![CDATA[\")) {\n                parseCdata();\n            } else if (tq.matches(\"<?\") || tq.matches(\"<!\")) {\n                parseXmlDecl();\n            } else if (tq.matches(\"</\")) {\n                parseEndTag();\n            } else if (tq.matches(\"<\")) {\n                parseStartTag();\n            } else {\n                parseTextNode();\n            }\n        } \n        return doc.normalise();\n    }\n\n    private void parseComment() {\n        tq.consume(\"<!--\");\n        java.lang.String data = tq.chompTo(\"->\");\n        if (data.endsWith(\"-\")) {\n            data = data.substring(0, data.length() - 1);\n        }\n        org.jsoup.parser.Comment comment = new org.jsoup.parser.Comment(data, baseUri);\n        last().appendChild(comment);\n    }\n\n    private void parseXmlDecl() {\n        tq.consume(\"<\");\n        java.lang.Character firstChar = tq.consume();\n        boolean procInstr = firstChar.toString().equals(\"!\");\n        java.lang.String data = tq.chompTo(\">\");\n        org.jsoup.parser.XmlDeclaration decl = new org.jsoup.parser.XmlDeclaration(data, baseUri, procInstr);\n        last().appendChild(decl);\n    }\n\n    private void parseEndTag() {\n        tq.consume(\"</\");\n        java.lang.String tagName = tq.consumeWord();\n        tq.chompTo(\">\");\n        if (tagName.length() != 0) {\n            org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf(tagName);\n            popStackToClose(tag);\n        }\n    }\n\n    private void parseStartTag() {\n        tq.consume(\"<\");\n        java.lang.String tagName = tq.consumeWord();\n        if (tagName.length() == 0) {\n            tq.addFirst(\"&lt;\");\n            parseTextNode();\n            return;\n        }\n        org.jsoup.parser.Attributes attributes = new org.jsoup.parser.Attributes();\n        while ((!tq.matchesAny(\"<\", \"/>\", \">\")) && (!tq.isEmpty())) {\n            org.jsoup.parser.Attribute attribute = parseAttribute();\n            if (attribute != null) {\n                attributes.put(attribute);\n            }\n        } \n        org.jsoup.parser.Tag tag = org.jsoup.parser.Tag.valueOf(tagName);\n        org.jsoup.parser.Element child = new org.jsoup.parser.Element(tag, baseUri, attributes);\n        boolean isEmptyElement = tag.isEmpty();\n        if (tq.matchChomp(\"/>\")) {\n            isEmptyElement = true;\n        } else {\n            tq.matchChomp(\">\");\n        }\n        addChildToParent(child, isEmptyElement);\n        if (tag.isData()) {\n            java.lang.String data = tq.chompTo(\"</\" + tagName);\n            tq.chompTo(\">\");\n            popStackToClose(tag);\n            org.jsoup.parser.Node dataNode;\n            if (tag.equals(org.jsoup.parser.Parser.titleTag) || tag.equals(org.jsoup.parser.Parser.textareaTag)) {\n                dataNode = org.jsoup.parser.TextNode.createFromEncoded(data, baseUri);\n            } else {\n                dataNode = new org.jsoup.parser.DataNode(data, baseUri);\n            }\n            child.appendChild(dataNode);\n        }\n        if (child.tagName().equals(\"base\")) {\n            java.lang.String href = child.absUrl(\"href\");\n            if (href.length() != 0) {\n                baseUri = href;\n                doc.setBaseUri(href);\n            }\n        }\n    }\n\n    private org.jsoup.parser.Attribute parseAttribute() {\n        tq.consumeWhitespace();\n        java.lang.String key = tq.consumeAttributeKey();\n        java.lang.String value = \"\";\n        tq.consumeWhitespace();\n        if (tq.matchChomp(\"=\")) {\n            tq.consumeWhitespace();\n            if (tq.matchChomp(org.jsoup.parser.Parser.SQ)) {\n                value = tq.chompTo(org.jsoup.parser.Parser.SQ);\n            } else if (tq.matchChomp(org.jsoup.parser.Parser.DQ)) {\n                value = tq.chompTo(org.jsoup.parser.Parser.DQ);\n            } else {\n                java.lang.StringBuilder valueAccum = new java.lang.StringBuilder();\n                while (((!tq.matchesAny(\"<\", \"/>\", \">\")) && (!tq.matchesWhitespace())) && (!tq.isEmpty())) {\n                    valueAccum.append(tq.consume());\n                } \n                value = valueAccum.toString();\n            }\n            tq.consumeWhitespace();\n        }\n        if (key.length() != 0) {\n            return org.jsoup.parser.Attribute.createFromEncoded(key, value);\n        } else {\n            tq.consume();\n            return null;\n        }\n    }\n\n    private void parseTextNode() {\n        java.lang.String text = tq.consumeTo(\"<\");\n        org.jsoup.parser.TextNode textNode = org.jsoup.parser.TextNode.createFromEncoded(text, baseUri);\n        last().appendChild(textNode);\n    }\n\n    private void parseCdata() {\n        tq.consume(\"<![CDATA[\");\n        java.lang.String rawText = tq.chompTo(\"]]>\");\n        org.jsoup.parser.TextNode textNode = new org.jsoup.parser.TextNode(rawText, baseUri);\n        last().appendChild(textNode);\n    }\n\n    private org.jsoup.parser.Element addChildToParent(org.jsoup.parser.Element child, boolean isEmptyElement) {\n        org.jsoup.parser.Element parent = popStackToSuitableContainer(child.tag());\n        org.jsoup.parser.Tag childTag = child.tag();\n        boolean validAncestor = stackHasValidParent(childTag);\n        if ((!validAncestor) && (!relaxed)) {\n            org.jsoup.parser.Tag parentTag = childTag.getImplicitParent();\n            org.jsoup.parser.Element implicit = new org.jsoup.parser.Element(parentTag, baseUri);\n            if (child.tag().equals(org.jsoup.parser.Parser.bodyTag)) {\n                org.jsoup.parser.Element head = new org.jsoup.parser.Element(org.jsoup.parser.Parser.headTag, baseUri);\n                implicit.appendChild(head);\n            }\n            implicit.appendChild(child);\n            org.jsoup.parser.Element root = addChildToParent(implicit, false);\n            if (!isEmptyElement) {\n                stack.addLast(child);\n            }\n            return root;\n        }\n        parent.appendChild(child);\n        if (!isEmptyElement) {\n            stack.addLast(child);\n        }\n        return parent;\n    }\n\n    private boolean stackHasValidParent(org.jsoup.parser.Tag childTag) {\n        if ((stack.size() == 1) && childTag.equals(org.jsoup.parser.Parser.htmlTag)) {\n            return true;\n        }\n        if (childTag.requiresSpecificParent()) {\n            return stack.getLast().tag().isValidParent(childTag);\n        }\n        for (int i = stack.size() - 1; i >= 0; i--) {\n            org.jsoup.parser.Element el = stack.get(i);\n            org.jsoup.parser.Tag parent2 = el.tag();\n            if (parent2.isValidAncestor(childTag)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private org.jsoup.parser.Element popStackToSuitableContainer(org.jsoup.parser.Tag tag) {\n        while (!stack.isEmpty()) {\n            if (last().tag().canContain(tag)) {\n                return last();\n            } else {\n                stack.removeLast();\n            }\n        } \n        return null;\n    }\n\n    private org.jsoup.parser.Element popStackToClose(org.jsoup.parser.Tag tag) {\n        int counter = 0;\n        org.jsoup.parser.Element elToClose = null;\n        for (int i = stack.size() - 1; i > 0; i--) {\n            counter++;\n            org.jsoup.parser.Element el = stack.get(i);\n            org.jsoup.parser.Tag elTag = el.tag();\n            if (elTag.equals(org.jsoup.parser.Parser.bodyTag) || elTag.equals(org.jsoup.parser.Parser.htmlTag)) {\n                break;\n            } else if (elTag.equals(tag)) {\n                elToClose = el;\n                break;\n            }\n        }\n        if (elToClose != null) {\n            for (int i = 0; i < counter; i++) {\n                stack.removeLast();\n            }\n        }\n        return elToClose;\n    }\n\n    private org.jsoup.parser.Element last() {\n        return stack.getLast();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(!validAncestor) && (!relaxed)",
            "src_parent": "if ((!validAncestor) && (!relaxed)) {\n    org.jsoup.parser.Tag parentTag = childTag.getImplicitParent();\n    org.jsoup.parser.Element implicit = new org.jsoup.parser.Element(parentTag, baseUri);\n    if (child.tag().equals(org.jsoup.parser.Parser.bodyTag)) {\n        org.jsoup.parser.Element head = new org.jsoup.parser.Element(org.jsoup.parser.Parser.headTag, baseUri);\n        implicit.appendChild(head);\n    }\n    implicit.appendChild(child);\n    org.jsoup.parser.Element root = addChildToParent(implicit, false);\n    if (!isEmptyElement) {\n        stack.addLast(child);\n    }\n    return root;\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "For",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (childTag.requiresSpecificParent()) {\n    return stack.getLast().tag().isValidParent(childTag);\n}",
            "src_parent": "{\n    if ((stack.size() == 1) && childTag.equals(org.jsoup.parser.Parser.htmlTag)) {\n        return true;\n    }\n    if (childTag.requiresSpecificParent()) {\n        return stack.getLast().tag().isValidParent(childTag);\n    }\n    for (int i = stack.size() - 1; i >= 0; i--) {\n        org.jsoup.parser.Element el = stack.get(i);\n        org.jsoup.parser.Tag parent2 = el.tag();\n        if (parent2.isValidAncestor(childTag)) {\n            return true;\n        }\n    }\n    return false;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!validAncestor",
            "dst_parent": "if (!validAncestor) {\n    org.jsoup.parser.Tag parentTag = childTag.getImplicitParent();\n    org.jsoup.parser.Element implicit = new org.jsoup.parser.Element(parentTag, baseUri);\n    if (child.tag().equals(org.jsoup.parser.Parser.bodyTag)) {\n        org.jsoup.parser.Element head = new org.jsoup.parser.Element(org.jsoup.parser.Parser.headTag, baseUri);\n        implicit.appendChild(head);\n    }\n    implicit.appendChild(child);\n    org.jsoup.parser.Element root = addChildToParent(implicit, false);\n    if (!isEmptyElement) {\n        stack.addLast(child);\n    }\n    return root;\n}",
            "dst_parent_type": "If",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "(!validAncestor)",
            "src_parent": "(!validAncestor) && (!relaxed)",
            "src_parent_type": "BinaryOperator",
            "src_type": "UnaryOperator"
          }
        }
      ],
      "file_name": "Parser"
    }
  ],
  "id": "Jsoup_3"
}