{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (_primitiveAndWrapper(currRaw, serClass)) {\n        type = type.withStaticTyping();\n    } else {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n    }\n}",
            "src_parent": "if (currRaw.isAssignableFrom(serClass)) {\n    type = tf.constructSpecializedType(type, serClass);\n} else if (_primitiveAndWrapper(currRaw, serClass)) {\n    type = type.withStaticTyping();\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (_primitiveAndWrapper(currRaw, keyClass)) {\n        keyType = keyType.withStaticTyping();\n    } else {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n    }\n}",
            "src_parent": "if (currRaw.isAssignableFrom(keyClass)) {\n    keyType = tf.constructSpecializedType(keyType, keyClass);\n} else if (_primitiveAndWrapper(currRaw, keyClass)) {\n    keyType = keyType.withStaticTyping();\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "{\n    if (_primitiveAndWrapper(currRaw, contentClass)) {\n        contentType = contentType.withStaticTyping();\n    } else {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n    }\n}",
            "src_parent": "if (currRaw.isAssignableFrom(contentClass)) {\n    contentType = tf.constructSpecializedType(contentType, contentClass);\n} else if (_primitiveAndWrapper(currRaw, contentClass)) {\n    contentType = contentType.withStaticTyping();\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "((valueClass != null) && (!type.hasRawClass(valueClass))) && (!_primitiveAndWrapper(type, valueClass))",
            "src_parent": "if (((valueClass != null) && (!type.hasRawClass(valueClass))) && (!_primitiveAndWrapper(type, valueClass))) {\n    try {\n        type = tf.constructSpecializedType(type, valueClass);\n    } catch (java.lang.IllegalArgumentException iae) {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\", type, valueClass.getName(), a.getName(), iae.getMessage()), iae);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(keyClass != null) && (!_primitiveAndWrapper(keyType, keyClass))",
            "src_parent": "if ((keyClass != null) && (!_primitiveAndWrapper(keyType, keyClass))) {\n    try {\n        keyType = tf.constructSpecializedType(keyType, keyClass);\n        type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(keyType);\n    } catch (java.lang.IllegalArgumentException iae) {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(contentClass != null) && (!_primitiveAndWrapper(contentType, contentClass))",
            "src_parent": "if ((contentClass != null) && (!_primitiveAndWrapper(contentType, contentClass))) {\n    try {\n        contentType = tf.constructSpecializedType(contentType, contentClass);\n        type = type.withContentType(contentType);\n    } catch (java.lang.IllegalArgumentException iae) {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean _primitiveAndWrapper(java.lang.Class<?> baseType, java.lang.Class<?> refinement) {\n    if (baseType.isPrimitive()) {\n        return baseType == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(refinement);\n    }\n    if (refinement.isPrimitive()) {\n        return refinement == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(baseType);\n    }\n    return false;\n}",
            "src_parent": "public class JacksonAnnotationIntrospector extends com.fasterxml.jackson.databind.AnnotationIntrospector implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static final java.lang.Class<? extends java.lang.annotation.Annotation>[] ANNOTATIONS_TO_INFER_SER = ((java.lang.Class<? extends java.lang.annotation.Annotation>[]) (new java.lang.Class<?>[]{ com.fasterxml.jackson.databind.annotation.JsonSerialize.class, com.fasterxml.jackson.annotation.JsonView.class, com.fasterxml.jackson.annotation.JsonFormat.class, com.fasterxml.jackson.annotation.JsonTypeInfo.class, com.fasterxml.jackson.annotation.JsonRawValue.class, com.fasterxml.jackson.annotation.JsonUnwrapped.class, com.fasterxml.jackson.annotation.JsonBackReference.class, com.fasterxml.jackson.annotation.JsonManagedReference.class }));\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static final java.lang.Class<? extends java.lang.annotation.Annotation>[] ANNOTATIONS_TO_INFER_DESER = ((java.lang.Class<? extends java.lang.annotation.Annotation>[]) (new java.lang.Class<?>[]{ com.fasterxml.jackson.databind.annotation.JsonDeserialize.class, com.fasterxml.jackson.annotation.JsonView.class, com.fasterxml.jackson.annotation.JsonFormat.class, com.fasterxml.jackson.annotation.JsonTypeInfo.class, com.fasterxml.jackson.annotation.JsonUnwrapped.class, com.fasterxml.jackson.annotation.JsonBackReference.class, com.fasterxml.jackson.annotation.JsonManagedReference.class, com.fasterxml.jackson.annotation.JsonMerge.class }));\n\n    private static final com.fasterxml.jackson.databind.ext.Java7Support _java7Helper;\n\n    static {\n        com.fasterxml.jackson.databind.ext.Java7Support x = null;\n        try {\n            x = com.fasterxml.jackson.databind.ext.Java7Support.instance();\n        } catch (java.lang.Throwable t) {\n        }\n        _java7Helper = x;\n    }\n\n    protected transient com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<?>, java.lang.Boolean> _annotationsInside = new com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<?>, java.lang.Boolean>(48, 48);\n\n    protected boolean _cfgConstructorPropertiesImpliesCreator = true;\n\n    public JacksonAnnotationIntrospector() {\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    protected java.lang.Object readResolve() {\n        if (_annotationsInside == null) {\n            _annotationsInside = new com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<?>, java.lang.Boolean>(48, 48);\n        }\n        return this;\n    }\n\n    public com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b) {\n        _cfgConstructorPropertiesImpliesCreator = b;\n        return this;\n    }\n\n    @java.lang.Override\n    public boolean isAnnotationBundle(java.lang.annotation.Annotation ann) {\n        java.lang.Class<?> type = ann.annotationType();\n        java.lang.Boolean b = _annotationsInside.get(type);\n        if (b == null) {\n            b = type.getAnnotation(com.fasterxml.jackson.annotation.JacksonAnnotationsInside.class) != null;\n            _annotationsInside.putIfAbsent(type, b);\n        }\n        return b.booleanValue();\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.String findEnumValue(java.lang.Enum<?> value) {\n        try {\n            java.lang.reflect.Field f = value.getClass().getField(value.name());\n            if (f != null) {\n                com.fasterxml.jackson.annotation.JsonProperty prop = f.getAnnotation(com.fasterxml.jackson.annotation.JsonProperty.class);\n                if (prop != null) {\n                    java.lang.String n = prop.value();\n                    if ((n != null) && (!n.isEmpty())) {\n                        return n;\n                    }\n                }\n            }\n        } catch (java.lang.SecurityException e) {\n        } catch (java.lang.NoSuchFieldException e) {\n        }\n        return value.name();\n    }\n\n    @java.lang.Override\n    public java.lang.String[] findEnumValues(java.lang.Class<?> enumType, java.lang.Enum<?>[] enumValues, java.lang.String[] names) {\n        java.util.HashMap<java.lang.String, java.lang.String> expl = null;\n        for (java.lang.reflect.Field f : com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredFields(enumType)) {\n            if (!f.isEnumConstant()) {\n                continue;\n            }\n            com.fasterxml.jackson.annotation.JsonProperty prop = f.getAnnotation(com.fasterxml.jackson.annotation.JsonProperty.class);\n            if (prop == null) {\n                continue;\n            }\n            java.lang.String n = prop.value();\n            if (n.isEmpty()) {\n                continue;\n            }\n            if (expl == null) {\n                expl = new java.util.HashMap<java.lang.String, java.lang.String>();\n            }\n            expl.put(f.getName(), n);\n        }\n        if (expl != null) {\n            for (int i = 0, end = enumValues.length; i < end; ++i) {\n                java.lang.String defName = enumValues[i].name();\n                java.lang.String explValue = expl.get(defName);\n                if (explValue != null) {\n                    names[i] = explValue;\n                }\n            }\n        }\n        return names;\n    }\n\n    @java.lang.Override\n    public java.lang.Enum<?> findDefaultEnumValue(java.lang.Class<java.lang.Enum<?>> enumCls) {\n        return com.fasterxml.jackson.databind.util.ClassUtil.findFirstAnnotatedEnumValue(enumCls, com.fasterxml.jackson.annotation.JsonEnumDefaultValue.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonRootName ann = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonRootName.class);\n        if (ann == null) {\n            return null;\n        }\n        java.lang.String ns = ann.namespace();\n        if ((ns != null) && (ns.length() == 0)) {\n            ns = null;\n        }\n        return com.fasterxml.jackson.databind.PropertyName.construct(ann.value(), ns);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonIgnoreProperties v = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonIgnoreProperties.class);\n        if (v == null) {\n            return com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value.empty();\n        }\n        return com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value.from(v);\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonIgnoreType ignore = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonIgnoreType.class);\n        return ignore == null ? null : ignore.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Object findFilterId(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonFilter ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonFilter.class);\n        if (ann != null) {\n            java.lang.String id = ann.value();\n            if (id.length() > 0) {\n                return id;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonNaming ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonNaming.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.String findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonClassDescription ann = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonClassDescription.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.VisibilityChecker<?> findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, com.fasterxml.jackson.databind.introspect.VisibilityChecker<?> checker) {\n        com.fasterxml.jackson.annotation.JsonAutoDetect ann = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonAutoDetect.class);\n        return ann == null ? checker : checker.with(ann);\n    }\n\n    @java.lang.Override\n    public java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.databind.PropertyName n = _findConstructorName(m);\n        return n == null ? null : n.getSimpleName();\n    }\n\n    @java.lang.Override\n    public java.util.List<com.fasterxml.jackson.databind.PropertyName> findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated m) {\n        com.fasterxml.jackson.annotation.JsonAlias ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JsonAlias.class);\n        if (ann == null) {\n            return null;\n        }\n        java.lang.String[] strs = ann.value();\n        final int len = strs.length;\n        if (len == 0) {\n            return java.util.Collections.emptyList();\n        }\n        java.util.List<com.fasterxml.jackson.databind.PropertyName> result = new java.util.ArrayList<>(len);\n        for (int i = 0; i < len; ++i) {\n            result.add(com.fasterxml.jackson.databind.PropertyName.construct(strs[i]));\n        }\n        return result;\n    }\n\n    @java.lang.Override\n    public boolean hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        return _isIgnorable(m);\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.annotation.JsonProperty ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (ann != null) {\n            return ann.required();\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonProperty.Access findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated m) {\n        com.fasterxml.jackson.annotation.JsonProperty ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (ann != null) {\n            return ann.access();\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonPropertyDescription desc = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonPropertyDescription.class);\n        return desc == null ? null : desc.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Integer findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonProperty prop = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (prop != null) {\n            int ix = prop.index();\n            if (ix != com.fasterxml.jackson.annotation.JsonProperty.INDEX_UNKNOWN) {\n                return java.lang.Integer.valueOf(ix);\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonProperty prop = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (prop == null) {\n            return null;\n        }\n        java.lang.String str = prop.defaultValue();\n        return str.isEmpty() ? null : str;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonFormat.Value findFormat(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonFormat f = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonFormat.class);\n        return f == null ? null : new com.fasterxml.jackson.annotation.JsonFormat.Value(f);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember member) {\n        com.fasterxml.jackson.annotation.JsonManagedReference ref1 = _findAnnotation(member, com.fasterxml.jackson.annotation.JsonManagedReference.class);\n        if (ref1 != null) {\n            return com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n        }\n        com.fasterxml.jackson.annotation.JsonBackReference ref2 = _findAnnotation(member, com.fasterxml.jackson.annotation.JsonBackReference.class);\n        if (ref2 != null) {\n            return com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.util.NameTransformer findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember member) {\n        com.fasterxml.jackson.annotation.JsonUnwrapped ann = _findAnnotation(member, com.fasterxml.jackson.annotation.JsonUnwrapped.class);\n        if ((ann == null) || (!ann.enabled())) {\n            return null;\n        }\n        java.lang.String prefix = ann.prefix();\n        java.lang.String suffix = ann.suffix();\n        return com.fasterxml.jackson.databind.util.NameTransformer.simpleTransformer(prefix, suffix);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JacksonInject.Value findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.annotation.JacksonInject ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JacksonInject.class);\n        if (ann == null) {\n            return null;\n        }\n        com.fasterxml.jackson.annotation.JacksonInject.Value v = com.fasterxml.jackson.annotation.JacksonInject.Value.from(ann);\n        if (!v.hasId()) {\n            java.lang.Object id;\n            if (!(m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod)) {\n                id = m.getRawType().getName();\n            } else {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMethod am = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (m));\n                if (am.getParameterCount() == 0) {\n                    id = m.getRawType().getName();\n                } else {\n                    id = am.getRawParameterType(0).getName();\n                }\n            }\n            v = v.withId(id);\n        }\n        return v;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.annotation.JacksonInject.Value v = findInjectableValue(m);\n        return v == null ? null : v.getId();\n    }\n\n    @java.lang.Override\n    public java.lang.Class<?>[] findViews(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonView ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonView.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.AnnotatedMethod resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedMethod setter1, com.fasterxml.jackson.databind.introspect.AnnotatedMethod setter2) {\n        java.lang.Class<?> cls1 = setter1.getRawParameterType(0);\n        java.lang.Class<?> cls2 = setter2.getRawParameterType(0);\n        if (cls1.isPrimitive()) {\n            if (!cls2.isPrimitive()) {\n                return setter1;\n            }\n        } else if (cls2.isPrimitive()) {\n            return setter2;\n        }\n        if (cls1 == java.lang.String.class) {\n            if (cls2 != java.lang.String.class) {\n                return setter1;\n            }\n        } else if (cls2 == java.lang.String.class) {\n            return setter2;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, com.fasterxml.jackson.databind.JavaType baseType) {\n        return _findTypeResolver(config, ac, baseType);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedMember am, com.fasterxml.jackson.databind.JavaType baseType) {\n        if (baseType.isContainerType() || baseType.isReferenceType()) {\n            return null;\n        }\n        return _findTypeResolver(config, am, baseType);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedMember am, com.fasterxml.jackson.databind.JavaType containerType) {\n        if (containerType.getContentType() == null) {\n            throw new java.lang.IllegalArgumentException((\"Must call method with a container or reference type (got \" + containerType) + \")\");\n        }\n        return _findTypeResolver(config, am, containerType);\n    }\n\n    @java.lang.Override\n    public java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType> findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonSubTypes t = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonSubTypes.class);\n        if (t == null) {\n            return null;\n        }\n        com.fasterxml.jackson.annotation.JsonSubTypes.Type[] types = t.value();\n        java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType> result = new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(types.length);\n        for (com.fasterxml.jackson.annotation.JsonSubTypes.Type type : types) {\n            result.add(new com.fasterxml.jackson.databind.jsontype.NamedType(type.value(), type.name()));\n        }\n        return result;\n    }\n\n    @java.lang.Override\n    public java.lang.String findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonTypeName tn = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonTypeName.class);\n        return tn == null ? null : tn.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember member) {\n        return _hasAnnotation(member, com.fasterxml.jackson.annotation.JsonTypeId.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonIdentityInfo info = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonIdentityInfo.class);\n        if ((info == null) || (info.generator() == com.fasterxml.jackson.annotation.ObjectIdGenerators.None.class)) {\n            return null;\n        }\n        com.fasterxml.jackson.databind.PropertyName name = com.fasterxml.jackson.databind.PropertyName.construct(info.property());\n        return new com.fasterxml.jackson.databind.introspect.ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated ann, com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo) {\n        com.fasterxml.jackson.annotation.JsonIdentityReference ref = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonIdentityReference.class);\n        if (ref == null) {\n            return objectIdInfo;\n        }\n        if (objectIdInfo == null) {\n            objectIdInfo = com.fasterxml.jackson.databind.introspect.ObjectIdInfo.empty();\n        }\n        return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n    }\n\n    @java.lang.Override\n    public java.lang.Object findSerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.using();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        com.fasterxml.jackson.annotation.JsonRawValue annRaw = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonRawValue.class);\n        if ((annRaw != null) && annRaw.value()) {\n            java.lang.Class<?> cls = a.getRawType();\n            return new com.fasterxml.jackson.databind.ser.std.RawSerializer<java.lang.Object>(cls);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.keyUsing();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.contentUsing();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.nullsUsing();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonInclude.Value findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonInclude inc = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonInclude.class);\n        com.fasterxml.jackson.annotation.JsonInclude.Value value = (inc == null) ? com.fasterxml.jackson.annotation.JsonInclude.Value.empty() : com.fasterxml.jackson.annotation.JsonInclude.Value.from(inc);\n        if (value.getValueInclusion() == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS) {\n            value = _refinePropertyInclusion(a, value);\n        }\n        return value;\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    private com.fasterxml.jackson.annotation.JsonInclude.Value _refinePropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated a, com.fasterxml.jackson.annotation.JsonInclude.Value value) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            switch (ann.include()) {\n                case ALWAYS :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS);\n                case NON_NULL :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL);\n                case NON_DEFAULT :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT);\n                case NON_EMPTY :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY);\n                case DEFAULT_INCLUSION :\n                default :\n            }\n        }\n        return value;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        return ann == null ? null : ann.typing();\n    }\n\n    @java.lang.Override\n    public java.lang.Object findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        return ann == null ? null : _classIfExplicit(ann.converter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public java.lang.Object findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        return ann == null ? null : _classIfExplicit(ann.contentConverter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType refineSerializationType(final com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, final com.fasterxml.jackson.databind.introspect.Annotated a, final com.fasterxml.jackson.databind.JavaType baseType) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = baseType;\n        final com.fasterxml.jackson.databind.type.TypeFactory tf = config.getTypeFactory();\n        final com.fasterxml.jackson.databind.annotation.JsonSerialize jsonSer = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        final java.lang.Class<?> serClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.as());\n        if (serClass != null) {\n            if (type.hasRawClass(serClass)) {\n                type = type.withStaticTyping();\n            } else {\n                java.lang.Class<?> currRaw = type.getRawClass();\n                try {\n                    if (serClass.isAssignableFrom(currRaw)) {\n                        type = tf.constructGeneralizedType(type, serClass);\n                    } else if (currRaw.isAssignableFrom(serClass)) {\n                        type = tf.constructSpecializedType(type, serClass);\n                    } else if (_primitiveAndWrapper(currRaw, serClass)) {\n                        type = type.withStaticTyping();\n                    } else {\n                        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n                    }\n                } catch (java.lang.IllegalArgumentException iae) {\n                    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\", type, serClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n        }\n        if (type.isMapLikeType()) {\n            com.fasterxml.jackson.databind.JavaType keyType = type.getKeyType();\n            final java.lang.Class<?> keyClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.keyAs());\n            if (keyClass != null) {\n                if (keyType.hasRawClass(keyClass)) {\n                    keyType = keyType.withStaticTyping();\n                } else {\n                    java.lang.Class<?> currRaw = keyType.getRawClass();\n                    try {\n                        if (keyClass.isAssignableFrom(currRaw)) {\n                            keyType = tf.constructGeneralizedType(keyType, keyClass);\n                        } else if (currRaw.isAssignableFrom(keyClass)) {\n                            keyType = tf.constructSpecializedType(keyType, keyClass);\n                        } else if (_primitiveAndWrapper(currRaw, keyClass)) {\n                            keyType = keyType.withStaticTyping();\n                        } else {\n                            throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n                        }\n                    } catch (java.lang.IllegalArgumentException iae) {\n                        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n                    }\n                }\n                type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(keyType);\n            }\n        }\n        com.fasterxml.jackson.databind.JavaType contentType = type.getContentType();\n        if (contentType != null) {\n            final java.lang.Class<?> contentClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.contentAs());\n            if (contentClass != null) {\n                if (contentType.hasRawClass(contentClass)) {\n                    contentType = contentType.withStaticTyping();\n                } else {\n                    java.lang.Class<?> currRaw = contentType.getRawClass();\n                    try {\n                        if (contentClass.isAssignableFrom(currRaw)) {\n                            contentType = tf.constructGeneralizedType(contentType, contentClass);\n                        } else if (currRaw.isAssignableFrom(contentClass)) {\n                            contentType = tf.constructSpecializedType(contentType, contentClass);\n                        } else if (_primitiveAndWrapper(currRaw, contentClass)) {\n                            contentType = contentType.withStaticTyping();\n                        } else {\n                            throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n                        }\n                    } catch (java.lang.IllegalArgumentException iae) {\n                        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n                    }\n                }\n                type = type.withContentType(contentType);\n            }\n        }\n        return type;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated am) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findSerializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseType) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findSerializationContentType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseType) {\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String[] findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonPropertyOrder order = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonPropertyOrder.class);\n        return order == null ? null : order.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        return _findSortAlpha(ann);\n    }\n\n    private final java.lang.Boolean _findSortAlpha(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonPropertyOrder order = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonPropertyOrder.class);\n        if ((order != null) && order.alphabetic()) {\n            return java.lang.Boolean.TRUE;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public void findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter> properties) {\n        com.fasterxml.jackson.databind.annotation.JsonAppend ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonAppend.class);\n        if (ann == null) {\n            return;\n        }\n        final boolean prepend = ann.prepend();\n        com.fasterxml.jackson.databind.JavaType propType = null;\n        com.fasterxml.jackson.databind.annotation.JsonAppend.Attr[] attrs = ann.attrs();\n        for (int i = 0, len = attrs.length; i < len; ++i) {\n            if (propType == null) {\n                propType = config.constructType(java.lang.Object.class);\n            }\n            com.fasterxml.jackson.databind.ser.BeanPropertyWriter bpw = _constructVirtualProperty(attrs[i], config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n        com.fasterxml.jackson.databind.annotation.JsonAppend.Prop[] props = ann.props();\n        for (int i = 0, len = props.length; i < len; ++i) {\n            com.fasterxml.jackson.databind.ser.BeanPropertyWriter bpw = _constructVirtualProperty(props[i], config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }\n\n    protected com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Attr attr, com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, com.fasterxml.jackson.databind.JavaType type) {\n        com.fasterxml.jackson.databind.PropertyMetadata metadata = (attr.required()) ? com.fasterxml.jackson.databind.PropertyMetadata.STD_REQUIRED : com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL;\n        java.lang.String attrName = attr.value();\n        com.fasterxml.jackson.databind.PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName = com.fasterxml.jackson.databind.PropertyName.construct(attrName);\n        }\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember member = new com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember(ac, ac.getRawType(), attrName, type);\n        com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, attr.include());\n        return com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter.construct(attrName, propDef, ac.getAnnotations(), type);\n    }\n\n    protected com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Prop prop, com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.PropertyMetadata metadata = (prop.required()) ? com.fasterxml.jackson.databind.PropertyMetadata.STD_REQUIRED : com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL;\n        com.fasterxml.jackson.databind.PropertyName propName = _propertyName(prop.name(), prop.namespace());\n        com.fasterxml.jackson.databind.JavaType type = config.constructType(prop.type());\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember member = new com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember(ac, ac.getRawType(), propName.getSimpleName(), type);\n        com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, prop.include());\n        java.lang.Class<?> implClass = prop.value();\n        com.fasterxml.jackson.databind.cfg.HandlerInstantiator hi = config.getHandlerInstantiator();\n        com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter bpw = (hi == null) ? null : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw == null) {\n            bpw = ((com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter) (com.fasterxml.jackson.databind.util.ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers())));\n        }\n        return bpw.withConfig(config, ac, propDef, type);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonGetter jg = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonGetter.class);\n        if (jg != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(jg.value());\n        }\n        com.fasterxml.jackson.annotation.JsonProperty pann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (pann != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.ANNOTATIONS_TO_INFER_SER)) {\n            return com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonValue ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonValue.class);\n        if (ann == null) {\n            return null;\n        }\n        return ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonAnyGetter ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonAnyGetter.class);\n        if (ann == null) {\n            return null;\n        }\n        return ann.enabled();\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod am) {\n        return _hasAnnotation(am, com.fasterxml.jackson.annotation.JsonAnyGetter.class);\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod am) {\n        com.fasterxml.jackson.annotation.JsonValue ann = _findAnnotation(am, com.fasterxml.jackson.annotation.JsonValue.class);\n        return (ann != null) && ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Object findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonDeserializer> deserClass = ann.using();\n            if (deserClass != com.fasterxml.jackson.databind.JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        if (ann != null) {\n            java.lang.Class<? extends com.fasterxml.jackson.databind.KeyDeserializer> deserClass = ann.keyUsing();\n            if (deserClass != com.fasterxml.jackson.databind.KeyDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonDeserializer> deserClass = ann.contentUsing();\n            if (deserClass != com.fasterxml.jackson.databind.JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        return ann == null ? null : _classIfExplicit(ann.converter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public java.lang.Object findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        return ann == null ? null : _classIfExplicit(ann.contentConverter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType refineDeserializationType(final com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, final com.fasterxml.jackson.databind.introspect.Annotated a, final com.fasterxml.jackson.databind.JavaType baseType) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = baseType;\n        final com.fasterxml.jackson.databind.type.TypeFactory tf = config.getTypeFactory();\n        final com.fasterxml.jackson.databind.annotation.JsonDeserialize jsonDeser = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        final java.lang.Class<?> valueClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.as());\n        if (((valueClass != null) && (!type.hasRawClass(valueClass))) && (!_primitiveAndWrapper(type, valueClass))) {\n            try {\n                type = tf.constructSpecializedType(type, valueClass);\n            } catch (java.lang.IllegalArgumentException iae) {\n                throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\", type, valueClass.getName(), a.getName(), iae.getMessage()), iae);\n            }\n        }\n        if (type.isMapLikeType()) {\n            com.fasterxml.jackson.databind.JavaType keyType = type.getKeyType();\n            final java.lang.Class<?> keyClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.keyAs());\n            if ((keyClass != null) && (!_primitiveAndWrapper(keyType, keyClass))) {\n                try {\n                    keyType = tf.constructSpecializedType(keyType, keyClass);\n                    type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(keyType);\n                } catch (java.lang.IllegalArgumentException iae) {\n                    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n        }\n        com.fasterxml.jackson.databind.JavaType contentType = type.getContentType();\n        if (contentType != null) {\n            final java.lang.Class<?> contentClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.contentAs());\n            if ((contentClass != null) && (!_primitiveAndWrapper(contentType, contentClass))) {\n                try {\n                    contentType = tf.constructSpecializedType(contentType, contentClass);\n                    type = type.withContentType(contentType);\n                } catch (java.lang.IllegalArgumentException iae) {\n                    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n        }\n        return type;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findDeserializationContentType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseContentType) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findDeserializationType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseType) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findDeserializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseKeyType) {\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonValueInstantiator ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonValueInstantiator.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Class<?> findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        return ann == null ? null : _classIfExplicit(ann.builder());\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.class);\n        return ann == null ? null : new com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value(ann);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonSetter js = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonSetter.class);\n        if (js != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(js.value());\n        }\n        com.fasterxml.jackson.annotation.JsonProperty pann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (pann != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.ANNOTATIONS_TO_INFER_DESER)) {\n            return com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonAnySetter ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonAnySetter.class);\n        return ann == null ? null : ann.enabled();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonSetter.Value findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        return com.fasterxml.jackson.annotation.JsonSetter.Value.from(_findAnnotation(a, com.fasterxml.jackson.annotation.JsonSetter.class));\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonMerge ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonMerge.class);\n        return ann == null ? null : ann.value().asBoolean();\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasAnySetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod am) {\n        return _hasAnnotation(am, com.fasterxml.jackson.annotation.JsonAnySetter.class);\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonCreator ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonCreator.class);\n        if (ann != null) {\n            return ann.mode() != com.fasterxml.jackson.annotation.JsonCreator.Mode.DISABLED;\n        }\n        if (_cfgConstructorPropertiesImpliesCreator) {\n            if (a instanceof com.fasterxml.jackson.databind.introspect.AnnotatedConstructor) {\n                if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n                    java.lang.Boolean b = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.hasCreatorAnnotation(a);\n                    if (b != null) {\n                        return b.booleanValue();\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.annotation.JsonCreator.Mode findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonCreator ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonCreator.class);\n        return ann == null ? null : ann.mode();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonCreator.Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonCreator ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonCreator.class);\n        if (ann != null) {\n            return ann.mode();\n        }\n        if (_cfgConstructorPropertiesImpliesCreator && config.isEnabled(com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)) {\n            if (a instanceof com.fasterxml.jackson.databind.introspect.AnnotatedConstructor) {\n                if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n                    java.lang.Boolean b = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.hasCreatorAnnotation(a);\n                    if ((b != null) && b.booleanValue()) {\n                        return com.fasterxml.jackson.annotation.JsonCreator.Mode.PROPERTIES;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    protected boolean _isIgnorable(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonIgnore ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonIgnore.class);\n        if (ann != null) {\n            return ann.value();\n        }\n        if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n            java.lang.Boolean b = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.findTransient(a);\n            if (b != null) {\n                return b.booleanValue();\n            }\n        }\n        return false;\n    }\n\n    protected java.lang.Class<?> _classIfExplicit(java.lang.Class<?> cls) {\n        if ((cls == null) || com.fasterxml.jackson.databind.util.ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    protected java.lang.Class<?> _classIfExplicit(java.lang.Class<?> cls, java.lang.Class<?> implicit) {\n        cls = _classIfExplicit(cls);\n        return (cls == null) || (cls == implicit) ? null : cls;\n    }\n\n    protected com.fasterxml.jackson.databind.PropertyName _propertyName(java.lang.String localName, java.lang.String namespace) {\n        if (localName.isEmpty()) {\n            return com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT;\n        }\n        if ((namespace == null) || namespace.isEmpty()) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(localName);\n        }\n        return com.fasterxml.jackson.databind.PropertyName.construct(localName, namespace);\n    }\n\n    protected com.fasterxml.jackson.databind.PropertyName _findConstructorName(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        if (a instanceof com.fasterxml.jackson.databind.introspect.AnnotatedParameter) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedParameter p = ((com.fasterxml.jackson.databind.introspect.AnnotatedParameter) (a));\n            com.fasterxml.jackson.databind.introspect.AnnotatedWithParams ctor = p.getOwner();\n            if (ctor != null) {\n                if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n                    com.fasterxml.jackson.databind.PropertyName name = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.findConstructorName(p);\n                    if (name != null) {\n                        return name;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    protected com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> _findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.Annotated ann, com.fasterxml.jackson.databind.JavaType baseType) {\n        com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> b;\n        com.fasterxml.jackson.annotation.JsonTypeInfo info = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n        com.fasterxml.jackson.databind.annotation.JsonTypeResolver resAnn = _findAnnotation(ann, com.fasterxml.jackson.databind.annotation.JsonTypeResolver.class);\n        if (resAnn != null) {\n            if (info == null) {\n                return null;\n            }\n            b = config.typeResolverBuilderInstance(ann, resAnn.value());\n        } else {\n            if (info == null) {\n                return null;\n            }\n            if (info.use() == com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE) {\n                return _constructNoTypeResolverBuilder();\n            }\n            b = _constructStdTypeResolverBuilder();\n        }\n        com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver idResInfo = _findAnnotation(ann, com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver.class);\n        com.fasterxml.jackson.databind.jsontype.TypeIdResolver idRes = (idResInfo == null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n        if (idRes != null) {\n            idRes.init(baseType);\n        }\n        b = b.init(info.use(), idRes);\n        com.fasterxml.jackson.annotation.JsonTypeInfo.As inclusion = info.include();\n        if ((inclusion == com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY) && (ann instanceof com.fasterxml.jackson.databind.introspect.AnnotatedClass)) {\n            inclusion = com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY;\n        }\n        b = b.inclusion(inclusion);\n        b = b.typeProperty(info.property());\n        java.lang.Class<?> defaultImpl = info.defaultImpl();\n        if ((defaultImpl != com.fasterxml.jackson.annotation.JsonTypeInfo.None.class) && (!defaultImpl.isAnnotation())) {\n            b = b.defaultImpl(defaultImpl);\n        }\n        b = b.typeIdVisibility(info.visible());\n        return b;\n    }\n\n    protected com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n        return new com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder();\n    }\n\n    protected com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n        return com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder();\n    }\n\n    private boolean _primitiveAndWrapper(java.lang.Class<?> baseType, java.lang.Class<?> refinement) {\n        if (baseType.isPrimitive()) {\n            return baseType == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(refinement);\n        }\n        if (refinement.isPrimitive()) {\n            return refinement == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(baseType);\n        }\n        return false;\n    }\n\n    private boolean _primitiveAndWrapper(com.fasterxml.jackson.databind.JavaType baseType, java.lang.Class<?> refinement) {\n        if (baseType.isPrimitive()) {\n            return baseType.hasRawClass(com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(refinement));\n        }\n        if (refinement.isPrimitive()) {\n            return refinement == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(baseType.getRawClass());\n        }\n        return false;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private boolean _primitiveAndWrapper(com.fasterxml.jackson.databind.JavaType baseType, java.lang.Class<?> refinement) {\n    if (baseType.isPrimitive()) {\n        return baseType.hasRawClass(com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(refinement));\n    }\n    if (refinement.isPrimitive()) {\n        return refinement == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(baseType.getRawClass());\n    }\n    return false;\n}",
            "src_parent": "public class JacksonAnnotationIntrospector extends com.fasterxml.jackson.databind.AnnotationIntrospector implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static final java.lang.Class<? extends java.lang.annotation.Annotation>[] ANNOTATIONS_TO_INFER_SER = ((java.lang.Class<? extends java.lang.annotation.Annotation>[]) (new java.lang.Class<?>[]{ com.fasterxml.jackson.databind.annotation.JsonSerialize.class, com.fasterxml.jackson.annotation.JsonView.class, com.fasterxml.jackson.annotation.JsonFormat.class, com.fasterxml.jackson.annotation.JsonTypeInfo.class, com.fasterxml.jackson.annotation.JsonRawValue.class, com.fasterxml.jackson.annotation.JsonUnwrapped.class, com.fasterxml.jackson.annotation.JsonBackReference.class, com.fasterxml.jackson.annotation.JsonManagedReference.class }));\n\n    @java.lang.SuppressWarnings(\"unchecked\")\n    private static final java.lang.Class<? extends java.lang.annotation.Annotation>[] ANNOTATIONS_TO_INFER_DESER = ((java.lang.Class<? extends java.lang.annotation.Annotation>[]) (new java.lang.Class<?>[]{ com.fasterxml.jackson.databind.annotation.JsonDeserialize.class, com.fasterxml.jackson.annotation.JsonView.class, com.fasterxml.jackson.annotation.JsonFormat.class, com.fasterxml.jackson.annotation.JsonTypeInfo.class, com.fasterxml.jackson.annotation.JsonUnwrapped.class, com.fasterxml.jackson.annotation.JsonBackReference.class, com.fasterxml.jackson.annotation.JsonManagedReference.class, com.fasterxml.jackson.annotation.JsonMerge.class }));\n\n    private static final com.fasterxml.jackson.databind.ext.Java7Support _java7Helper;\n\n    static {\n        com.fasterxml.jackson.databind.ext.Java7Support x = null;\n        try {\n            x = com.fasterxml.jackson.databind.ext.Java7Support.instance();\n        } catch (java.lang.Throwable t) {\n        }\n        _java7Helper = x;\n    }\n\n    protected transient com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<?>, java.lang.Boolean> _annotationsInside = new com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<?>, java.lang.Boolean>(48, 48);\n\n    protected boolean _cfgConstructorPropertiesImpliesCreator = true;\n\n    public JacksonAnnotationIntrospector() {\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.Version version() {\n        return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n    }\n\n    protected java.lang.Object readResolve() {\n        if (_annotationsInside == null) {\n            _annotationsInside = new com.fasterxml.jackson.databind.util.LRUMap<java.lang.Class<?>, java.lang.Boolean>(48, 48);\n        }\n        return this;\n    }\n\n    public com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b) {\n        _cfgConstructorPropertiesImpliesCreator = b;\n        return this;\n    }\n\n    @java.lang.Override\n    public boolean isAnnotationBundle(java.lang.annotation.Annotation ann) {\n        java.lang.Class<?> type = ann.annotationType();\n        java.lang.Boolean b = _annotationsInside.get(type);\n        if (b == null) {\n            b = type.getAnnotation(com.fasterxml.jackson.annotation.JacksonAnnotationsInside.class) != null;\n            _annotationsInside.putIfAbsent(type, b);\n        }\n        return b.booleanValue();\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.String findEnumValue(java.lang.Enum<?> value) {\n        try {\n            java.lang.reflect.Field f = value.getClass().getField(value.name());\n            if (f != null) {\n                com.fasterxml.jackson.annotation.JsonProperty prop = f.getAnnotation(com.fasterxml.jackson.annotation.JsonProperty.class);\n                if (prop != null) {\n                    java.lang.String n = prop.value();\n                    if ((n != null) && (!n.isEmpty())) {\n                        return n;\n                    }\n                }\n            }\n        } catch (java.lang.SecurityException e) {\n        } catch (java.lang.NoSuchFieldException e) {\n        }\n        return value.name();\n    }\n\n    @java.lang.Override\n    public java.lang.String[] findEnumValues(java.lang.Class<?> enumType, java.lang.Enum<?>[] enumValues, java.lang.String[] names) {\n        java.util.HashMap<java.lang.String, java.lang.String> expl = null;\n        for (java.lang.reflect.Field f : com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredFields(enumType)) {\n            if (!f.isEnumConstant()) {\n                continue;\n            }\n            com.fasterxml.jackson.annotation.JsonProperty prop = f.getAnnotation(com.fasterxml.jackson.annotation.JsonProperty.class);\n            if (prop == null) {\n                continue;\n            }\n            java.lang.String n = prop.value();\n            if (n.isEmpty()) {\n                continue;\n            }\n            if (expl == null) {\n                expl = new java.util.HashMap<java.lang.String, java.lang.String>();\n            }\n            expl.put(f.getName(), n);\n        }\n        if (expl != null) {\n            for (int i = 0, end = enumValues.length; i < end; ++i) {\n                java.lang.String defName = enumValues[i].name();\n                java.lang.String explValue = expl.get(defName);\n                if (explValue != null) {\n                    names[i] = explValue;\n                }\n            }\n        }\n        return names;\n    }\n\n    @java.lang.Override\n    public java.lang.Enum<?> findDefaultEnumValue(java.lang.Class<java.lang.Enum<?>> enumCls) {\n        return com.fasterxml.jackson.databind.util.ClassUtil.findFirstAnnotatedEnumValue(enumCls, com.fasterxml.jackson.annotation.JsonEnumDefaultValue.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonRootName ann = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonRootName.class);\n        if (ann == null) {\n            return null;\n        }\n        java.lang.String ns = ann.namespace();\n        if ((ns != null) && (ns.length() == 0)) {\n            ns = null;\n        }\n        return com.fasterxml.jackson.databind.PropertyName.construct(ann.value(), ns);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonIgnoreProperties v = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonIgnoreProperties.class);\n        if (v == null) {\n            return com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value.empty();\n        }\n        return com.fasterxml.jackson.annotation.JsonIgnoreProperties.Value.from(v);\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonIgnoreType ignore = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonIgnoreType.class);\n        return ignore == null ? null : ignore.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Object findFilterId(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonFilter ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonFilter.class);\n        if (ann != null) {\n            java.lang.String id = ann.value();\n            if (id.length() > 0) {\n                return id;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonNaming ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonNaming.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.String findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonClassDescription ann = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonClassDescription.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.VisibilityChecker<?> findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, com.fasterxml.jackson.databind.introspect.VisibilityChecker<?> checker) {\n        com.fasterxml.jackson.annotation.JsonAutoDetect ann = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonAutoDetect.class);\n        return ann == null ? checker : checker.with(ann);\n    }\n\n    @java.lang.Override\n    public java.lang.String findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.databind.PropertyName n = _findConstructorName(m);\n        return n == null ? null : n.getSimpleName();\n    }\n\n    @java.lang.Override\n    public java.util.List<com.fasterxml.jackson.databind.PropertyName> findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated m) {\n        com.fasterxml.jackson.annotation.JsonAlias ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JsonAlias.class);\n        if (ann == null) {\n            return null;\n        }\n        java.lang.String[] strs = ann.value();\n        final int len = strs.length;\n        if (len == 0) {\n            return java.util.Collections.emptyList();\n        }\n        java.util.List<com.fasterxml.jackson.databind.PropertyName> result = new java.util.ArrayList<>(len);\n        for (int i = 0; i < len; ++i) {\n            result.add(com.fasterxml.jackson.databind.PropertyName.construct(strs[i]));\n        }\n        return result;\n    }\n\n    @java.lang.Override\n    public boolean hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        return _isIgnorable(m);\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.annotation.JsonProperty ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (ann != null) {\n            return ann.required();\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonProperty.Access findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated m) {\n        com.fasterxml.jackson.annotation.JsonProperty ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (ann != null) {\n            return ann.access();\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonPropertyDescription desc = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonPropertyDescription.class);\n        return desc == null ? null : desc.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Integer findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonProperty prop = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (prop != null) {\n            int ix = prop.index();\n            if (ix != com.fasterxml.jackson.annotation.JsonProperty.INDEX_UNKNOWN) {\n                return java.lang.Integer.valueOf(ix);\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonProperty prop = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (prop == null) {\n            return null;\n        }\n        java.lang.String str = prop.defaultValue();\n        return str.isEmpty() ? null : str;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonFormat.Value findFormat(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonFormat f = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonFormat.class);\n        return f == null ? null : new com.fasterxml.jackson.annotation.JsonFormat.Value(f);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember member) {\n        com.fasterxml.jackson.annotation.JsonManagedReference ref1 = _findAnnotation(member, com.fasterxml.jackson.annotation.JsonManagedReference.class);\n        if (ref1 != null) {\n            return com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n        }\n        com.fasterxml.jackson.annotation.JsonBackReference ref2 = _findAnnotation(member, com.fasterxml.jackson.annotation.JsonBackReference.class);\n        if (ref2 != null) {\n            return com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.util.NameTransformer findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember member) {\n        com.fasterxml.jackson.annotation.JsonUnwrapped ann = _findAnnotation(member, com.fasterxml.jackson.annotation.JsonUnwrapped.class);\n        if ((ann == null) || (!ann.enabled())) {\n            return null;\n        }\n        java.lang.String prefix = ann.prefix();\n        java.lang.String suffix = ann.suffix();\n        return com.fasterxml.jackson.databind.util.NameTransformer.simpleTransformer(prefix, suffix);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JacksonInject.Value findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.annotation.JacksonInject ann = _findAnnotation(m, com.fasterxml.jackson.annotation.JacksonInject.class);\n        if (ann == null) {\n            return null;\n        }\n        com.fasterxml.jackson.annotation.JacksonInject.Value v = com.fasterxml.jackson.annotation.JacksonInject.Value.from(ann);\n        if (!v.hasId()) {\n            java.lang.Object id;\n            if (!(m instanceof com.fasterxml.jackson.databind.introspect.AnnotatedMethod)) {\n                id = m.getRawType().getName();\n            } else {\n                com.fasterxml.jackson.databind.introspect.AnnotatedMethod am = ((com.fasterxml.jackson.databind.introspect.AnnotatedMethod) (m));\n                if (am.getParameterCount() == 0) {\n                    id = m.getRawType().getName();\n                } else {\n                    id = am.getRawParameterType(0).getName();\n                }\n            }\n            v = v.withId(id);\n        }\n        return v;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember m) {\n        com.fasterxml.jackson.annotation.JacksonInject.Value v = findInjectableValue(m);\n        return v == null ? null : v.getId();\n    }\n\n    @java.lang.Override\n    public java.lang.Class<?>[] findViews(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonView ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonView.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.AnnotatedMethod resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedMethod setter1, com.fasterxml.jackson.databind.introspect.AnnotatedMethod setter2) {\n        java.lang.Class<?> cls1 = setter1.getRawParameterType(0);\n        java.lang.Class<?> cls2 = setter2.getRawParameterType(0);\n        if (cls1.isPrimitive()) {\n            if (!cls2.isPrimitive()) {\n                return setter1;\n            }\n        } else if (cls2.isPrimitive()) {\n            return setter2;\n        }\n        if (cls1 == java.lang.String.class) {\n            if (cls2 != java.lang.String.class) {\n                return setter1;\n            }\n        } else if (cls2 == java.lang.String.class) {\n            return setter2;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, com.fasterxml.jackson.databind.JavaType baseType) {\n        return _findTypeResolver(config, ac, baseType);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedMember am, com.fasterxml.jackson.databind.JavaType baseType) {\n        if (baseType.isContainerType() || baseType.isReferenceType()) {\n            return null;\n        }\n        return _findTypeResolver(config, am, baseType);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedMember am, com.fasterxml.jackson.databind.JavaType containerType) {\n        if (containerType.getContentType() == null) {\n            throw new java.lang.IllegalArgumentException((\"Must call method with a container or reference type (got \" + containerType) + \")\");\n        }\n        return _findTypeResolver(config, am, containerType);\n    }\n\n    @java.lang.Override\n    public java.util.List<com.fasterxml.jackson.databind.jsontype.NamedType> findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonSubTypes t = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonSubTypes.class);\n        if (t == null) {\n            return null;\n        }\n        com.fasterxml.jackson.annotation.JsonSubTypes.Type[] types = t.value();\n        java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType> result = new java.util.ArrayList<com.fasterxml.jackson.databind.jsontype.NamedType>(types.length);\n        for (com.fasterxml.jackson.annotation.JsonSubTypes.Type type : types) {\n            result.add(new com.fasterxml.jackson.databind.jsontype.NamedType(type.value(), type.name()));\n        }\n        return result;\n    }\n\n    @java.lang.Override\n    public java.lang.String findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonTypeName tn = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonTypeName.class);\n        return tn == null ? null : tn.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember member) {\n        return _hasAnnotation(member, com.fasterxml.jackson.annotation.JsonTypeId.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonIdentityInfo info = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonIdentityInfo.class);\n        if ((info == null) || (info.generator() == com.fasterxml.jackson.annotation.ObjectIdGenerators.None.class)) {\n            return null;\n        }\n        com.fasterxml.jackson.databind.PropertyName name = com.fasterxml.jackson.databind.PropertyName.construct(info.property());\n        return new com.fasterxml.jackson.databind.introspect.ObjectIdInfo(name, info.scope(), info.generator(), info.resolver());\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.introspect.ObjectIdInfo findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated ann, com.fasterxml.jackson.databind.introspect.ObjectIdInfo objectIdInfo) {\n        com.fasterxml.jackson.annotation.JsonIdentityReference ref = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonIdentityReference.class);\n        if (ref == null) {\n            return objectIdInfo;\n        }\n        if (objectIdInfo == null) {\n            objectIdInfo = com.fasterxml.jackson.databind.introspect.ObjectIdInfo.empty();\n        }\n        return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n    }\n\n    @java.lang.Override\n    public java.lang.Object findSerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.using();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        com.fasterxml.jackson.annotation.JsonRawValue annRaw = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonRawValue.class);\n        if ((annRaw != null) && annRaw.value()) {\n            java.lang.Class<?> cls = a.getRawType();\n            return new com.fasterxml.jackson.databind.ser.std.RawSerializer<java.lang.Object>(cls);\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.keyUsing();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.contentUsing();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonSerializer> serClass = ann.nullsUsing();\n            if (serClass != com.fasterxml.jackson.databind.JsonSerializer.None.class) {\n                return serClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonInclude.Value findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonInclude inc = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonInclude.class);\n        com.fasterxml.jackson.annotation.JsonInclude.Value value = (inc == null) ? com.fasterxml.jackson.annotation.JsonInclude.Value.empty() : com.fasterxml.jackson.annotation.JsonInclude.Value.from(inc);\n        if (value.getValueInclusion() == com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS) {\n            value = _refinePropertyInclusion(a, value);\n        }\n        return value;\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    private com.fasterxml.jackson.annotation.JsonInclude.Value _refinePropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated a, com.fasterxml.jackson.annotation.JsonInclude.Value value) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        if (ann != null) {\n            switch (ann.include()) {\n                case ALWAYS :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS);\n                case NON_NULL :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL);\n                case NON_DEFAULT :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT);\n                case NON_EMPTY :\n                    return value.withValueInclusion(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY);\n                case DEFAULT_INCLUSION :\n                default :\n            }\n        }\n        return value;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        return ann == null ? null : ann.typing();\n    }\n\n    @java.lang.Override\n    public java.lang.Object findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        return ann == null ? null : _classIfExplicit(ann.converter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public java.lang.Object findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember a) {\n        com.fasterxml.jackson.databind.annotation.JsonSerialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        return ann == null ? null : _classIfExplicit(ann.contentConverter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType refineSerializationType(final com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, final com.fasterxml.jackson.databind.introspect.Annotated a, final com.fasterxml.jackson.databind.JavaType baseType) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = baseType;\n        final com.fasterxml.jackson.databind.type.TypeFactory tf = config.getTypeFactory();\n        final com.fasterxml.jackson.databind.annotation.JsonSerialize jsonSer = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonSerialize.class);\n        final java.lang.Class<?> serClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.as());\n        if (serClass != null) {\n            if (type.hasRawClass(serClass)) {\n                type = type.withStaticTyping();\n            } else {\n                java.lang.Class<?> currRaw = type.getRawClass();\n                try {\n                    if (serClass.isAssignableFrom(currRaw)) {\n                        type = tf.constructGeneralizedType(type, serClass);\n                    } else if (currRaw.isAssignableFrom(serClass)) {\n                        type = tf.constructSpecializedType(type, serClass);\n                    } else if (_primitiveAndWrapper(currRaw, serClass)) {\n                        type = type.withStaticTyping();\n                    } else {\n                        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n                    }\n                } catch (java.lang.IllegalArgumentException iae) {\n                    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to widen type %s with annotation (value %s), from '%s': %s\", type, serClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n        }\n        if (type.isMapLikeType()) {\n            com.fasterxml.jackson.databind.JavaType keyType = type.getKeyType();\n            final java.lang.Class<?> keyClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.keyAs());\n            if (keyClass != null) {\n                if (keyType.hasRawClass(keyClass)) {\n                    keyType = keyType.withStaticTyping();\n                } else {\n                    java.lang.Class<?> currRaw = keyType.getRawClass();\n                    try {\n                        if (keyClass.isAssignableFrom(currRaw)) {\n                            keyType = tf.constructGeneralizedType(keyType, keyClass);\n                        } else if (currRaw.isAssignableFrom(keyClass)) {\n                            keyType = tf.constructSpecializedType(keyType, keyClass);\n                        } else if (_primitiveAndWrapper(currRaw, keyClass)) {\n                            keyType = keyType.withStaticTyping();\n                        } else {\n                            throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n                        }\n                    } catch (java.lang.IllegalArgumentException iae) {\n                        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n                    }\n                }\n                type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(keyType);\n            }\n        }\n        com.fasterxml.jackson.databind.JavaType contentType = type.getContentType();\n        if (contentType != null) {\n            final java.lang.Class<?> contentClass = (jsonSer == null) ? null : _classIfExplicit(jsonSer.contentAs());\n            if (contentClass != null) {\n                if (contentType.hasRawClass(contentClass)) {\n                    contentType = contentType.withStaticTyping();\n                } else {\n                    java.lang.Class<?> currRaw = contentType.getRawClass();\n                    try {\n                        if (contentClass.isAssignableFrom(currRaw)) {\n                            contentType = tf.constructGeneralizedType(contentType, contentClass);\n                        } else if (currRaw.isAssignableFrom(contentClass)) {\n                            contentType = tf.constructSpecializedType(contentType, contentClass);\n                        } else if (_primitiveAndWrapper(currRaw, contentClass)) {\n                            contentType = contentType.withStaticTyping();\n                        } else {\n                            throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n                        }\n                    } catch (java.lang.IllegalArgumentException iae) {\n                        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n                    }\n                }\n                type = type.withContentType(contentType);\n            }\n        }\n        return type;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated am) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findSerializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseType) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findSerializationContentType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseType) {\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.String[] findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.annotation.JsonPropertyOrder order = _findAnnotation(ac, com.fasterxml.jackson.annotation.JsonPropertyOrder.class);\n        return order == null ? null : order.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        return _findSortAlpha(ann);\n    }\n\n    private final java.lang.Boolean _findSortAlpha(com.fasterxml.jackson.databind.introspect.Annotated ann) {\n        com.fasterxml.jackson.annotation.JsonPropertyOrder order = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonPropertyOrder.class);\n        if ((order != null) && order.alphabetic()) {\n            return java.lang.Boolean.TRUE;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public void findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, java.util.List<com.fasterxml.jackson.databind.ser.BeanPropertyWriter> properties) {\n        com.fasterxml.jackson.databind.annotation.JsonAppend ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonAppend.class);\n        if (ann == null) {\n            return;\n        }\n        final boolean prepend = ann.prepend();\n        com.fasterxml.jackson.databind.JavaType propType = null;\n        com.fasterxml.jackson.databind.annotation.JsonAppend.Attr[] attrs = ann.attrs();\n        for (int i = 0, len = attrs.length; i < len; ++i) {\n            if (propType == null) {\n                propType = config.constructType(java.lang.Object.class);\n            }\n            com.fasterxml.jackson.databind.ser.BeanPropertyWriter bpw = _constructVirtualProperty(attrs[i], config, ac, propType);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n        com.fasterxml.jackson.databind.annotation.JsonAppend.Prop[] props = ann.props();\n        for (int i = 0, len = props.length; i < len; ++i) {\n            com.fasterxml.jackson.databind.ser.BeanPropertyWriter bpw = _constructVirtualProperty(props[i], config, ac);\n            if (prepend) {\n                properties.add(i, bpw);\n            } else {\n                properties.add(bpw);\n            }\n        }\n    }\n\n    protected com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Attr attr, com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac, com.fasterxml.jackson.databind.JavaType type) {\n        com.fasterxml.jackson.databind.PropertyMetadata metadata = (attr.required()) ? com.fasterxml.jackson.databind.PropertyMetadata.STD_REQUIRED : com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL;\n        java.lang.String attrName = attr.value();\n        com.fasterxml.jackson.databind.PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());\n        if (!propName.hasSimpleName()) {\n            propName = com.fasterxml.jackson.databind.PropertyName.construct(attrName);\n        }\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember member = new com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember(ac, ac.getRawType(), attrName, type);\n        com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, attr.include());\n        return com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter.construct(attrName, propDef, ac.getAnnotations(), type);\n    }\n\n    protected com.fasterxml.jackson.databind.ser.BeanPropertyWriter _constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Prop prop, com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.PropertyMetadata metadata = (prop.required()) ? com.fasterxml.jackson.databind.PropertyMetadata.STD_REQUIRED : com.fasterxml.jackson.databind.PropertyMetadata.STD_OPTIONAL;\n        com.fasterxml.jackson.databind.PropertyName propName = _propertyName(prop.name(), prop.namespace());\n        com.fasterxml.jackson.databind.JavaType type = config.constructType(prop.type());\n        com.fasterxml.jackson.databind.introspect.AnnotatedMember member = new com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember(ac, ac.getRawType(), propName.getSimpleName(), type);\n        com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition propDef = com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, prop.include());\n        java.lang.Class<?> implClass = prop.value();\n        com.fasterxml.jackson.databind.cfg.HandlerInstantiator hi = config.getHandlerInstantiator();\n        com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter bpw = (hi == null) ? null : hi.virtualPropertyWriterInstance(config, implClass);\n        if (bpw == null) {\n            bpw = ((com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter) (com.fasterxml.jackson.databind.util.ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers())));\n        }\n        return bpw.withConfig(config, ac, propDef, type);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonGetter jg = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonGetter.class);\n        if (jg != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(jg.value());\n        }\n        com.fasterxml.jackson.annotation.JsonProperty pann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (pann != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.ANNOTATIONS_TO_INFER_SER)) {\n            return com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonValue ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonValue.class);\n        if (ann == null) {\n            return null;\n        }\n        return ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonAnyGetter ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonAnyGetter.class);\n        if (ann == null) {\n            return null;\n        }\n        return ann.enabled();\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod am) {\n        return _hasAnnotation(am, com.fasterxml.jackson.annotation.JsonAnyGetter.class);\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod am) {\n        com.fasterxml.jackson.annotation.JsonValue ann = _findAnnotation(am, com.fasterxml.jackson.annotation.JsonValue.class);\n        return (ann != null) && ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Object findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonDeserializer> deserClass = ann.using();\n            if (deserClass != com.fasterxml.jackson.databind.JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        if (ann != null) {\n            java.lang.Class<? extends com.fasterxml.jackson.databind.KeyDeserializer> deserClass = ann.keyUsing();\n            if (deserClass != com.fasterxml.jackson.databind.KeyDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        if (ann != null) {\n            @java.lang.SuppressWarnings(\"rawtypes\")\n            java.lang.Class<? extends com.fasterxml.jackson.databind.JsonDeserializer> deserClass = ann.contentUsing();\n            if (deserClass != com.fasterxml.jackson.databind.JsonDeserializer.None.class) {\n                return deserClass;\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        return ann == null ? null : _classIfExplicit(ann.converter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public java.lang.Object findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember a) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        return ann == null ? null : _classIfExplicit(ann.contentConverter(), com.fasterxml.jackson.databind.util.Converter.None.class);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.JavaType refineDeserializationType(final com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, final com.fasterxml.jackson.databind.introspect.Annotated a, final com.fasterxml.jackson.databind.JavaType baseType) throws com.fasterxml.jackson.databind.JsonMappingException {\n        com.fasterxml.jackson.databind.JavaType type = baseType;\n        final com.fasterxml.jackson.databind.type.TypeFactory tf = config.getTypeFactory();\n        final com.fasterxml.jackson.databind.annotation.JsonDeserialize jsonDeser = _findAnnotation(a, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        final java.lang.Class<?> valueClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.as());\n        if (((valueClass != null) && (!type.hasRawClass(valueClass))) && (!_primitiveAndWrapper(type, valueClass))) {\n            try {\n                type = tf.constructSpecializedType(type, valueClass);\n            } catch (java.lang.IllegalArgumentException iae) {\n                throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\", type, valueClass.getName(), a.getName(), iae.getMessage()), iae);\n            }\n        }\n        if (type.isMapLikeType()) {\n            com.fasterxml.jackson.databind.JavaType keyType = type.getKeyType();\n            final java.lang.Class<?> keyClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.keyAs());\n            if ((keyClass != null) && (!_primitiveAndWrapper(keyType, keyClass))) {\n                try {\n                    keyType = tf.constructSpecializedType(keyType, keyClass);\n                    type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(keyType);\n                } catch (java.lang.IllegalArgumentException iae) {\n                    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n        }\n        com.fasterxml.jackson.databind.JavaType contentType = type.getContentType();\n        if (contentType != null) {\n            final java.lang.Class<?> contentClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.contentAs());\n            if ((contentClass != null) && (!_primitiveAndWrapper(contentType, contentClass))) {\n                try {\n                    contentType = tf.constructSpecializedType(contentType, contentClass);\n                    type = type.withContentType(contentType);\n                } catch (java.lang.IllegalArgumentException iae) {\n                    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n                }\n            }\n        }\n        return type;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findDeserializationContentType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseContentType) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findDeserializationType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseType) {\n        return null;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public java.lang.Class<?> findDeserializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated am, com.fasterxml.jackson.databind.JavaType baseKeyType) {\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Object findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonValueInstantiator ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonValueInstantiator.class);\n        return ann == null ? null : ann.value();\n    }\n\n    @java.lang.Override\n    public java.lang.Class<?> findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonDeserialize ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonDeserialize.class);\n        return ann == null ? null : _classIfExplicit(ann.builder());\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass ac) {\n        com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder ann = _findAnnotation(ac, com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.class);\n        return ann == null ? null : new com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value(ann);\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.databind.PropertyName findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonSetter js = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonSetter.class);\n        if (js != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(js.value());\n        }\n        com.fasterxml.jackson.annotation.JsonProperty pann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonProperty.class);\n        if (pann != null) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(pann.value());\n        }\n        if (_hasOneOf(a, com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.ANNOTATIONS_TO_INFER_DESER)) {\n            return com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT;\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonAnySetter ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonAnySetter.class);\n        return ann == null ? null : ann.enabled();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonSetter.Value findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        return com.fasterxml.jackson.annotation.JsonSetter.Value.from(_findAnnotation(a, com.fasterxml.jackson.annotation.JsonSetter.class));\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonMerge ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonMerge.class);\n        return ann == null ? null : ann.value().asBoolean();\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasAnySetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod am) {\n        return _hasAnnotation(am, com.fasterxml.jackson.annotation.JsonAnySetter.class);\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public boolean hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonCreator ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonCreator.class);\n        if (ann != null) {\n            return ann.mode() != com.fasterxml.jackson.annotation.JsonCreator.Mode.DISABLED;\n        }\n        if (_cfgConstructorPropertiesImpliesCreator) {\n            if (a instanceof com.fasterxml.jackson.databind.introspect.AnnotatedConstructor) {\n                if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n                    java.lang.Boolean b = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.hasCreatorAnnotation(a);\n                    if (b != null) {\n                        return b.booleanValue();\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    @java.lang.Override\n    @java.lang.Deprecated\n    public com.fasterxml.jackson.annotation.JsonCreator.Mode findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonCreator ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonCreator.class);\n        return ann == null ? null : ann.mode();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.annotation.JsonCreator.Mode findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonCreator ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonCreator.class);\n        if (ann != null) {\n            return ann.mode();\n        }\n        if (_cfgConstructorPropertiesImpliesCreator && config.isEnabled(com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)) {\n            if (a instanceof com.fasterxml.jackson.databind.introspect.AnnotatedConstructor) {\n                if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n                    java.lang.Boolean b = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.hasCreatorAnnotation(a);\n                    if ((b != null) && b.booleanValue()) {\n                        return com.fasterxml.jackson.annotation.JsonCreator.Mode.PROPERTIES;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    protected boolean _isIgnorable(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        com.fasterxml.jackson.annotation.JsonIgnore ann = _findAnnotation(a, com.fasterxml.jackson.annotation.JsonIgnore.class);\n        if (ann != null) {\n            return ann.value();\n        }\n        if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n            java.lang.Boolean b = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.findTransient(a);\n            if (b != null) {\n                return b.booleanValue();\n            }\n        }\n        return false;\n    }\n\n    protected java.lang.Class<?> _classIfExplicit(java.lang.Class<?> cls) {\n        if ((cls == null) || com.fasterxml.jackson.databind.util.ClassUtil.isBogusClass(cls)) {\n            return null;\n        }\n        return cls;\n    }\n\n    protected java.lang.Class<?> _classIfExplicit(java.lang.Class<?> cls, java.lang.Class<?> implicit) {\n        cls = _classIfExplicit(cls);\n        return (cls == null) || (cls == implicit) ? null : cls;\n    }\n\n    protected com.fasterxml.jackson.databind.PropertyName _propertyName(java.lang.String localName, java.lang.String namespace) {\n        if (localName.isEmpty()) {\n            return com.fasterxml.jackson.databind.PropertyName.USE_DEFAULT;\n        }\n        if ((namespace == null) || namespace.isEmpty()) {\n            return com.fasterxml.jackson.databind.PropertyName.construct(localName);\n        }\n        return com.fasterxml.jackson.databind.PropertyName.construct(localName, namespace);\n    }\n\n    protected com.fasterxml.jackson.databind.PropertyName _findConstructorName(com.fasterxml.jackson.databind.introspect.Annotated a) {\n        if (a instanceof com.fasterxml.jackson.databind.introspect.AnnotatedParameter) {\n            com.fasterxml.jackson.databind.introspect.AnnotatedParameter p = ((com.fasterxml.jackson.databind.introspect.AnnotatedParameter) (a));\n            com.fasterxml.jackson.databind.introspect.AnnotatedWithParams ctor = p.getOwner();\n            if (ctor != null) {\n                if (com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper != null) {\n                    com.fasterxml.jackson.databind.PropertyName name = com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._java7Helper.findConstructorName(p);\n                    if (name != null) {\n                        return name;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    @java.lang.SuppressWarnings(\"deprecation\")\n    protected com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> _findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?> config, com.fasterxml.jackson.databind.introspect.Annotated ann, com.fasterxml.jackson.databind.JavaType baseType) {\n        com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<?> b;\n        com.fasterxml.jackson.annotation.JsonTypeInfo info = _findAnnotation(ann, com.fasterxml.jackson.annotation.JsonTypeInfo.class);\n        com.fasterxml.jackson.databind.annotation.JsonTypeResolver resAnn = _findAnnotation(ann, com.fasterxml.jackson.databind.annotation.JsonTypeResolver.class);\n        if (resAnn != null) {\n            if (info == null) {\n                return null;\n            }\n            b = config.typeResolverBuilderInstance(ann, resAnn.value());\n        } else {\n            if (info == null) {\n                return null;\n            }\n            if (info.use() == com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NONE) {\n                return _constructNoTypeResolverBuilder();\n            }\n            b = _constructStdTypeResolverBuilder();\n        }\n        com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver idResInfo = _findAnnotation(ann, com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver.class);\n        com.fasterxml.jackson.databind.jsontype.TypeIdResolver idRes = (idResInfo == null) ? null : config.typeIdResolverInstance(ann, idResInfo.value());\n        if (idRes != null) {\n            idRes.init(baseType);\n        }\n        b = b.init(info.use(), idRes);\n        com.fasterxml.jackson.annotation.JsonTypeInfo.As inclusion = info.include();\n        if ((inclusion == com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY) && (ann instanceof com.fasterxml.jackson.databind.introspect.AnnotatedClass)) {\n            inclusion = com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY;\n        }\n        b = b.inclusion(inclusion);\n        b = b.typeProperty(info.property());\n        java.lang.Class<?> defaultImpl = info.defaultImpl();\n        if ((defaultImpl != com.fasterxml.jackson.annotation.JsonTypeInfo.None.class) && (!defaultImpl.isAnnotation())) {\n            b = b.defaultImpl(defaultImpl);\n        }\n        b = b.typeIdVisibility(info.visible());\n        return b;\n    }\n\n    protected com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructStdTypeResolverBuilder() {\n        return new com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder();\n    }\n\n    protected com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder _constructNoTypeResolverBuilder() {\n        return com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder();\n    }\n\n    private boolean _primitiveAndWrapper(java.lang.Class<?> baseType, java.lang.Class<?> refinement) {\n        if (baseType.isPrimitive()) {\n            return baseType == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(refinement);\n        }\n        if (refinement.isPrimitive()) {\n            return refinement == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(baseType);\n        }\n        return false;\n    }\n\n    private boolean _primitiveAndWrapper(com.fasterxml.jackson.databind.JavaType baseType, java.lang.Class<?> refinement) {\n        if (baseType.isPrimitive()) {\n            return baseType.hasRawClass(com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(refinement));\n        }\n        if (refinement.isPrimitive()) {\n            return refinement == com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(baseType.getRawClass());\n        }\n        return false;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "(valueClass != null) && (!type.hasRawClass(valueClass))",
            "dst_parent": "if ((valueClass != null) && (!type.hasRawClass(valueClass))) {\n    try {\n        type = tf.constructSpecializedType(type, valueClass);\n    } catch (java.lang.IllegalArgumentException iae) {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow type %s with annotation (value %s), from '%s': %s\", type, valueClass.getName(), a.getName(), iae.getMessage()), iae);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "((valueClass != null) && (!type.hasRawClass(valueClass)))",
            "src_parent": "((valueClass != null) && (!type.hasRawClass(valueClass))) && (!_primitiveAndWrapper(type, valueClass))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "keyClass != null",
            "dst_parent": "if (keyClass != null) {\n    try {\n        keyType = tf.constructSpecializedType(keyType, keyClass);\n        type = ((com.fasterxml.jackson.databind.type.MapLikeType) (type)).withKeyType(keyType);\n    } catch (java.lang.IllegalArgumentException iae) {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s\", type, keyClass.getName(), a.getName(), iae.getMessage()), iae);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(keyClass != null)",
            "src_parent": "(keyClass != null) && (!_primitiveAndWrapper(keyType, keyClass))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "contentClass != null",
            "dst_parent": "if (contentClass != null) {\n    try {\n        contentType = tf.constructSpecializedType(contentType, contentClass);\n        type = type.withContentType(contentType);\n    } catch (java.lang.IllegalArgumentException iae) {\n        throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s\", type, contentClass.getName(), a.getName(), iae.getMessage()), iae);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(contentClass != null)",
            "src_parent": "(contentClass != null) && (!_primitiveAndWrapper(contentType, contentClass))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n}",
            "dst_parent": "if (currRaw.isAssignableFrom(serClass)) {\n    type = tf.constructSpecializedType(type, serClass);\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n}",
            "src_parent": "if (_primitiveAndWrapper(currRaw, serClass)) {\n    type = type.withStaticTyping();\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization type %s into %s; types not related\", type, serClass.getName()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n}",
            "dst_parent": "if (currRaw.isAssignableFrom(keyClass)) {\n    keyType = tf.constructSpecializedType(keyType, keyClass);\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n}",
            "src_parent": "if (_primitiveAndWrapper(currRaw, keyClass)) {\n    keyType = keyType.withStaticTyping();\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization key type %s into %s; types not related\", keyType, keyClass.getName()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n}",
            "dst_parent": "if (currRaw.isAssignableFrom(contentClass)) {\n    contentType = tf.constructSpecializedType(contentType, contentClass);\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n}",
            "src_parent": "if (_primitiveAndWrapper(currRaw, contentClass)) {\n    contentType = contentType.withStaticTyping();\n} else {\n    throw new com.fasterxml.jackson.databind.JsonMappingException(null, java.lang.String.format(\"Can not refine serialization content type %s into %s; types not related\", contentType, contentClass.getName()));\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "JacksonAnnotationIntrospector"
    }
  ],
  "id": "JacksonDatabind_81"
}