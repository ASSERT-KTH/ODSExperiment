{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(bitsCachedSize < count) && (bitsCachedSize < 57)",
            "src_parent": "while ((bitsCachedSize < count) && (bitsCachedSize < 57)) {\n    final long nextByte = in.read();\n    if (nextByte < 0) {\n        return nextByte;\n    }\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        bitsCached |= nextByte << bitsCachedSize;\n    } else {\n        bitsCached <<= 8;\n        bitsCached |= nextByte;\n    }\n    bitsCachedSize += 8;\n} ",
            "src_parent_type": "While",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "int overflowBits = 0",
            "src_parent": "{\n    if ((count < 0) || (count > org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE)) {\n        throw new java.lang.IllegalArgumentException(\"count must not be negative or greater than \" + org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE);\n    }\n    while ((bitsCachedSize < count) && (bitsCachedSize < 57)) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= nextByte << bitsCachedSize;\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    } \n    int overflowBits = 0;\n    long overflow = 0L;\n    if (bitsCachedSize < count) {\n        int bitsToAddCount = count - bitsCachedSize;\n        overflowBits = 8 - bitsToAddCount;\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            long bitsToAdd = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd << bitsCachedSize;\n            overflow = (nextByte >>> bitsToAddCount) & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        } else {\n            bitsCached <<= bitsToAddCount;\n            long bitsToAdd = (nextByte >>> overflowBits) & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd;\n            overflow = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        }\n        bitsCachedSize = count;\n    }\n    final long bitsOut;\n    if (overflowBits == 0) {\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n            bitsCached >>>= count;\n        } else {\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        }\n        bitsCachedSize -= count;\n    } else {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached = overflow;\n        bitsCachedSize = overflowBits;\n    }\n    return bitsOut;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "While",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "long overflow = 0L",
            "src_parent": "{\n    if ((count < 0) || (count > org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE)) {\n        throw new java.lang.IllegalArgumentException(\"count must not be negative or greater than \" + org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE);\n    }\n    while ((bitsCachedSize < count) && (bitsCachedSize < 57)) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= nextByte << bitsCachedSize;\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    } \n    int overflowBits = 0;\n    long overflow = 0L;\n    if (bitsCachedSize < count) {\n        int bitsToAddCount = count - bitsCachedSize;\n        overflowBits = 8 - bitsToAddCount;\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            long bitsToAdd = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd << bitsCachedSize;\n            overflow = (nextByte >>> bitsToAddCount) & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        } else {\n            bitsCached <<= bitsToAddCount;\n            long bitsToAdd = (nextByte >>> overflowBits) & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd;\n            overflow = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        }\n        bitsCachedSize = count;\n    }\n    final long bitsOut;\n    if (overflowBits == 0) {\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n            bitsCached >>>= count;\n        } else {\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        }\n        bitsCachedSize -= count;\n    } else {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached = overflow;\n        bitsCachedSize = overflowBits;\n    }\n    return bitsOut;\n}",
            "src_parent_type": "Block",
            "src_type": "LocalVariable"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "While",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (bitsCachedSize < count) {\n    int bitsToAddCount = count - bitsCachedSize;\n    overflowBits = 8 - bitsToAddCount;\n    final long nextByte = in.read();\n    if (nextByte < 0) {\n        return nextByte;\n    }\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        long bitsToAdd = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n        bitsCached |= bitsToAdd << bitsCachedSize;\n        overflow = (nextByte >>> bitsToAddCount) & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n    } else {\n        bitsCached <<= bitsToAddCount;\n        long bitsToAdd = (nextByte >>> overflowBits) & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n        bitsCached |= bitsToAdd;\n        overflow = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n    }\n    bitsCachedSize = count;\n}",
            "src_parent": "{\n    if ((count < 0) || (count > org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE)) {\n        throw new java.lang.IllegalArgumentException(\"count must not be negative or greater than \" + org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE);\n    }\n    while ((bitsCachedSize < count) && (bitsCachedSize < 57)) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= nextByte << bitsCachedSize;\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    } \n    int overflowBits = 0;\n    long overflow = 0L;\n    if (bitsCachedSize < count) {\n        int bitsToAddCount = count - bitsCachedSize;\n        overflowBits = 8 - bitsToAddCount;\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            long bitsToAdd = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd << bitsCachedSize;\n            overflow = (nextByte >>> bitsToAddCount) & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        } else {\n            bitsCached <<= bitsToAddCount;\n            long bitsToAdd = (nextByte >>> overflowBits) & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd;\n            overflow = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        }\n        bitsCachedSize = count;\n    }\n    final long bitsOut;\n    if (overflowBits == 0) {\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n            bitsCached >>>= count;\n        } else {\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        }\n        bitsCachedSize -= count;\n    } else {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached = overflow;\n        bitsCachedSize = overflowBits;\n    }\n    return bitsOut;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (overflowBits == 0) {\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    }\n    bitsCachedSize -= count;\n} else {\n    bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    bitsCached = overflow;\n    bitsCachedSize = overflowBits;\n}",
            "src_parent": "{\n    if ((count < 0) || (count > org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE)) {\n        throw new java.lang.IllegalArgumentException(\"count must not be negative or greater than \" + org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE);\n    }\n    while ((bitsCachedSize < count) && (bitsCachedSize < 57)) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= nextByte << bitsCachedSize;\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    } \n    int overflowBits = 0;\n    long overflow = 0L;\n    if (bitsCachedSize < count) {\n        int bitsToAddCount = count - bitsCachedSize;\n        overflowBits = 8 - bitsToAddCount;\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            long bitsToAdd = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd << bitsCachedSize;\n            overflow = (nextByte >>> bitsToAddCount) & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        } else {\n            bitsCached <<= bitsToAddCount;\n            long bitsToAdd = (nextByte >>> overflowBits) & org.apache.commons.compress.utils.BitInputStream.MASKS[bitsToAddCount];\n            bitsCached |= bitsToAdd;\n            overflow = nextByte & org.apache.commons.compress.utils.BitInputStream.MASKS[overflowBits];\n        }\n        bitsCachedSize = count;\n    }\n    final long bitsOut;\n    if (overflowBits == 0) {\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n            bitsCached >>>= count;\n        } else {\n            bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        }\n        bitsCachedSize -= count;\n    } else {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached = overflow;\n        bitsCachedSize = overflowBits;\n    }\n    return bitsOut;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n    bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    bitsCached >>>= count;\n} else {\n    bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n}",
            "dst_parent": "{\n    if ((count < 0) || (count > org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE)) {\n        throw new java.lang.IllegalArgumentException(\"count must not be negative or greater than \" + org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE);\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= nextByte << bitsCachedSize;\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    } \n    final long bitsOut;\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}",
            "dst_parent_type": "Block",
            "dst_type": "If",
            "operator": "MOV",
            "src": "if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n    bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    bitsCached >>>= count;\n} else {\n    bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n}",
            "src_parent": "{\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    }\n    bitsCachedSize -= count;\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "bitsCachedSize -= count",
            "dst_parent": "{\n    if ((count < 0) || (count > org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE)) {\n        throw new java.lang.IllegalArgumentException(\"count must not be negative or greater than \" + org.apache.commons.compress.utils.BitInputStream.MAXIMUM_CACHE_SIZE);\n    }\n    while (bitsCachedSize < count) {\n        final long nextByte = in.read();\n        if (nextByte < 0) {\n            return nextByte;\n        }\n        if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n            bitsCached |= nextByte << bitsCachedSize;\n        } else {\n            bitsCached <<= 8;\n            bitsCached |= nextByte;\n        }\n        bitsCachedSize += 8;\n    } \n    final long bitsOut;\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    }\n    bitsCachedSize -= count;\n    return bitsOut;\n}",
            "dst_parent_type": "Block",
            "dst_type": "OperatorAssignment",
            "operator": "MOV",
            "src": "bitsCachedSize -= count",
            "src_parent": "{\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        bitsOut = bitsCached & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n        bitsCached >>>= count;\n    } else {\n        bitsOut = (bitsCached >> (bitsCachedSize - count)) & org.apache.commons.compress.utils.BitInputStream.MASKS[count];\n    }\n    bitsCachedSize -= count;\n}",
            "src_parent_type": "Block",
            "src_type": "OperatorAssignment"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "While",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "bitsCachedSize < count",
            "dst_parent": "while (bitsCachedSize < count) {\n    final long nextByte = in.read();\n    if (nextByte < 0) {\n        return nextByte;\n    }\n    if (byteOrder == java.nio.ByteOrder.LITTLE_ENDIAN) {\n        bitsCached |= nextByte << bitsCachedSize;\n    } else {\n        bitsCached <<= 8;\n        bitsCached |= nextByte;\n    }\n    bitsCachedSize += 8;\n} ",
            "dst_parent_type": "While",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(bitsCachedSize < count)",
            "src_parent": "(bitsCachedSize < count) && (bitsCachedSize < 57)",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "BitInputStream"
    }
  ],
  "id": "Compress_40"
}