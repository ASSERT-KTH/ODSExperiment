{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "tokeniser.acknowledgeSelfClosingFlag()",
            "dst_parent": "{\n    tokeniser.acknowledgeSelfClosingFlag();\n}",
            "dst_parent_type": "Block",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "tokeniser.error(\"Tag cannot be self closing; not a void tag\")",
            "src_parent": "{\n    tokeniser.error(\"Tag cannot be self closing; not a void tag\");\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "!tag.isEmpty()",
            "src_parent": "if (!tag.isEmpty()) {\n    tokeniser.error(\"Tag cannot be self closing; not a void tag\");\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "tokeniser.acknowledgeSelfClosingFlag()",
            "src_parent": "{\n    tag.setSelfClosing();\n    tokeniser.acknowledgeSelfClosingFlag();\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "tag.isSelfClosing()",
            "src_parent": "if (tag.isSelfClosing()) {\n    tokeniser.acknowledgeSelfClosingFlag();\n}",
            "src_parent_type": "If",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "tag",
            "dst_parent": "tag.isSelfClosing()",
            "dst_parent_type": "Invocation",
            "dst_type": "VariableRead",
            "operator": "MOV",
            "src": "tag",
            "src_parent": "tag.isEmpty()",
            "src_parent_type": "Invocation",
            "src_type": "VariableRead"
          }
        }
      ],
      "file_name": "HtmlTreeBuilder"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "private boolean selfClosingFlagAcknowledged = true;",
            "src_parent": "final class Tokeniser {\n    static final char replacementChar = '�';\n\n    private static final char[] notCharRefCharsSorted = new char[]{ '\\t', '\\n', '\\r', '\\f', ' ', '<', '&' };\n\n    static {\n        java.util.Arrays.sort(notCharRefCharsSorted);\n    }\n\n    private final org.jsoup.parser.CharacterReader reader;\n\n    private final org.jsoup.parser.ParseErrorList errors;\n\n    private org.jsoup.parser.TokeniserState state = TokeniserState.Data;\n\n    private org.jsoup.parser.Token emitPending;\n\n    private boolean isEmitPending = false;\n\n    private java.lang.String charsString = null;\n\n    private java.lang.StringBuilder charsBuilder = new java.lang.StringBuilder(1024);\n\n    java.lang.StringBuilder dataBuffer = new java.lang.StringBuilder(1024);\n\n    Token.Tag tagPending;\n\n    Token.StartTag startPending = new org.jsoup.parser.Token.StartTag();\n\n    Token.EndTag endPending = new org.jsoup.parser.Token.EndTag();\n\n    Token.Character charPending = new org.jsoup.parser.Token.Character();\n\n    Token.Doctype doctypePending = new org.jsoup.parser.Token.Doctype();\n\n    Token.Comment commentPending = new org.jsoup.parser.Token.Comment();\n\n    private java.lang.String lastStartTag;\n\n    private boolean selfClosingFlagAcknowledged = true;\n\n    Tokeniser(org.jsoup.parser.CharacterReader reader, org.jsoup.parser.ParseErrorList errors) {\n        this.reader = reader;\n        this.errors = errors;\n    }\n\n    org.jsoup.parser.Token read() {\n        if (!selfClosingFlagAcknowledged) {\n            error(\"Self closing flag not acknowledged\");\n            selfClosingFlagAcknowledged = true;\n        }\n        while (!isEmitPending) {\n            state.read(this, reader);\n        } \n        if (charsBuilder.length() > 0) {\n            java.lang.String str = charsBuilder.toString();\n            charsBuilder.delete(0, charsBuilder.length());\n            charsString = null;\n            return charPending.data(str);\n        } else if (charsString != null) {\n            org.jsoup.parser.Token token = charPending.data(charsString);\n            charsString = null;\n            return token;\n        } else {\n            isEmitPending = false;\n            return emitPending;\n        }\n    }\n\n    void emit(org.jsoup.parser.Token token) {\n        org.jsoup.helper.Validate.isFalse(isEmitPending, \"There is an unread token pending!\");\n        emitPending = token;\n        isEmitPending = true;\n        if (token.type == Token.TokenType.StartTag) {\n            org.jsoup.parser.Token.StartTag startTag = ((org.jsoup.parser.Token.StartTag) (token));\n            lastStartTag = startTag.tagName;\n            if (startTag.selfClosing) {\n                selfClosingFlagAcknowledged = false;\n            }\n        } else if (token.type == Token.TokenType.EndTag) {\n            org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));\n            if (endTag.attributes != null) {\n                error(\"Attributes incorrectly present on end tag\");\n            }\n        }\n    }\n\n    void emit(final java.lang.String str) {\n        if (charsString == null) {\n            charsString = str;\n        } else {\n            if (charsBuilder.length() == 0) {\n                charsBuilder.append(charsString);\n            }\n            charsBuilder.append(str);\n        }\n    }\n\n    void emit(char[] chars) {\n        emit(java.lang.String.valueOf(chars));\n    }\n\n    void emit(int[] codepoints) {\n        emit(new java.lang.String(codepoints, 0, codepoints.length));\n    }\n\n    void emit(char c) {\n        emit(java.lang.String.valueOf(c));\n    }\n\n    org.jsoup.parser.TokeniserState getState() {\n        return state;\n    }\n\n    void transition(org.jsoup.parser.TokeniserState state) {\n        this.state = state;\n    }\n\n    void advanceTransition(org.jsoup.parser.TokeniserState state) {\n        reader.advance();\n        this.state = state;\n    }\n\n    void acknowledgeSelfClosingFlag() {\n        selfClosingFlagAcknowledged = true;\n    }\n\n    private final int[] codepointHolder = new int[1];\n\n    private final int[] multipointHolder = new int[2];\n\n    int[] consumeCharacterReference(java.lang.Character additionalAllowedCharacter, boolean inAttribute) {\n        if (reader.isEmpty()) {\n            return null;\n        }\n        if ((additionalAllowedCharacter != null) && (additionalAllowedCharacter == reader.current())) {\n            return null;\n        }\n        if (reader.matchesAnySorted(org.jsoup.parser.Tokeniser.notCharRefCharsSorted)) {\n            return null;\n        }\n        final int[] codeRef = codepointHolder;\n        reader.mark();\n        if (reader.matchConsume(\"#\")) {\n            boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");\n            java.lang.String numRef = (isHexMode) ? reader.consumeHexSequence() : reader.consumeDigitSequence();\n            if (numRef.length() == 0) {\n                characterReferenceError(\"numeric reference with no numerals\");\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError(\"missing semicolon\");\n            }\n            int charval = -1;\n            try {\n                int base = (isHexMode) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(numRef, base);\n            } catch (java.lang.NumberFormatException ignored) {\n            }\n            if (((charval == (-1)) || ((charval >= 0xd800) && (charval <= 0xdfff))) || (charval > 0x10ffff)) {\n                characterReferenceError(\"character outside of valid range\");\n                codeRef[0] = org.jsoup.parser.Tokeniser.replacementChar;\n                return codeRef;\n            } else {\n                codeRef[0] = charval;\n                return codeRef;\n            }\n        } else {\n            java.lang.String nameRef = reader.consumeLetterThenDigitSequence();\n            boolean looksLegit = reader.matches(';');\n            boolean found = org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit);\n            if (!found) {\n                reader.rewindToMark();\n                if (looksLegit) {\n                    characterReferenceError(java.lang.String.format(\"invalid named referenece '%s'\", nameRef));\n                }\n                return null;\n            }\n            if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matchesAny('=', '-', '_'))) {\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError(\"missing semicolon\");\n            }\n            int numChars = org.jsoup.nodes.Entities.codepointsForName(nameRef, multipointHolder);\n            if (numChars == 1) {\n                codeRef[0] = multipointHolder[0];\n                return codeRef;\n            } else if (numChars == 2) {\n                return multipointHolder;\n            } else {\n                org.jsoup.helper.Validate.fail(\"Unexpected characters returned for \" + nameRef);\n                return multipointHolder;\n            }\n        }\n    }\n\n    Token.Tag createTagPending(boolean start) {\n        tagPending = (start) ? startPending.reset() : endPending.reset();\n        return tagPending;\n    }\n\n    void emitTagPending() {\n        tagPending.finaliseTag();\n        emit(tagPending);\n    }\n\n    void createCommentPending() {\n        commentPending.reset();\n    }\n\n    void emitCommentPending() {\n        emit(commentPending);\n    }\n\n    void createDoctypePending() {\n        doctypePending.reset();\n    }\n\n    void emitDoctypePending() {\n        emit(doctypePending);\n    }\n\n    void createTempBuffer() {\n        org.jsoup.parser.Token.reset(dataBuffer);\n    }\n\n    boolean isAppropriateEndTagToken() {\n        return (lastStartTag != null) && tagPending.name().equalsIgnoreCase(lastStartTag);\n    }\n\n    java.lang.String appropriateEndTagName() {\n        if (lastStartTag == null) {\n            return null;\n        }\n        return lastStartTag;\n    }\n\n    void error(org.jsoup.parser.TokeniserState state) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state));\n        }\n    }\n\n    void eofError(org.jsoup.parser.TokeniserState state) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));\n        }\n    }\n\n    private void characterReferenceError(java.lang.String message) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Invalid character reference: %s\", message));\n        }\n    }\n\n    void error(java.lang.String errorMsg) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), errorMsg));\n        }\n    }\n\n    boolean currentNodeInHtmlNS() {\n        return true;\n    }\n\n    java.lang.String unescapeEntities(boolean inAttribute) {\n        java.lang.StringBuilder builder = new java.lang.StringBuilder();\n        while (!reader.isEmpty()) {\n            builder.append(reader.consumeTo('&'));\n            if (reader.matches('&')) {\n                reader.consume();\n                int[] c = consumeCharacterReference(null, inAttribute);\n                if ((c == null) || (c.length == 0)) {\n                    builder.append('&');\n                } else {\n                    builder.appendCodePoint(c[0]);\n                    if (c.length == 2) {\n                        builder.appendCodePoint(c[1]);\n                    }\n                }\n            }\n        } \n        return builder.toString();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Package",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Class",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "void acknowledgeSelfClosingFlag() {\n    selfClosingFlagAcknowledged = true;\n}",
            "src_parent": "final class Tokeniser {\n    static final char replacementChar = '�';\n\n    private static final char[] notCharRefCharsSorted = new char[]{ '\\t', '\\n', '\\r', '\\f', ' ', '<', '&' };\n\n    static {\n        java.util.Arrays.sort(notCharRefCharsSorted);\n    }\n\n    private final org.jsoup.parser.CharacterReader reader;\n\n    private final org.jsoup.parser.ParseErrorList errors;\n\n    private org.jsoup.parser.TokeniserState state = TokeniserState.Data;\n\n    private org.jsoup.parser.Token emitPending;\n\n    private boolean isEmitPending = false;\n\n    private java.lang.String charsString = null;\n\n    private java.lang.StringBuilder charsBuilder = new java.lang.StringBuilder(1024);\n\n    java.lang.StringBuilder dataBuffer = new java.lang.StringBuilder(1024);\n\n    Token.Tag tagPending;\n\n    Token.StartTag startPending = new org.jsoup.parser.Token.StartTag();\n\n    Token.EndTag endPending = new org.jsoup.parser.Token.EndTag();\n\n    Token.Character charPending = new org.jsoup.parser.Token.Character();\n\n    Token.Doctype doctypePending = new org.jsoup.parser.Token.Doctype();\n\n    Token.Comment commentPending = new org.jsoup.parser.Token.Comment();\n\n    private java.lang.String lastStartTag;\n\n    private boolean selfClosingFlagAcknowledged = true;\n\n    Tokeniser(org.jsoup.parser.CharacterReader reader, org.jsoup.parser.ParseErrorList errors) {\n        this.reader = reader;\n        this.errors = errors;\n    }\n\n    org.jsoup.parser.Token read() {\n        if (!selfClosingFlagAcknowledged) {\n            error(\"Self closing flag not acknowledged\");\n            selfClosingFlagAcknowledged = true;\n        }\n        while (!isEmitPending) {\n            state.read(this, reader);\n        } \n        if (charsBuilder.length() > 0) {\n            java.lang.String str = charsBuilder.toString();\n            charsBuilder.delete(0, charsBuilder.length());\n            charsString = null;\n            return charPending.data(str);\n        } else if (charsString != null) {\n            org.jsoup.parser.Token token = charPending.data(charsString);\n            charsString = null;\n            return token;\n        } else {\n            isEmitPending = false;\n            return emitPending;\n        }\n    }\n\n    void emit(org.jsoup.parser.Token token) {\n        org.jsoup.helper.Validate.isFalse(isEmitPending, \"There is an unread token pending!\");\n        emitPending = token;\n        isEmitPending = true;\n        if (token.type == Token.TokenType.StartTag) {\n            org.jsoup.parser.Token.StartTag startTag = ((org.jsoup.parser.Token.StartTag) (token));\n            lastStartTag = startTag.tagName;\n            if (startTag.selfClosing) {\n                selfClosingFlagAcknowledged = false;\n            }\n        } else if (token.type == Token.TokenType.EndTag) {\n            org.jsoup.parser.Token.EndTag endTag = ((org.jsoup.parser.Token.EndTag) (token));\n            if (endTag.attributes != null) {\n                error(\"Attributes incorrectly present on end tag\");\n            }\n        }\n    }\n\n    void emit(final java.lang.String str) {\n        if (charsString == null) {\n            charsString = str;\n        } else {\n            if (charsBuilder.length() == 0) {\n                charsBuilder.append(charsString);\n            }\n            charsBuilder.append(str);\n        }\n    }\n\n    void emit(char[] chars) {\n        emit(java.lang.String.valueOf(chars));\n    }\n\n    void emit(int[] codepoints) {\n        emit(new java.lang.String(codepoints, 0, codepoints.length));\n    }\n\n    void emit(char c) {\n        emit(java.lang.String.valueOf(c));\n    }\n\n    org.jsoup.parser.TokeniserState getState() {\n        return state;\n    }\n\n    void transition(org.jsoup.parser.TokeniserState state) {\n        this.state = state;\n    }\n\n    void advanceTransition(org.jsoup.parser.TokeniserState state) {\n        reader.advance();\n        this.state = state;\n    }\n\n    void acknowledgeSelfClosingFlag() {\n        selfClosingFlagAcknowledged = true;\n    }\n\n    private final int[] codepointHolder = new int[1];\n\n    private final int[] multipointHolder = new int[2];\n\n    int[] consumeCharacterReference(java.lang.Character additionalAllowedCharacter, boolean inAttribute) {\n        if (reader.isEmpty()) {\n            return null;\n        }\n        if ((additionalAllowedCharacter != null) && (additionalAllowedCharacter == reader.current())) {\n            return null;\n        }\n        if (reader.matchesAnySorted(org.jsoup.parser.Tokeniser.notCharRefCharsSorted)) {\n            return null;\n        }\n        final int[] codeRef = codepointHolder;\n        reader.mark();\n        if (reader.matchConsume(\"#\")) {\n            boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");\n            java.lang.String numRef = (isHexMode) ? reader.consumeHexSequence() : reader.consumeDigitSequence();\n            if (numRef.length() == 0) {\n                characterReferenceError(\"numeric reference with no numerals\");\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError(\"missing semicolon\");\n            }\n            int charval = -1;\n            try {\n                int base = (isHexMode) ? 16 : 10;\n                charval = java.lang.Integer.valueOf(numRef, base);\n            } catch (java.lang.NumberFormatException ignored) {\n            }\n            if (((charval == (-1)) || ((charval >= 0xd800) && (charval <= 0xdfff))) || (charval > 0x10ffff)) {\n                characterReferenceError(\"character outside of valid range\");\n                codeRef[0] = org.jsoup.parser.Tokeniser.replacementChar;\n                return codeRef;\n            } else {\n                codeRef[0] = charval;\n                return codeRef;\n            }\n        } else {\n            java.lang.String nameRef = reader.consumeLetterThenDigitSequence();\n            boolean looksLegit = reader.matches(';');\n            boolean found = org.jsoup.nodes.Entities.isBaseNamedEntity(nameRef) || (org.jsoup.nodes.Entities.isNamedEntity(nameRef) && looksLegit);\n            if (!found) {\n                reader.rewindToMark();\n                if (looksLegit) {\n                    characterReferenceError(java.lang.String.format(\"invalid named referenece '%s'\", nameRef));\n                }\n                return null;\n            }\n            if (inAttribute && ((reader.matchesLetter() || reader.matchesDigit()) || reader.matchesAny('=', '-', '_'))) {\n                reader.rewindToMark();\n                return null;\n            }\n            if (!reader.matchConsume(\";\")) {\n                characterReferenceError(\"missing semicolon\");\n            }\n            int numChars = org.jsoup.nodes.Entities.codepointsForName(nameRef, multipointHolder);\n            if (numChars == 1) {\n                codeRef[0] = multipointHolder[0];\n                return codeRef;\n            } else if (numChars == 2) {\n                return multipointHolder;\n            } else {\n                org.jsoup.helper.Validate.fail(\"Unexpected characters returned for \" + nameRef);\n                return multipointHolder;\n            }\n        }\n    }\n\n    Token.Tag createTagPending(boolean start) {\n        tagPending = (start) ? startPending.reset() : endPending.reset();\n        return tagPending;\n    }\n\n    void emitTagPending() {\n        tagPending.finaliseTag();\n        emit(tagPending);\n    }\n\n    void createCommentPending() {\n        commentPending.reset();\n    }\n\n    void emitCommentPending() {\n        emit(commentPending);\n    }\n\n    void createDoctypePending() {\n        doctypePending.reset();\n    }\n\n    void emitDoctypePending() {\n        emit(doctypePending);\n    }\n\n    void createTempBuffer() {\n        org.jsoup.parser.Token.reset(dataBuffer);\n    }\n\n    boolean isAppropriateEndTagToken() {\n        return (lastStartTag != null) && tagPending.name().equalsIgnoreCase(lastStartTag);\n    }\n\n    java.lang.String appropriateEndTagName() {\n        if (lastStartTag == null) {\n            return null;\n        }\n        return lastStartTag;\n    }\n\n    void error(org.jsoup.parser.TokeniserState state) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state));\n        }\n    }\n\n    void eofError(org.jsoup.parser.TokeniserState state) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));\n        }\n    }\n\n    private void characterReferenceError(java.lang.String message) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), \"Invalid character reference: %s\", message));\n        }\n    }\n\n    void error(java.lang.String errorMsg) {\n        if (errors.canAddError()) {\n            errors.add(new org.jsoup.parser.ParseError(reader.pos(), errorMsg));\n        }\n    }\n\n    boolean currentNodeInHtmlNS() {\n        return true;\n    }\n\n    java.lang.String unescapeEntities(boolean inAttribute) {\n        java.lang.StringBuilder builder = new java.lang.StringBuilder();\n        while (!reader.isEmpty()) {\n            builder.append(reader.consumeTo('&'));\n            if (reader.matches('&')) {\n                reader.consume();\n                int[] c = consumeCharacterReference(null, inAttribute);\n                if ((c == null) || (c.length == 0)) {\n                    builder.append('&');\n                } else {\n                    builder.appendCodePoint(c[0]);\n                    if (c.length == 2) {\n                        builder.appendCodePoint(c[1]);\n                    }\n                }\n            }\n        } \n        return builder.toString();\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!selfClosingFlagAcknowledged) {\n    error(\"Self closing flag not acknowledged\");\n    selfClosingFlagAcknowledged = true;\n}",
            "src_parent": "{\n    if (!selfClosingFlagAcknowledged) {\n        error(\"Self closing flag not acknowledged\");\n        selfClosingFlagAcknowledged = true;\n    }\n    while (!isEmitPending) {\n        state.read(this, reader);\n    } \n    if (charsBuilder.length() > 0) {\n        java.lang.String str = charsBuilder.toString();\n        charsBuilder.delete(0, charsBuilder.length());\n        charsString = null;\n        return charPending.data(str);\n    } else if (charsString != null) {\n        org.jsoup.parser.Token token = charPending.data(charsString);\n        charsString = null;\n        return token;\n    } else {\n        isEmitPending = false;\n        return emitPending;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "Invocation",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (startTag.selfClosing) {\n    selfClosingFlagAcknowledged = false;\n}",
            "src_parent": "{\n    org.jsoup.parser.Token.StartTag startTag = ((org.jsoup.parser.Token.StartTag) (token));\n    lastStartTag = startTag.tagName;\n    if (startTag.selfClosing) {\n        selfClosingFlagAcknowledged = false;\n    }\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        }
      ],
      "file_name": "Tokeniser"
    }
  ],
  "id": "Jsoup_63"
}