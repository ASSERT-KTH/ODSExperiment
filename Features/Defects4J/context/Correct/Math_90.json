{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "@java.lang.Deprecated\npublic void addValue(java.lang.Object v) {\n    addValue(((java.lang.Comparable<?>) (v)));\n}",
            "src_parent": "public class Frequency implements java.io.Serializable {\n    private static final long serialVersionUID = -3845586908418844111L;\n\n    private final java.util.TreeMap freqTable;\n\n    public Frequency() {\n        freqTable = new java.util.TreeMap();\n    }\n\n    public Frequency(java.util.Comparator comparator) {\n        freqTable = new java.util.TreeMap(comparator);\n    }\n\n    @java.lang.Override\n    public java.lang.String toString() {\n        java.text.NumberFormat nf = java.text.NumberFormat.getPercentInstance();\n        java.lang.StringBuffer outBuffer = new java.lang.StringBuffer();\n        outBuffer.append(\"Value \\t Freq. \\t Pct. \\t Cum Pct. \\n\");\n        java.util.Iterator iter = freqTable.keySet().iterator();\n        while (iter.hasNext()) {\n            java.lang.Object value = iter.next();\n            outBuffer.append(value);\n            outBuffer.append('\\t');\n            outBuffer.append(getCount(value));\n            outBuffer.append('\\t');\n            outBuffer.append(nf.format(getPct(value)));\n            outBuffer.append('\\t');\n            outBuffer.append(nf.format(getCumPct(value)));\n            outBuffer.append('\\n');\n        } \n        return outBuffer.toString();\n    }\n\n    @java.lang.Deprecated\n    public void addValue(java.lang.Object v) {\n        addValue(((java.lang.Comparable<?>) (v)));\n    }\n\n    public void addValue(java.lang.Comparable<?> v) {\n        java.lang.Object obj = v;\n        if (v instanceof java.lang.Integer) {\n            obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());\n        }\n        try {\n            java.lang.Long count = ((java.lang.Long) (freqTable.get(obj)));\n            if (count == null) {\n                freqTable.put(obj, java.lang.Long.valueOf(1));\n            } else {\n                freqTable.put(obj, java.lang.Long.valueOf(count.longValue() + 1));\n            }\n        } catch (java.lang.ClassCastException ex) {\n            throw new java.lang.IllegalArgumentException(\"Value not comparable to existing values.\");\n        }\n    }\n\n    public void addValue(int v) {\n        addValue(java.lang.Long.valueOf(v));\n    }\n\n    public void addValue(java.lang.Integer v) {\n        addValue(java.lang.Long.valueOf(v.longValue()));\n    }\n\n    public void addValue(long v) {\n        addValue(java.lang.Long.valueOf(v));\n    }\n\n    public void addValue(char v) {\n        addValue(java.lang.Character.valueOf(v));\n    }\n\n    public void clear() {\n        freqTable.clear();\n    }\n\n    public java.util.Iterator valuesIterator() {\n        return freqTable.keySet().iterator();\n    }\n\n    public long getSumFreq() {\n        long result = 0;\n        java.util.Iterator iterator = freqTable.values().iterator();\n        while (iterator.hasNext()) {\n            result += ((java.lang.Long) (iterator.next())).longValue();\n        } \n        return result;\n    }\n\n    public long getCount(java.lang.Object v) {\n        if (v instanceof java.lang.Integer) {\n            return getCount(((java.lang.Integer) (v)).longValue());\n        }\n        long result = 0;\n        try {\n            java.lang.Long count = ((java.lang.Long) (freqTable.get(v)));\n            if (count != null) {\n                result = count.longValue();\n            }\n        } catch (java.lang.ClassCastException ex) {\n        }\n        return result;\n    }\n\n    public long getCount(int v) {\n        return getCount(java.lang.Long.valueOf(v));\n    }\n\n    public long getCount(long v) {\n        return getCount(java.lang.Long.valueOf(v));\n    }\n\n    public long getCount(char v) {\n        return getCount(java.lang.Character.valueOf(v));\n    }\n\n    public double getPct(java.lang.Object v) {\n        final long sumFreq = getSumFreq();\n        if (sumFreq == 0) {\n            return java.lang.Double.NaN;\n        }\n        return ((double) (getCount(v))) / ((double) (sumFreq));\n    }\n\n    public double getPct(int v) {\n        return getPct(java.lang.Long.valueOf(v));\n    }\n\n    public double getPct(long v) {\n        return getPct(java.lang.Long.valueOf(v));\n    }\n\n    public double getPct(char v) {\n        return getPct(java.lang.Character.valueOf(v));\n    }\n\n    public long getCumFreq(java.lang.Object v) {\n        if (getSumFreq() == 0) {\n            return 0;\n        }\n        if (v instanceof java.lang.Integer) {\n            return getCumFreq(((java.lang.Integer) (v)).longValue());\n        }\n        java.util.Comparator c = freqTable.comparator();\n        if (c == null) {\n            c = new org.apache.commons.math.stat.Frequency.NaturalComparator();\n        }\n        long result = 0;\n        try {\n            java.lang.Long value = ((java.lang.Long) (freqTable.get(v)));\n            if (value != null) {\n                result = value.longValue();\n            }\n        } catch (java.lang.ClassCastException ex) {\n            return result;\n        }\n        if (c.compare(v, freqTable.firstKey()) < 0) {\n            return 0;\n        }\n        if (c.compare(v, freqTable.lastKey()) >= 0) {\n            return getSumFreq();\n        }\n        java.util.Iterator values = valuesIterator();\n        while (values.hasNext()) {\n            java.lang.Object nextValue = values.next();\n            if (c.compare(v, nextValue) > 0) {\n                result += getCount(nextValue);\n            } else {\n                return result;\n            }\n        } \n        return result;\n    }\n\n    public long getCumFreq(int v) {\n        return getCumFreq(java.lang.Long.valueOf(v));\n    }\n\n    public long getCumFreq(long v) {\n        return getCumFreq(java.lang.Long.valueOf(v));\n    }\n\n    public long getCumFreq(char v) {\n        return getCumFreq(java.lang.Character.valueOf(v));\n    }\n\n    public double getCumPct(java.lang.Object v) {\n        final long sumFreq = getSumFreq();\n        if (sumFreq == 0) {\n            return java.lang.Double.NaN;\n        }\n        return ((double) (getCumFreq(v))) / ((double) (sumFreq));\n    }\n\n    public double getCumPct(int v) {\n        return getCumPct(java.lang.Long.valueOf(v));\n    }\n\n    public double getCumPct(long v) {\n        return getCumPct(java.lang.Long.valueOf(v));\n    }\n\n    public double getCumPct(char v) {\n        return getCumPct(java.lang.Character.valueOf(v));\n    }\n\n    private static class NaturalComparator implements java.io.Serializable , java.util.Comparator {\n        private static final long serialVersionUID = -3852193713161395148L;\n\n        public int compare(java.lang.Object o1, java.lang.Object o2) {\n            return ((java.lang.Comparable) (o1)).compareTo(o2);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "java.lang.Comparable<?> v",
            "src_parent": "public void addValue(java.lang.Comparable<?> v) {\n    java.lang.Object obj = v;\n    if (v instanceof java.lang.Integer) {\n        obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());\n    }\n    try {\n        java.lang.Long count = ((java.lang.Long) (freqTable.get(obj)));\n        if (count == null) {\n            freqTable.put(obj, java.lang.Long.valueOf(1));\n        } else {\n            freqTable.put(obj, java.lang.Long.valueOf(count.longValue() + 1));\n        }\n    } catch (java.lang.ClassCastException ex) {\n        throw new java.lang.IllegalArgumentException(\"Value not comparable to existing values.\");\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "@java.lang.Deprecated",
            "src_parent": "@java.lang.Deprecated\npublic void addValue(java.lang.Object v) {\n    java.lang.Object obj = v;\n    if (v instanceof java.lang.Integer) {\n        obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());\n    }\n    try {\n        java.lang.Long count = ((java.lang.Long) (freqTable.get(obj)));\n        if (count == null) {\n            freqTable.put(obj, java.lang.Long.valueOf(1));\n        } else {\n            freqTable.put(obj, java.lang.Long.valueOf(count.longValue() + 1));\n        }\n    } catch (java.lang.ClassCastException ex) {\n        throw new java.lang.IllegalArgumentException(\"Value not comparable to existing values.\");\n    }\n}",
            "src_parent_type": "Method",
            "src_type": "Annotation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Parameter",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "java.lang.Object v",
            "dst_parent": "@java.lang.Deprecated\npublic void addValue(java.lang.Object v) {\n    java.lang.Object obj = v;\n    if (v instanceof java.lang.Integer) {\n        obj = java.lang.Long.valueOf(((java.lang.Integer) (v)).longValue());\n    }\n    try {\n        java.lang.Long count = ((java.lang.Long) (freqTable.get(obj)));\n        if (count == null) {\n            freqTable.put(obj, java.lang.Long.valueOf(1));\n        } else {\n            freqTable.put(obj, java.lang.Long.valueOf(count.longValue() + 1));\n        }\n    } catch (java.lang.ClassCastException ex) {\n        throw new java.lang.IllegalArgumentException(\"Value not comparable to existing values.\");\n    }\n}",
            "dst_parent_type": "Method",
            "dst_type": "Parameter",
            "operator": "MOV",
            "src": "java.lang.Object v",
            "src_parent": "@java.lang.Deprecated\npublic void addValue(java.lang.Object v) {\n    addValue(((java.lang.Comparable<?>) (v)));\n}",
            "src_parent_type": "Method",
            "src_type": "Parameter"
          }
        }
      ],
      "file_name": "Frequency"
    }
  ],
  "id": "Math_90"
}