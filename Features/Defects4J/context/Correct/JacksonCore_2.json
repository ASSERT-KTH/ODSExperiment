{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (_parsingContext.inRoot()) {\n    _verifyRootSpace(c);\n}",
            "src_parent": "{\n    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n    int outPtr = 0;\n    boolean negative = c == com.fasterxml.jackson.core.base.ParserBase.INT_MINUS;\n    if (negative) {\n        outBuf[outPtr++] = '-';\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n            return _handleInvalidNumberStart(c, true);\n        }\n    }\n    if (c == com.fasterxml.jackson.core.base.ParserBase.INT_0) {\n        c = _verifyNoLeadingZeroes();\n    }\n    outBuf[outPtr++] = ((char) (c));\n    int intLen = 1;\n    int end = _inputPtr + outBuf.length;\n    if (end > _inputEnd) {\n        end = _inputEnd;\n    }\n    while (true) {\n        if (_inputPtr >= end) {\n            return _parserNumber2(outBuf, outPtr, negative, intLen);\n        }\n        c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n            break;\n        }\n        ++intLen;\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = ((char) (c));\n    } \n    if (((c == '.') || (c == 'e')) || (c == 'E')) {\n        return _parseFloat(outBuf, outPtr, c, negative, intLen);\n    }\n    --_inputPtr;\n    _textBuffer.setCurrentLength(outPtr);\n    if (_parsingContext.inRoot()) {\n        _verifyRootSpace(c);\n    }\n    return resetInt(negative, intLen);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "While",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (_parsingContext.inRoot()) {\n    _verifyRootSpace(_inputBuffer[_inputPtr++] & 0xff);\n}",
            "src_parent": "{\n    while (true) {\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            _textBuffer.setCurrentLength(outPtr);\n            return resetInt(negative, intPartLength);\n        }\n        int c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        if ((c > com.fasterxml.jackson.core.base.ParserBase.INT_9) || (c < com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n            if (((c == '.') || (c == 'e')) || (c == 'E')) {\n                return _parseFloat(outBuf, outPtr, c, negative, intPartLength);\n            }\n            break;\n        }\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = ((char) (c));\n        ++intPartLength;\n    } \n    --_inputPtr;\n    _textBuffer.setCurrentLength(outPtr);\n    if (_parsingContext.inRoot()) {\n        _verifyRootSpace(_inputBuffer[_inputPtr++] & 0xff);\n    }\n    return resetInt(negative, intPartLength);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "_verifyRootSpace(c)",
            "src_parent": "{\n    _verifyRootSpace(c);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!eof) {\n    --_inputPtr;\n    if (_parsingContext.inRoot()) {\n        _verifyRootSpace(c);\n    }\n}",
            "src_parent": "{\n    int fractLen = 0;\n    boolean eof = false;\n    if (c == '.') {\n        outBuf[outPtr++] = ((char) (c));\n        fract_loop : while (true) {\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break fract_loop;\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                break fract_loop;\n            }\n            ++fractLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n        } \n        if (fractLen == 0) {\n            reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n        }\n    }\n    int expLen = 0;\n    if ((c == 'e') || (c == 'E')) {\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = ((char) (c));\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        if ((c == '-') || (c == '+')) {\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        }\n        exp_loop : while ((c <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (c >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n            ++expLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break exp_loop;\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        } \n        if (expLen == 0) {\n            reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n        }\n    }\n    if (!eof) {\n        --_inputPtr;\n        if (_parsingContext.inRoot()) {\n            _verifyRootSpace(c);\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return resetFloat(negative, integerPartLength, fractLen, expLen);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private final void _verifyRootSpace(int ch) throws java.io.IOException {\n    ++_inputPtr;\n    switch (ch) {\n        case ' ' :\n        case '\\t' :\n            return;\n        case '\\r' :\n            _skipCR();\n            return;\n        case '\\n' :\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n    }\n    _reportMissingRootWS(ch);\n}",
            "src_parent": "public final class UTF8StreamJsonParser extends com.fasterxml.jackson.core.base.ParserBase {\n    static final byte BYTE_LF = ((byte) ('\\n'));\n\n    private static final int[] _icUTF8 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8();\n\n    protected static final int[] _icLatin1 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1();\n\n    private static final int[] _icWS = com.fasterxml.jackson.core.io.CharTypes.getInputCodeWS();\n\n    protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;\n\n    protected final com.fasterxml.jackson.core.json.BytesToNameCanonicalizer _symbols;\n\n    protected int[] _quadBuffer = new int[16];\n\n    protected boolean _tokenIncomplete = false;\n\n    private int _quad1;\n\n    protected java.io.InputStream _inputStream;\n\n    protected byte[] _inputBuffer;\n\n    protected boolean _bufferRecyclable;\n\n    public UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext ctxt, int features, java.io.InputStream in, com.fasterxml.jackson.core.ObjectCodec codec, com.fasterxml.jackson.core.json.BytesToNameCanonicalizer sym, byte[] inputBuffer, int start, int end, boolean bufferRecyclable) {\n        super(ctxt, features);\n        _inputStream = in;\n        _objectCodec = codec;\n        _symbols = sym;\n        _inputBuffer = inputBuffer;\n        _inputPtr = start;\n        _inputEnd = end;\n        _bufferRecyclable = bufferRecyclable;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.ObjectCodec getCodec() {\n        return _objectCodec;\n    }\n\n    @java.lang.Override\n    public void setCodec(com.fasterxml.jackson.core.ObjectCodec c) {\n        _objectCodec = c;\n    }\n\n    @java.lang.Override\n    public int releaseBuffered(java.io.OutputStream out) throws java.io.IOException {\n        int count = _inputEnd - _inputPtr;\n        if (count < 1) {\n            return 0;\n        }\n        int origPtr = _inputPtr;\n        out.write(_inputBuffer, origPtr, count);\n        return count;\n    }\n\n    @java.lang.Override\n    public java.lang.Object getInputSource() {\n        return _inputStream;\n    }\n\n    @java.lang.Override\n    protected boolean loadMore() throws java.io.IOException {\n        _currInputProcessed += _inputEnd;\n        _currInputRowStart -= _inputEnd;\n        if (_inputStream != null) {\n            int count = _inputStream.read(_inputBuffer, 0, _inputBuffer.length);\n            if (count > 0) {\n                _inputPtr = 0;\n                _inputEnd = count;\n                return true;\n            }\n            _closeInput();\n            if (count == 0) {\n                throw new java.io.IOException((\"InputStream.read() returned 0 characters when trying to read \" + _inputBuffer.length) + \" bytes\");\n            }\n        }\n        return false;\n    }\n\n    protected boolean _loadToHaveAtLeast(int minAvailable) throws java.io.IOException {\n        if (_inputStream == null) {\n            return false;\n        }\n        int amount = _inputEnd - _inputPtr;\n        if ((amount > 0) && (_inputPtr > 0)) {\n            _currInputProcessed += _inputPtr;\n            _currInputRowStart -= _inputPtr;\n            java.lang.System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);\n            _inputEnd = amount;\n        } else {\n            _inputEnd = 0;\n        }\n        _inputPtr = 0;\n        while (_inputEnd < minAvailable) {\n            int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);\n            if (count < 1) {\n                _closeInput();\n                if (count == 0) {\n                    throw new java.io.IOException((\"InputStream.read() returned 0 characters when trying to read \" + amount) + \" bytes\");\n                }\n                return false;\n            }\n            _inputEnd += count;\n        } \n        return true;\n    }\n\n    @java.lang.Override\n    protected void _closeInput() throws java.io.IOException {\n        if (_inputStream != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE)) {\n                _inputStream.close();\n            }\n            _inputStream = null;\n        }\n    }\n\n    @java.lang.Override\n    protected void _releaseBuffers() throws java.io.IOException {\n        super._releaseBuffers();\n        if (_bufferRecyclable) {\n            byte[] buf = _inputBuffer;\n            if (buf != null) {\n                _inputBuffer = null;\n                _ioContext.releaseReadIOBuffer(buf);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String getText() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString();\n            }\n            return _textBuffer.contentsAsString();\n        }\n        return _getText2(_currToken);\n    }\n\n    @java.lang.Override\n    public java.lang.String getValueAsString() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString();\n            }\n            return _textBuffer.contentsAsString();\n        }\n        return super.getValueAsString(null);\n    }\n\n    @java.lang.Override\n    public java.lang.String getValueAsString(java.lang.String defValue) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString();\n            }\n            return _textBuffer.contentsAsString();\n        }\n        return super.getValueAsString(defValue);\n    }\n\n    protected java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken t) {\n        if (t == null) {\n            return null;\n        }\n        switch (t) {\n            case FIELD_NAME :\n                return _parsingContext.getCurrentName();\n            case VALUE_STRING :\n            case VALUE_NUMBER_INT :\n            case VALUE_NUMBER_FLOAT :\n                return _textBuffer.contentsAsString();\n            default :\n                return t.asString();\n        }\n    }\n\n    @java.lang.Override\n    public char[] getTextCharacters() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken != null) {\n            switch (_currToken) {\n                case FIELD_NAME :\n                    if (!_nameCopied) {\n                        java.lang.String name = _parsingContext.getCurrentName();\n                        int nameLen = name.length();\n                        if (_nameCopyBuffer == null) {\n                            _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                        } else if (_nameCopyBuffer.length < nameLen) {\n                            _nameCopyBuffer = new char[nameLen];\n                        }\n                        name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                        _nameCopied = true;\n                    }\n                    return _nameCopyBuffer;\n                case VALUE_STRING :\n                    if (_tokenIncomplete) {\n                        _tokenIncomplete = false;\n                        _finishString();\n                    }\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    return _textBuffer.getTextBuffer();\n                default :\n                    return _currToken.asCharArray();\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public int getTextLength() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken != null) {\n            switch (_currToken) {\n                case FIELD_NAME :\n                    return _parsingContext.getCurrentName().length();\n                case VALUE_STRING :\n                    if (_tokenIncomplete) {\n                        _tokenIncomplete = false;\n                        _finishString();\n                    }\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    return _textBuffer.size();\n                default :\n                    return _currToken.asCharArray().length;\n            }\n        }\n        return 0;\n    }\n\n    @java.lang.Override\n    public int getTextOffset() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken != null) {\n            switch (_currToken) {\n                case FIELD_NAME :\n                    return 0;\n                case VALUE_STRING :\n                    if (_tokenIncomplete) {\n                        _tokenIncomplete = false;\n                        _finishString();\n                    }\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    return _textBuffer.getTextOffset();\n                default :\n            }\n        }\n        return 0;\n    }\n\n    @java.lang.Override\n    public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if ((_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_STRING) && ((_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT) || (_binaryValue == null))) {\n            _reportError((\"Current token (\" + _currToken) + \") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");\n        }\n        if (_tokenIncomplete) {\n            try {\n                _binaryValue = _decodeBase64(b64variant);\n            } catch (java.lang.IllegalArgumentException iae) {\n                throw _constructError(((\"Failed to decode VALUE_STRING as base64 (\" + b64variant) + \"): \") + iae.getMessage());\n            }\n            _tokenIncomplete = false;\n        } else if (_binaryValue == null) {\n            @java.lang.SuppressWarnings(\"resource\")\n            com.fasterxml.jackson.core.util.ByteArrayBuilder builder = _getByteArrayBuilder();\n            _decodeBase64(getText(), builder, b64variant);\n            _binaryValue = builder.toByteArray();\n        }\n        return _binaryValue;\n    }\n\n    @java.lang.Override\n    public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.OutputStream out) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if ((!_tokenIncomplete) || (_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_STRING)) {\n            byte[] b = getBinaryValue(b64variant);\n            out.write(b);\n            return b.length;\n        }\n        byte[] buf = _ioContext.allocBase64Buffer();\n        try {\n            return _readBinary(b64variant, out, buf);\n        } finally {\n            _ioContext.releaseBase64Buffer(buf);\n        }\n    }\n\n    protected int _readBinary(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.OutputStream out, byte[] buffer) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        int outputPtr = 0;\n        final int outputEnd = buffer.length - 3;\n        int outputCount = 0;\n        while (true) {\n            int ch;\n            do {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                ch = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            } while (ch <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE );\n            int bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (ch == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    break;\n                }\n                bits = _decodeBase64Escape(b64variant, ch, 0);\n                if (bits < 0) {\n                    continue;\n                }\n            }\n            if (outputPtr > outputEnd) {\n                outputCount += outputPtr;\n                out.write(buffer, 0, outputPtr);\n                outputPtr = 0;\n            }\n            int decodedData = bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                bits = _decodeBase64Escape(b64variant, ch, 1);\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 4;\n                        buffer[outputPtr++] = ((byte) (decodedData));\n                        break;\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 2);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if (_inputPtr >= _inputEnd) {\n                        loadMoreGuaranteed();\n                    }\n                    ch = _inputBuffer[_inputPtr++] & 0xff;\n                    if (!b64variant.usesPaddingChar(ch)) {\n                        throw reportInvalidBase64Char(b64variant, ch, 3, (\"expected padding character '\" + b64variant.getPaddingChar()) + \"'\");\n                    }\n                    decodedData >>= 4;\n                    buffer[outputPtr++] = ((byte) (decodedData));\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 2;\n                        buffer[outputPtr++] = ((byte) (decodedData >> 8));\n                        buffer[outputPtr++] = ((byte) (decodedData));\n                        break;\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 3);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    decodedData >>= 2;\n                    buffer[outputPtr++] = ((byte) (decodedData >> 8));\n                    buffer[outputPtr++] = ((byte) (decodedData));\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            buffer[outputPtr++] = ((byte) (decodedData >> 16));\n            buffer[outputPtr++] = ((byte) (decodedData >> 8));\n            buffer[outputPtr++] = ((byte) (decodedData));\n        } \n        _tokenIncomplete = false;\n        if (outputPtr > 0) {\n            outputCount += outputPtr;\n            out.write(buffer, 0, outputPtr);\n        }\n        return outputCount;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonToken nextToken() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        _numTypesValid = com.fasterxml.jackson.core.base.ParserBase.NR_UNKNOWN;\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            return _nextAfterName();\n        }\n        if (_tokenIncomplete) {\n            _skipString();\n        }\n        int i = _skipWSOrEnd();\n        if (i < 0) {\n            close();\n            return _currToken = null;\n        }\n        _tokenInputTotal = (_currInputProcessed + _inputPtr) - 1;\n        _tokenInputRow = _currInputRow;\n        _tokenInputCol = (_inputPtr - _currInputRowStart) - 1;\n        _binaryValue = null;\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RBRACKET) {\n            if (!_parsingContext.inArray()) {\n                _reportMismatchedEndMarker(i, '}');\n            }\n            _parsingContext = _parsingContext.getParent();\n            return _currToken = com.fasterxml.jackson.core.JsonToken.END_ARRAY;\n        }\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RCURLY) {\n            if (!_parsingContext.inObject()) {\n                _reportMismatchedEndMarker(i, ']');\n            }\n            _parsingContext = _parsingContext.getParent();\n            return _currToken = com.fasterxml.jackson.core.JsonToken.END_OBJECT;\n        }\n        if (_parsingContext.expectComma()) {\n            if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COMMA) {\n                _reportUnexpectedChar(i, (\"was expecting comma to separate \" + _parsingContext.getTypeDesc()) + \" entries\");\n            }\n            i = _skipWS();\n        }\n        if (!_parsingContext.inObject()) {\n            return _nextTokenNotInObject(i);\n        }\n        com.fasterxml.jackson.core.sym.Name n = _parseFieldName(i);\n        _parsingContext.setCurrentName(n.getName());\n        _currToken = com.fasterxml.jackson.core.JsonToken.FIELD_NAME;\n        if ((_inputPtr < _inputEnd) && (_inputBuffer[_inputPtr] == ':')) {\n            ++_inputPtr;\n        } else {\n            i = _skipWS();\n            if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON) {\n                _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n            }\n        }\n        i = _skipWS();\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            _tokenIncomplete = true;\n            _nextToken = com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n            return _currToken;\n        }\n        com.fasterxml.jackson.core.JsonToken t;\n        switch (i) {\n            case '[' :\n                t = com.fasterxml.jackson.core.JsonToken.START_ARRAY;\n                break;\n            case '{' :\n                t = com.fasterxml.jackson.core.JsonToken.START_OBJECT;\n                break;\n            case ']' :\n            case '}' :\n                _reportUnexpectedChar(i, \"expected a value\");\n            case 't' :\n                _matchToken(\"true\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_TRUE;\n                break;\n            case 'f' :\n                _matchToken(\"false\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_FALSE;\n                break;\n            case 'n' :\n                _matchToken(\"null\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_NULL;\n                break;\n            case '-' :\n            case '0' :\n            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :\n                t = _parseNumber(i);\n                break;\n            default :\n                t = _handleUnexpectedValue(i);\n        }\n        _nextToken = t;\n        return _currToken;\n    }\n\n    private com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int i) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            _tokenIncomplete = true;\n            return _currToken = com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n        }\n        switch (i) {\n            case '[' :\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n                return _currToken = com.fasterxml.jackson.core.JsonToken.START_ARRAY;\n            case '{' :\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n                return _currToken = com.fasterxml.jackson.core.JsonToken.START_OBJECT;\n            case ']' :\n            case '}' :\n                _reportUnexpectedChar(i, \"expected a value\");\n            case 't' :\n                _matchToken(\"true\", 1);\n                return _currToken = com.fasterxml.jackson.core.JsonToken.VALUE_TRUE;\n            case 'f' :\n                _matchToken(\"false\", 1);\n                return _currToken = com.fasterxml.jackson.core.JsonToken.VALUE_FALSE;\n            case 'n' :\n                _matchToken(\"null\", 1);\n                return _currToken = com.fasterxml.jackson.core.JsonToken.VALUE_NULL;\n            case '-' :\n            case '0' :\n            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :\n                return _currToken = _parseNumber(i);\n        }\n        return _currToken = _handleUnexpectedValue(i);\n    }\n\n    private com.fasterxml.jackson.core.JsonToken _nextAfterName() {\n        _nameCopied = false;\n        com.fasterxml.jackson.core.JsonToken t = _nextToken;\n        _nextToken = null;\n        if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n        } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n        }\n        return _currToken = t;\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        super.close();\n        _symbols.release();\n    }\n\n    @java.lang.Override\n    public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString str) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        _numTypesValid = com.fasterxml.jackson.core.base.ParserBase.NR_UNKNOWN;\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nextAfterName();\n            return false;\n        }\n        if (_tokenIncomplete) {\n            _skipString();\n        }\n        int i = _skipWSOrEnd();\n        if (i < 0) {\n            close();\n            _currToken = null;\n            return false;\n        }\n        _tokenInputTotal = (_currInputProcessed + _inputPtr) - 1;\n        _tokenInputRow = _currInputRow;\n        _tokenInputCol = (_inputPtr - _currInputRowStart) - 1;\n        _binaryValue = null;\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RBRACKET) {\n            if (!_parsingContext.inArray()) {\n                _reportMismatchedEndMarker(i, '}');\n            }\n            _parsingContext = _parsingContext.getParent();\n            _currToken = com.fasterxml.jackson.core.JsonToken.END_ARRAY;\n            return false;\n        }\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RCURLY) {\n            if (!_parsingContext.inObject()) {\n                _reportMismatchedEndMarker(i, ']');\n            }\n            _parsingContext = _parsingContext.getParent();\n            _currToken = com.fasterxml.jackson.core.JsonToken.END_OBJECT;\n            return false;\n        }\n        if (_parsingContext.expectComma()) {\n            if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COMMA) {\n                _reportUnexpectedChar(i, (\"was expecting comma to separate \" + _parsingContext.getTypeDesc()) + \" entries\");\n            }\n            i = _skipWS();\n        }\n        if (!_parsingContext.inObject()) {\n            _nextTokenNotInObject(i);\n            return false;\n        }\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            byte[] nameBytes = str.asQuotedUTF8();\n            final int len = nameBytes.length;\n            if ((_inputPtr + len) < _inputEnd) {\n                final int end = _inputPtr + len;\n                if (_inputBuffer[end] == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    int offset = 0;\n                    final int ptr = _inputPtr;\n                    while (true) {\n                        if (offset == len) {\n                            _inputPtr = end + 1;\n                            _parsingContext.setCurrentName(str.getValue());\n                            _currToken = com.fasterxml.jackson.core.JsonToken.FIELD_NAME;\n                            _isNextTokenNameYes();\n                            return true;\n                        }\n                        if (nameBytes[offset] != _inputBuffer[ptr + offset]) {\n                            break;\n                        }\n                        ++offset;\n                    } \n                }\n            }\n        }\n        return _isNextTokenNameMaybe(i, str);\n    }\n\n    private void _isNextTokenNameYes() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        int i;\n        if ((_inputPtr < (_inputEnd - 1)) && (_inputBuffer[_inputPtr] == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON)) {\n            i = _inputBuffer[++_inputPtr];\n            ++_inputPtr;\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                _tokenIncomplete = true;\n                _nextToken = com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n                return;\n            }\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LCURLY) {\n                _nextToken = com.fasterxml.jackson.core.JsonToken.START_OBJECT;\n                return;\n            }\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LBRACKET) {\n                _nextToken = com.fasterxml.jackson.core.JsonToken.START_ARRAY;\n                return;\n            }\n            i &= 0xff;\n            if ((i <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) || (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SLASH)) {\n                --_inputPtr;\n                i = _skipWS();\n            }\n        } else {\n            i = _skipColon();\n        }\n        switch (i) {\n            case '\"' :\n                _tokenIncomplete = true;\n                _nextToken = com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n                return;\n            case '[' :\n                _nextToken = com.fasterxml.jackson.core.JsonToken.START_ARRAY;\n                return;\n            case '{' :\n                _nextToken = com.fasterxml.jackson.core.JsonToken.START_OBJECT;\n                return;\n            case ']' :\n            case '}' :\n                _reportUnexpectedChar(i, \"expected a value\");\n            case 't' :\n                _matchToken(\"true\", 1);\n                _nextToken = com.fasterxml.jackson.core.JsonToken.VALUE_TRUE;\n                return;\n            case 'f' :\n                _matchToken(\"false\", 1);\n                _nextToken = com.fasterxml.jackson.core.JsonToken.VALUE_FALSE;\n                return;\n            case 'n' :\n                _matchToken(\"null\", 1);\n                _nextToken = com.fasterxml.jackson.core.JsonToken.VALUE_NULL;\n                return;\n            case '-' :\n            case '0' :\n            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :\n                _nextToken = _parseNumber(i);\n                return;\n        }\n        _nextToken = _handleUnexpectedValue(i);\n    }\n\n    private boolean _isNextTokenNameMaybe(int i, com.fasterxml.jackson.core.SerializableString str) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        com.fasterxml.jackson.core.sym.Name n = _parseFieldName(i);\n        final boolean match;\n        {\n            java.lang.String nameStr = n.getName();\n            _parsingContext.setCurrentName(nameStr);\n            match = nameStr.equals(str.getValue());\n        }\n        _currToken = com.fasterxml.jackson.core.JsonToken.FIELD_NAME;\n        i = _skipWS();\n        if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON) {\n            _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n        }\n        i = _skipWS();\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            _tokenIncomplete = true;\n            _nextToken = com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n            return match;\n        }\n        com.fasterxml.jackson.core.JsonToken t;\n        switch (i) {\n            case '[' :\n                t = com.fasterxml.jackson.core.JsonToken.START_ARRAY;\n                break;\n            case '{' :\n                t = com.fasterxml.jackson.core.JsonToken.START_OBJECT;\n                break;\n            case ']' :\n            case '}' :\n                _reportUnexpectedChar(i, \"expected a value\");\n            case 't' :\n                _matchToken(\"true\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_TRUE;\n                break;\n            case 'f' :\n                _matchToken(\"false\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_FALSE;\n                break;\n            case 'n' :\n                _matchToken(\"null\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_NULL;\n                break;\n            case '-' :\n            case '0' :\n            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :\n                t = _parseNumber(i);\n                break;\n            default :\n                t = _handleUnexpectedValue(i);\n        }\n        _nextToken = t;\n        return match;\n    }\n\n    @java.lang.Override\n    public java.lang.String nextTextValue() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString();\n                }\n                return _textBuffer.contentsAsString();\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return null;\n        }\n        return nextToken() == com.fasterxml.jackson.core.JsonToken.VALUE_STRING ? getText() : null;\n    }\n\n    @java.lang.Override\n    public int nextIntValue(int defaultValue) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT) {\n                return getIntValue();\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return defaultValue;\n        }\n        return nextToken() == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT ? getIntValue() : defaultValue;\n    }\n\n    @java.lang.Override\n    public long nextLongValue(long defaultValue) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT) {\n                return getLongValue();\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return defaultValue;\n        }\n        return nextToken() == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT ? getLongValue() : defaultValue;\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean nextBooleanValue() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_TRUE) {\n                return java.lang.Boolean.TRUE;\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_FALSE) {\n                return java.lang.Boolean.FALSE;\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return null;\n        }\n        switch (nextToken()) {\n            case VALUE_TRUE :\n                return java.lang.Boolean.TRUE;\n            case VALUE_FALSE :\n                return java.lang.Boolean.FALSE;\n            default :\n                return null;\n        }\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _parseNumber(int c) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n        int outPtr = 0;\n        boolean negative = c == com.fasterxml.jackson.core.base.ParserBase.INT_MINUS;\n        if (negative) {\n            outBuf[outPtr++] = '-';\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                return _handleInvalidNumberStart(c, true);\n            }\n        }\n        if (c == com.fasterxml.jackson.core.base.ParserBase.INT_0) {\n            c = _verifyNoLeadingZeroes();\n        }\n        outBuf[outPtr++] = ((char) (c));\n        int intLen = 1;\n        int end = _inputPtr + outBuf.length;\n        if (end > _inputEnd) {\n            end = _inputEnd;\n        }\n        while (true) {\n            if (_inputPtr >= end) {\n                return _parserNumber2(outBuf, outPtr, negative, intLen);\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                break;\n            }\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n        } \n        if (((c == '.') || (c == 'e')) || (c == 'E')) {\n            return _parseFloat(outBuf, outPtr, c, negative, intLen);\n        }\n        --_inputPtr;\n        _textBuffer.setCurrentLength(outPtr);\n        if (_parsingContext.inRoot()) {\n            _verifyRootSpace(c);\n        }\n        return resetInt(negative, intLen);\n    }\n\n    private com.fasterxml.jackson.core.JsonToken _parserNumber2(char[] outBuf, int outPtr, boolean negative, int intPartLength) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        while (true) {\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                _textBuffer.setCurrentLength(outPtr);\n                return resetInt(negative, intPartLength);\n            }\n            int c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            if ((c > com.fasterxml.jackson.core.base.ParserBase.INT_9) || (c < com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n                if (((c == '.') || (c == 'e')) || (c == 'E')) {\n                    return _parseFloat(outBuf, outPtr, c, negative, intPartLength);\n                }\n                break;\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n            ++intPartLength;\n        } \n        --_inputPtr;\n        _textBuffer.setCurrentLength(outPtr);\n        if (_parsingContext.inRoot()) {\n            _verifyRootSpace(_inputBuffer[_inputPtr++] & 0xff);\n        }\n        return resetInt(negative, intPartLength);\n    }\n\n    private int _verifyNoLeadingZeroes() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            return com.fasterxml.jackson.core.base.ParserBase.INT_0;\n        }\n        int ch = _inputBuffer[_inputPtr] & 0xff;\n        if ((ch < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (ch > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n            return com.fasterxml.jackson.core.base.ParserBase.INT_0;\n        }\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\n            reportInvalidNumber(\"Leading zeroes not allowed\");\n        }\n        ++_inputPtr;\n        if (ch == com.fasterxml.jackson.core.base.ParserBase.INT_0) {\n            while ((_inputPtr < _inputEnd) || loadMore()) {\n                ch = _inputBuffer[_inputPtr] & 0xff;\n                if ((ch < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (ch > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                    return com.fasterxml.jackson.core.base.ParserBase.INT_0;\n                }\n                ++_inputPtr;\n                if (ch != com.fasterxml.jackson.core.base.ParserBase.INT_0) {\n                    break;\n                }\n            } \n        }\n        return ch;\n    }\n\n    private com.fasterxml.jackson.core.JsonToken _parseFloat(char[] outBuf, int outPtr, int c, boolean negative, int integerPartLength) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        int fractLen = 0;\n        boolean eof = false;\n        if (c == '.') {\n            outBuf[outPtr++] = ((char) (c));\n            fract_loop : while (true) {\n                if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n                if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = ((char) (c));\n            } \n            if (fractLen == 0) {\n                reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n            }\n        }\n        int expLen = 0;\n        if ((c == 'e') || (c == 'E')) {\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            if ((c == '-') || (c == '+')) {\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = ((char) (c));\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            }\n            exp_loop : while ((c <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (c >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = ((char) (c));\n                if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            } \n            if (expLen == 0) {\n                reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n            }\n        }\n        if (!eof) {\n            --_inputPtr;\n            if (_parsingContext.inRoot()) {\n                _verifyRootSpace(c);\n            }\n        }\n        _textBuffer.setCurrentLength(outPtr);\n        return resetFloat(negative, integerPartLength, fractLen, expLen);\n    }\n\n    private final void _verifyRootSpace(int ch) throws java.io.IOException {\n        ++_inputPtr;\n        switch (ch) {\n            case ' ' :\n            case '\\t' :\n                return;\n            case '\\r' :\n                _skipCR();\n                return;\n            case '\\n' :\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                return;\n        }\n        _reportMissingRootWS(ch);\n    }\n\n    protected com.fasterxml.jackson.core.sym.Name _parseFieldName(int i) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            return _handleOddName(i);\n        }\n        if ((_inputPtr + 9) > _inputEnd) {\n            return slowParseName();\n        }\n        final byte[] input = _inputBuffer;\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1;\n        int q = input[_inputPtr++] & 0xff;\n        if (codes[q] == 0) {\n            i = input[_inputPtr++] & 0xff;\n            if (codes[i] == 0) {\n                q = (q << 8) | i;\n                i = input[_inputPtr++] & 0xff;\n                if (codes[i] == 0) {\n                    q = (q << 8) | i;\n                    i = input[_inputPtr++] & 0xff;\n                    if (codes[i] == 0) {\n                        q = (q << 8) | i;\n                        i = input[_inputPtr++] & 0xff;\n                        if (codes[i] == 0) {\n                            _quad1 = q;\n                            return parseMediumName(i, codes);\n                        }\n                        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                            return findName(q, 4);\n                        }\n                        return parseName(q, i, 4);\n                    }\n                    if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                        return findName(q, 3);\n                    }\n                    return parseName(q, i, 3);\n                }\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    return findName(q, 2);\n                }\n                return parseName(q, i, 2);\n            }\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                return findName(q, 1);\n            }\n            return parseName(q, i, 1);\n        }\n        if (q == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            return com.fasterxml.jackson.core.json.BytesToNameCanonicalizer.getEmptyName();\n        }\n        return parseName(0, q, 0);\n    }\n\n    protected com.fasterxml.jackson.core.sym.Name parseMediumName(int q2, final int[] codes) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        int i = _inputBuffer[_inputPtr++] & 0xff;\n        if (codes[i] != 0) {\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                return findName(_quad1, q2, 1);\n            }\n            return parseName(_quad1, q2, i, 1);\n        }\n        q2 = (q2 << 8) | i;\n        i = _inputBuffer[_inputPtr++] & 0xff;\n        if (codes[i] != 0) {\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                return findName(_quad1, q2, 2);\n            }\n            return parseName(_quad1, q2, i, 2);\n        }\n        q2 = (q2 << 8) | i;\n        i = _inputBuffer[_inputPtr++] & 0xff;\n        if (codes[i] != 0) {\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                return findName(_quad1, q2, 3);\n            }\n            return parseName(_quad1, q2, i, 3);\n        }\n        q2 = (q2 << 8) | i;\n        i = _inputBuffer[_inputPtr++] & 0xff;\n        if (codes[i] != 0) {\n            if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                return findName(_quad1, q2, 4);\n            }\n            return parseName(_quad1, q2, i, 4);\n        }\n        _quadBuffer[0] = _quad1;\n        _quadBuffer[1] = q2;\n        return parseLongName(i);\n    }\n\n    protected com.fasterxml.jackson.core.sym.Name parseLongName(int q) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1;\n        int qlen = 2;\n        while (true) {\n            if ((_inputEnd - _inputPtr) < 4) {\n                return parseEscapedName(_quadBuffer, qlen, 0, q, 0);\n            }\n            int i = _inputBuffer[_inputPtr++] & 0xff;\n            if (codes[i] != 0) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    return findName(_quadBuffer, qlen, q, 1);\n                }\n                return parseEscapedName(_quadBuffer, qlen, q, i, 1);\n            }\n            q = (q << 8) | i;\n            i = _inputBuffer[_inputPtr++] & 0xff;\n            if (codes[i] != 0) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    return findName(_quadBuffer, qlen, q, 2);\n                }\n                return parseEscapedName(_quadBuffer, qlen, q, i, 2);\n            }\n            q = (q << 8) | i;\n            i = _inputBuffer[_inputPtr++] & 0xff;\n            if (codes[i] != 0) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    return findName(_quadBuffer, qlen, q, 3);\n                }\n                return parseEscapedName(_quadBuffer, qlen, q, i, 3);\n            }\n            q = (q << 8) | i;\n            i = _inputBuffer[_inputPtr++] & 0xff;\n            if (codes[i] != 0) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    return findName(_quadBuffer, qlen, q, 4);\n                }\n                return parseEscapedName(_quadBuffer, qlen, q, i, 4);\n            }\n            if (qlen >= _quadBuffer.length) {\n                _quadBuffer = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(_quadBuffer, qlen);\n            }\n            _quadBuffer[qlen++] = q;\n            q = i;\n        } \n    }\n\n    protected com.fasterxml.jackson.core.sym.Name slowParseName() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\": was expecting closing \\'\\\"\\' for name\");\n            }\n        }\n        int i = _inputBuffer[_inputPtr++] & 0xff;\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            return com.fasterxml.jackson.core.json.BytesToNameCanonicalizer.getEmptyName();\n        }\n        return parseEscapedName(_quadBuffer, 0, 0, i, 0);\n    }\n\n    private com.fasterxml.jackson.core.sym.Name parseName(int q1, int ch, int lastQuadBytes) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);\n    }\n\n    private com.fasterxml.jackson.core.sym.Name parseName(int q1, int q2, int ch, int lastQuadBytes) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        _quadBuffer[0] = q1;\n        return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);\n    }\n\n    protected com.fasterxml.jackson.core.sym.Name parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1;\n        while (true) {\n            if (codes[ch] != 0) {\n                if (ch == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    break;\n                }\n                if (ch != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH) {\n                    _throwUnquotedSpace(ch, \"name\");\n                } else {\n                    ch = _decodeEscaped();\n                }\n                if (ch > 127) {\n                    if (currQuadBytes >= 4) {\n                        if (qlen >= quads.length) {\n                            _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n                        }\n                        quads[qlen++] = currQuad;\n                        currQuad = 0;\n                        currQuadBytes = 0;\n                    }\n                    if (ch < 0x800) {\n                        currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));\n                        ++currQuadBytes;\n                    } else {\n                        currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));\n                        ++currQuadBytes;\n                        if (currQuadBytes >= 4) {\n                            if (qlen >= quads.length) {\n                                _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n                            }\n                            quads[qlen++] = currQuad;\n                            currQuad = 0;\n                            currQuadBytes = 0;\n                        }\n                        currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));\n                        ++currQuadBytes;\n                    }\n                    ch = 0x80 | (ch & 0x3f);\n                }\n            }\n            if (currQuadBytes < 4) {\n                ++currQuadBytes;\n                currQuad = (currQuad << 8) | ch;\n            } else {\n                if (qlen >= quads.length) {\n                    _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n                }\n                quads[qlen++] = currQuad;\n                currQuad = ch;\n                currQuadBytes = 1;\n            }\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n        } \n        if (currQuadBytes > 0) {\n            if (qlen >= quads.length) {\n                _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n            }\n            quads[qlen++] = currQuad;\n        }\n        com.fasterxml.jackson.core.sym.Name name = _symbols.findName(quads, qlen);\n        if (name == null) {\n            name = addName(quads, qlen, currQuadBytes);\n        }\n        return name;\n    }\n\n    protected com.fasterxml.jackson.core.sym.Name _handleOddName(int ch) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if ((ch == '\\'') && isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {\n            return _parseAposName();\n        }\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n            _reportUnexpectedChar(ch, \"was expecting double-quote to start field name\");\n        }\n        final int[] codes = com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8JsNames();\n        if (codes[ch] != 0) {\n            _reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");\n        }\n        int[] quads = _quadBuffer;\n        int qlen = 0;\n        int currQuad = 0;\n        int currQuadBytes = 0;\n        while (true) {\n            if (currQuadBytes < 4) {\n                ++currQuadBytes;\n                currQuad = (currQuad << 8) | ch;\n            } else {\n                if (qlen >= quads.length) {\n                    _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n                }\n                quads[qlen++] = currQuad;\n                currQuad = ch;\n                currQuadBytes = 1;\n            }\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n            }\n            ch = _inputBuffer[_inputPtr] & 0xff;\n            if (codes[ch] != 0) {\n                break;\n            }\n            ++_inputPtr;\n        } \n        if (currQuadBytes > 0) {\n            if (qlen >= quads.length) {\n                _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n            }\n            quads[qlen++] = currQuad;\n        }\n        com.fasterxml.jackson.core.sym.Name name = _symbols.findName(quads, qlen);\n        if (name == null) {\n            name = addName(quads, qlen, currQuadBytes);\n        }\n        return name;\n    }\n\n    protected com.fasterxml.jackson.core.sym.Name _parseAposName() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\": was expecting closing \\'\\'\\' for name\");\n            }\n        }\n        int ch = _inputBuffer[_inputPtr++] & 0xff;\n        if (ch == '\\'') {\n            return com.fasterxml.jackson.core.json.BytesToNameCanonicalizer.getEmptyName();\n        }\n        int[] quads = _quadBuffer;\n        int qlen = 0;\n        int currQuad = 0;\n        int currQuadBytes = 0;\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1;\n        while (true) {\n            if (ch == '\\'') {\n                break;\n            }\n            if ((ch != '\"') && (codes[ch] != 0)) {\n                if (ch != '\\\\') {\n                    _throwUnquotedSpace(ch, \"name\");\n                } else {\n                    ch = _decodeEscaped();\n                }\n                if (ch > 127) {\n                    if (currQuadBytes >= 4) {\n                        if (qlen >= quads.length) {\n                            _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n                        }\n                        quads[qlen++] = currQuad;\n                        currQuad = 0;\n                        currQuadBytes = 0;\n                    }\n                    if (ch < 0x800) {\n                        currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));\n                        ++currQuadBytes;\n                    } else {\n                        currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));\n                        ++currQuadBytes;\n                        if (currQuadBytes >= 4) {\n                            if (qlen >= quads.length) {\n                                _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n                            }\n                            quads[qlen++] = currQuad;\n                            currQuad = 0;\n                            currQuadBytes = 0;\n                        }\n                        currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));\n                        ++currQuadBytes;\n                    }\n                    ch = 0x80 | (ch & 0x3f);\n                }\n            }\n            if (currQuadBytes < 4) {\n                ++currQuadBytes;\n                currQuad = (currQuad << 8) | ch;\n            } else {\n                if (qlen >= quads.length) {\n                    _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n                }\n                quads[qlen++] = currQuad;\n                currQuad = ch;\n                currQuadBytes = 1;\n            }\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n        } \n        if (currQuadBytes > 0) {\n            if (qlen >= quads.length) {\n                _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n            }\n            quads[qlen++] = currQuad;\n        }\n        com.fasterxml.jackson.core.sym.Name name = _symbols.findName(quads, qlen);\n        if (name == null) {\n            name = addName(quads, qlen, currQuadBytes);\n        }\n        return name;\n    }\n\n    private com.fasterxml.jackson.core.sym.Name findName(int q1, int lastQuadBytes) throws com.fasterxml.jackson.core.JsonParseException {\n        com.fasterxml.jackson.core.sym.Name name = _symbols.findName(q1);\n        if (name != null) {\n            return name;\n        }\n        _quadBuffer[0] = q1;\n        return addName(_quadBuffer, 1, lastQuadBytes);\n    }\n\n    private com.fasterxml.jackson.core.sym.Name findName(int q1, int q2, int lastQuadBytes) throws com.fasterxml.jackson.core.JsonParseException {\n        com.fasterxml.jackson.core.sym.Name name = _symbols.findName(q1, q2);\n        if (name != null) {\n            return name;\n        }\n        _quadBuffer[0] = q1;\n        _quadBuffer[1] = q2;\n        return addName(_quadBuffer, 2, lastQuadBytes);\n    }\n\n    private com.fasterxml.jackson.core.sym.Name findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws com.fasterxml.jackson.core.JsonParseException {\n        if (qlen >= quads.length) {\n            _quadBuffer = quads = com.fasterxml.jackson.core.json.UTF8StreamJsonParser.growArrayBy(quads, quads.length);\n        }\n        quads[qlen++] = lastQuad;\n        com.fasterxml.jackson.core.sym.Name name = _symbols.findName(quads, qlen);\n        if (name == null) {\n            return addName(quads, qlen, lastQuadBytes);\n        }\n        return name;\n    }\n\n    private com.fasterxml.jackson.core.sym.Name addName(int[] quads, int qlen, int lastQuadBytes) throws com.fasterxml.jackson.core.JsonParseException {\n        int byteLen = ((qlen << 2) - 4) + lastQuadBytes;\n        int lastQuad;\n        if (lastQuadBytes < 4) {\n            lastQuad = quads[qlen - 1];\n            quads[qlen - 1] = lastQuad << ((4 - lastQuadBytes) << 3);\n        } else {\n            lastQuad = 0;\n        }\n        char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();\n        int cix = 0;\n        for (int ix = 0; ix < byteLen;) {\n            int ch = quads[ix >> 2];\n            int byteIx = ix & 3;\n            ch = (ch >> ((3 - byteIx) << 3)) & 0xff;\n            ++ix;\n            if (ch > 127) {\n                int needed;\n                if ((ch & 0xe0) == 0xc0) {\n                    ch &= 0x1f;\n                    needed = 1;\n                } else if ((ch & 0xf0) == 0xe0) {\n                    ch &= 0xf;\n                    needed = 2;\n                } else if ((ch & 0xf8) == 0xf0) {\n                    ch &= 0x7;\n                    needed = 3;\n                } else {\n                    _reportInvalidInitial(ch);\n                    needed = ch = 1;\n                }\n                if ((ix + needed) > byteLen) {\n                    _reportInvalidEOF(\" in field name\");\n                }\n                int ch2 = quads[ix >> 2];\n                byteIx = ix & 3;\n                ch2 = ch2 >> ((3 - byteIx) << 3);\n                ++ix;\n                if ((ch2 & 0xc0) != 0x80) {\n                    _reportInvalidOther(ch2);\n                }\n                ch = (ch << 6) | (ch2 & 0x3f);\n                if (needed > 1) {\n                    ch2 = quads[ix >> 2];\n                    byteIx = ix & 3;\n                    ch2 = ch2 >> ((3 - byteIx) << 3);\n                    ++ix;\n                    if ((ch2 & 0xc0) != 0x80) {\n                        _reportInvalidOther(ch2);\n                    }\n                    ch = (ch << 6) | (ch2 & 0x3f);\n                    if (needed > 2) {\n                        ch2 = quads[ix >> 2];\n                        byteIx = ix & 3;\n                        ch2 = ch2 >> ((3 - byteIx) << 3);\n                        ++ix;\n                        if ((ch2 & 0xc0) != 0x80) {\n                            _reportInvalidOther(ch2 & 0xff);\n                        }\n                        ch = (ch << 6) | (ch2 & 0x3f);\n                    }\n                }\n                if (needed > 2) {\n                    ch -= 0x10000;\n                    if (cix >= cbuf.length) {\n                        cbuf = _textBuffer.expandCurrentSegment();\n                    }\n                    cbuf[cix++] = ((char) (0xd800 + (ch >> 10)));\n                    ch = 0xdc00 | (ch & 0x3ff);\n                }\n            }\n            if (cix >= cbuf.length) {\n                cbuf = _textBuffer.expandCurrentSegment();\n            }\n            cbuf[cix++] = ((char) (ch));\n        }\n        java.lang.String baseName = new java.lang.String(cbuf, 0, cix);\n        if (lastQuadBytes < 4) {\n            quads[qlen - 1] = lastQuad;\n        }\n        return _symbols.addName(baseName, quads, qlen);\n    }\n\n    @java.lang.Override\n    protected void _finishString() throws java.io.IOException {\n        int ptr = _inputPtr;\n        if (ptr >= _inputEnd) {\n            loadMoreGuaranteed();\n            ptr = _inputPtr;\n        }\n        int outPtr = 0;\n        char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icUTF8;\n        final int max = java.lang.Math.min(_inputEnd, ptr + outBuf.length);\n        final byte[] inputBuffer = _inputBuffer;\n        while (ptr < max) {\n            int c = ((int) (inputBuffer[ptr])) & 0xff;\n            if (codes[c] != 0) {\n                if (c == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    _inputPtr = ptr + 1;\n                    _textBuffer.setCurrentLength(outPtr);\n                    return;\n                }\n                break;\n            }\n            ++ptr;\n            outBuf[outPtr++] = ((char) (c));\n        } \n        _inputPtr = ptr;\n        _finishString2(outBuf, outPtr);\n    }\n\n    private void _finishString2(char[] outBuf, int outPtr) throws java.io.IOException {\n        int c;\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icUTF8;\n        final byte[] inputBuffer = _inputBuffer;\n        main_loop : while (true) {\n            ascii_loop : while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = java.lang.Math.min(_inputEnd, ptr + (outBuf.length - outPtr));\n                while (ptr < max) {\n                    c = ((int) (inputBuffer[ptr++])) & 0xff;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = ((char) (c));\n                } \n                _inputPtr = ptr;\n            } \n            if (c == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                break main_loop;\n            }\n            switch (codes[c]) {\n                case 1 :\n                    c = _decodeEscaped();\n                    break;\n                case 2 :\n                    c = _decodeUtf8_2(c);\n                    break;\n                case 3 :\n                    if ((_inputEnd - _inputPtr) >= 2) {\n                        c = _decodeUtf8_3fast(c);\n                    } else {\n                        c = _decodeUtf8_3(c);\n                    }\n                    break;\n                case 4 :\n                    c = _decodeUtf8_4(c);\n                    outBuf[outPtr++] = ((char) (0xd800 | (c >> 10)));\n                    if (outPtr >= outBuf.length) {\n                        outBuf = _textBuffer.finishCurrentSegment();\n                        outPtr = 0;\n                    }\n                    c = 0xdc00 | (c & 0x3ff);\n                    break;\n                default :\n                    if (c < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                        _throwUnquotedSpace(c, \"string value\");\n                    } else {\n                        _reportInvalidChar(c);\n                    }\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n        } \n        _textBuffer.setCurrentLength(outPtr);\n    }\n\n    protected void _skipString() throws java.io.IOException {\n        _tokenIncomplete = false;\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icUTF8;\n        final byte[] inputBuffer = _inputBuffer;\n        main_loop : while (true) {\n            int c;\n            ascii_loop : while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = ((int) (inputBuffer[ptr++])) & 0xff;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                } \n                _inputPtr = ptr;\n            } \n            if (c == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                break main_loop;\n            }\n            switch (codes[c]) {\n                case 1 :\n                    _decodeEscaped();\n                    break;\n                case 2 :\n                    _skipUtf8_2(c);\n                    break;\n                case 3 :\n                    _skipUtf8_3(c);\n                    break;\n                case 4 :\n                    _skipUtf8_4(c);\n                    break;\n                default :\n                    if (c < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                        _throwUnquotedSpace(c, \"string value\");\n                    } else {\n                        _reportInvalidChar(c);\n                    }\n            }\n        } \n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _handleUnexpectedValue(int c) throws java.io.IOException {\n        switch (c) {\n            case '\\'' :\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {\n                    return _handleApos();\n                }\n                break;\n            case 'N' :\n                _matchToken(\"NaN\", 1);\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(\"NaN\", java.lang.Double.NaN);\n                }\n                _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n                break;\n            case 'I' :\n                _matchToken(\"Infinity\", 1);\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(\"Infinity\", java.lang.Double.POSITIVE_INFINITY);\n                }\n                _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n                break;\n            case '+' :\n                if (_inputPtr >= _inputEnd) {\n                    if (!loadMore()) {\n                        _reportInvalidEOFInValue();\n                    }\n                }\n                return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xff, false);\n        }\n        if (java.lang.Character.isJavaIdentifierStart(c)) {\n            _reportInvalidToken(\"\" + ((char) (c)), \"('true', 'false' or 'null')\");\n        }\n        _reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\n        return null;\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _handleApos() throws java.io.IOException {\n        int c = 0;\n        int outPtr = 0;\n        char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icUTF8;\n        final byte[] inputBuffer = _inputBuffer;\n        main_loop : while (true) {\n            ascii_loop : while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = ((int) (inputBuffer[_inputPtr++])) & 0xff;\n                    if ((c == '\\'') || (codes[c] != 0)) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = ((char) (c));\n                } \n            } \n            if (c == '\\'') {\n                break main_loop;\n            }\n            switch (codes[c]) {\n                case 1 :\n                    if (c != '\\'') {\n                        c = _decodeEscaped();\n                    }\n                    break;\n                case 2 :\n                    c = _decodeUtf8_2(c);\n                    break;\n                case 3 :\n                    if ((_inputEnd - _inputPtr) >= 2) {\n                        c = _decodeUtf8_3fast(c);\n                    } else {\n                        c = _decodeUtf8_3(c);\n                    }\n                    break;\n                case 4 :\n                    c = _decodeUtf8_4(c);\n                    outBuf[outPtr++] = ((char) (0xd800 | (c >> 10)));\n                    if (outPtr >= outBuf.length) {\n                        outBuf = _textBuffer.finishCurrentSegment();\n                        outPtr = 0;\n                    }\n                    c = 0xdc00 | (c & 0x3ff);\n                    break;\n                default :\n                    if (c < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                        _throwUnquotedSpace(c, \"string value\");\n                    }\n                    _reportInvalidChar(c);\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n        } \n        _textBuffer.setCurrentLength(outPtr);\n        return com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int ch, boolean neg) throws java.io.IOException {\n        while (ch == 'I') {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            ch = _inputBuffer[_inputPtr++];\n            java.lang.String match;\n            if (ch == 'N') {\n                match = (neg) ? \"-INF\" : \"+INF\";\n            } else if (ch == 'n') {\n                match = (neg) ? \"-Infinity\" : \"+Infinity\";\n            } else {\n                break;\n            }\n            _matchToken(match, 3);\n            if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(match, neg ? java.lang.Double.NEGATIVE_INFINITY : java.lang.Double.POSITIVE_INFINITY);\n            }\n            _reportError((\"Non-standard token '\" + match) + \"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n        } \n        reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\n        return null;\n    }\n\n    protected void _matchToken(java.lang.String matchStr, int i) throws java.io.IOException {\n        final int len = matchStr.length();\n        do {\n            if (((_inputPtr >= _inputEnd) && (!loadMore())) || (_inputBuffer[_inputPtr] != matchStr.charAt(i))) {\n                _reportInvalidToken(matchStr.substring(0, i));\n            }\n            ++_inputPtr;\n        } while ((++i) < len );\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            return;\n        }\n        int ch = _inputBuffer[_inputPtr] & 0xff;\n        if (((ch < '0') || (ch == ']')) || (ch == '}')) {\n            return;\n        }\n        char c = ((char) (_decodeCharForError(ch)));\n        if (java.lang.Character.isJavaIdentifierPart(c)) {\n            _reportInvalidToken(matchStr.substring(0, i));\n        }\n    }\n\n    protected void _reportInvalidToken(java.lang.String matchedPart) throws java.io.IOException {\n        _reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");\n    }\n\n    protected void _reportInvalidToken(java.lang.String matchedPart, java.lang.String msg) throws java.io.IOException {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(matchedPart);\n        while (true) {\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                break;\n            }\n            int i = ((int) (_inputBuffer[_inputPtr++]));\n            char c = ((char) (_decodeCharForError(i)));\n            if (!java.lang.Character.isJavaIdentifierPart(c)) {\n                break;\n            }\n            sb.append(c);\n        } \n        _reportError(((\"Unrecognized token '\" + sb.toString()) + \"': was expecting \") + msg);\n    }\n\n    private final int _skipWS() throws java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icWS;\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            final int i = _inputBuffer[_inputPtr++] & 0xff;\n            switch (codes[i]) {\n                case 0 :\n                    return i;\n                case 1 :\n                    continue;\n                case 2 :\n                    _skipUtf8_2(i);\n                    break;\n                case 3 :\n                    _skipUtf8_3(i);\n                    break;\n                case 4 :\n                    _skipUtf8_4(i);\n                    break;\n                case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF :\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR :\n                    _skipCR();\n                    break;\n                case '/' :\n                    _skipComment();\n                    break;\n                case '#' :\n                    if (!_skipYAMLComment()) {\n                        return i;\n                    }\n                    break;\n                default :\n                    if (i < 32) {\n                        _throwInvalidSpace(i);\n                    }\n                    _reportInvalidChar(i);\n            }\n        } \n        throw _constructError((\"Unexpected end-of-input within/between \" + _parsingContext.getTypeDesc()) + \" entries\");\n    }\n\n    private int _skipWSOrEnd() throws java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icWS;\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            final int i = _inputBuffer[_inputPtr++] & 0xff;\n            switch (codes[i]) {\n                case 0 :\n                    return i;\n                case 1 :\n                    continue;\n                case 2 :\n                    _skipUtf8_2(i);\n                    break;\n                case 3 :\n                    _skipUtf8_3(i);\n                    break;\n                case 4 :\n                    _skipUtf8_4(i);\n                    break;\n                case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF :\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR :\n                    _skipCR();\n                    break;\n                case '/' :\n                    _skipComment();\n                    break;\n                case '#' :\n                    if (!_skipYAMLComment()) {\n                        return i;\n                    }\n                    break;\n                default :\n                    _reportInvalidChar(i);\n            }\n        } \n        _handleEOF();\n        return -1;\n    }\n\n    private int _skipColon() throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        int i = _inputBuffer[_inputPtr++];\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON) {\n            if (_inputPtr < _inputEnd) {\n                i = _inputBuffer[_inputPtr] & 0xff;\n                if ((i > com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) && (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SLASH)) {\n                    ++_inputPtr;\n                    return i;\n                }\n            }\n        } else {\n            i &= 0xff;\n            space_loop : while (true) {\n                switch (i) {\n                    case ' ' :\n                    case '\\t' :\n                        break;\n                    case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR :\n                        _skipCR();\n                        break;\n                    case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF :\n                        ++_currInputRow;\n                        _currInputRowStart = _inputPtr;\n                        break;\n                    case '/' :\n                        _skipComment();\n                        break;\n                    default :\n                        if (i < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                            _throwInvalidSpace(i);\n                        }\n                        break space_loop;\n                }\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                i = _inputBuffer[_inputPtr++] & 0xff;\n            } \n            if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON) {\n                _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n            }\n        }\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            i = _inputBuffer[_inputPtr++] & 0xff;\n            if (i > com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SLASH) {\n                    return i;\n                }\n                _skipComment();\n            } else if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF) {\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                } else if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR) {\n                    _skipCR();\n                } else if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_TAB) {\n                    _throwInvalidSpace(i);\n                }\n            }\n        } \n        throw _constructError((\"Unexpected end-of-input within/between \" + _parsingContext.getTypeDesc()) + \" entries\");\n    }\n\n    private void _skipComment() throws java.io.IOException {\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS)) {\n            _reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");\n        }\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            _reportInvalidEOF(\" in a comment\");\n        }\n        int c = _inputBuffer[_inputPtr++] & 0xff;\n        if (c == '/') {\n            _skipLine();\n        } else if (c == '*') {\n            _skipCComment();\n        } else {\n            _reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");\n        }\n    }\n\n    private void _skipCComment() throws java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();\n        main_loop : while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                    case '*' :\n                        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                            break main_loop;\n                        }\n                        if (_inputBuffer[_inputPtr] == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SLASH) {\n                            ++_inputPtr;\n                            return;\n                        }\n                        break;\n                    case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF :\n                        ++_currInputRow;\n                        _currInputRowStart = _inputPtr;\n                        break;\n                    case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR :\n                        _skipCR();\n                        break;\n                    case 2 :\n                        _skipUtf8_2(i);\n                        break;\n                    case 3 :\n                        _skipUtf8_3(i);\n                        break;\n                    case 4 :\n                        _skipUtf8_4(i);\n                        break;\n                    default :\n                        _reportInvalidChar(i);\n                }\n            }\n        } \n        _reportInvalidEOF(\" in a comment\");\n    }\n\n    private boolean _skipYAMLComment() throws java.io.IOException {\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS)) {\n            return false;\n        }\n        _skipLine();\n        return true;\n    }\n\n    private void _skipLine() throws java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment();\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                    case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF :\n                        ++_currInputRow;\n                        _currInputRowStart = _inputPtr;\n                        return;\n                    case com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR :\n                        _skipCR();\n                        return;\n                    case '*' :\n                        break;\n                    case 2 :\n                        _skipUtf8_2(i);\n                        break;\n                    case 3 :\n                        _skipUtf8_3(i);\n                        break;\n                    case 4 :\n                        _skipUtf8_4(i);\n                        break;\n                    default :\n                        if (code < 0) {\n                            _reportInvalidChar(i);\n                        }\n                }\n            }\n        } \n    }\n\n    @java.lang.Override\n    protected char _decodeEscaped() throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        int c = ((int) (_inputBuffer[_inputPtr++]));\n        switch (((int) (c))) {\n            case 'b' :\n                return '\\b';\n            case 't' :\n                return '\\t';\n            case 'n' :\n                return '\\n';\n            case 'f' :\n                return '\\f';\n            case 'r' :\n                return '\\r';\n            case '\"' :\n            case '/' :\n            case '\\\\' :\n                return ((char) (c));\n            case 'u' :\n                break;\n            default :\n                return _handleUnrecognizedCharacterEscape(((char) (_decodeCharForError(c))));\n        }\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = ((int) (_inputBuffer[_inputPtr++]));\n            int digit = com.fasterxml.jackson.core.io.CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return ((char) (value));\n    }\n\n    protected int _decodeCharForError(int firstByte) throws java.io.IOException {\n        int c = ((int) (firstByte));\n        if (c < 0) {\n            int needed;\n            if ((c & 0xe0) == 0xc0) {\n                c &= 0x1f;\n                needed = 1;\n            } else if ((c & 0xf0) == 0xe0) {\n                c &= 0xf;\n                needed = 2;\n            } else if ((c & 0xf8) == 0xf0) {\n                c &= 0x7;\n                needed = 3;\n            } else {\n                _reportInvalidInitial(c & 0xff);\n                needed = 1;\n            }\n            int d = nextByte();\n            if ((d & 0xc0) != 0x80) {\n                _reportInvalidOther(d & 0xff);\n            }\n            c = (c << 6) | (d & 0x3f);\n            if (needed > 1) {\n                d = nextByte();\n                if ((d & 0xc0) != 0x80) {\n                    _reportInvalidOther(d & 0xff);\n                }\n                c = (c << 6) | (d & 0x3f);\n                if (needed > 2) {\n                    d = nextByte();\n                    if ((d & 0xc0) != 0x80) {\n                        _reportInvalidOther(d & 0xff);\n                    }\n                    c = (c << 6) | (d & 0x3f);\n                }\n            }\n        }\n        return c;\n    }\n\n    private int _decodeUtf8_2(int c) throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        int d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        return ((c & 0x1f) << 6) | (d & 0x3f);\n    }\n\n    private int _decodeUtf8_3(int c1) throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        c1 &= 0xf;\n        int d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        int c = (c1 << 6) | (d & 0x3f);\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        c = (c << 6) | (d & 0x3f);\n        return c;\n    }\n\n    private int _decodeUtf8_3fast(int c1) throws java.io.IOException {\n        c1 &= 0xf;\n        int d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        int c = (c1 << 6) | (d & 0x3f);\n        d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        c = (c << 6) | (d & 0x3f);\n        return c;\n    }\n\n    private int _decodeUtf8_4(int c) throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        int d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        c = ((c & 0x7) << 6) | (d & 0x3f);\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        c = (c << 6) | (d & 0x3f);\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        return ((c << 6) | (d & 0x3f)) - 0x10000;\n    }\n\n    private void _skipUtf8_2(int c) throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        c = ((int) (_inputBuffer[_inputPtr++]));\n        if ((c & 0xc0) != 0x80) {\n            _reportInvalidOther(c & 0xff, _inputPtr);\n        }\n    }\n\n    private void _skipUtf8_3(int c) throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        c = ((int) (_inputBuffer[_inputPtr++]));\n        if ((c & 0xc0) != 0x80) {\n            _reportInvalidOther(c & 0xff, _inputPtr);\n        }\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        c = ((int) (_inputBuffer[_inputPtr++]));\n        if ((c & 0xc0) != 0x80) {\n            _reportInvalidOther(c & 0xff, _inputPtr);\n        }\n    }\n\n    private void _skipUtf8_4(int c) throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        int d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        d = ((int) (_inputBuffer[_inputPtr++]));\n        if ((d & 0xc0) != 0x80) {\n            _reportInvalidOther(d & 0xff, _inputPtr);\n        }\n    }\n\n    protected void _skipCR() throws java.io.IOException {\n        if ((_inputPtr < _inputEnd) || loadMore()) {\n            if (_inputBuffer[_inputPtr] == com.fasterxml.jackson.core.json.UTF8StreamJsonParser.BYTE_LF) {\n                ++_inputPtr;\n            }\n        }\n        ++_currInputRow;\n        _currInputRowStart = _inputPtr;\n    }\n\n    private int nextByte() throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        return _inputBuffer[_inputPtr++] & 0xff;\n    }\n\n    protected void _reportInvalidChar(int c) throws com.fasterxml.jackson.core.JsonParseException {\n        if (c < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n            _throwInvalidSpace(c);\n        }\n        _reportInvalidInitial(c);\n    }\n\n    protected void _reportInvalidInitial(int mask) throws com.fasterxml.jackson.core.JsonParseException {\n        _reportError(\"Invalid UTF-8 start byte 0x\" + java.lang.Integer.toHexString(mask));\n    }\n\n    protected void _reportInvalidOther(int mask) throws com.fasterxml.jackson.core.JsonParseException {\n        _reportError(\"Invalid UTF-8 middle byte 0x\" + java.lang.Integer.toHexString(mask));\n    }\n\n    protected void _reportInvalidOther(int mask, int ptr) throws com.fasterxml.jackson.core.JsonParseException {\n        _inputPtr = ptr;\n        _reportInvalidOther(mask);\n    }\n\n    public static int[] growArrayBy(int[] arr, int more) {\n        if (arr == null) {\n            return new int[more];\n        }\n        return java.util.Arrays.copyOf(arr, arr.length + more);\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant b64variant) throws java.io.IOException {\n        com.fasterxml.jackson.core.util.ByteArrayBuilder builder = _getByteArrayBuilder();\n        while (true) {\n            int ch;\n            do {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                ch = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            } while (ch <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE );\n            int bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (ch == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    return builder.toByteArray();\n                }\n                bits = _decodeBase64Escape(b64variant, ch, 0);\n                if (bits < 0) {\n                    continue;\n                }\n            }\n            int decodedData = bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                bits = _decodeBase64Escape(b64variant, ch, 1);\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 4;\n                        builder.append(decodedData);\n                        return builder.toByteArray();\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 2);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if (_inputPtr >= _inputEnd) {\n                        loadMoreGuaranteed();\n                    }\n                    ch = _inputBuffer[_inputPtr++] & 0xff;\n                    if (!b64variant.usesPaddingChar(ch)) {\n                        throw reportInvalidBase64Char(b64variant, ch, 3, (\"expected padding character '\" + b64variant.getPaddingChar()) + \"'\");\n                    }\n                    decodedData >>= 4;\n                    builder.append(decodedData);\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++] & 0xff;\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 2;\n                        builder.appendTwoBytes(decodedData);\n                        return builder.toByteArray();\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 3);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    decodedData >>= 2;\n                    builder.appendTwoBytes(decodedData);\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            builder.appendThreeBytes(decodedData);\n        } \n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!eof) {\n    --_inputPtr;\n}",
            "src_parent": "{\n    int fractLen = 0;\n    boolean eof = false;\n    if (c == '.') {\n        outBuf[outPtr++] = ((char) (c));\n        fract_loop : while (true) {\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break fract_loop;\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n            if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                break fract_loop;\n            }\n            ++fractLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n        } \n        if (fractLen == 0) {\n            reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n        }\n    }\n    int expLen = 0;\n    if ((c == 'e') || (c == 'E')) {\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = ((char) (c));\n        if (_inputPtr >= _inputEnd) {\n            loadMoreGuaranteed();\n        }\n        c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        if ((c == '-') || (c == '+')) {\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        }\n        exp_loop : while ((c <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (c >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n            ++expLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = ((char) (c));\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break exp_loop;\n            }\n            c = ((int) (_inputBuffer[_inputPtr++])) & 0xff;\n        } \n        if (expLen == 0) {\n            reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n        }\n    }\n    if (!eof) {\n        --_inputPtr;\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return resetFloat(negative, integerPartLength, fractLen, expLen);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "While",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Switch",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (i < 32) {\n    _throwInvalidSpace(i);\n}",
            "src_parent": "default :\n    if (i < 32) {\n        _throwInvalidSpace(i);\n    }\n    _reportInvalidChar(i);",
            "src_parent_type": "Case",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!eof",
            "dst_parent": "if (!eof) {\n    --_inputPtr;\n}",
            "dst_parent_type": "If",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "!eof",
            "src_parent": "if (!eof) {\n    --_inputPtr;\n    if (_parsingContext.inRoot()) {\n        _verifyRootSpace(c);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    --_inputPtr;\n}",
            "dst_parent": "if (!eof) {\n    --_inputPtr;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    _verifyRootSpace(c);\n}",
            "src_parent": "if (_parsingContext.inRoot()) {\n    _verifyRootSpace(c);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "UTF8StreamJsonParser"
    },
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Assignment",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Do",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (_parsingContext.inRoot()) {\n    _verifyRootSpace(ch);\n}",
            "src_parent": "{\n    if (negative) {\n        if (ptr >= _inputEnd) {\n            break dummy_loop;\n        }\n        ch = _inputBuffer[ptr++];\n        if ((ch > com.fasterxml.jackson.core.base.ParserBase.INT_9) || (ch < com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n            _inputPtr = ptr;\n            return _handleInvalidNumberStart(ch, true);\n        }\n    }\n    if (ch == com.fasterxml.jackson.core.base.ParserBase.INT_0) {\n        break dummy_loop;\n    }\n    int intLen = 1;\n    int_loop : while (true) {\n        if (ptr >= _inputEnd) {\n            break dummy_loop;\n        }\n        ch = ((int) (_inputBuffer[ptr++]));\n        if ((ch < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (ch > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n            break int_loop;\n        }\n        ++intLen;\n    } \n    int fractLen = 0;\n    if (ch == '.') {\n        fract_loop : while (true) {\n            if (ptr >= inputLen) {\n                break dummy_loop;\n            }\n            ch = ((int) (_inputBuffer[ptr++]));\n            if ((ch < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (ch > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                break fract_loop;\n            }\n            ++fractLen;\n        } \n        if (fractLen == 0) {\n            reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n        }\n    }\n    int expLen = 0;\n    if ((ch == 'e') || (ch == 'E')) {\n        if (ptr >= inputLen) {\n            break dummy_loop;\n        }\n        ch = ((int) (_inputBuffer[ptr++]));\n        if ((ch == com.fasterxml.jackson.core.base.ParserBase.INT_MINUS) || (ch == com.fasterxml.jackson.core.base.ParserBase.INT_PLUS)) {\n            if (ptr >= inputLen) {\n                break dummy_loop;\n            }\n            ch = ((int) (_inputBuffer[ptr++]));\n        }\n        while ((ch <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (ch >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n            ++expLen;\n            if (ptr >= inputLen) {\n                break dummy_loop;\n            }\n            ch = ((int) (_inputBuffer[ptr++]));\n        } \n        if (expLen == 0) {\n            reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n        }\n    }\n    --ptr;\n    _inputPtr = ptr;\n    if (_parsingContext.inRoot()) {\n        _verifyRootSpace(ch);\n    }\n    int len = ptr - startPtr;\n    _textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n    return reset(negative, intLen, fractLen, expLen);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "_verifyRootSpace(c)",
            "src_parent": "{\n    _verifyRootSpace(c);\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "if (!eof) {\n    --_inputPtr;\n    if (_parsingContext.inRoot()) {\n        _verifyRootSpace(c);\n    }\n}",
            "src_parent": "{\n    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n    int outPtr = 0;\n    if (negative) {\n        outBuf[outPtr++] = '-';\n    }\n    int intLen = 0;\n    char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");\n    if (c == '0') {\n        c = _verifyNoLeadingZeroes();\n    }\n    boolean eof = false;\n    int_loop : while ((c >= '0') && (c <= '9')) {\n        ++intLen;\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = c;\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            c = com.fasterxml.jackson.core.base.ParserBase.CHAR_NULL;\n            eof = true;\n            break int_loop;\n        }\n        c = _inputBuffer[_inputPtr++];\n    } \n    if (intLen == 0) {\n        reportInvalidNumber((\"Missing integer part (next char \" + com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(c)) + \")\");\n    }\n    int fractLen = 0;\n    if (c == '.') {\n        outBuf[outPtr++] = c;\n        fract_loop : while (true) {\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break fract_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n            if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                break fract_loop;\n            }\n            ++fractLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n        } \n        if (fractLen == 0) {\n            reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n        }\n    }\n    int expLen = 0;\n    if ((c == 'e') || (c == 'E')) {\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = c;\n        c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"expected a digit for number exponent\");\n        if ((c == '-') || (c == '+')) {\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"expected a digit for number exponent\");\n        }\n        exp_loop : while ((c <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (c >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n            ++expLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break exp_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        } \n        if (expLen == 0) {\n            reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n        }\n    }\n    if (!eof) {\n        --_inputPtr;\n        if (_parsingContext.inRoot()) {\n            _verifyRootSpace(c);\n        }\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return reset(negative, intLen, fractLen, expLen);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private final void _verifyRootSpace(int ch) throws java.io.IOException {\n    ++_inputPtr;\n    switch (ch) {\n        case ' ' :\n        case '\\t' :\n            return;\n        case '\\r' :\n            _skipCR();\n            return;\n        case '\\n' :\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n    }\n    _reportMissingRootWS(ch);\n}",
            "src_parent": "public final class ReaderBasedJsonParser extends com.fasterxml.jackson.core.base.ParserBase {\n    protected static final int[] _icLatin1 = com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1();\n\n    private static final int[] _icWS = com.fasterxml.jackson.core.io.CharTypes.getInputCodeWS();\n\n    protected java.io.Reader _reader;\n\n    protected char[] _inputBuffer;\n\n    protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;\n\n    protected final com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols;\n\n    protected final int _hashSeed;\n\n    protected boolean _tokenIncomplete = false;\n\n    public ReaderBasedJsonParser(com.fasterxml.jackson.core.io.IOContext ctxt, int features, java.io.Reader r, com.fasterxml.jackson.core.ObjectCodec codec, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer st) {\n        super(ctxt, features);\n        _reader = r;\n        _inputBuffer = ctxt.allocTokenBuffer();\n        _objectCodec = codec;\n        _symbols = st;\n        _hashSeed = st.hashSeed();\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.ObjectCodec getCodec() {\n        return _objectCodec;\n    }\n\n    @java.lang.Override\n    public void setCodec(com.fasterxml.jackson.core.ObjectCodec c) {\n        _objectCodec = c;\n    }\n\n    @java.lang.Override\n    public int releaseBuffered(java.io.Writer w) throws java.io.IOException {\n        int count = _inputEnd - _inputPtr;\n        if (count < 1) {\n            return 0;\n        }\n        int origPtr = _inputPtr;\n        w.write(_inputBuffer, origPtr, count);\n        return count;\n    }\n\n    @java.lang.Override\n    public java.lang.Object getInputSource() {\n        return _reader;\n    }\n\n    @java.lang.Override\n    protected boolean loadMore() throws java.io.IOException {\n        _currInputProcessed += _inputEnd;\n        _currInputRowStart -= _inputEnd;\n        if (_reader != null) {\n            int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);\n            if (count > 0) {\n                _inputPtr = 0;\n                _inputEnd = count;\n                return true;\n            }\n            _closeInput();\n            if (count == 0) {\n                throw new java.io.IOException(\"Reader returned 0 characters when trying to read \" + _inputEnd);\n            }\n        }\n        return false;\n    }\n\n    protected char getNextChar(java.lang.String eofMsg) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(eofMsg);\n            }\n        }\n        return _inputBuffer[_inputPtr++];\n    }\n\n    @java.lang.Override\n    protected void _closeInput() throws java.io.IOException {\n        if (_reader != null) {\n            if (_ioContext.isResourceManaged() || isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE)) {\n                _reader.close();\n            }\n            _reader = null;\n        }\n    }\n\n    @java.lang.Override\n    protected void _releaseBuffers() throws java.io.IOException {\n        super._releaseBuffers();\n        char[] buf = _inputBuffer;\n        if (buf != null) {\n            _inputBuffer = null;\n            _ioContext.releaseTokenBuffer(buf);\n        }\n    }\n\n    @java.lang.Override\n    public java.lang.String getText() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        com.fasterxml.jackson.core.JsonToken t = _currToken;\n        if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString();\n            }\n            return _textBuffer.contentsAsString();\n        }\n        return _getText2(t);\n    }\n\n    @java.lang.Override\n    public java.lang.String getValueAsString() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString();\n            }\n            return _textBuffer.contentsAsString();\n        }\n        return super.getValueAsString(null);\n    }\n\n    @java.lang.Override\n    public java.lang.String getValueAsString(java.lang.String defValue) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n            if (_tokenIncomplete) {\n                _tokenIncomplete = false;\n                _finishString();\n            }\n            return _textBuffer.contentsAsString();\n        }\n        return super.getValueAsString(defValue);\n    }\n\n    protected java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken t) {\n        if (t == null) {\n            return null;\n        }\n        switch (t) {\n            case FIELD_NAME :\n                return _parsingContext.getCurrentName();\n            case VALUE_STRING :\n            case VALUE_NUMBER_INT :\n            case VALUE_NUMBER_FLOAT :\n                return _textBuffer.contentsAsString();\n            default :\n                return t.asString();\n        }\n    }\n\n    @java.lang.Override\n    public char[] getTextCharacters() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken != null) {\n            switch (_currToken) {\n                case FIELD_NAME :\n                    if (!_nameCopied) {\n                        java.lang.String name = _parsingContext.getCurrentName();\n                        int nameLen = name.length();\n                        if (_nameCopyBuffer == null) {\n                            _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                        } else if (_nameCopyBuffer.length < nameLen) {\n                            _nameCopyBuffer = new char[nameLen];\n                        }\n                        name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                        _nameCopied = true;\n                    }\n                    return _nameCopyBuffer;\n                case VALUE_STRING :\n                    if (_tokenIncomplete) {\n                        _tokenIncomplete = false;\n                        _finishString();\n                    }\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    return _textBuffer.getTextBuffer();\n                default :\n                    return _currToken.asCharArray();\n            }\n        }\n        return null;\n    }\n\n    @java.lang.Override\n    public int getTextLength() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken != null) {\n            switch (_currToken) {\n                case FIELD_NAME :\n                    return _parsingContext.getCurrentName().length();\n                case VALUE_STRING :\n                    if (_tokenIncomplete) {\n                        _tokenIncomplete = false;\n                        _finishString();\n                    }\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    return _textBuffer.size();\n                default :\n                    return _currToken.asCharArray().length;\n            }\n        }\n        return 0;\n    }\n\n    @java.lang.Override\n    public int getTextOffset() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken != null) {\n            switch (_currToken) {\n                case FIELD_NAME :\n                    return 0;\n                case VALUE_STRING :\n                    if (_tokenIncomplete) {\n                        _tokenIncomplete = false;\n                        _finishString();\n                    }\n                case VALUE_NUMBER_INT :\n                case VALUE_NUMBER_FLOAT :\n                    return _textBuffer.getTextOffset();\n                default :\n            }\n        }\n        return 0;\n    }\n\n    @java.lang.Override\n    public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if ((_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_STRING) && ((_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT) || (_binaryValue == null))) {\n            _reportError((\"Current token (\" + _currToken) + \") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");\n        }\n        if (_tokenIncomplete) {\n            try {\n                _binaryValue = _decodeBase64(b64variant);\n            } catch (java.lang.IllegalArgumentException iae) {\n                throw _constructError(((\"Failed to decode VALUE_STRING as base64 (\" + b64variant) + \"): \") + iae.getMessage());\n            }\n            _tokenIncomplete = false;\n        } else if (_binaryValue == null) {\n            @java.lang.SuppressWarnings(\"resource\")\n            com.fasterxml.jackson.core.util.ByteArrayBuilder builder = _getByteArrayBuilder();\n            _decodeBase64(getText(), builder, b64variant);\n            _binaryValue = builder.toByteArray();\n        }\n        return _binaryValue;\n    }\n\n    @java.lang.Override\n    public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.OutputStream out) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if ((!_tokenIncomplete) || (_currToken != com.fasterxml.jackson.core.JsonToken.VALUE_STRING)) {\n            byte[] b = getBinaryValue(b64variant);\n            out.write(b);\n            return b.length;\n        }\n        byte[] buf = _ioContext.allocBase64Buffer();\n        try {\n            return _readBinary(b64variant, out, buf);\n        } finally {\n            _ioContext.releaseBase64Buffer(buf);\n        }\n    }\n\n    protected int _readBinary(com.fasterxml.jackson.core.Base64Variant b64variant, java.io.OutputStream out, byte[] buffer) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        int outputPtr = 0;\n        final int outputEnd = buffer.length - 3;\n        int outputCount = 0;\n        while (true) {\n            char ch;\n            do {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                ch = _inputBuffer[_inputPtr++];\n            } while (ch <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE );\n            int bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (ch == '\"') {\n                    break;\n                }\n                bits = _decodeBase64Escape(b64variant, ch, 0);\n                if (bits < 0) {\n                    continue;\n                }\n            }\n            if (outputPtr > outputEnd) {\n                outputCount += outputPtr;\n                out.write(buffer, 0, outputPtr);\n                outputPtr = 0;\n            }\n            int decodedData = bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                bits = _decodeBase64Escape(b64variant, ch, 1);\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 4;\n                        buffer[outputPtr++] = ((byte) (decodedData));\n                        break;\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 2);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if (_inputPtr >= _inputEnd) {\n                        loadMoreGuaranteed();\n                    }\n                    ch = _inputBuffer[_inputPtr++];\n                    if (!b64variant.usesPaddingChar(ch)) {\n                        throw reportInvalidBase64Char(b64variant, ch, 3, (\"expected padding character '\" + b64variant.getPaddingChar()) + \"'\");\n                    }\n                    decodedData >>= 4;\n                    buffer[outputPtr++] = ((byte) (decodedData));\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 2;\n                        buffer[outputPtr++] = ((byte) (decodedData >> 8));\n                        buffer[outputPtr++] = ((byte) (decodedData));\n                        break;\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 3);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    decodedData >>= 2;\n                    buffer[outputPtr++] = ((byte) (decodedData >> 8));\n                    buffer[outputPtr++] = ((byte) (decodedData));\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            buffer[outputPtr++] = ((byte) (decodedData >> 16));\n            buffer[outputPtr++] = ((byte) (decodedData >> 8));\n            buffer[outputPtr++] = ((byte) (decodedData));\n        } \n        _tokenIncomplete = false;\n        if (outputPtr > 0) {\n            outputCount += outputPtr;\n            out.write(buffer, 0, outputPtr);\n        }\n        return outputCount;\n    }\n\n    @java.lang.Override\n    public com.fasterxml.jackson.core.JsonToken nextToken() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        _numTypesValid = com.fasterxml.jackson.core.base.ParserBase.NR_UNKNOWN;\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            return _nextAfterName();\n        }\n        if (_tokenIncomplete) {\n            _skipString();\n        }\n        int i = _skipWSOrEnd();\n        if (i < 0) {\n            close();\n            return _currToken = null;\n        }\n        _tokenInputTotal = (_currInputProcessed + _inputPtr) - 1;\n        _tokenInputRow = _currInputRow;\n        _tokenInputCol = (_inputPtr - _currInputRowStart) - 1;\n        _binaryValue = null;\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RBRACKET) {\n            if (!_parsingContext.inArray()) {\n                _reportMismatchedEndMarker(i, '}');\n            }\n            _parsingContext = _parsingContext.getParent();\n            return _currToken = com.fasterxml.jackson.core.JsonToken.END_ARRAY;\n        }\n        if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RCURLY) {\n            if (!_parsingContext.inObject()) {\n                _reportMismatchedEndMarker(i, ']');\n            }\n            _parsingContext = _parsingContext.getParent();\n            return _currToken = com.fasterxml.jackson.core.JsonToken.END_OBJECT;\n        }\n        if (_parsingContext.expectComma()) {\n            if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COMMA) {\n                _reportUnexpectedChar(i, (\"was expecting comma to separate \" + _parsingContext.getTypeDesc()) + \" entries\");\n            }\n            i = _skipWS();\n        }\n        boolean inObject = _parsingContext.inObject();\n        if (inObject) {\n            java.lang.String name = _parseName(i);\n            _parsingContext.setCurrentName(name);\n            _currToken = com.fasterxml.jackson.core.JsonToken.FIELD_NAME;\n            i = _skipWS();\n            if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON) {\n                _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n            }\n            i = _skipWS();\n        }\n        com.fasterxml.jackson.core.JsonToken t;\n        switch (i) {\n            case '\"' :\n                _tokenIncomplete = true;\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n                break;\n            case '[' :\n                if (!inObject) {\n                    _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n                }\n                t = com.fasterxml.jackson.core.JsonToken.START_ARRAY;\n                break;\n            case '{' :\n                if (!inObject) {\n                    _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n                }\n                t = com.fasterxml.jackson.core.JsonToken.START_OBJECT;\n                break;\n            case ']' :\n            case '}' :\n                _reportUnexpectedChar(i, \"expected a value\");\n            case 't' :\n                _matchToken(\"true\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_TRUE;\n                break;\n            case 'f' :\n                _matchToken(\"false\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_FALSE;\n                break;\n            case 'n' :\n                _matchToken(\"null\", 1);\n                t = com.fasterxml.jackson.core.JsonToken.VALUE_NULL;\n                break;\n            case '-' :\n            case '0' :\n            case '1' :\n            case '2' :\n            case '3' :\n            case '4' :\n            case '5' :\n            case '6' :\n            case '7' :\n            case '8' :\n            case '9' :\n                t = _parseNumber(i);\n                break;\n            default :\n                t = _handleOddValue(i);\n                break;\n        }\n        if (inObject) {\n            _nextToken = t;\n            return _currToken;\n        }\n        _currToken = t;\n        return t;\n    }\n\n    private com.fasterxml.jackson.core.JsonToken _nextAfterName() {\n        _nameCopied = false;\n        com.fasterxml.jackson.core.JsonToken t = _nextToken;\n        _nextToken = null;\n        if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n        } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n        }\n        return _currToken = t;\n    }\n\n    @java.lang.Override\n    public java.lang.String nextTextValue() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_STRING) {\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString();\n                }\n                return _textBuffer.contentsAsString();\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return null;\n        }\n        return nextToken() == com.fasterxml.jackson.core.JsonToken.VALUE_STRING ? getText() : null;\n    }\n\n    @java.lang.Override\n    public int nextIntValue(int defaultValue) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT) {\n                return getIntValue();\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return defaultValue;\n        }\n        return nextToken() == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT ? getIntValue() : defaultValue;\n    }\n\n    @java.lang.Override\n    public long nextLongValue(long defaultValue) throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT) {\n                return getLongValue();\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return defaultValue;\n        }\n        return nextToken() == com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT ? getLongValue() : defaultValue;\n    }\n\n    @java.lang.Override\n    public java.lang.Boolean nextBooleanValue() throws com.fasterxml.jackson.core.JsonParseException, java.io.IOException {\n        if (_currToken == com.fasterxml.jackson.core.JsonToken.FIELD_NAME) {\n            _nameCopied = false;\n            com.fasterxml.jackson.core.JsonToken t = _nextToken;\n            _nextToken = null;\n            _currToken = t;\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_TRUE) {\n                return java.lang.Boolean.TRUE;\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.VALUE_FALSE) {\n                return java.lang.Boolean.FALSE;\n            }\n            if (t == com.fasterxml.jackson.core.JsonToken.START_ARRAY) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            } else if (t == com.fasterxml.jackson.core.JsonToken.START_OBJECT) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            return null;\n        }\n        switch (nextToken()) {\n            case VALUE_TRUE :\n                return java.lang.Boolean.TRUE;\n            case VALUE_FALSE :\n                return java.lang.Boolean.FALSE;\n            default :\n                return null;\n        }\n    }\n\n    @java.lang.Override\n    public void close() throws java.io.IOException {\n        super.close();\n        _symbols.release();\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _parseNumber(int ch) throws java.io.IOException {\n        boolean negative = ch == com.fasterxml.jackson.core.base.ParserBase.INT_MINUS;\n        int ptr = _inputPtr;\n        int startPtr = ptr - 1;\n        final int inputLen = _inputEnd;\n        dummy_loop : do {\n            if (negative) {\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = _inputBuffer[ptr++];\n                if ((ch > com.fasterxml.jackson.core.base.ParserBase.INT_9) || (ch < com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n                    _inputPtr = ptr;\n                    return _handleInvalidNumberStart(ch, true);\n                }\n            }\n            if (ch == com.fasterxml.jackson.core.base.ParserBase.INT_0) {\n                break dummy_loop;\n            }\n            int intLen = 1;\n            int_loop : while (true) {\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = ((int) (_inputBuffer[ptr++]));\n                if ((ch < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (ch > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                    break int_loop;\n                }\n                ++intLen;\n            } \n            int fractLen = 0;\n            if (ch == '.') {\n                fract_loop : while (true) {\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = ((int) (_inputBuffer[ptr++]));\n                    if ((ch < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (ch > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                        break fract_loop;\n                    }\n                    ++fractLen;\n                } \n                if (fractLen == 0) {\n                    reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n                }\n            }\n            int expLen = 0;\n            if ((ch == 'e') || (ch == 'E')) {\n                if (ptr >= inputLen) {\n                    break dummy_loop;\n                }\n                ch = ((int) (_inputBuffer[ptr++]));\n                if ((ch == com.fasterxml.jackson.core.base.ParserBase.INT_MINUS) || (ch == com.fasterxml.jackson.core.base.ParserBase.INT_PLUS)) {\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = ((int) (_inputBuffer[ptr++]));\n                }\n                while ((ch <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (ch >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n                    ++expLen;\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = ((int) (_inputBuffer[ptr++]));\n                } \n                if (expLen == 0) {\n                    reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n                }\n            }\n            --ptr;\n            _inputPtr = ptr;\n            if (_parsingContext.inRoot()) {\n                _verifyRootSpace(ch);\n            }\n            int len = ptr - startPtr;\n            _textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n            return reset(negative, intLen, fractLen, expLen);\n        } while (false );\n        _inputPtr = (negative) ? startPtr + 1 : startPtr;\n        return _parseNumber2(negative);\n    }\n\n    private com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean negative) throws java.io.IOException {\n        char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n        int outPtr = 0;\n        if (negative) {\n            outBuf[outPtr++] = '-';\n        }\n        int intLen = 0;\n        char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");\n        if (c == '0') {\n            c = _verifyNoLeadingZeroes();\n        }\n        boolean eof = false;\n        int_loop : while ((c >= '0') && (c <= '9')) {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                c = com.fasterxml.jackson.core.base.ParserBase.CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        } \n        if (intLen == 0) {\n            reportInvalidNumber((\"Missing integer part (next char \" + com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(c)) + \")\");\n        }\n        int fractLen = 0;\n        if (c == '.') {\n            outBuf[outPtr++] = c;\n            fract_loop : while (true) {\n                if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            } \n            if (fractLen == 0) {\n                reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n            }\n        }\n        int expLen = 0;\n        if ((c == 'e') || (c == 'E')) {\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"expected a digit for number exponent\");\n            if ((c == '-') || (c == '+')) {\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"expected a digit for number exponent\");\n            }\n            exp_loop : while ((c <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (c >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            } \n            if (expLen == 0) {\n                reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n            }\n        }\n        if (!eof) {\n            --_inputPtr;\n            if (_parsingContext.inRoot()) {\n                _verifyRootSpace(c);\n            }\n        }\n        _textBuffer.setCurrentLength(outPtr);\n        return reset(negative, intLen, fractLen, expLen);\n    }\n\n    private char _verifyNoLeadingZeroes() throws java.io.IOException {\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            return '0';\n        }\n        char ch = _inputBuffer[_inputPtr];\n        if ((ch < '0') || (ch > '9')) {\n            return '0';\n        }\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS)) {\n            reportInvalidNumber(\"Leading zeroes not allowed\");\n        }\n        ++_inputPtr;\n        if (ch == com.fasterxml.jackson.core.base.ParserBase.INT_0) {\n            while ((_inputPtr < _inputEnd) || loadMore()) {\n                ch = _inputBuffer[_inputPtr];\n                if ((ch < '0') || (ch > '9')) {\n                    return '0';\n                }\n                ++_inputPtr;\n                if (ch != '0') {\n                    break;\n                }\n            } \n        }\n        return ch;\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws java.io.IOException {\n        if (ch == 'I') {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            ch = _inputBuffer[_inputPtr++];\n            if (ch == 'N') {\n                java.lang.String match = (negative) ? \"-INF\" : \"+INF\";\n                _matchToken(match, 3);\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(match, negative ? java.lang.Double.NEGATIVE_INFINITY : java.lang.Double.POSITIVE_INFINITY);\n                }\n                _reportError((\"Non-standard token '\" + match) + \"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            } else if (ch == 'n') {\n                java.lang.String match = (negative) ? \"-Infinity\" : \"+Infinity\";\n                _matchToken(match, 3);\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(match, negative ? java.lang.Double.NEGATIVE_INFINITY : java.lang.Double.POSITIVE_INFINITY);\n                }\n                _reportError((\"Non-standard token '\" + match) + \"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            }\n        }\n        reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\n        return null;\n    }\n\n    private final void _verifyRootSpace(int ch) throws java.io.IOException {\n        ++_inputPtr;\n        switch (ch) {\n            case ' ' :\n            case '\\t' :\n                return;\n            case '\\r' :\n                _skipCR();\n                return;\n            case '\\n' :\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                return;\n        }\n        _reportMissingRootWS(ch);\n    }\n\n    protected java.lang.String _parseName(int i) throws java.io.IOException {\n        if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n            return _handleOddName(i);\n        }\n        int ptr = _inputPtr;\n        int hash = _hashSeed;\n        final int inputLen = _inputEnd;\n        if (ptr < inputLen) {\n            final int[] codes = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;\n            final int maxCode = codes.length;\n            do {\n                int ch = _inputBuffer[ptr];\n                if ((ch < maxCode) && (codes[ch] != 0)) {\n                    if (ch == '\"') {\n                        int start = _inputPtr;\n                        _inputPtr = ptr + 1;\n                        return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                    }\n                    break;\n                }\n                hash = (hash * com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT) + ch;\n                ++ptr;\n            } while (ptr < inputLen );\n        }\n        int start = _inputPtr;\n        _inputPtr = ptr;\n        return _parseName2(start, hash, com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE);\n    }\n\n    private java.lang.String _parseName2(int startPtr, int hash, int endChar) throws java.io.IOException {\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, _inputPtr - startPtr);\n        char[] outBuf = _textBuffer.getCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF((\": was expecting closing '\" + ((char) (endChar))) + \"' for name\");\n                }\n            }\n            char c = _inputBuffer[_inputPtr++];\n            int i = ((int) (c));\n            if (i <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH) {\n                    c = _decodeEscaped();\n                } else if (i <= endChar) {\n                    if (i == endChar) {\n                        break;\n                    }\n                    if (i < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                        _throwUnquotedSpace(i, \"name\");\n                    }\n                }\n            }\n            hash = (hash * com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT) + i;\n            outBuf[outPtr++] = c;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n        } \n        _textBuffer.setCurrentLength(outPtr);\n        {\n            com.fasterxml.jackson.core.util.TextBuffer tb = _textBuffer;\n            char[] buf = tb.getTextBuffer();\n            int start = tb.getTextOffset();\n            int len = tb.size();\n            return _symbols.findSymbol(buf, start, len, hash);\n        }\n    }\n\n    protected java.lang.String _handleOddName(int i) throws java.io.IOException {\n        if ((i == '\\'') && isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {\n            return _parseAposName();\n        }\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n            _reportUnexpectedChar(i, \"was expecting double-quote to start field name\");\n        }\n        final int[] codes = com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1JsNames();\n        final int maxCode = codes.length;\n        boolean firstOk;\n        if (i < maxCode) {\n            firstOk = (codes[i] == 0) && ((i < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (i > com.fasterxml.jackson.core.base.ParserBase.INT_9));\n        } else {\n            firstOk = java.lang.Character.isJavaIdentifierPart(((char) (i)));\n        }\n        if (!firstOk) {\n            _reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");\n        }\n        int ptr = _inputPtr;\n        int hash = _hashSeed;\n        final int inputLen = _inputEnd;\n        if (ptr < inputLen) {\n            do {\n                int ch = _inputBuffer[ptr];\n                if (ch < maxCode) {\n                    if (codes[ch] != 0) {\n                        int start = _inputPtr - 1;\n                        _inputPtr = ptr;\n                        return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                    }\n                } else if (!java.lang.Character.isJavaIdentifierPart(((char) (ch)))) {\n                    int start = _inputPtr - 1;\n                    _inputPtr = ptr;\n                    return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                }\n                hash = (hash * com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT) + ch;\n                ++ptr;\n            } while (ptr < inputLen );\n        }\n        int start = _inputPtr - 1;\n        _inputPtr = ptr;\n        return _handleOddName2(start, hash, codes);\n    }\n\n    protected java.lang.String _parseAposName() throws java.io.IOException {\n        int ptr = _inputPtr;\n        int hash = _hashSeed;\n        final int inputLen = _inputEnd;\n        if (ptr < inputLen) {\n            final int[] codes = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;\n            final int maxCode = codes.length;\n            do {\n                int ch = _inputBuffer[ptr];\n                if (ch == '\\'') {\n                    int start = _inputPtr;\n                    _inputPtr = ptr + 1;\n                    return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);\n                }\n                if ((ch < maxCode) && (codes[ch] != 0)) {\n                    break;\n                }\n                hash = (hash * com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT) + ch;\n                ++ptr;\n            } while (ptr < inputLen );\n        }\n        int start = _inputPtr;\n        _inputPtr = ptr;\n        return _parseName2(start, hash, '\\'');\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _handleOddValue(int i) throws java.io.IOException {\n        switch (i) {\n            case '\\'' :\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES)) {\n                    return _handleApos();\n                }\n                break;\n            case 'N' :\n                _matchToken(\"NaN\", 1);\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(\"NaN\", java.lang.Double.NaN);\n                }\n                _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n                break;\n            case 'I' :\n                _matchToken(\"Infinity\", 1);\n                if (isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                    return resetAsNaN(\"Infinity\", java.lang.Double.POSITIVE_INFINITY);\n                }\n                _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n                break;\n            case '+' :\n                if (_inputPtr >= _inputEnd) {\n                    if (!loadMore()) {\n                        _reportInvalidEOFInValue();\n                    }\n                }\n                return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }\n        if (java.lang.Character.isJavaIdentifierStart(i)) {\n            _reportInvalidToken(\"\" + ((char) (i)), \"('true', 'false' or 'null')\");\n        }\n        _reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");\n        return null;\n    }\n\n    protected com.fasterxml.jackson.core.JsonToken _handleApos() throws java.io.IOException {\n        char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\": was expecting closing quote for a string value\");\n                }\n            }\n            char c = _inputBuffer[_inputPtr++];\n            int i = ((int) (c));\n            if (i <= '\\\\') {\n                if (i == '\\\\') {\n                    c = _decodeEscaped();\n                } else if (i <= '\\'') {\n                    if (i == '\\'') {\n                        break;\n                    }\n                    if (i < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                        _throwUnquotedSpace(i, \"string value\");\n                    }\n                }\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n        } \n        _textBuffer.setCurrentLength(outPtr);\n        return com.fasterxml.jackson.core.JsonToken.VALUE_STRING;\n    }\n\n    private java.lang.String _handleOddName2(int startPtr, int hash, int[] codes) throws java.io.IOException {\n        _textBuffer.resetWithShared(_inputBuffer, startPtr, _inputPtr - startPtr);\n        char[] outBuf = _textBuffer.getCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n        final int maxCode = codes.length;\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    break;\n                }\n            }\n            char c = _inputBuffer[_inputPtr];\n            int i = ((int) (c));\n            if (i <= maxCode) {\n                if (codes[i] != 0) {\n                    break;\n                }\n            } else if (!java.lang.Character.isJavaIdentifierPart(c)) {\n                break;\n            }\n            ++_inputPtr;\n            hash = (hash * com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT) + i;\n            outBuf[outPtr++] = c;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n        } \n        _textBuffer.setCurrentLength(outPtr);\n        {\n            com.fasterxml.jackson.core.util.TextBuffer tb = _textBuffer;\n            char[] buf = tb.getTextBuffer();\n            int start = tb.getTextOffset();\n            int len = tb.size();\n            return _symbols.findSymbol(buf, start, len, hash);\n        }\n    }\n\n    @java.lang.Override\n    protected void _finishString() throws java.io.IOException {\n        int ptr = _inputPtr;\n        final int inputLen = _inputEnd;\n        if (ptr < inputLen) {\n            final int[] codes = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icLatin1;\n            final int maxCode = codes.length;\n            do {\n                int ch = _inputBuffer[ptr];\n                if ((ch < maxCode) && (codes[ch] != 0)) {\n                    if (ch == '\"') {\n                        _textBuffer.resetWithShared(_inputBuffer, _inputPtr, ptr - _inputPtr);\n                        _inputPtr = ptr + 1;\n                        return;\n                    }\n                    break;\n                }\n                ++ptr;\n            } while (ptr < inputLen );\n        }\n        _textBuffer.resetWithCopy(_inputBuffer, _inputPtr, ptr - _inputPtr);\n        _inputPtr = ptr;\n        _finishString2();\n    }\n\n    protected void _finishString2() throws java.io.IOException {\n        char[] outBuf = _textBuffer.getCurrentSegment();\n        int outPtr = _textBuffer.getCurrentSegmentSize();\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\": was expecting closing quote for a string value\");\n                }\n            }\n            char c = _inputBuffer[_inputPtr++];\n            int i = ((int) (c));\n            if (i <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH) {\n                    c = _decodeEscaped();\n                } else if (i <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                        break;\n                    }\n                    if (i < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                        _throwUnquotedSpace(i, \"string value\");\n                    }\n                }\n            }\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n        } \n        _textBuffer.setCurrentLength(outPtr);\n    }\n\n    protected void _skipString() throws java.io.IOException {\n        _tokenIncomplete = false;\n        int inputPtr = _inputPtr;\n        int inputLen = _inputEnd;\n        char[] inputBuffer = _inputBuffer;\n        while (true) {\n            if (inputPtr >= inputLen) {\n                _inputPtr = inputPtr;\n                if (!loadMore()) {\n                    _reportInvalidEOF(\": was expecting closing quote for a string value\");\n                }\n                inputPtr = _inputPtr;\n                inputLen = _inputEnd;\n            }\n            char c = inputBuffer[inputPtr++];\n            int i = ((int) (c));\n            if (i <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH) {\n                    _inputPtr = inputPtr;\n                    c = _decodeEscaped();\n                    inputPtr = _inputPtr;\n                    inputLen = _inputEnd;\n                } else if (i <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                    if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE) {\n                        _inputPtr = inputPtr;\n                        break;\n                    }\n                    if (i < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                        _inputPtr = inputPtr;\n                        _throwUnquotedSpace(i, \"string value\");\n                    }\n                }\n            }\n        } \n    }\n\n    protected void _skipCR() throws java.io.IOException {\n        if ((_inputPtr < _inputEnd) || loadMore()) {\n            if (_inputBuffer[_inputPtr] == '\\n') {\n                ++_inputPtr;\n            }\n        }\n        ++_currInputRow;\n        _currInputRowStart = _inputPtr;\n    }\n\n    private int _skipWS() throws java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icWS;\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = ((int) (_inputBuffer[_inputPtr++]));\n            if (i >= 64) {\n                return i;\n            }\n            switch (codes[i]) {\n                case -1 :\n                    _throwInvalidSpace(i);\n                case 0 :\n                    return i;\n                case 1 :\n                    continue;\n                case '\\n' :\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '\\r' :\n                    _skipCR();\n                    break;\n                case '/' :\n                    _skipComment();\n                    break;\n                case '#' :\n                    if (!_skipYAMLComment()) {\n                        return i;\n                    }\n                    break;\n            }\n        } \n        throw _constructError((\"Unexpected end-of-input within/between \" + _parsingContext.getTypeDesc()) + \" entries\");\n    }\n\n    private int _skipWSOrEnd() throws java.io.IOException {\n        final int[] codes = com.fasterxml.jackson.core.json.ReaderBasedJsonParser._icWS;\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = ((int) (_inputBuffer[_inputPtr++]));\n            if (i >= 64) {\n                return i;\n            }\n            switch (codes[i]) {\n                case -1 :\n                    _throwInvalidSpace(i);\n                case 0 :\n                    return i;\n                case 1 :\n                    continue;\n                case '\\n' :\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case '\\r' :\n                    _skipCR();\n                    break;\n                case '/' :\n                    _skipComment();\n                    break;\n                case '#' :\n                    if (!_skipYAMLComment()) {\n                        return i;\n                    }\n                    break;\n            }\n        } \n        _handleEOF();\n        return -1;\n    }\n\n    private void _skipComment() throws java.io.IOException {\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS)) {\n            _reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");\n        }\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            _reportInvalidEOF(\" in a comment\");\n        }\n        char c = _inputBuffer[_inputPtr++];\n        if (c == '/') {\n            _skipLine();\n        } else if (c == '*') {\n            _skipCComment();\n        } else {\n            _reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");\n        }\n    }\n\n    private void _skipCComment() throws java.io.IOException {\n        main_loop : while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = ((int) (_inputBuffer[_inputPtr++]));\n            if (i <= '*') {\n                if (i == '*') {\n                    if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    continue;\n                }\n                if (i < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                    if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF) {\n                        ++_currInputRow;\n                        _currInputRowStart = _inputPtr;\n                    } else if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR) {\n                        _skipCR();\n                    } else if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_TAB) {\n                        _throwInvalidSpace(i);\n                    }\n                }\n            }\n        } \n        _reportInvalidEOF(\" in a comment\");\n    }\n\n    private boolean _skipYAMLComment() throws java.io.IOException {\n        if (!isEnabled(com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS)) {\n            return false;\n        }\n        _skipLine();\n        return true;\n    }\n\n    private void _skipLine() throws java.io.IOException {\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = ((int) (_inputBuffer[_inputPtr++]));\n            if (i < com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE) {\n                if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF) {\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                } else if (i == com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR) {\n                    _skipCR();\n                    break;\n                } else if (i != com.fasterxml.jackson.core.base.ParserMinimalBase.INT_TAB) {\n                    _throwInvalidSpace(i);\n                }\n            }\n        } \n    }\n\n    @java.lang.Override\n    protected char _decodeEscaped() throws java.io.IOException {\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                _reportInvalidEOF(\" in character escape sequence\");\n            }\n        }\n        char c = _inputBuffer[_inputPtr++];\n        switch (((int) (c))) {\n            case 'b' :\n                return '\\b';\n            case 't' :\n                return '\\t';\n            case 'n' :\n                return '\\n';\n            case 'f' :\n                return '\\f';\n            case 'r' :\n                return '\\r';\n            case '\"' :\n            case '/' :\n            case '\\\\' :\n                return c;\n            case 'u' :\n                break;\n            default :\n                return _handleUnrecognizedCharacterEscape(c);\n        }\n        int value = 0;\n        for (int i = 0; i < 4; ++i) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOF(\" in character escape sequence\");\n                }\n            }\n            int ch = ((int) (_inputBuffer[_inputPtr++]));\n            int digit = com.fasterxml.jackson.core.io.CharTypes.charToHex(ch);\n            if (digit < 0) {\n                _reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");\n            }\n            value = (value << 4) | digit;\n        }\n        return ((char) (value));\n    }\n\n    protected void _matchToken(java.lang.String matchStr, int i) throws java.io.IOException {\n        final int len = matchStr.length();\n        do {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidToken(matchStr.substring(0, i));\n                }\n            }\n            if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {\n                _reportInvalidToken(matchStr.substring(0, i));\n            }\n            ++_inputPtr;\n        } while ((++i) < len );\n        if (_inputPtr >= _inputEnd) {\n            if (!loadMore()) {\n                return;\n            }\n        }\n        char c = _inputBuffer[_inputPtr];\n        if (((c < '0') || (c == ']')) || (c == '}')) {\n            return;\n        }\n        if (java.lang.Character.isJavaIdentifierPart(c)) {\n            _reportInvalidToken(matchStr.substring(0, i));\n        }\n        return;\n    }\n\n    @java.lang.SuppressWarnings(\"resource\")\n    protected byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant b64variant) throws java.io.IOException {\n        com.fasterxml.jackson.core.util.ByteArrayBuilder builder = _getByteArrayBuilder();\n        while (true) {\n            char ch;\n            do {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                ch = _inputBuffer[_inputPtr++];\n            } while (ch <= com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE );\n            int bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (ch == '\"') {\n                    return builder.toByteArray();\n                }\n                bits = _decodeBase64Escape(b64variant, ch, 0);\n                if (bits < 0) {\n                    continue;\n                }\n            }\n            int decodedData = bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                bits = _decodeBase64Escape(b64variant, ch, 1);\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 4;\n                        builder.append(decodedData);\n                        return builder.toByteArray();\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 2);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if (_inputPtr >= _inputEnd) {\n                        loadMoreGuaranteed();\n                    }\n                    ch = _inputBuffer[_inputPtr++];\n                    if (!b64variant.usesPaddingChar(ch)) {\n                        throw reportInvalidBase64Char(b64variant, ch, 3, (\"expected padding character '\" + b64variant.getPaddingChar()) + \"'\");\n                    }\n                    decodedData >>= 4;\n                    builder.append(decodedData);\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            if (_inputPtr >= _inputEnd) {\n                loadMoreGuaranteed();\n            }\n            ch = _inputBuffer[_inputPtr++];\n            bits = b64variant.decodeBase64Char(ch);\n            if (bits < 0) {\n                if (bits != com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    if ((ch == '\"') && (!b64variant.usesPadding())) {\n                        decodedData >>= 2;\n                        builder.appendTwoBytes(decodedData);\n                        return builder.toByteArray();\n                    }\n                    bits = _decodeBase64Escape(b64variant, ch, 3);\n                }\n                if (bits == com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING) {\n                    decodedData >>= 2;\n                    builder.appendTwoBytes(decodedData);\n                    continue;\n                }\n            }\n            decodedData = (decodedData << 6) | bits;\n            builder.appendThreeBytes(decodedData);\n        } \n    }\n\n    protected void _reportInvalidToken(java.lang.String matchedPart) throws java.io.IOException {\n        _reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");\n    }\n\n    protected void _reportInvalidToken(java.lang.String matchedPart, java.lang.String msg) throws java.io.IOException {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder(matchedPart);\n        while (true) {\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    break;\n                }\n            }\n            char c = _inputBuffer[_inputPtr];\n            if (!java.lang.Character.isJavaIdentifierPart(c)) {\n                break;\n            }\n            ++_inputPtr;\n            sb.append(c);\n        } \n        _reportError((\"Unrecognized token '\" + sb.toString()) + \"': was expecting \");\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "true",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "INS",
            "src": "if (!eof) {\n    --_inputPtr;\n}",
            "src_parent": "{\n    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n    int outPtr = 0;\n    if (negative) {\n        outBuf[outPtr++] = '-';\n    }\n    int intLen = 0;\n    char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");\n    if (c == '0') {\n        c = _verifyNoLeadingZeroes();\n    }\n    boolean eof = false;\n    int_loop : while ((c >= '0') && (c <= '9')) {\n        ++intLen;\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = c;\n        if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n            c = com.fasterxml.jackson.core.base.ParserBase.CHAR_NULL;\n            eof = true;\n            break int_loop;\n        }\n        c = _inputBuffer[_inputPtr++];\n    } \n    if (intLen == 0) {\n        reportInvalidNumber((\"Missing integer part (next char \" + com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(c)) + \")\");\n    }\n    int fractLen = 0;\n    if (c == '.') {\n        outBuf[outPtr++] = c;\n        fract_loop : while (true) {\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break fract_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n            if ((c < com.fasterxml.jackson.core.base.ParserBase.INT_0) || (c > com.fasterxml.jackson.core.base.ParserBase.INT_9)) {\n                break fract_loop;\n            }\n            ++fractLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n        } \n        if (fractLen == 0) {\n            reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");\n        }\n    }\n    int expLen = 0;\n    if ((c == 'e') || (c == 'E')) {\n        if (outPtr >= outBuf.length) {\n            outBuf = _textBuffer.finishCurrentSegment();\n            outPtr = 0;\n        }\n        outBuf[outPtr++] = c;\n        c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"expected a digit for number exponent\");\n        if ((c == '-') || (c == '+')) {\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"expected a digit for number exponent\");\n        }\n        exp_loop : while ((c <= com.fasterxml.jackson.core.base.ParserBase.INT_9) && (c >= com.fasterxml.jackson.core.base.ParserBase.INT_0)) {\n            ++expLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if ((_inputPtr >= _inputEnd) && (!loadMore())) {\n                eof = true;\n                break exp_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        } \n        if (expLen == 0) {\n            reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");\n        }\n    }\n    if (!eof) {\n        --_inputPtr;\n    }\n    _textBuffer.setCurrentLength(outPtr);\n    return reset(negative, intLen, fractLen, expLen);\n}",
            "src_parent_type": "Block",
            "src_type": "If"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Return",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "If",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "!eof",
            "dst_parent": "if (!eof) {\n    --_inputPtr;\n}",
            "dst_parent_type": "If",
            "dst_type": "UnaryOperator",
            "operator": "MOV",
            "src": "!eof",
            "src_parent": "if (!eof) {\n    --_inputPtr;\n    if (_parsingContext.inRoot()) {\n        _verifyRootSpace(c);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "UnaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "UnaryOperator",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "true",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "{\n    --_inputPtr;\n}",
            "dst_parent": "if (!eof) {\n    --_inputPtr;\n}",
            "dst_parent_type": "If",
            "dst_type": "Block",
            "operator": "MOV",
            "src": "{\n    _verifyRootSpace(c);\n}",
            "src_parent": "if (_parsingContext.inRoot()) {\n    _verifyRootSpace(c);\n}",
            "src_parent_type": "If",
            "src_type": "Block"
          }
        }
      ],
      "file_name": "ReaderBasedJsonParser"
    }
  ],
  "id": "JacksonCore_2"
}