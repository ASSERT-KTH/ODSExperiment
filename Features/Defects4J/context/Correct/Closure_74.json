{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "left.getType()",
            "dst_parent": "int lhType = left.getType()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getNormalizedNodeType(left)",
            "src_parent": "int lhType = getNormalizedNodeType(left)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Switch",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "LocalVariable",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "right.getType()",
            "dst_parent": "int rhType = right.getType()",
            "dst_parent_type": "LocalVariable",
            "dst_type": "Invocation",
            "operator": "UPD",
            "src": "getNormalizedNodeType(right)",
            "src_parent": "int rhType = getNormalizedNodeType(right)",
            "src_parent_type": "LocalVariable",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Method",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {\n    int type = n.getType();\n    if (type == com.google.javascript.rhino.Token.NOT) {\n        com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);\n        switch (value) {\n            case TRUE :\n                return com.google.javascript.rhino.Token.TRUE;\n            case FALSE :\n                return com.google.javascript.rhino.Token.FALSE;\n        }\n    }\n    return type;\n}",
            "src_parent": "class PeepholeFoldConstants extends com.google.javascript.jscomp.AbstractPeepholeOptimization {\n    static final com.google.javascript.jscomp.DiagnosticType INVALID_GETELEM_INDEX_ERROR = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_INVALID_GETELEM_INDEX_ERROR\", \"Array index not integer: {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_INDEX_OUT_OF_BOUNDS_ERROR\", \"Array index out of bounds: {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType NEGATING_A_NON_NUMBER_ERROR = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_NEGATING_A_NON_NUMBER_ERROR\", \"Can't negate non-numeric value: {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_BITWISE_OPERAND_OUT_OF_RANGE\", \"Operand out of range, bitwise operation will lose information: {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\", \"Shift amount out of bounds: {0}\");\n\n    static final com.google.javascript.jscomp.DiagnosticType FRACTIONAL_BITWISE_OPERAND = com.google.javascript.jscomp.DiagnosticType.error(\"JSC_FRACTIONAL_BITWISE_OPERAND\", \"Fractional bitwise operand: {0}\");\n\n    private static final double MAX_FOLD_NUMBER = java.lang.Math.pow(2, 53);\n\n    private static final java.util.Locale ROOT_LOCALE = new java.util.Locale(\"\");\n\n    @java.lang.Override\n    com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node subtree) {\n        switch (subtree.getType()) {\n            case com.google.javascript.rhino.Token.CALL :\n                return tryFoldKnownMethods(subtree);\n            case com.google.javascript.rhino.Token.NEW :\n                return tryFoldCtorCall(subtree);\n            case com.google.javascript.rhino.Token.TYPEOF :\n                return tryFoldTypeof(subtree);\n            case com.google.javascript.rhino.Token.NOT :\n            case com.google.javascript.rhino.Token.POS :\n            case com.google.javascript.rhino.Token.NEG :\n            case com.google.javascript.rhino.Token.BITNOT :\n                tryReduceOperandsForOp(subtree);\n                return tryFoldUnaryOperator(subtree);\n            case com.google.javascript.rhino.Token.VOID :\n                return tryReduceVoid(subtree);\n            default :\n                tryReduceOperandsForOp(subtree);\n                return tryFoldBinaryOperator(subtree);\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryFoldBinaryOperator(com.google.javascript.rhino.Node subtree) {\n        com.google.javascript.rhino.Node left = subtree.getFirstChild();\n        if (left == null) {\n            return subtree;\n        }\n        com.google.javascript.rhino.Node right = left.getNext();\n        if (right == null) {\n            return subtree;\n        }\n        switch (subtree.getType()) {\n            case com.google.javascript.rhino.Token.GETPROP :\n                return tryFoldGetProp(subtree, left, right);\n            case com.google.javascript.rhino.Token.GETELEM :\n                return tryFoldGetElem(subtree, left, right);\n            case com.google.javascript.rhino.Token.INSTANCEOF :\n                return tryFoldInstanceof(subtree, left, right);\n            case com.google.javascript.rhino.Token.AND :\n            case com.google.javascript.rhino.Token.OR :\n                return tryFoldAndOr(subtree, left, right);\n            case com.google.javascript.rhino.Token.LSH :\n            case com.google.javascript.rhino.Token.RSH :\n            case com.google.javascript.rhino.Token.URSH :\n                return tryFoldShift(subtree, left, right);\n            case com.google.javascript.rhino.Token.ASSIGN :\n                return tryFoldAssign(subtree, left, right);\n            case com.google.javascript.rhino.Token.ADD :\n                return tryFoldAdd(subtree, left, right);\n            case com.google.javascript.rhino.Token.SUB :\n            case com.google.javascript.rhino.Token.DIV :\n            case com.google.javascript.rhino.Token.MOD :\n                return tryFoldArithmeticOp(subtree, left, right);\n            case com.google.javascript.rhino.Token.MUL :\n            case com.google.javascript.rhino.Token.BITAND :\n            case com.google.javascript.rhino.Token.BITOR :\n            case com.google.javascript.rhino.Token.BITXOR :\n                com.google.javascript.rhino.Node result = tryFoldArithmeticOp(subtree, left, right);\n                if (result != subtree) {\n                    return result;\n                }\n                return tryFoldLeftChildOp(subtree, left, right);\n            case com.google.javascript.rhino.Token.LT :\n            case com.google.javascript.rhino.Token.GT :\n            case com.google.javascript.rhino.Token.LE :\n            case com.google.javascript.rhino.Token.GE :\n            case com.google.javascript.rhino.Token.EQ :\n            case com.google.javascript.rhino.Token.NE :\n            case com.google.javascript.rhino.Token.SHEQ :\n            case com.google.javascript.rhino.Token.SHNE :\n                return tryFoldComparison(subtree, left, right);\n            default :\n                return subtree;\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryReduceVoid(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node child = n.getFirstChild();\n        if ((child.getType() != com.google.javascript.rhino.Token.NUMBER) || (child.getDouble() != 0.0)) {\n            if (!mayHaveSideEffects(n)) {\n                n.replaceChild(child, com.google.javascript.rhino.Node.newNumber(0));\n                reportCodeChange();\n            }\n        }\n        return n;\n    }\n\n    private void tryReduceOperandsForOp(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.ADD :\n                com.google.javascript.rhino.Node left = n.getFirstChild();\n                com.google.javascript.rhino.Node right = n.getLastChild();\n                if ((!com.google.javascript.jscomp.NodeUtil.mayBeString(left)) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(right))) {\n                    tryConvertOperandsToNumber(n);\n                }\n                break;\n            case com.google.javascript.rhino.Token.ASSIGN_BITOR :\n            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :\n            case com.google.javascript.rhino.Token.ASSIGN_BITAND :\n            case com.google.javascript.rhino.Token.ASSIGN_LSH :\n            case com.google.javascript.rhino.Token.ASSIGN_RSH :\n            case com.google.javascript.rhino.Token.ASSIGN_URSH :\n            case com.google.javascript.rhino.Token.ASSIGN_SUB :\n            case com.google.javascript.rhino.Token.ASSIGN_MUL :\n            case com.google.javascript.rhino.Token.ASSIGN_MOD :\n            case com.google.javascript.rhino.Token.ASSIGN_DIV :\n                tryConvertToNumber(n.getLastChild());\n                break;\n            case com.google.javascript.rhino.Token.BITNOT :\n            case com.google.javascript.rhino.Token.BITOR :\n            case com.google.javascript.rhino.Token.BITXOR :\n            case com.google.javascript.rhino.Token.BITAND :\n            case com.google.javascript.rhino.Token.LSH :\n            case com.google.javascript.rhino.Token.RSH :\n            case com.google.javascript.rhino.Token.URSH :\n            case com.google.javascript.rhino.Token.SUB :\n            case com.google.javascript.rhino.Token.MUL :\n            case com.google.javascript.rhino.Token.MOD :\n            case com.google.javascript.rhino.Token.DIV :\n            case com.google.javascript.rhino.Token.POS :\n            case com.google.javascript.rhino.Token.NEG :\n                tryConvertOperandsToNumber(n);\n                break;\n        }\n    }\n\n    private void tryConvertOperandsToNumber(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node next;\n        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = next) {\n            next = c.getNext();\n            tryConvertToNumber(c);\n        }\n    }\n\n    private void tryConvertToNumber(com.google.javascript.rhino.Node n) {\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.NUMBER :\n                return;\n            case com.google.javascript.rhino.Token.AND :\n            case com.google.javascript.rhino.Token.OR :\n            case com.google.javascript.rhino.Token.COMMA :\n                tryConvertToNumber(n.getLastChild());\n                return;\n            case com.google.javascript.rhino.Token.HOOK :\n                tryConvertToNumber(n.getChildAtIndex(1));\n                tryConvertToNumber(n.getLastChild());\n                return;\n            case com.google.javascript.rhino.Token.NAME :\n                if (!com.google.javascript.jscomp.NodeUtil.isUndefined(n)) {\n                    return;\n                }\n                break;\n        }\n        java.lang.Double result = com.google.javascript.jscomp.NodeUtil.getNumberValue(n);\n        if (result == null) {\n            return;\n        }\n        double value = result;\n        com.google.javascript.rhino.Node replacement;\n        if (java.lang.Double.isNaN(value)) {\n            replacement = com.google.javascript.rhino.Node.newString(Token.NAME, \"NaN\");\n        } else if (value == java.lang.Double.POSITIVE_INFINITY) {\n            replacement = com.google.javascript.rhino.Node.newString(Token.NAME, \"Infinity\");\n        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {\n            replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NEG, com.google.javascript.rhino.Node.newString(Token.NAME, \"Infinity\"));\n            replacement.copyInformationFromForTree(n);\n        } else {\n            replacement = com.google.javascript.rhino.Node.newNumber(value);\n        }\n        n.getParent().replaceChild(n, replacement);\n        reportCodeChange();\n    }\n\n    private com.google.javascript.rhino.Node tryFoldTypeof(com.google.javascript.rhino.Node originalTypeofNode) {\n        com.google.common.base.Preconditions.checkArgument(originalTypeofNode.getType() == com.google.javascript.rhino.Token.TYPEOF);\n        com.google.javascript.rhino.Node argumentNode = originalTypeofNode.getFirstChild();\n        if ((argumentNode == null) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(argumentNode, true))) {\n            return originalTypeofNode;\n        }\n        java.lang.String typeNameString = null;\n        switch (argumentNode.getType()) {\n            case com.google.javascript.rhino.Token.FUNCTION :\n                typeNameString = \"function\";\n                break;\n            case com.google.javascript.rhino.Token.STRING :\n                typeNameString = \"string\";\n                break;\n            case com.google.javascript.rhino.Token.NUMBER :\n                typeNameString = \"number\";\n                break;\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.FALSE :\n                typeNameString = \"boolean\";\n                break;\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.OBJECTLIT :\n            case com.google.javascript.rhino.Token.ARRAYLIT :\n                typeNameString = \"object\";\n                break;\n            case com.google.javascript.rhino.Token.VOID :\n                typeNameString = \"undefined\";\n                break;\n            case com.google.javascript.rhino.Token.NAME :\n                if (\"undefined\".equals(argumentNode.getString())) {\n                    typeNameString = \"undefined\";\n                }\n                break;\n        }\n        if (typeNameString != null) {\n            com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.Node.newString(typeNameString);\n            originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);\n            reportCodeChange();\n            return newNode;\n        }\n        return originalTypeofNode;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldUnaryOperator(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkState(n.hasOneChild());\n        com.google.javascript.rhino.Node left = n.getFirstChild();\n        com.google.javascript.rhino.Node parent = n.getParent();\n        if (left == null) {\n            return n;\n        }\n        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(left);\n        if (leftVal == com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {\n            return n;\n        }\n        switch (n.getType()) {\n            case com.google.javascript.rhino.Token.NOT :\n                if (left.getType() == com.google.javascript.rhino.Token.NUMBER) {\n                    double numValue = left.getDouble();\n                    if ((numValue == 0) || (numValue == 1)) {\n                        return n;\n                    }\n                }\n                int result = (leftVal.toBoolean(true)) ? com.google.javascript.rhino.Token.FALSE : com.google.javascript.rhino.Token.TRUE;\n                com.google.javascript.rhino.Node replacementNode = new com.google.javascript.rhino.Node(result);\n                parent.replaceChild(n, replacementNode);\n                reportCodeChange();\n                return replacementNode;\n            case com.google.javascript.rhino.Token.POS :\n                if (com.google.javascript.jscomp.NodeUtil.isNumericResult(left)) {\n                    parent.replaceChild(n, left.detachFromParent());\n                    reportCodeChange();\n                    return left;\n                }\n                return n;\n            case com.google.javascript.rhino.Token.NEG :\n                try {\n                    if (left.getType() == com.google.javascript.rhino.Token.NAME) {\n                        if (left.getString().equals(\"Infinity\")) {\n                            return n;\n                        } else if (left.getString().equals(\"NaN\")) {\n                            n.removeChild(left);\n                            parent.replaceChild(n, left);\n                            reportCodeChange();\n                            return left;\n                        }\n                    }\n                    double negNum = -left.getDouble();\n                    com.google.javascript.rhino.Node negNumNode = com.google.javascript.rhino.Node.newNumber(negNum);\n                    parent.replaceChild(n, negNumNode);\n                    reportCodeChange();\n                    return negNumNode;\n                } catch (java.lang.UnsupportedOperationException ex) {\n                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);\n                    return n;\n                }\n            case com.google.javascript.rhino.Token.BITNOT :\n                try {\n                    double val = left.getDouble();\n                    if ((val >= java.lang.Integer.MIN_VALUE) && (val <= java.lang.Integer.MAX_VALUE)) {\n                        int intVal = ((int) (val));\n                        if (intVal == val) {\n                            com.google.javascript.rhino.Node notIntValNode = com.google.javascript.rhino.Node.newNumber(~intVal);\n                            parent.replaceChild(n, notIntValNode);\n                            reportCodeChange();\n                            return notIntValNode;\n                        } else {\n                            error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);\n                            return n;\n                        }\n                    } else {\n                        error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);\n                        return n;\n                    }\n                } catch (java.lang.UnsupportedOperationException ex) {\n                    error(com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR, left);\n                    return n;\n                }\n            default :\n                return n;\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryFoldInstanceof(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.INSTANCEOF);\n        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, true) && (!mayHaveSideEffects(right))) {\n            com.google.javascript.rhino.Node replacementNode = null;\n            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(left)) {\n                replacementNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.FALSE);\n            } else if ((right.getType() == com.google.javascript.rhino.Token.NAME) && \"Object\".equals(right.getString())) {\n                replacementNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.TRUE);\n            }\n            if (replacementNode != null) {\n                n.getParent().replaceChild(n, replacementNode);\n                reportCodeChange();\n                return replacementNode;\n            }\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldAssign(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.ASSIGN);\n        if ((!right.hasChildren()) || (right.getFirstChild().getNext() != right.getLastChild())) {\n            return n;\n        }\n        if (mayHaveSideEffects(left)) {\n            return n;\n        }\n        com.google.javascript.rhino.Node newRight;\n        if (areNodesEqualForInlining(left, right.getFirstChild())) {\n            newRight = right.getLastChild();\n        } else if (com.google.javascript.jscomp.NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) {\n            newRight = right.getFirstChild();\n        } else {\n            return n;\n        }\n        int newType = -1;\n        switch (right.getType()) {\n            case com.google.javascript.rhino.Token.ADD :\n                newType = com.google.javascript.rhino.Token.ASSIGN_ADD;\n                break;\n            case com.google.javascript.rhino.Token.BITAND :\n                newType = com.google.javascript.rhino.Token.ASSIGN_BITAND;\n                break;\n            case com.google.javascript.rhino.Token.BITOR :\n                newType = com.google.javascript.rhino.Token.ASSIGN_BITOR;\n                break;\n            case com.google.javascript.rhino.Token.BITXOR :\n                newType = com.google.javascript.rhino.Token.ASSIGN_BITXOR;\n                break;\n            case com.google.javascript.rhino.Token.DIV :\n                newType = com.google.javascript.rhino.Token.ASSIGN_DIV;\n                break;\n            case com.google.javascript.rhino.Token.LSH :\n                newType = com.google.javascript.rhino.Token.ASSIGN_LSH;\n                break;\n            case com.google.javascript.rhino.Token.MOD :\n                newType = com.google.javascript.rhino.Token.ASSIGN_MOD;\n                break;\n            case com.google.javascript.rhino.Token.MUL :\n                newType = com.google.javascript.rhino.Token.ASSIGN_MUL;\n                break;\n            case com.google.javascript.rhino.Token.RSH :\n                newType = com.google.javascript.rhino.Token.ASSIGN_RSH;\n                break;\n            case com.google.javascript.rhino.Token.SUB :\n                newType = com.google.javascript.rhino.Token.ASSIGN_SUB;\n                break;\n            case com.google.javascript.rhino.Token.URSH :\n                newType = com.google.javascript.rhino.Token.ASSIGN_URSH;\n                break;\n            default :\n                return n;\n        }\n        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(newType, left.detachFromParent(), newRight.detachFromParent());\n        n.getParent().replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldAndOr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.javascript.rhino.Node parent = n.getParent();\n        com.google.javascript.rhino.Node result = null;\n        int type = n.getType();\n        com.google.javascript.rhino.jstype.TernaryValue leftVal = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(left);\n        if (leftVal != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {\n            boolean lval = leftVal.toBoolean(true);\n            if ((lval && (type == com.google.javascript.rhino.Token.OR)) || ((!lval) && (type == com.google.javascript.rhino.Token.AND))) {\n                result = left;\n            } else if (!mayHaveSideEffects(left)) {\n                result = right;\n            }\n        }\n        if (result != null) {\n            n.removeChild(result);\n            parent.replaceChild(n, result);\n            reportCodeChange();\n            return result;\n        } else {\n            return n;\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryFoldChildAddString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false) && (left.getType() == com.google.javascript.rhino.Token.ADD)) {\n            com.google.javascript.rhino.Node ll = left.getFirstChild();\n            com.google.javascript.rhino.Node lr = ll.getNext();\n            if (lr.getType() == com.google.javascript.rhino.Token.STRING) {\n                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(lr);\n                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);\n                if ((leftString != null) && (rightString != null)) {\n                    left.removeChild(ll);\n                    java.lang.String result = leftString + rightString;\n                    n.replaceChild(left, ll);\n                    n.replaceChild(right, com.google.javascript.rhino.Node.newString(result));\n                    reportCodeChange();\n                    return n;\n                }\n            }\n        }\n        if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && (right.getType() == com.google.javascript.rhino.Token.ADD)) {\n            com.google.javascript.rhino.Node rl = right.getFirstChild();\n            com.google.javascript.rhino.Node rr = right.getLastChild();\n            if (rl.getType() == com.google.javascript.rhino.Token.STRING) {\n                java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);\n                java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(rl);\n                if ((leftString != null) && (rightString != null)) {\n                    right.removeChild(rr);\n                    java.lang.String result = leftString + rightString;\n                    n.replaceChild(right, rr);\n                    n.replaceChild(left, com.google.javascript.rhino.Node.newString(result));\n                    reportCodeChange();\n                    return n;\n                }\n            }\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldAddConstantString(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        if ((left.getType() == com.google.javascript.rhino.Token.STRING) || (right.getType() == com.google.javascript.rhino.Token.STRING)) {\n            java.lang.String leftString = com.google.javascript.jscomp.NodeUtil.getStringValue(left);\n            java.lang.String rightString = com.google.javascript.jscomp.NodeUtil.getStringValue(right);\n            if ((leftString != null) && (rightString != null)) {\n                com.google.javascript.rhino.Node newStringNode = com.google.javascript.rhino.Node.newString(leftString + rightString);\n                n.getParent().replaceChild(n, newStringNode);\n                reportCodeChange();\n                return newStringNode;\n            }\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldArithmeticOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.javascript.rhino.Node result = performArithmeticOp(n.getType(), left, right);\n        if (result != null) {\n            result.copyInformationFromForTree(n);\n            n.getParent().replaceChild(n, result);\n            reportCodeChange();\n            return result;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node performArithmeticOp(int opType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        if ((opType == com.google.javascript.rhino.Token.ADD) && (com.google.javascript.jscomp.NodeUtil.mayBeString(left, false) || com.google.javascript.jscomp.NodeUtil.mayBeString(right, false))) {\n            return null;\n        }\n        double result;\n        java.lang.Double lValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);\n        if (lValObj == null) {\n            return null;\n        }\n        java.lang.Double rValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);\n        if (rValObj == null) {\n            return null;\n        }\n        double lval = lValObj;\n        double rval = rValObj;\n        switch (opType) {\n            case com.google.javascript.rhino.Token.BITAND :\n                result = com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime.toInt32(lval) & com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime.toInt32(rval);\n                break;\n            case com.google.javascript.rhino.Token.BITOR :\n                result = com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime.toInt32(lval) | com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime.toInt32(rval);\n                break;\n            case com.google.javascript.rhino.Token.BITXOR :\n                result = com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime.toInt32(lval) ^ com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime.toInt32(rval);\n                break;\n            case com.google.javascript.rhino.Token.ADD :\n                result = lval + rval;\n                break;\n            case com.google.javascript.rhino.Token.SUB :\n                result = lval - rval;\n                break;\n            case com.google.javascript.rhino.Token.MUL :\n                result = lval * rval;\n                break;\n            case com.google.javascript.rhino.Token.MOD :\n                if (rval == 0) {\n                    return null;\n                }\n                result = lval % rval;\n                break;\n            case com.google.javascript.rhino.Token.DIV :\n                if (rval == 0) {\n                    return null;\n                }\n                result = lval / rval;\n                break;\n            default :\n                throw new java.lang.Error(\"Unexpected arithmetic operator\");\n        }\n        if ((java.lang.String.valueOf(result).length() <= ((java.lang.String.valueOf(lval).length() + java.lang.String.valueOf(rval).length()) + 1)) && (java.lang.Math.abs(result) <= com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER)) {\n            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.Node.newNumber(result);\n            return newNumber;\n        } else if (java.lang.Double.isNaN(result)) {\n            return com.google.javascript.rhino.Node.newString(Token.NAME, \"NaN\");\n        } else if (result == java.lang.Double.POSITIVE_INFINITY) {\n            return com.google.javascript.rhino.Node.newString(Token.NAME, \"Infinity\");\n        } else if (result == java.lang.Double.NEGATIVE_INFINITY) {\n            return new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.NEG, com.google.javascript.rhino.Node.newString(Token.NAME, \"Infinity\"));\n        }\n        return null;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldLeftChildOp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        int opType = n.getType();\n        com.google.common.base.Preconditions.checkState((com.google.javascript.jscomp.NodeUtil.isAssociative(opType) && com.google.javascript.jscomp.NodeUtil.isCommutative(opType)) || (n.getType() == com.google.javascript.rhino.Token.ADD));\n        com.google.common.base.Preconditions.checkState((n.getType() != com.google.javascript.rhino.Token.ADD) || (!com.google.javascript.jscomp.NodeUtil.mayBeString(n)));\n        java.lang.Double rightValObj = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);\n        if ((rightValObj != null) && (left.getType() == opType)) {\n            com.google.common.base.Preconditions.checkState(left.getChildCount() == 2);\n            com.google.javascript.rhino.Node ll = left.getFirstChild();\n            com.google.javascript.rhino.Node lr = ll.getNext();\n            com.google.javascript.rhino.Node valueToCombine = ll;\n            com.google.javascript.rhino.Node replacement = performArithmeticOp(opType, valueToCombine, right);\n            if (replacement == null) {\n                valueToCombine = lr;\n                replacement = performArithmeticOp(opType, valueToCombine, right);\n            }\n            if (replacement != null) {\n                left.removeChild(valueToCombine);\n                n.replaceChild(left, left.removeFirstChild());\n                replacement.copyInformationFromForTree(right);\n                n.replaceChild(right, replacement);\n                reportCodeChange();\n            }\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldAdd(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.common.base.Preconditions.checkArgument(node.getType() == com.google.javascript.rhino.Token.ADD);\n        if (com.google.javascript.jscomp.NodeUtil.mayBeString(node, true)) {\n            if (com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false)) {\n                return tryFoldAddConstantString(node, left, right);\n            } else {\n                return tryFoldChildAddString(node, left, right);\n            }\n        } else {\n            com.google.javascript.rhino.Node result = tryFoldArithmeticOp(node, left, right);\n            if (result != node) {\n                return result;\n            }\n            return tryFoldLeftChildOp(node, left, right);\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryFoldShift(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        if ((left.getType() == com.google.javascript.rhino.Token.NUMBER) && (right.getType() == com.google.javascript.rhino.Token.NUMBER)) {\n            double result;\n            double lval = left.getDouble();\n            double rval = right.getDouble();\n            if (!((lval >= java.lang.Integer.MIN_VALUE) && (lval <= java.lang.Integer.MAX_VALUE))) {\n                error(com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE, left);\n                return n;\n            }\n            if (!((rval >= 0) && (rval < 32))) {\n                error(com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n                return n;\n            }\n            int lvalInt = ((int) (lval));\n            if (lvalInt != lval) {\n                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, left);\n                return n;\n            }\n            int rvalInt = ((int) (rval));\n            if (rvalInt != rval) {\n                error(com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND, right);\n                return n;\n            }\n            switch (n.getType()) {\n                case com.google.javascript.rhino.Token.LSH :\n                    result = lvalInt << rvalInt;\n                    break;\n                case com.google.javascript.rhino.Token.RSH :\n                    result = lvalInt >> rvalInt;\n                    break;\n                case com.google.javascript.rhino.Token.URSH :\n                    long lvalLong = lvalInt & 0xffffffffL;\n                    result = lvalLong >>> rvalInt;\n                    break;\n                default :\n                    throw new java.lang.AssertionError(\"Unknown shift operator: \" + com.google.javascript.rhino.Node.tokenToName(n.getType()));\n            }\n            com.google.javascript.rhino.Node newNumber = com.google.javascript.rhino.Node.newNumber(result);\n            n.getParent().replaceChild(n, newNumber);\n            reportCodeChange();\n            return newNumber;\n        }\n        return n;\n    }\n\n    @java.lang.SuppressWarnings(\"fallthrough\")\n    private com.google.javascript.rhino.Node tryFoldComparison(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        if ((!com.google.javascript.jscomp.NodeUtil.isLiteralValue(left, false)) || (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false))) {\n            if ((n.getType() != com.google.javascript.rhino.Token.GT) && (n.getType() != com.google.javascript.rhino.Token.LT)) {\n                return n;\n            }\n        }\n        int op = n.getType();\n        boolean result;\n        boolean rightLiteral = com.google.javascript.jscomp.NodeUtil.isLiteralValue(right, false);\n        boolean undefinedRight = ((com.google.javascript.rhino.Token.NAME == right.getType()) && right.getString().equals(\"undefined\")) || ((com.google.javascript.rhino.Token.VOID == right.getType()) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(right.getFirstChild(), false));\n        int lhType = getNormalizedNodeType(left);\n        int rhType = getNormalizedNodeType(right);\n        switch (lhType) {\n            case com.google.javascript.rhino.Token.VOID :\n                if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n                    return n;\n                } else if (!rightLiteral) {\n                    return n;\n                } else {\n                    result = compareToUndefined(right, op);\n                }\n                break;\n            case com.google.javascript.rhino.Token.NULL :\n            case com.google.javascript.rhino.Token.TRUE :\n            case com.google.javascript.rhino.Token.FALSE :\n                if (undefinedRight) {\n                    result = compareToUndefined(left, op);\n                    break;\n                }\n                if (((rhType != com.google.javascript.rhino.Token.TRUE) && (rhType != com.google.javascript.rhino.Token.FALSE)) && (rhType != com.google.javascript.rhino.Token.NULL)) {\n                    return n;\n                }\n                switch (op) {\n                    case com.google.javascript.rhino.Token.SHEQ :\n                    case com.google.javascript.rhino.Token.EQ :\n                        result = lhType == rhType;\n                        break;\n                    case com.google.javascript.rhino.Token.SHNE :\n                    case com.google.javascript.rhino.Token.NE :\n                        result = lhType != rhType;\n                        break;\n                    case com.google.javascript.rhino.Token.GE :\n                    case com.google.javascript.rhino.Token.LE :\n                    case com.google.javascript.rhino.Token.GT :\n                    case com.google.javascript.rhino.Token.LT :\n                        java.lang.Boolean compareResult = compareAsNumbers(op, left, right);\n                        if (compareResult != null) {\n                            result = compareResult;\n                        } else {\n                            return n;\n                        }\n                        break;\n                    default :\n                        return n;\n                }\n                break;\n            case com.google.javascript.rhino.Token.THIS :\n                if (right.getType() != com.google.javascript.rhino.Token.THIS) {\n                    return n;\n                }\n                switch (op) {\n                    case com.google.javascript.rhino.Token.SHEQ :\n                    case com.google.javascript.rhino.Token.EQ :\n                        result = true;\n                        break;\n                    case com.google.javascript.rhino.Token.SHNE :\n                    case com.google.javascript.rhino.Token.NE :\n                        result = false;\n                        break;\n                    default :\n                        return n;\n                }\n                break;\n            case com.google.javascript.rhino.Token.STRING :\n                if (undefinedRight) {\n                    result = compareToUndefined(left, op);\n                    break;\n                }\n                if (com.google.javascript.rhino.Token.STRING != right.getType()) {\n                    return n;\n                }\n                switch (op) {\n                    case com.google.javascript.rhino.Token.SHEQ :\n                    case com.google.javascript.rhino.Token.EQ :\n                        result = left.getString().equals(right.getString());\n                        break;\n                    case com.google.javascript.rhino.Token.SHNE :\n                    case com.google.javascript.rhino.Token.NE :\n                        result = !left.getString().equals(right.getString());\n                        break;\n                    default :\n                        return n;\n                }\n                break;\n            case com.google.javascript.rhino.Token.NUMBER :\n                if (undefinedRight) {\n                    result = compareToUndefined(left, op);\n                    break;\n                }\n                if (com.google.javascript.rhino.Token.NUMBER != right.getType()) {\n                    return n;\n                }\n                java.lang.Boolean compareResult = compareAsNumbers(op, left, right);\n                if (compareResult != null) {\n                    result = compareResult;\n                } else {\n                    return null;\n                }\n                break;\n            case com.google.javascript.rhino.Token.NAME :\n                if (undefinedRight) {\n                    result = compareToUndefined(left, op);\n                    break;\n                }\n                if (rightLiteral) {\n                    boolean undefinedLeft = left.getString().equals(\"undefined\");\n                    if (undefinedLeft) {\n                        result = compareToUndefined(right, op);\n                        break;\n                    }\n                }\n                if (com.google.javascript.rhino.Token.NAME != right.getType()) {\n                    return n;\n                }\n                java.lang.String ln = left.getString();\n                java.lang.String rn = right.getString();\n                if (!ln.equals(rn)) {\n                    return n;\n                }\n                switch (op) {\n                    case com.google.javascript.rhino.Token.LT :\n                    case com.google.javascript.rhino.Token.GT :\n                        result = false;\n                        break;\n                    default :\n                        return n;\n                }\n                break;\n            default :\n                return n;\n        }\n        com.google.javascript.rhino.Node newNode = new com.google.javascript.rhino.Node(result ? com.google.javascript.rhino.Token.TRUE : com.google.javascript.rhino.Token.FALSE);\n        n.getParent().replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n\n    private int getNormalizedNodeType(com.google.javascript.rhino.Node n) {\n        int type = n.getType();\n        if (type == com.google.javascript.rhino.Token.NOT) {\n            com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);\n            switch (value) {\n                case TRUE :\n                    return com.google.javascript.rhino.Token.TRUE;\n                case FALSE :\n                    return com.google.javascript.rhino.Token.FALSE;\n            }\n        }\n        return type;\n    }\n\n    private java.lang.Boolean compareAsNumbers(int op, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        java.lang.Double leftValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(left);\n        if (leftValue == null) {\n            return null;\n        }\n        java.lang.Double rightValue = com.google.javascript.jscomp.NodeUtil.getNumberValue(right);\n        if (rightValue == null) {\n            return null;\n        }\n        double lv = leftValue;\n        double rv = rightValue;\n        java.lang.Boolean result;\n        switch (op) {\n            case com.google.javascript.rhino.Token.SHEQ :\n            case com.google.javascript.rhino.Token.EQ :\n                com.google.common.base.Preconditions.checkState((left.getType() == com.google.javascript.rhino.Token.NUMBER) && (right.getType() == com.google.javascript.rhino.Token.NUMBER));\n                result = lv == rv;\n                break;\n            case com.google.javascript.rhino.Token.SHNE :\n            case com.google.javascript.rhino.Token.NE :\n                com.google.common.base.Preconditions.checkState((left.getType() == com.google.javascript.rhino.Token.NUMBER) && (right.getType() == com.google.javascript.rhino.Token.NUMBER));\n                result = lv != rv;\n                break;\n            case com.google.javascript.rhino.Token.LE :\n                result = lv <= rv;\n                break;\n            case com.google.javascript.rhino.Token.LT :\n                result = lv < rv;\n                break;\n            case com.google.javascript.rhino.Token.GE :\n                result = lv >= rv;\n                break;\n            case com.google.javascript.rhino.Token.GT :\n                result = lv > rv;\n                break;\n            default :\n                return null;\n        }\n        return result;\n    }\n\n    private boolean compareToUndefined(com.google.javascript.rhino.Node value, int op) {\n        boolean valueUndefined = ((com.google.javascript.rhino.Token.NAME == value.getType()) && value.getString().equals(\"undefined\")) || ((com.google.javascript.rhino.Token.VOID == value.getType()) && com.google.javascript.jscomp.NodeUtil.isLiteralValue(value.getFirstChild(), false));\n        boolean valueNull = com.google.javascript.rhino.Token.NULL == value.getType();\n        boolean equivalent = valueUndefined || valueNull;\n        switch (op) {\n            case com.google.javascript.rhino.Token.EQ :\n                return equivalent;\n            case com.google.javascript.rhino.Token.NE :\n                return !equivalent;\n            case com.google.javascript.rhino.Token.SHEQ :\n                return valueUndefined;\n            case com.google.javascript.rhino.Token.SHNE :\n                return !valueUndefined;\n            case com.google.javascript.rhino.Token.LT :\n            case com.google.javascript.rhino.Token.GT :\n            case com.google.javascript.rhino.Token.LE :\n            case com.google.javascript.rhino.Token.GE :\n                return false;\n            default :\n                throw new java.lang.IllegalStateException(\"unexpected.\");\n        }\n    }\n\n    private com.google.javascript.rhino.Node tryFoldCtorCall(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.NEW);\n        if (inForcedStringContext(n)) {\n            return tryFoldInForcedStringContext(n);\n        }\n        return n;\n    }\n\n    private boolean inForcedStringContext(com.google.javascript.rhino.Node n) {\n        return (n.getParent().getType() == com.google.javascript.rhino.Token.GETELEM) && (n.getParent().getLastChild() == n);\n    }\n\n    private com.google.javascript.rhino.Node tryFoldInForcedStringContext(com.google.javascript.rhino.Node n) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.NEW);\n        com.google.javascript.rhino.Node objectType = n.getFirstChild();\n        if (objectType.getType() != com.google.javascript.rhino.Token.NAME) {\n            return n;\n        }\n        if (objectType.getString().equals(\"String\")) {\n            com.google.javascript.rhino.Node value = objectType.getNext();\n            java.lang.String stringValue = null;\n            if (value == null) {\n                stringValue = \"\";\n            } else {\n                if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {\n                    return n;\n                }\n                stringValue = com.google.javascript.jscomp.NodeUtil.getStringValue(value);\n            }\n            if (stringValue == null) {\n                return n;\n            }\n            com.google.javascript.rhino.Node parent = n.getParent();\n            com.google.javascript.rhino.Node newString = com.google.javascript.rhino.Node.newString(stringValue);\n            parent.replaceChild(n, newString);\n            newString.copyInformationFrom(parent);\n            reportCodeChange();\n            return newString;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldKnownMethods(com.google.javascript.rhino.Node subtree) {\n        subtree = tryFoldArrayJoin(subtree);\n        if (subtree.getType() == com.google.javascript.rhino.Token.CALL) {\n            subtree = tryFoldKnownStringMethods(subtree);\n        }\n        return subtree;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldKnownStringMethods(com.google.javascript.rhino.Node subtree) {\n        com.google.common.base.Preconditions.checkArgument(subtree.getType() == com.google.javascript.rhino.Token.CALL);\n        com.google.javascript.rhino.Node callTarget = subtree.getFirstChild();\n        if (callTarget == null) {\n            return subtree;\n        }\n        if (!com.google.javascript.jscomp.NodeUtil.isGet(callTarget)) {\n            return subtree;\n        }\n        com.google.javascript.rhino.Node stringNode = callTarget.getFirstChild();\n        com.google.javascript.rhino.Node functionName = stringNode.getNext();\n        if ((stringNode.getType() != com.google.javascript.rhino.Token.STRING) || (functionName.getType() != com.google.javascript.rhino.Token.STRING)) {\n            return subtree;\n        }\n        java.lang.String functionNameString = functionName.getString();\n        com.google.javascript.rhino.Node firstArg = callTarget.getNext();\n        if (firstArg == null) {\n            if (functionNameString.equals(\"toLowerCase\")) {\n                subtree = tryFoldStringToLowerCase(subtree, stringNode);\n            } else if (functionNameString.equals(\"toUpperCase\")) {\n                subtree = tryFoldStringToUpperCase(subtree, stringNode);\n            }\n            return subtree;\n        } else if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(firstArg)) {\n            if (functionNameString.equals(\"indexOf\") || functionNameString.equals(\"lastIndexOf\")) {\n                subtree = tryFoldStringIndexOf(subtree, functionNameString, stringNode, firstArg);\n            } else if (functionNameString.equals(\"substr\")) {\n                subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);\n            } else if (functionNameString.equals(\"substring\")) {\n                subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);\n            }\n        }\n        return subtree;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldStringToLowerCase(com.google.javascript.rhino.Node subtree, com.google.javascript.rhino.Node stringNode) {\n        java.lang.String lowered = stringNode.getString().toLowerCase(com.google.javascript.jscomp.PeepholeFoldConstants.ROOT_LOCALE);\n        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.Node.newString(lowered);\n        subtree.getParent().replaceChild(subtree, replacement);\n        reportCodeChange();\n        return replacement;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldStringToUpperCase(com.google.javascript.rhino.Node subtree, com.google.javascript.rhino.Node stringNode) {\n        java.lang.String uppered = stringNode.getString().toUpperCase(com.google.javascript.jscomp.PeepholeFoldConstants.ROOT_LOCALE);\n        com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.Node.newString(uppered);\n        subtree.getParent().replaceChild(subtree, replacement);\n        reportCodeChange();\n        return replacement;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldStringIndexOf(com.google.javascript.rhino.Node n, java.lang.String functionName, com.google.javascript.rhino.Node lstringNode, com.google.javascript.rhino.Node firstArg) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.CALL);\n        com.google.common.base.Preconditions.checkArgument(lstringNode.getType() == com.google.javascript.rhino.Token.STRING);\n        java.lang.String lstring = com.google.javascript.jscomp.NodeUtil.getStringValue(lstringNode);\n        boolean isIndexOf = functionName.equals(\"indexOf\");\n        com.google.javascript.rhino.Node secondArg = firstArg.getNext();\n        java.lang.String searchValue = com.google.javascript.jscomp.NodeUtil.getStringValue(firstArg);\n        if (searchValue == null) {\n            return n;\n        }\n        int fromIndex = (isIndexOf) ? 0 : lstring.length();\n        if (secondArg != null) {\n            if ((secondArg.getNext() != null) || (secondArg.getType() != com.google.javascript.rhino.Token.NUMBER)) {\n                return n;\n            } else {\n                fromIndex = ((int) (secondArg.getDouble()));\n            }\n        }\n        int indexVal = (isIndexOf) ? lstring.indexOf(searchValue, fromIndex) : lstring.lastIndexOf(searchValue, fromIndex);\n        com.google.javascript.rhino.Node newNode = com.google.javascript.rhino.Node.newNumber(indexVal);\n        n.getParent().replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldArrayJoin(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node callTarget = n.getFirstChild();\n        if ((callTarget == null) || (!com.google.javascript.jscomp.NodeUtil.isGetProp(callTarget))) {\n            return n;\n        }\n        com.google.javascript.rhino.Node right = callTarget.getNext();\n        if ((right != null) && (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(right))) {\n            return n;\n        }\n        com.google.javascript.rhino.Node arrayNode = callTarget.getFirstChild();\n        com.google.javascript.rhino.Node functionName = arrayNode.getNext();\n        if ((arrayNode.getType() != com.google.javascript.rhino.Token.ARRAYLIT) || (!functionName.getString().equals(\"join\"))) {\n            return n;\n        }\n        java.lang.String joinString = (right == null) ? \",\" : com.google.javascript.jscomp.NodeUtil.getStringValue(right);\n        java.util.List<com.google.javascript.rhino.Node> arrayFoldedChildren = com.google.common.collect.Lists.newLinkedList();\n        java.lang.StringBuilder sb = null;\n        int foldedSize = 0;\n        com.google.javascript.rhino.Node prev = null;\n        com.google.javascript.rhino.Node elem = arrayNode.getFirstChild();\n        while (elem != null) {\n            if (com.google.javascript.jscomp.NodeUtil.isImmutableValue(elem) || (elem.getType() == com.google.javascript.rhino.Token.EMPTY)) {\n                if (sb == null) {\n                    sb = new java.lang.StringBuilder();\n                } else {\n                    sb.append(joinString);\n                }\n                sb.append(com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(elem));\n            } else {\n                if (sb != null) {\n                    com.google.common.base.Preconditions.checkNotNull(prev);\n                    foldedSize += sb.length() + 2;\n                    arrayFoldedChildren.add(com.google.javascript.rhino.Node.newString(sb.toString()).copyInformationFrom(prev));\n                    sb = null;\n                }\n                foldedSize += com.google.javascript.jscomp.InlineCostEstimator.getCost(elem);\n                arrayFoldedChildren.add(elem);\n            }\n            prev = elem;\n            elem = elem.getNext();\n        } \n        if (sb != null) {\n            com.google.common.base.Preconditions.checkNotNull(prev);\n            foldedSize += sb.length() + 2;\n            arrayFoldedChildren.add(com.google.javascript.rhino.Node.newString(sb.toString()).copyInformationFrom(prev));\n        }\n        foldedSize += arrayFoldedChildren.size() - 1;\n        int originalSize = com.google.javascript.jscomp.InlineCostEstimator.getCost(n);\n        switch (arrayFoldedChildren.size()) {\n            case 0 :\n                com.google.javascript.rhino.Node emptyStringNode = com.google.javascript.rhino.Node.newString(\"\");\n                n.getParent().replaceChild(n, emptyStringNode);\n                reportCodeChange();\n                return emptyStringNode;\n            case 1 :\n                com.google.javascript.rhino.Node foldedStringNode = arrayFoldedChildren.remove(0);\n                if (foldedSize > originalSize) {\n                    return n;\n                }\n                arrayNode.detachChildren();\n                if (foldedStringNode.getType() != com.google.javascript.rhino.Token.STRING) {\n                    com.google.javascript.rhino.Node replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.ADD, com.google.javascript.rhino.Node.newString(\"\").copyInformationFrom(n), foldedStringNode);\n                    foldedStringNode = replacement;\n                }\n                n.getParent().replaceChild(n, foldedStringNode);\n                reportCodeChange();\n                return foldedStringNode;\n            default :\n                if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                    return n;\n                }\n                int kJoinOverhead = \"[].join()\".length();\n                foldedSize += kJoinOverhead;\n                foldedSize += (right != null) ? com.google.javascript.jscomp.InlineCostEstimator.getCost(right) : 0;\n                if (foldedSize > originalSize) {\n                    return n;\n                }\n                arrayNode.detachChildren();\n                for (com.google.javascript.rhino.Node node : arrayFoldedChildren) {\n                    arrayNode.addChildToBack(node);\n                }\n                reportCodeChange();\n                break;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldStringSubstr(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node stringNode, com.google.javascript.rhino.Node arg1) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.CALL);\n        com.google.common.base.Preconditions.checkArgument(stringNode.getType() == com.google.javascript.rhino.Token.STRING);\n        int start;\n        int length;\n        java.lang.String stringAsString = stringNode.getString();\n        if ((arg1 != null) && (arg1.getType() == com.google.javascript.rhino.Token.NUMBER)) {\n            start = ((int) (arg1.getDouble()));\n        } else {\n            return n;\n        }\n        com.google.javascript.rhino.Node arg2 = arg1.getNext();\n        if (arg2 != null) {\n            if (arg2.getType() == com.google.javascript.rhino.Token.NUMBER) {\n                length = ((int) (arg2.getDouble()));\n            } else {\n                return n;\n            }\n            if (arg2.getNext() != null) {\n                return n;\n            }\n        } else {\n            length = stringAsString.length() - start;\n        }\n        if ((((start + length) > stringAsString.length()) || (length < 0)) || (start < 0)) {\n            return n;\n        }\n        java.lang.String result = stringAsString.substring(start, start + length);\n        com.google.javascript.rhino.Node resultNode = com.google.javascript.rhino.Node.newString(result);\n        com.google.javascript.rhino.Node parent = n.getParent();\n        parent.replaceChild(n, resultNode);\n        reportCodeChange();\n        return resultNode;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldStringSubstring(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node stringNode, com.google.javascript.rhino.Node arg1) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.CALL);\n        com.google.common.base.Preconditions.checkArgument(stringNode.getType() == com.google.javascript.rhino.Token.STRING);\n        int start;\n        int end;\n        java.lang.String stringAsString = stringNode.getString();\n        if ((arg1 != null) && (arg1.getType() == com.google.javascript.rhino.Token.NUMBER)) {\n            start = ((int) (arg1.getDouble()));\n        } else {\n            return n;\n        }\n        com.google.javascript.rhino.Node arg2 = arg1.getNext();\n        if (arg2 != null) {\n            if (arg2.getType() == com.google.javascript.rhino.Token.NUMBER) {\n                end = ((int) (arg2.getDouble()));\n            } else {\n                return n;\n            }\n            if (arg2.getNext() != null) {\n                return n;\n            }\n        } else {\n            end = stringAsString.length();\n        }\n        if ((((end > stringAsString.length()) || (start > stringAsString.length())) || (end < 0)) || (start < 0)) {\n            return n;\n        }\n        java.lang.String result = stringAsString.substring(start, end);\n        com.google.javascript.rhino.Node resultNode = com.google.javascript.rhino.Node.newString(result);\n        com.google.javascript.rhino.Node parent = n.getParent();\n        parent.replaceChild(n, resultNode);\n        reportCodeChange();\n        return resultNode;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldGetElem(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.GETELEM);\n        if (left.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {\n            return tryFoldObjectPropAccess(n, left, right);\n        }\n        if (left.getType() == com.google.javascript.rhino.Token.ARRAYLIT) {\n            if (right.getType() != com.google.javascript.rhino.Token.NUMBER) {\n                return n;\n            }\n            double index = right.getDouble();\n            int intIndex = ((int) (index));\n            if (intIndex != index) {\n                error(com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR, right);\n                return n;\n            }\n            if (intIndex < 0) {\n                error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);\n                return n;\n            }\n            com.google.javascript.rhino.Node elem = left.getFirstChild();\n            for (int i = 0; (elem != null) && (i < intIndex); i++) {\n                elem = elem.getNext();\n            }\n            if (elem == null) {\n                error(com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR, right);\n                return n;\n            }\n            if (elem.getType() == com.google.javascript.rhino.Token.EMPTY) {\n                elem = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(elem);\n            } else {\n                left.removeChild(elem);\n            }\n            n.getParent().replaceChild(n, elem);\n            reportCodeChange();\n            return elem;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldGetProp(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.common.base.Preconditions.checkArgument(n.getType() == com.google.javascript.rhino.Token.GETPROP);\n        if (left.getType() == com.google.javascript.rhino.Token.OBJECTLIT) {\n            return tryFoldObjectPropAccess(n, left, right);\n        }\n        if ((right.getType() == com.google.javascript.rhino.Token.STRING) && right.getString().equals(\"length\")) {\n            int knownLength = -1;\n            switch (left.getType()) {\n                case com.google.javascript.rhino.Token.ARRAYLIT :\n                    if (mayHaveSideEffects(left)) {\n                        return n;\n                    }\n                    knownLength = left.getChildCount();\n                    break;\n                case com.google.javascript.rhino.Token.STRING :\n                    knownLength = left.getString().length();\n                    break;\n                default :\n                    return n;\n            }\n            com.google.common.base.Preconditions.checkState(knownLength != (-1));\n            com.google.javascript.rhino.Node lengthNode = com.google.javascript.rhino.Node.newNumber(knownLength);\n            n.getParent().replaceChild(n, lengthNode);\n            reportCodeChange();\n            return lengthNode;\n        }\n        return n;\n    }\n\n    private com.google.javascript.rhino.Node tryFoldObjectPropAccess(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {\n        com.google.common.base.Preconditions.checkArgument(com.google.javascript.jscomp.NodeUtil.isGet(n));\n        if ((left.getType() != com.google.javascript.rhino.Token.OBJECTLIT) || (right.getType() != com.google.javascript.rhino.Token.STRING)) {\n            return n;\n        }\n        com.google.javascript.rhino.Node parent = n.getParent();\n        if (((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (parent.getType() == com.google.javascript.rhino.Token.INC)) || (parent.getType() == com.google.javascript.rhino.Token.DEC)) {\n            return n;\n        }\n        com.google.javascript.rhino.Node key = null;\n        com.google.javascript.rhino.Node value = null;\n        for (com.google.javascript.rhino.Node c = left.getFirstChild(); c != null; c = c.getNext()) {\n            if (c.getString().equals(right.getString())) {\n                switch (c.getType()) {\n                    case com.google.javascript.rhino.Token.SET :\n                        continue;\n                    case com.google.javascript.rhino.Token.GET :\n                    case com.google.javascript.rhino.Token.STRING :\n                        if ((value != null) && mayHaveSideEffects(value)) {\n                            return n;\n                        }\n                        key = c;\n                        value = key.getFirstChild();\n                        break;\n                    default :\n                        throw new java.lang.IllegalStateException();\n                }\n            } else if (mayHaveSideEffects(c.getFirstChild())) {\n                return n;\n            }\n        }\n        if (value == null) {\n            return n;\n        }\n        if ((value.getType() == com.google.javascript.rhino.Token.FUNCTION) && com.google.javascript.jscomp.NodeUtil.referencesThis(value)) {\n            return n;\n        }\n        com.google.javascript.rhino.Node replacement = value.detachFromParent();\n        if (key.getType() == com.google.javascript.rhino.Token.GET) {\n            replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.CALL, replacement);\n        }\n        n.getParent().replaceChild(n, replacement);\n        reportCodeChange();\n        return n;\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Method"
          }
        }
      ],
      "file_name": "PeepholeFoldConstants"
    }
  ],
  "id": "Closure_74"
}