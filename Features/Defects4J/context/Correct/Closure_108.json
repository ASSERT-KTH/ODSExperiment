{
  "files": [
    {
      "features": [
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Class",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "Field",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "private final java.util.Set<com.google.javascript.rhino.Node> injectedDecls = com.google.common.collect.Sets.newHashSet();",
            "src_parent": "private class Traversal implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {\n    private final java.util.List<com.google.javascript.rhino.Node> aliasDefinitionsInOrder = com.google.common.collect.Lists.newArrayList();\n\n    private final java.util.List<com.google.javascript.rhino.Node> scopeCalls = com.google.common.collect.Lists.newArrayList();\n\n    private final java.util.List<com.google.javascript.jscomp.ScopedAliases.AliasUsage> aliasUsages = com.google.common.collect.Lists.newArrayList();\n\n    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> aliases = com.google.common.collect.Maps.newHashMap();\n\n    private final java.util.Set<com.google.javascript.rhino.Node> injectedDecls = com.google.common.collect.Sets.newHashSet();\n\n    private final java.util.Set<java.lang.String> forbiddenLocals = com.google.common.collect.Sets.newHashSet(\"$jscomp\");\n\n    private boolean hasNamespaceShadows = false;\n\n    private boolean hasErrors = false;\n\n    private com.google.javascript.jscomp.CompilerOptions.AliasTransformation transformation = null;\n\n    java.util.Collection<com.google.javascript.rhino.Node> getAliasDefinitionsInOrder() {\n        return aliasDefinitionsInOrder;\n    }\n\n    private java.util.List<com.google.javascript.jscomp.ScopedAliases.AliasUsage> getAliasUsages() {\n        return aliasUsages;\n    }\n\n    java.util.List<com.google.javascript.rhino.Node> getScopeCalls() {\n        return scopeCalls;\n    }\n\n    boolean hasErrors() {\n        return hasErrors;\n    }\n\n    private boolean isCallToScopeMethod(com.google.javascript.rhino.Node n) {\n        return n.isCall() && com.google.javascript.jscomp.ScopedAliases.SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());\n    }\n\n    @java.lang.Override\n    public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {\n        com.google.javascript.rhino.Node n = t.getCurrentNode().getParent();\n        if ((n != null) && isCallToScopeMethod(n)) {\n            transformation = transformationHandler.logAliasTransformation(n.getSourceFileName(), getSourceRegion(n));\n            findAliases(t);\n        }\n    }\n\n    @java.lang.Override\n    public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {\n        if (t.getScopeDepth() > 2) {\n            findNamespaceShadows(t);\n        }\n        if (t.getScopeDepth() == 2) {\n            renameNamespaceShadows(t);\n            injectedDecls.clear();\n            aliases.clear();\n            forbiddenLocals.clear();\n            transformation = null;\n            hasNamespaceShadows = false;\n        }\n    }\n\n    @java.lang.Override\n    public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        if (n.isFunction() && t.inGlobalScope()) {\n            if ((parent == null) || (!isCallToScopeMethod(parent))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation> getSourceRegion(com.google.javascript.rhino.Node n) {\n        com.google.javascript.rhino.Node testNode = n;\n        com.google.javascript.rhino.Node next = null;\n        for (; (next != null) || testNode.isScript();) {\n            next = testNode.getNext();\n            testNode = testNode.getParent();\n        }\n        int endLine = (next == null) ? java.lang.Integer.MAX_VALUE : next.getLineno();\n        int endChar = (next == null) ? java.lang.Integer.MAX_VALUE : next.getCharno();\n        com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation> pos = new com.google.javascript.rhino.SourcePosition<com.google.javascript.jscomp.CompilerOptions.AliasTransformation>() {};\n        pos.setPositionInformation(n.getLineno(), n.getCharno(), endLine, endChar);\n        return pos;\n    }\n\n    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType error, java.lang.String... arguments) {\n        compiler.report(t.makeError(n, error, arguments));\n        hasErrors = true;\n    }\n\n    private void findAliases(com.google.javascript.jscomp.NodeTraversal t) {\n        com.google.javascript.jscomp.Scope scope = t.getScope();\n        for (com.google.javascript.jscomp.Scope.Var v : scope.getVarIterable()) {\n            com.google.javascript.rhino.Node n = v.getNode();\n            com.google.javascript.rhino.Node parent = n.getParent();\n            boolean isVar = parent.isVar();\n            boolean isFunctionDecl = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(parent);\n            if ((isVar && (n.getFirstChild() != null)) && n.getFirstChild().isQualifiedName()) {\n                recordAlias(v);\n            } else if (v.isBleedingFunction()) {\n            } else if (parent.getType() == com.google.javascript.rhino.Token.LP) {\n            } else if (isVar || isFunctionDecl) {\n                boolean isHoisted = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(parent);\n                com.google.javascript.rhino.Node grandparent = parent.getParent();\n                com.google.javascript.rhino.Node value = (v.getInitialValue() != null) ? v.getInitialValue() : null;\n                com.google.javascript.rhino.Node varNode = null;\n                java.lang.String name = n.getString();\n                int nameCount = scopedAliasNames.count(name);\n                scopedAliasNames.add(name);\n                java.lang.String globalName = (\"$jscomp.scope.\" + name) + (nameCount == 0 ? \"\" : \"$\" + nameCount);\n                compiler.ensureLibraryInjected(\"base\");\n                if (isFunctionDecl) {\n                    com.google.javascript.rhino.Node existingName = v.getNameNode();\n                    com.google.javascript.rhino.Node newName = com.google.javascript.rhino.IR.name(\"\").useSourceInfoFrom(existingName);\n                    value.replaceChild(existingName, newName);\n                    varNode = com.google.javascript.rhino.IR.var(existingName).useSourceInfoFrom(existingName);\n                    grandparent.replaceChild(parent, varNode);\n                } else {\n                    if (value != null) {\n                        value.detachFromParent();\n                    }\n                    varNode = parent;\n                }\n                if ((value != null) || (v.getJSDocInfo() != null)) {\n                    com.google.javascript.rhino.Node newDecl = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), globalName, value, v.getJSDocInfo()).useSourceInfoIfMissingFromForTree(n);\n                    com.google.javascript.jscomp.NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(), n, name);\n                    if (isHoisted) {\n                        grandparent.addChildToFront(newDecl);\n                    } else {\n                        grandparent.addChildBefore(newDecl, varNode);\n                    }\n                    injectedDecls.add(newDecl.getFirstChild());\n                }\n                v.getNameNode().addChildToFront(com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), globalName, n, name));\n                recordAlias(v);\n            } else {\n                report(t, n, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        }\n    }\n\n    private void recordAlias(com.google.javascript.jscomp.Scope.Var aliasVar) {\n        java.lang.String name = aliasVar.getName();\n        aliases.put(name, aliasVar);\n        java.lang.String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n        transformation.addAlias(name, qualifiedName);\n        int rootIndex = qualifiedName.indexOf(\".\");\n        if (rootIndex != (-1)) {\n            java.lang.String qNameRoot = qualifiedName.substring(0, rootIndex);\n            if (!aliases.containsKey(qNameRoot)) {\n                forbiddenLocals.add(qNameRoot);\n            }\n        }\n    }\n\n    private void findNamespaceShadows(com.google.javascript.jscomp.NodeTraversal t) {\n        if (hasNamespaceShadows) {\n            return;\n        }\n        com.google.javascript.jscomp.Scope scope = t.getScope();\n        for (com.google.javascript.jscomp.Scope.Var v : scope.getVarIterable()) {\n            if (forbiddenLocals.contains(v.getName())) {\n                hasNamespaceShadows = true;\n                return;\n            }\n        }\n    }\n\n    private void renameNamespaceShadows(com.google.javascript.jscomp.NodeTraversal t) {\n        if (hasNamespaceShadows) {\n            com.google.javascript.jscomp.MakeDeclaredNamesUnique.Renamer renamer = new com.google.javascript.jscomp.MakeDeclaredNamesUnique.WhitelistedRenamer(new com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer(), forbiddenLocals);\n            for (java.lang.String s : forbiddenLocals) {\n                renamer.addDeclaredName(s);\n            }\n            com.google.javascript.jscomp.MakeDeclaredNamesUnique uniquifier = new com.google.javascript.jscomp.MakeDeclaredNamesUnique(renamer);\n            com.google.javascript.jscomp.NodeTraversal.traverse(compiler, t.getScopeRoot(), uniquifier);\n        }\n    }\n\n    private void validateScopeCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        if (preprocessorSymbolTable != null) {\n            preprocessorSymbolTable.addReference(n.getFirstChild());\n        }\n        if (!parent.isExprResult()) {\n            report(t, n, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USED_IMPROPERLY);\n        }\n        if (n.getChildCount() != 2) {\n            report(t, n, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n        } else {\n            com.google.javascript.rhino.Node anonymousFnNode = n.getChildAtIndex(1);\n            if (((!anonymousFnNode.isFunction()) || (com.google.javascript.jscomp.NodeUtil.getFunctionName(anonymousFnNode) != null)) || com.google.javascript.jscomp.NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {\n                report(t, anonymousFnNode, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS);\n            } else {\n                scopeCalls.add(n);\n            }\n        }\n    }\n\n    @java.lang.Override\n    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {\n        if (isCallToScopeMethod(n)) {\n            validateScopeCall(t, n, n.getParent());\n        }\n        if (t.getScopeDepth() < 2) {\n            return;\n        }\n        int type = n.getType();\n        com.google.javascript.jscomp.Scope.Var aliasVar = null;\n        if (type == com.google.javascript.rhino.Token.NAME) {\n            java.lang.String name = n.getString();\n            com.google.javascript.jscomp.Scope.Var lexicalVar = t.getScope().getVar(n.getString());\n            if ((lexicalVar != null) && (lexicalVar == aliases.get(name))) {\n                aliasVar = lexicalVar;\n            }\n        }\n        if (t.getScopeDepth() == 2) {\n            if ((aliasVar != null) && com.google.javascript.jscomp.NodeUtil.isLValue(n)) {\n                if (aliasVar.getNode() == n) {\n                    aliasDefinitionsInOrder.add(n);\n                    return;\n                } else {\n                    report(t, n, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n                }\n            }\n            if (type == com.google.javascript.rhino.Token.RETURN) {\n                report(t, n, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_RETURN);\n            } else if (type == com.google.javascript.rhino.Token.THIS) {\n                report(t, n, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_REFERENCES_THIS);\n            } else if (type == com.google.javascript.rhino.Token.THROW) {\n                report(t, n, com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_THROW);\n            }\n        }\n        if (t.getScopeDepth() >= 2) {\n            if (aliasVar != null) {\n                aliasUsages.add(new com.google.javascript.jscomp.ScopedAliases.AliasedNode(aliasVar, n));\n            }\n            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();\n            if ((info != null) && (!injectedDecls.contains(n))) {\n                for (com.google.javascript.rhino.Node node : info.getTypeNodes()) {\n                    fixTypeNode(node);\n                }\n            }\n        }\n    }\n\n    private void fixTypeNode(com.google.javascript.rhino.Node typeNode) {\n        if (typeNode.isString()) {\n            java.lang.String name = typeNode.getString();\n            int endIndex = name.indexOf('.');\n            if (endIndex == (-1)) {\n                endIndex = name.length();\n            }\n            java.lang.String baseName = name.substring(0, endIndex);\n            com.google.javascript.jscomp.Scope.Var aliasVar = aliases.get(baseName);\n            if (aliasVar != null) {\n                aliasUsages.add(new com.google.javascript.jscomp.ScopedAliases.AliasedTypeNode(aliasVar, typeNode));\n            }\n        }\n        for (com.google.javascript.rhino.Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) {\n            fixTypeNode(child);\n        }\n    }\n}",
            "src_parent_type": "Class",
            "src_type": "Field"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "Method",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "injectedDecls.clear()",
            "src_parent": "{\n    renameNamespaceShadows(t);\n    injectedDecls.clear();\n    aliases.clear();\n    forbiddenLocals.clear();\n    transformation = null;\n    hasNamespaceShadows = false;\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "Invocation",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "LocalVariable",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "true",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "injectedDecls.add(newDecl.getFirstChild())",
            "src_parent": "{\n    com.google.javascript.rhino.Node newDecl = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), globalName, value, v.getJSDocInfo()).useSourceInfoIfMissingFromForTree(n);\n    com.google.javascript.jscomp.NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(), n, name);\n    if (isHoisted) {\n        grandparent.addChildToFront(newDecl);\n    } else {\n        grandparent.addChildBefore(newDecl, varNode);\n    }\n    injectedDecls.add(newDecl.getFirstChild());\n}",
            "src_parent_type": "Block",
            "src_type": "Invocation"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "null",
            "dst_parent": "null",
            "dst_parent_type": "null",
            "dst_type": "null",
            "operator": "DEL",
            "src": "(info != null) && (!injectedDecls.contains(n))",
            "src_parent": "if ((info != null) && (!injectedDecls.contains(n))) {\n    for (com.google.javascript.rhino.Node node : info.getTypeNodes()) {\n        fixTypeNode(node);\n    }\n}",
            "src_parent_type": "If",
            "src_type": "BinaryOperator"
          }
        },
        {
          "FEATURES_METHOD_INVOCATION": {},
          "FEATURES_TYPEACCESS": {},
          "FEATURES_VARS": {},
          "S10_METHOD_CALL_WITH_NULL_GUARD": "false",
          "S11_FAULTY_CLASS_EXCEPTION_TYPE": "false",
          "S12_METHOD_CALL_WITH_TRY_CATCH": "false",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_1": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_2": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_AFTER_3": "",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_1": "LocalVariable",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_2": "If",
          "S13_TYPE_OF_FAULTY_STATEMENT_BEFORE_3": "",
          "S14_TYPE_OF_FAULTY_STATEMENT_PARENT": "If",
          "S15_HAS_OBJECTIVE_METHOD_CALL": "false",
          "S16_HAS_Invocations_Prone_Exception": "false",
          "S18_In_Synchronized_Method": "false",
          "S1_LOCAL_VAR_NOT_ASSIGNED": "false",
          "S1_LOCAL_VAR_NOT_USED": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NORMAL_GUARD": "false",
          "S2_SIMILAR_OBJECT_TYPE_WITH_NULL_GUARD": "false",
          "S3_TYPE_OF_FAULTY_STATEMENT": "If",
          "S4_Field_NOT_ASSIGNED": "false",
          "S4_Field_NOT_USED": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NORMAL_GUARD": "false",
          "S5_SIMILAR_PRIMITIVE_TYPE_WITH_NULL_GUARD": "false",
          "S6_METHOD_THROWS_EXCEPTION": "false",
          "S7_OBJECT_USED_IN_ASSIGNMENT": "false",
          "S8_PRIMITIVE_USED_IN_ASSIGNMENT": "false",
          "S9_METHOD_CALL_WITH_NORMAL_GUARD": "false",
          "ast_info": {
            "dst": "info != null",
            "dst_parent": "if (info != null) {\n    for (com.google.javascript.rhino.Node node : info.getTypeNodes()) {\n        fixTypeNode(node);\n    }\n}",
            "dst_parent_type": "If",
            "dst_type": "BinaryOperator",
            "operator": "MOV",
            "src": "(info != null)",
            "src_parent": "(info != null) && (!injectedDecls.contains(n))",
            "src_parent_type": "BinaryOperator",
            "src_type": "BinaryOperator"
          }
        }
      ],
      "file_name": "ScopedAliases"
    }
  ],
  "id": "Closure_108"
}