/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 25 20:18:48 GMT 2019
 */

package org.apache.accumulo.core.iterators.user;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.function.BiFunction;
import java.util.regex.PatternSyntaxException;
import org.apache.accumulo.core.client.IteratorSetting;
import org.apache.accumulo.core.data.Key;
import org.apache.accumulo.core.data.Value;
import org.apache.accumulo.core.iterators.AggregatingIterator;
import org.apache.accumulo.core.iterators.ColumnFamilyCounter;
import org.apache.accumulo.core.iterators.DevNull;
import org.apache.accumulo.core.iterators.IteratorEnvironment;
import org.apache.accumulo.core.iterators.IteratorUtil;
import org.apache.accumulo.core.iterators.OptionDescriber;
import org.apache.accumulo.core.iterators.OrIterator;
import org.apache.accumulo.core.iterators.SortedKeyValueIterator;
import org.apache.accumulo.core.iterators.user.RegExFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegExFilter_ESTest extends RegExFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      Key key0 = new Key(byteArray0, byteArray0, byteArray0, byteArray0, 42L, true);
      DevNull devNull0 = new DevNull();
      devNull0.getTopValue();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(devNull0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorSetting iteratorSetting0 = new IteratorSetting(1215, "UTF-8", "UTF-8");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      iteratorSetting0.clearOptions();
      regExFilter0.init((SortedKeyValueIterator<Key, Value>) null, map0, iteratorEnvironment0);
      regExFilter0.validateOptions(map0);
      RegExFilter.setRegexs(iteratorSetting0, "valueRegex", "", "TRange(", "rGwRegex", true);
      iteratorSetting0.addOption("encoding", "");
      RegExFilter.setEncoding(iteratorSetting0, "[K| hn~WL<g!");
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      regExFilter0.describeOptions();
      regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      RegExFilter.setEncoding(iteratorSetting0, "Zbh~");
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      String string0 = "UTF-8 not supported!";
      String string1 = "";
      // Undeclared exception!
      try { 
        regExFilter0.init((SortedKeyValueIterator<Key, Value>) null, map0, iteratorEnvironment1);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 7
         // TRange(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Class<AggregatingIterator> class0 = AggregatingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(1218, ", found v", class0);
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      iteratorSetting0.clearOptions();
      regExFilter0.init(regExFilter0, map0, iteratorEnvironment0);
      regExFilter0.validateOptions(map0);
      RegExFilter.setRegexs(iteratorSetting0, "valueRegex", "", "TRange(", "rowRegex", true);
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      regExFilter0.describeOptions();
      regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.deepCopy(iteratorEnvironment1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("rowRegex", "colqRegex");
      treeMap0.put("orFields", "");
      // Undeclared exception!
      try { 
        regExFilter0.validateOptions((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<AggregatingIterator> class0 = AggregatingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(64, class0);
      EnumSet<IteratorUtil.IteratorScope> enumSet0 = iteratorSetting0.getScopes();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      iteratorSetting0.clearOptions();
      iteratorSetting0.setScopes(enumSet0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      hashMap0.compute("colfRegex", biFunction0);
      IteratorSetting iteratorSetting1 = new IteratorSetting(180, "colfRegex", class0, enumSet0, hashMap0);
      iteratorSetting1.setProperties(hashMap0);
      iteratorSetting1.toString();
      RegExFilter.setEncoding(iteratorSetting1, "colfRegex");
      RegExFilter.setEncoding(iteratorSetting0, "name:colfRegex, priority:180, class:org.apache.accumulo.core.iterators.AggregatingIterator, scopes:[scan], properties:{}");
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.majc;
      enumSet0.add(iteratorUtil_IteratorScope0);
      org.apache.accumulo.core.iterators.GrepIterator grepIterator0 = new org.apache.accumulo.core.iterators.GrepIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(grepIterator0, hashMap0, iteratorEnvironment0);
      regExFilter0.validateOptions(hashMap0);
      IteratorSetting iteratorSetting2 = new IteratorSetting(180, class0, enumSet0, hashMap0);
      RegExFilter.setEncoding(iteratorSetting2, "colqRegex");
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.GrepIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.init((SortedKeyValueIterator<Key, Value>) null, (Map<String, String>) null, iteratorEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(47, "token (", "token (");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      iteratorSetting0.setProperties(map0);
      RegExFilter.setEncoding(iteratorSetting0, "");
      RegExFilter regExFilter0 = new RegExFilter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)24;
      Key key0 = new Key(byteArray0, byteArray0, byteArray0, byteArray0, (byte)24, false);
      OrIterator orIterator0 = null;
      try {
        orIterator0 = new OrIterator();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IteratorSetting iteratorSetting0 = null;
      String string0 = null;
      // Undeclared exception!
      try { 
        RegExFilter.setRegexs((IteratorSetting) null, (String) null, (String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      RegExFilter regExFilter1 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(regExFilter1, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      Class<AggregatingIterator> class0 = AggregatingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(1106, "The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", class0);
      RegExFilter.setEncoding(iteratorSetting0, "UTF-8");
      assertTrue(iteratorSetting0.hasProperties());
      
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions1 = regExFilter0.describeOptions();
      assertEquals("regex", optionDescriber_IteratorOptions1.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        RegExFilter.setRegexs((IteratorSetting) null, "", "", "", "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Class<AggregatingIterator> class0 = AggregatingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(193, "orFields", class0);
      RegExFilter.setRegexs(iteratorSetting0, "H8O>g#_", "H8O>g#_", "colfRegex", "colfRegex", true);
      assertTrue(iteratorSetting0.hasProperties());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.GrepIterator grepIterator0 = new org.apache.accumulo.core.iterators.GrepIterator();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(grepIterator0, hashMap0, iteratorEnvironment0);
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      regExFilter0.describeOptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)0;
      Key key0 = new Key(byteArray0, byteArray0, byteArray0, byteArray0, 42L, true);
      DevNull devNull0 = new DevNull();
      devNull0.getTopValue();
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Key key0 = new Key("rowRegex", "colqRegex", "colfRegex", "valueRegex");
      Value value0 = null;
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IteratorSetting iteratorSetting0 = null;
      // Undeclared exception!
      try { 
        RegExFilter.setEncoding((IteratorSetting) null, "org.apache.thrift.transport.AutoExpandingBufferReadTransport");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      Class<AggregatingIterator> class0 = AggregatingIterator.class;
      IteratorSetting iteratorSetting0 = null;
      try {
        iteratorSetting0 = new IteratorSetting(0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // integer should be > 0, was 0
         //
         verifyException("org.apache.accumulo.core.util.ArgumentChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Class<AggregatingIterator> class0 = AggregatingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(3547, "encoding", class0);
      Map<String, String> map0 = iteratorSetting0.getProperties();
      regExFilter0.validateOptions(map0);
      RegExFilter.setEncoding(iteratorSetting0, "colqRegex");
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      boolean boolean0 = regExFilter0.validateOptions(treeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      regExFilter0.describeOptions();
      IteratorEnvironment iteratorEnvironment0 = null;
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy((IteratorEnvironment) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(661, "orFields", "orFields");
      RegExFilter.setRegexs(iteratorSetting0, "orFields", "orFields", "XurG!LV=1[51", "orFields", true);
      assertEquals(661, iteratorSetting0.getPriority());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegExFilter.setRegexs((IteratorSetting) null, "", "bad docid: ", "all.2", "all.2", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegExFilter.setRegexs((IteratorSetting) null, (String) null, (String) null, (String) null, (String) null, false);
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      ColumnFamilyCounter columnFamilyCounter0 = new ColumnFamilyCounter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(columnFamilyCounter0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = regExFilter0.deepCopy(iteratorEnvironment1);
      boolean boolean0 = regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
      assertNotSame(regExFilter0, sortedKeyValueIterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorSetting iteratorSetting0 = new IteratorSetting(272, "rowRegex", "rowRegex");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      regExFilter0.validateOptions(map0);
      ColumnFamilyCounter columnFamilyCounter0 = new ColumnFamilyCounter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(columnFamilyCounter0, map0, iteratorEnvironment0);
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = regExFilter0.deepCopy((IteratorEnvironment) null);
      assertNotSame(regExFilter0, sortedKeyValueIterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(21, "token (", "token (");
      RegExFilter.setEncoding(iteratorSetting0, "");
      RegExFilter regExFilter0 = new RegExFilter();
      RegExFilter.setRegexs(iteratorSetting0, "colfRegex", "rowRegex", "UTF-8", "rowRegex", true);
      assertEquals(21, iteratorSetting0.getPriority());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)0;
      Key key0 = new Key(byteArray0, byteArray0, byteArray0, byteArray0, (byte)0, false);
      DevNull devNull0 = new DevNull();
      devNull0.getTopValue();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(devNull0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      byte[] byteArray0 = new byte[5];
      Key key0 = new Key(byteArray0, byteArray0, byteArray0, byteArray0, (byte)102, true);
      DevNull devNull0 = new DevNull();
      devNull0.getTopValue();
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IteratorSetting iteratorSetting0 = null;
      // Undeclared exception!
      try { 
        RegExFilter.setEncoding((IteratorSetting) null, "h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }
}
