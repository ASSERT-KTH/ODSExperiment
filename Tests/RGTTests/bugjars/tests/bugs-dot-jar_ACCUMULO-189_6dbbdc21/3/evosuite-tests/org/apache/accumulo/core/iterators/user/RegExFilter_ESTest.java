/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 25 20:29:04 GMT 2019
 */

package org.apache.accumulo.core.iterators.user;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.PatternSyntaxException;
import org.apache.accumulo.core.client.IteratorSetting;
import org.apache.accumulo.core.data.Key;
import org.apache.accumulo.core.data.PartialKey;
import org.apache.accumulo.core.data.Value;
import org.apache.accumulo.core.iterators.AggregatingIterator;
import org.apache.accumulo.core.iterators.ColumnFamilyCounter;
import org.apache.accumulo.core.iterators.DebugIterator;
import org.apache.accumulo.core.iterators.Filter;
import org.apache.accumulo.core.iterators.IteratorEnvironment;
import org.apache.accumulo.core.iterators.IteratorUtil;
import org.apache.accumulo.core.iterators.OptionDescriber;
import org.apache.accumulo.core.iterators.SortedKeyValueIterator;
import org.apache.accumulo.core.iterators.aggregation.Aggregator;
import org.apache.accumulo.core.iterators.conf.ColumnToClassMapping;
import org.apache.accumulo.core.iterators.user.RegExFilter;
import org.apache.accumulo.core.iterators.user.VersioningIterator;
import org.apache.accumulo.core.security.ColumnVisibility;
import org.apache.hadoop.io.Text;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegExFilter_ESTest extends RegExFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = new org.apache.accumulo.core.iterators.GrepIterator();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(sortedKeyValueIterator0, treeMap0, iteratorEnvironment1);
      IteratorEnvironment iteratorEnvironment2 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.GrepIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Key key0 = new Key("encoding");
      key0.getColumnVisibility();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      RegExFilter regExFilter1 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(regExFilter1, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Key key0 = null;
      Value value0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("regular expression on row", "colfRegex");
      hashMap0.put("encoding", "UTF-8");
      regExFilter0.validateOptions(hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        regExFilter0.accept((Key) null, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.minc;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EnumSet<IteratorUtil.IteratorScope> enumSet0 = EnumSet.of(iteratorUtil_IteratorScope0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorSetting iteratorSetting0 = new IteratorSetting(1519, "", class0, enumSet0, treeMap0);
      Class<PartialKey> class1 = PartialKey.class;
      EnumSet.allOf(class1);
      RegExFilter.setRegexs(iteratorSetting0, "", "", (String) null, "", true);
      RegExFilter.setEncoding(iteratorSetting0, "");
      IteratorSetting iteratorSetting1 = new IteratorSetting(1519, class0);
      RegExFilter.setRegexs(iteratorSetting1, "", (String) null, "", "", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = wholeRowIterator0.deepCopy(iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(sortedKeyValueIterator0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment1);
      IteratorEnvironment iteratorEnvironment2 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.deepCopy(iteratorEnvironment2);
      Text text0 = new Text("gr@V\"G}Ej'I4<*k");
      Key key0 = new Key(text0, 1048576);
      DebugIterator debugIterator0 = null;
      try {
        debugIterator0 = new DebugIterator();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", "rowRegex");
      hashMap0.put("UTF-8", "f40");
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(regExFilter0, hashMap0, iteratorEnvironment0);
      IteratorSetting iteratorSetting0 = new IteratorSetting(500, "~V[R", "&I`i_0>K<rS(?`h]'d");
      iteratorSetting0.setIteratorClass("colqRegex");
      RegExFilter.setEncoding(iteratorSetting0, "colqRegex");
      regExFilter0.validateOptions(hashMap0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(regExFilter0, hashMap0, iteratorEnvironment1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-124);
      int int0 = (-1);
      int int1 = 149;
      int int2 = (-1);
      int int3 = 0;
      int int4 = 0;
      long long0 = 376L;
      IteratorEnvironment iteratorEnvironment2 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.deepCopy(iteratorEnvironment2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(1191, "", "regular expression on column qualifier");
      RegExFilter.setRegexs(iteratorSetting0, "lV~2Gi,L,[-@$", "2O Ar#pr!=b#", "", "lV~2Gi,L,[-@$", false);
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      wholeRowIterator0.init(regExFilter0, map0, iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.describeOptions();
      IteratorEnvironment iteratorEnvironment2 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.init(wholeRowIterator0, map0, iteratorEnvironment2);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 12
         // lV~2Gi,L,[-@$
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IteratorSetting iteratorSetting0 = new IteratorSetting(2047, "Q4jU", "encoding");
      RegExFilter.setRegexs(iteratorSetting0, "colfRegex", "orFields", (String) null, (String) null, true);
      assertEquals(2047, iteratorSetting0.getPriority());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.minc;
      EnumSet<IteratorUtil.IteratorScope> enumSet0 = EnumSet.of(iteratorUtil_IteratorScope0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorSetting iteratorSetting0 = new IteratorSetting(1475, "", class0, enumSet0, treeMap0);
      RegExFilter.setRegexs(iteratorSetting0, "", "", (String) null, "", true);
      assertEquals(1475, iteratorSetting0.getPriority());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        regExFilter0.validateOptions((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(2508, "encoding", class0);
      iteratorSetting0.addOption("|[G", "");
      iteratorSetting0.removeOption("encoding");
      iteratorSetting0.setName("SNbc+PU+tG;<_SO");
      RegExFilter.setRegexs(iteratorSetting0, (String) null, "org.apache.hadoop.conf.Configuration$IntegerRanges", " offset = ", " offset = ", true);
      RegExFilter.setEncoding(iteratorSetting0, "test");
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = wholeRowIterator0.deepCopy(iteratorEnvironment0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(sortedKeyValueIterator0, treeMap0, iteratorEnvironment1);
      IteratorEnvironment iteratorEnvironment2 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator1 = regExFilter0.deepCopy(iteratorEnvironment2);
      assertNotSame(regExFilter0, sortedKeyValueIterator1);
      
      regExFilter0.validateOptions(treeMap0);
      regExFilter0.validateOptions(treeMap0);
      assertNotSame(regExFilter0, sortedKeyValueIterator1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      
      regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      // Undeclared exception!
      try { 
        regExFilter0.hasTop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no source set
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      Text text0 = new Text("");
      Key key0 = new Key(text0);
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      ColumnVisibility columnVisibility0 = new ColumnVisibility();
      Key key0 = new Key("encoding", "rowRegex", "colfRegex", columnVisibility0, 0L);
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      org.apache.accumulo.core.iterators.VersioningIterator versioningIterator0 = new org.apache.accumulo.core.iterators.VersioningIterator();
      IteratorSetting iteratorSetting0 = new IteratorSetting(1, "", "");
      iteratorSetting0.removeOption("colfRegex");
      VersioningIterator.setMaxVersions(iteratorSetting0, 1);
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(versioningIterator0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      Text text0 = new Text("colqRegex");
      Key key0 = new Key(text0, text0, text0, 1000L);
      AggregatingIterator aggregatingIterator0 = null;
      try {
        aggregatingIterator0 = new AggregatingIterator(versioningIterator0, (ColumnToClassMapping<Aggregator>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("colfRegex", "");
      boolean boolean0 = regExFilter0.validateOptions(treeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("UTF-8", (String) null);
      hashMap0.put(" O?z]H", "rowRegex");
      hashMap0.put("FQPF{xQ(-", (String) null);
      hashMap0.put("", "");
      regExFilter0.validateOptions(hashMap0);
      ColumnFamilyCounter columnFamilyCounter0 = new ColumnFamilyCounter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      columnFamilyCounter0.deepCopy(iteratorEnvironment0);
      Map<String, String> map0 = null;
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.init((SortedKeyValueIterator<Key, Value>) null, (Map<String, String>) null, iteratorEnvironment1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.scan;
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope1 = IteratorUtil.IteratorScope.minc;
      EnumSet<IteratorUtil.IteratorScope> enumSet0 = EnumSet.of(iteratorUtil_IteratorScope0, iteratorUtil_IteratorScope0, iteratorUtil_IteratorScope0, iteratorUtil_IteratorScope0, iteratorUtil_IteratorScope1);
      IteratorSetting iteratorSetting0 = new IteratorSetting(1741, class0, enumSet0, hashMap0);
      Filter.setNegate(iteratorSetting0, false);
      hashMap0.put("rowRegex", "UTF-8");
      boolean boolean0 = regExFilter0.validateOptions(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IteratorSetting iteratorSetting0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        RegExFilter.setRegexs((IteratorSetting) null, "", "Missing parent:", "O'E", "O'E", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      boolean boolean0 = regExFilter0.validateOptions(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init((SortedKeyValueIterator<Key, Value>) null, treeMap0, iteratorEnvironment0);
      // Undeclared exception!
      try { 
        regExFilter0.getTopValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no source set
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = null;
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy((IteratorEnvironment) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(1912, "$", "$");
      iteratorSetting0.clearOptions();
      iteratorSetting0.addOption("$", "`OG?<Y;OR$");
      RegExFilter.setRegexs(iteratorSetting0, "`OG?<Y;OR$", "", "`OG?<Y;OR$", "`OG?<Y;OR$", false);
      assertEquals("$", iteratorSetting0.getIteratorClass());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      org.apache.accumulo.core.iterators.VersioningIterator versioningIterator0 = new org.apache.accumulo.core.iterators.VersioningIterator();
      regExFilter0.init(versioningIterator0, optionDescriber_IteratorOptions0.namedOptions, (IteratorEnvironment) null);
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegExFilter.setEncoding((IteratorSetting) null, "*^qG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.minc;
      EnumSet<IteratorUtil.IteratorScope> enumSet0 = EnumSet.of(iteratorUtil_IteratorScope0, iteratorUtil_IteratorScope0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorSetting iteratorSetting0 = new IteratorSetting(238, "l\"", class0, enumSet0, treeMap0);
      iteratorSetting0.setProperties(treeMap0);
      RegExFilter.setEncoding(iteratorSetting0, "l\"");
      assertTrue(iteratorSetting0.hasProperties());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.scan;
      EnumSet<IteratorUtil.IteratorScope> enumSet0 = EnumSet.of(iteratorUtil_IteratorScope0, iteratorUtil_IteratorScope0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorSetting iteratorSetting0 = new IteratorSetting(236, "l", class0, enumSet0, treeMap0);
      iteratorSetting0.setScopes(enumSet0);
      iteratorSetting0.setProperties(treeMap0);
      RegExFilter.setEncoding(iteratorSetting0, "l");
      assertTrue(iteratorSetting0.hasProperties());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      byte[] byteArray0 = new byte[0];
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = wholeRowIterator0.deepCopy(iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(sortedKeyValueIterator0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment1);
      IteratorEnvironment iteratorEnvironment2 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator1 = regExFilter0.deepCopy(iteratorEnvironment2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
      assertFalse(boolean0);
      assertNotSame(regExFilter0, sortedKeyValueIterator1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(2508, "encoding", class0);
      iteratorSetting0.addOption("|[G", "");
      iteratorSetting0.removeOption("encoding");
      iteratorSetting0.setName("SNbc+PU+tG;<_SO");
      RegExFilter.setRegexs(iteratorSetting0, (String) null, (String) null, "encoding", "encoding", true);
      RegExFilter.setEncoding(iteratorSetting0, "test");
      RegExFilter regExFilter0 = new RegExFilter();
      RegExFilter.setEncoding(iteratorSetting0, "UTF-8");
      assertEquals(2508, iteratorSetting0.getPriority());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<org.apache.accumulo.core.iterators.RowDeletingIterator> class0 = org.apache.accumulo.core.iterators.RowDeletingIterator.class;
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.minc;
      EnumSet<IteratorUtil.IteratorScope> enumSet0 = EnumSet.of(iteratorUtil_IteratorScope0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorSetting iteratorSetting0 = new IteratorSetting(1519, "", class0, enumSet0, treeMap0);
      RegExFilter.setRegexs(iteratorSetting0, "", "", (String) null, "", true);
      RegExFilter.setEncoding(iteratorSetting0, "");
      RegExFilter regExFilter0 = new RegExFilter();
      Key key0 = new Key("", "UTF-8");
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      wholeRowIterator0.getTopValue();
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      regExFilter0.describeOptions();
      Key key0 = new Key("encoding", "colfRegex", "orFields");
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      wholeRowIterator0.getTopValue();
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      IteratorUtil.IteratorScope iteratorUtil_IteratorScope0 = IteratorUtil.IteratorScope.minc;
      EnumSet.of(iteratorUtil_IteratorScope0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
  }
}
