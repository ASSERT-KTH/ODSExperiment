/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 25 20:32:42 GMT 2019
 */

package org.apache.accumulo.core.iterators.user;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.PatternSyntaxException;
import org.apache.accumulo.core.client.IteratorSetting;
import org.apache.accumulo.core.data.Key;
import org.apache.accumulo.core.data.Value;
import org.apache.accumulo.core.iterators.ColumnFamilyCounter;
import org.apache.accumulo.core.iterators.DevNull;
import org.apache.accumulo.core.iterators.IteratorEnvironment;
import org.apache.accumulo.core.iterators.OptionDescriber;
import org.apache.accumulo.core.iterators.OrIterator;
import org.apache.accumulo.core.iterators.SortedKeyValueIterator;
import org.apache.accumulo.core.iterators.user.RegExFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegExFilter_ESTest extends RegExFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(74, "%", "_7-]L@C~{/");
      RegExFilter.setRegexs(iteratorSetting0, "_7-]L@C~{/", "%", "_7-]L@C~{/", "%", true);
      RegExFilter regExFilter0 = new RegExFilter();
      Map<String, String> map0 = iteratorSetting0.getProperties();
      // Undeclared exception!
      try { 
        regExFilter0.validateOptions(map0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 7
         // _7-]L@C~{/
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      // Undeclared exception!
      try { 
        regExFilter0.validateOptions((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegExFilter.setRegexs((IteratorSetting) null, "a,n'9XS4,mZNRL*|]", "a,n'9XS4,mZNRL*|]", "a,n'9XS4,mZNRL*|]", "a,n'9XS4,mZNRL*|]", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegExFilter.setEncoding((IteratorSetting) null, "valueRegex");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<OrIterator> class0 = OrIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(697, class0);
      Map<String, String> map0 = iteratorSetting0.getProperties();
      RegExFilter.setRegexs(iteratorSetting0, "SA\"-,a7J*E", "", "", "-^<)5U'HD.w7f#E{K", false);
      RegExFilter regExFilter0 = new RegExFilter();
      // Undeclared exception!
      try { 
        regExFilter0.init(regExFilter0, map0, (IteratorEnvironment) null);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // -^<)5U'HD.w7f#E{K
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      ColumnFamilyCounter columnFamilyCounter0 = new ColumnFamilyCounter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.init(columnFamilyCounter0, (Map<String, String>) null, iteratorEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(131, ";apNi", "0");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      RegExFilter regExFilter0 = new RegExFilter();
      DevNull devNull0 = new DevNull();
      regExFilter0.init(devNull0, map0, iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.DevNull", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(4198, "encoding", "rowRegex");
      RegExFilter.setRegexs(iteratorSetting0, "UTF-8", (String) null, "orFields", "encoding", false);
      assertEquals(4198, iteratorSetting0.getPriority());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(1132, "orFields", "orFields");
      RegExFilter.setRegexs(iteratorSetting0, (String) null, "orFields", (String) null, (String) null, true);
      assertEquals("orFields", iteratorSetting0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(131, ";apNi", ";apNi");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      RegExFilter regExFilter0 = new RegExFilter();
      RegExFilter.setEncoding(iteratorSetting0, "rowRegex");
      boolean boolean0 = regExFilter0.validateOptions(map0);
      assertEquals(1, map0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(131, ";apNi", ";apNi");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      RegExFilter.setRegexs(iteratorSetting0, "No KEY found for persisted identifier ", "", ".  RPC came from ", "", true);
      RegExFilter regExFilter0 = new RegExFilter();
      regExFilter0.validateOptions(map0);
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(131, ";apNi", "0");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      RegExFilter.setRegexs(iteratorSetting0, "No KEY found for persisted identifier ", "0", ".  RPC came from ", "", false);
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      regExFilter0.init(wholeRowIterator0, map0, iteratorEnvironment0);
      Key key0 = new Key("%[LJ( b!fj j", "UTF-8", "encoding", "encoding", 131);
      boolean boolean0 = regExFilter0.accept(key0, (Value) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(131, ";apNi", ";apNi");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      RegExFilter.setRegexs(iteratorSetting0, "No KEY found for persisted identifier ", "", ".  RPC came from ", "", true);
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      regExFilter0.init(wholeRowIterator0, map0, iteratorEnvironment0);
      assertEquals(5, map0.size());
      
      Key key0 = new Key();
      boolean boolean0 = regExFilter0.accept(key0, (Value) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(131, ";apNi", "0");
      RegExFilter.setEncoding(iteratorSetting0, "0");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      RegExFilter.setRegexs(iteratorSetting0, "No KEY found for persisted identifier ", "", ".  RPC came from ", "", true);
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      regExFilter0.init(wholeRowIterator0, map0, iteratorEnvironment0);
      Key key0 = new Key("0", "UTF-8", "encoding", "encoding", 131);
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      ColumnFamilyCounter columnFamilyCounter0 = new ColumnFamilyCounter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("colqRegex", "colfRegex");
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(columnFamilyCounter0, treeMap0, iteratorEnvironment0);
      byte[] byteArray0 = new byte[20];
      Key key0 = new Key(byteArray0, byteArray0, byteArray0, byteArray0, (byte) (-91));
      boolean boolean0 = regExFilter0.accept(key0, (Value) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      byte[] byteArray0 = new byte[20];
      Key key0 = new Key(byteArray0, byteArray0, byteArray0, byteArray0, (byte) (-91));
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      ColumnFamilyCounter columnFamilyCounter0 = new ColumnFamilyCounter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(columnFamilyCounter0, treeMap0, iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = regExFilter0.deepCopy(iteratorEnvironment1);
      assertNotSame(regExFilter0, sortedKeyValueIterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(131, ";apNi", "0");
      Map<String, String> map0 = iteratorSetting0.getProperties();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      RegExFilter.setRegexs(iteratorSetting0, "No KEY found for persisted identifier ", "", ".  RPC came from ", "", true);
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      regExFilter0.init(wholeRowIterator0, map0, iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = regExFilter0.deepCopy(iteratorEnvironment1);
      assertNotSame(regExFilter0, sortedKeyValueIterator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }
}
