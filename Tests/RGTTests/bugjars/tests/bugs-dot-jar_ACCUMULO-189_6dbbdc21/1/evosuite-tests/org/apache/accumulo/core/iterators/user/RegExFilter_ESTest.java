/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 25 20:22:44 GMT 2019
 */

package org.apache.accumulo.core.iterators.user;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.regex.PatternSyntaxException;
import org.apache.accumulo.core.client.IteratorSetting;
import org.apache.accumulo.core.data.Key;
import org.apache.accumulo.core.data.Value;
import org.apache.accumulo.core.iterators.AggregatingIterator;
import org.apache.accumulo.core.iterators.IteratorEnvironment;
import org.apache.accumulo.core.iterators.OptionDescriber;
import org.apache.accumulo.core.iterators.SortedKeyValueIterator;
import org.apache.accumulo.core.iterators.user.RegExFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegExFilter_ESTest extends RegExFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<AggregatingIterator> class0 = AggregatingIterator.class;
      IteratorSetting iteratorSetting0 = new IteratorSetting(962, "encoding", class0);
      RegExFilter.setRegexs(iteratorSetting0, "encoding", "negative length keys not allowed: ", "negative length keys not allowed: ", (String) null, true);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("encoding", "UTF-8");
      regExFilter0.validateOptions(hashMap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("rowRegex", "0eFXU{");
      // Undeclared exception!
      try { 
        regExFilter0.validateOptions(treeMap0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // 0eFXU{
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      // Undeclared exception!
      try { 
        regExFilter0.validateOptions((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegExFilter.setRegexs((IteratorSetting) null, "", "", "O:,lKw", "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        RegExFilter.setEncoding((IteratorSetting) null, "T{U7XJ$k<H&Vn9Kffo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.init(regExFilter0, (Map<String, String>) null, iteratorEnvironment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      org.apache.accumulo.core.iterators.GrepIterator grepIterator0 = new org.apache.accumulo.core.iterators.GrepIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(grepIterator0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.GrepIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        regExFilter0.deepCopy(iteratorEnvironment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getting null source
         //
         verifyException("org.apache.accumulo.core.iterators.WrappingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IteratorSetting iteratorSetting0 = new IteratorSetting(1364, "Yy'M,&EyU", "Yy'M,&EyU");
      RegExFilter.setEncoding(iteratorSetting0, "");
      assertFalse(iteratorSetting0.hasProperties());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      boolean boolean0 = regExFilter0.validateOptions(optionDescriber_IteratorOptions0.namedOptions);
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      assertFalse(boolean0);
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      RegExFilter regExFilter0 = new RegExFilter();
      boolean boolean0 = regExFilter0.validateOptions(treeMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(regExFilter0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      Key key0 = new Key("colfRegex", "colfRegex");
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Key key0 = new Key(charBuffer0, "encoding", "rowRegex", '\u0000');
      // Undeclared exception!
      try { 
        regExFilter0.accept(key0, (Value) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.accumulo.core.iterators.user.RegExFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      RegExFilter regExFilter0 = new RegExFilter();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = wholeRowIterator0.deepCopy(iteratorEnvironment0);
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(sortedKeyValueIterator0, treeMap0, iteratorEnvironment1);
      IteratorEnvironment iteratorEnvironment2 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator1 = regExFilter0.deepCopy(iteratorEnvironment2);
      assertNotSame(regExFilter0, sortedKeyValueIterator1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegExFilter regExFilter0 = new RegExFilter();
      OptionDescriber.IteratorOptions optionDescriber_IteratorOptions0 = regExFilter0.describeOptions();
      org.apache.accumulo.core.iterators.WholeRowIterator wholeRowIterator0 = new org.apache.accumulo.core.iterators.WholeRowIterator();
      IteratorEnvironment iteratorEnvironment0 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      regExFilter0.init(wholeRowIterator0, optionDescriber_IteratorOptions0.namedOptions, iteratorEnvironment0);
      assertEquals("regex", optionDescriber_IteratorOptions0.getName());
      assertEquals("The RegExFilter/Iterator allows you to filter for key/value pairs based on regular expressions", optionDescriber_IteratorOptions0.getDescription());
      
      IteratorEnvironment iteratorEnvironment1 = mock(IteratorEnvironment.class, new ViolatedAssumptionAnswer());
      SortedKeyValueIterator<Key, Value> sortedKeyValueIterator0 = regExFilter0.deepCopy(iteratorEnvironment1);
      assertNotSame(regExFilter0, sortedKeyValueIterator0);
  }
}
