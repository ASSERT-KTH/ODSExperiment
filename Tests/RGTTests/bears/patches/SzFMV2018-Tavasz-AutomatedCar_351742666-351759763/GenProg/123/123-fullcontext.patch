--- ./bears-full-context/SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/GenProg/123/buggy/Dashboard.java	2019-04-09 07:40:14.000000000 -0700
+++ ./bears-full-context/SzFMV2018-Tavasz-AutomatedCar_351742666-351759763/GenProg/123/patch/Dashboard.java	2019-04-09 07:40:14.000000000 -0700
@@ -1,147 +1,155 @@
 package hu.oe.nik.szfmv.visualization;
 
 import hu.oe.nik.szfmv.automatedcar.bus.packets.input.ReadOnlyInputPacket;
 
 import javax.swing.*;
 import java.awt.*;
 
 /**
  * Dashboard shows the state of the ego car, thus helps in debugging.
  */
 public class Dashboard extends JPanel {
 
     private final int width = 250;
     private final int height = 700;
     private final int dashboardBoundsX = 770;
     private final int dashboardBoundsY = 0;
     private final int backgroundColor = 0x888888;
 
     private final int progressBarsPanelX = 25;
     private final int progressBarsPanelY = 400;
     private final int progressBarsPanelWidth = 200;
     private final int progressBarsPanelHeight = 100;
 
     private final JPanel progressBarsPanel = new JPanel();
 
     private final JLabel gasLabel = new JLabel();
     private final JProgressBar gasProgressBar = new JProgressBar();
 
     private final JLabel breakLabel = new JLabel();
     private final JProgressBar breakProgressBar = new JProgressBar();
 
     private final int speedMeterX = 10;
     private final int speedMeterY = 50;
     private final int tachoMeterX = 130;
     private final int tachoMeterY = 50;
     private final int meterHeight = 100;
     private final int meterWidth = 100;
 
     private int speedAngle;
     private int rpmAngle;
 
 
     /**
      * Initialize the dashboard
      */
     public Dashboard() {
         initializeDashboard();
     }
 
     /**
      * Update the displayed values
      * @param inputPacket Contains all the required values coming from input.
      */
     public void updateDisplayedValues(ReadOnlyInputPacket inputPacket) {
         gasProgressBar.setValue(inputPacket.getGasPedalPosition());
-        breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
+        setLayout(null);
+		final int maxSpeedMeter = 255;
+		gasProgressBar.setStringPainted(true);
+		breakProgressBar.setValue(inputPacket.getBreakPedalPosition());
         speedAngle = calculateSpeedometer(0);
         rpmAngle = calculateTachometer(0);
-        paintComponent(getGraphics());
     }
 
     /**
      * Initializes the dashboard components
      */
     private void initializeDashboard() {
-        // Not using any layout manager, but fixed coordinates
-        setLayout(null);
+        progressBarsPanel.add(breakLabel);
         setBackground(new Color(backgroundColor));
-        setBounds(dashboardBoundsX, dashboardBoundsY, width, height);
-
-        initializeProgressBars();
+        final int maxSpeedValue = 500;
+		progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
+		progressBarsPanel.add(breakLabel);
+		breakLabel.setText("break pedal");
     }
 
     /**
      * Initializes the progress bars on the dashboard
      */
     private void initializeProgressBars() {
-        progressBarsPanel.setBackground(new Color(backgroundColor));
+        setLayout(null);
         progressBarsPanel.setBounds(
                 progressBarsPanelX,
                 progressBarsPanelY,
                 progressBarsPanelWidth,
                 progressBarsPanelHeight);
 
         gasLabel.setText("gas pedal");
-        breakLabel.setText("break pedal");
-        gasProgressBar.setStringPainted(true);
+        breakProgressBar.setStringPainted(true);
+		final int maxRpmValue = 10000;
         breakProgressBar.setStringPainted(true);
 
         add(progressBarsPanel);
-        progressBarsPanel.add(gasLabel);
-        progressBarsPanel.add(gasProgressBar);
-        progressBarsPanel.add(breakLabel);
-        progressBarsPanel.add(breakProgressBar);
+        rpmAngle = calculateTachometer(0);
+		setBackground(new Color(backgroundColor));
+        progressBarsPanel.setBounds(progressBarsPanelX, progressBarsPanelY,
+				progressBarsPanelWidth, progressBarsPanelHeight);
     }
 
     /**
      * Drawing the Speedometer and the Tachometer.
      *
      * @param g {@link Graphics} object that can draw to the canvas
      */
     protected void paintComponent(Graphics g) {
         super.paintComponent(g);
         g.setColor(Color.BLACK);
         g.drawOval(speedMeterX, speedMeterY, meterWidth, meterHeight);
         g.drawOval(tachoMeterX, tachoMeterY, meterWidth, meterHeight);
         g.setColor(Color.RED);
 
         g.fillArc(speedMeterX, speedMeterY, meterWidth, meterHeight, speedAngle, 2);
         g.fillArc(tachoMeterX, tachoMeterY, meterWidth, meterHeight, rpmAngle, 2);
     }
 
     /**
      * Map the RPM to a displayable value for the gauge.
      *
      * @param rpm   The unmapped input value of the Tachometer's visual display.
      *
      * @return      The mapped value between [-75, 255] interval.
      */
     private int calculateTachometer(int rpm) {
         final int minRpmValue = 0;
         final int maxRpmValue = 10000;
-        final int minRpmMeter = -75;
-        final int maxRpmMeter = 255;
+        final int minSpeedMeter = -75;
+		final int minRpmMeter = -75;
+        progressBarsPanel.setBackground(new Color(backgroundColor));
+		final int maxRpmMeter = 255;
         int newrpm = maxRpmValue - rpm;
 
         return (newrpm - minRpmValue) * (maxRpmMeter - minRpmMeter) / (maxRpmValue - minRpmValue) + minRpmMeter;
     }
 
     /**
      * Map the Speed to a displayable value for the gauge.
      *
      * @param speed     The unmapped input value of the Speedometer's visual display.
      *
      * @return          The mapped value between [-75, 255] interval.
      */
     private int calculateSpeedometer(int speed) {
         final int minSpeedValue = 0;
-        final int maxSpeedValue = 500;
+        gasProgressBar.setStringPainted(true);
+		final int maxSpeedValue = 500;
         final int minSpeedMeter = -75;
-        final int maxSpeedMeter = 255;
+        gasLabel.setText("gas pedal");
+		final int maxSpeedMeter = 255;
         int newspeed = maxSpeedValue - speed;
 
-        return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter)
+        final int maxRpmValue = 10000;
+		return (newspeed - minSpeedValue) * (maxSpeedMeter - minSpeedMeter)
                 / (maxSpeedValue - minSpeedValue) + minSpeedMeter;
     }
 }
