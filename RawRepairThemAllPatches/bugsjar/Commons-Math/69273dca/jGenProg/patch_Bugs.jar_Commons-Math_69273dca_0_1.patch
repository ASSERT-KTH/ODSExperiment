
--- org\/apache\/commons\/math3\/ode\/nonstiff\/RungeKuttaIntegrator.java
+++ org\/apache\/commons\/math3\/ode\/nonstiff\/RungeKuttaIntegrator.java
@@ -135,31 +135,31 @@
 			for (int k = 1; k < stages; ++k) {
 
 				for (int j = 0; j < (y0.length); ++j) {
-					double sum = (a[(k - 1)][0]) * (yDotK[0][j]);
-					for (int l = 1; l < k; ++l) {
-						sum += (a[(k - 1)][l]) * (yDotK[l][j]);
-					}
-					yTmp[j] = (y[j]) + ((stepSize) * sum);
-				}
 
-				computeDerivatives(((stepStart) + ((c[(k - 1)]) * (stepSize))), yTmp, yDotK[k]);
 
-			}
 
 
-			for (int j = 0; j < (y0.length); ++j) {
-				double sum = (b[0]) * (yDotK[0][j]);
-				for (int l = 1; l < stages; ++l) {
-					sum += (b[l]) * (yDotK[l][j]);
-				}
-				yTmp[j] = (y[j]) + ((stepSize) * sum);
-			}
 
 
-			interpolator.storeTime(((stepStart) + (stepSize)));
-			java.lang.System.arraycopy(yTmp, 0, y, 0, y0.length);
-			java.lang.System.arraycopy(yDotK[(stages - 1)], 0, yDotTmp, 0, y0.length);
-			stepStart = acceptStep(interpolator, y, yDotTmp, t);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
 
 			if (!(isLastStep)) {
 
@@ -172,7 +172,7 @@
 				if (nextIsLast) {
 					stepSize = t - (stepStart);
 				}
-			}
+					} 					double sum = (a[(k - 1)][0]) * (yDotK[0][j]); 					for (int l = 1; l < k; ++l) { 						sum += (a[(k - 1)][l]) * (yDotK[l][j]);} 					yTmp[j] = (y[j]) + ((stepSize) * sum);} 				computeDerivatives(((stepStart) + ((c[(k - 1)]) * (stepSize))), yTmp, yDotK[k]);} 			for (int j = 0; j < (y0.length); ++j) { 				double sum = (b[0]) * (yDotK[0][j]); 				for (int l = 1; l < stages; ++l) { 					sum += (b[l]) * (yDotK[l][j]);} 				yTmp[j] = (y[j]) + ((stepSize) * sum);} 			interpolator.storeTime(((stepStart) + (stepSize))); 			java.lang.System.arraycopy(yTmp, 0, y, 0, y0.length); 			java.lang.System.arraycopy(yDotK[(stages - 1)], 0, yDotTmp, 0, y0.length); 			stepStart = acceptStep(interpolator, y, yDotTmp, t); 			if (!(isLastStep)) { 				interpolator.storeTime(stepStart); 				final double nextT = (stepStart) + (stepSize); 				final boolean nextIsLast = (forward) ? nextT >= t : nextT <= t; 				if (nextIsLast) { 					stepSize = t - (stepStart);}}
 
 		} while (!(isLastStep) );
 

